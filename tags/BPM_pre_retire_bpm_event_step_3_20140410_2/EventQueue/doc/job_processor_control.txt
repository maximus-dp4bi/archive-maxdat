BPM Job Processor Control

Control job monitors and creates or stops  BPM queue processor jobs.  
Runs in a continuous loop adjust which jobs are created or stopped (dropped).

Main start and stop procedures:

  Start job control: (creates control job, creates initial processor jobs and starts job adjust loop)
    execute PROCESS_BPM_QUEUE_JOB_CONTROL.CREATE_CONTROL_JOB;

  (running)

  Stop all processor jobs: (stops all processor jobs)
    execute PROCESS_BPM_QUEUE_JOB_CONTROL.STOP_ALL_JOBS;

  Stop job control: (stop control job, does not stop processor jobs)
   execute PROCESS_BPM_QUEUE_JOB_CONTROL.STOP_CONTROL_JOB;

Other procedures:

  Force adjust: (run adjust job procesure now)
   execute PROCESS_BPM_QUEUE_JOB_CONTROL.ADJUST_ALL_JOBS;

  See PROCESS_BPM_QUEUE_JOB_CONTROL_pkg.sql for other procedures.
  
Configure job controller in these database tables:

  Change parameters in table PROCESS_BPM_QUEUE_JOB_CTRL_CFG
  
    MAX_TOTAL_NUM_JOBS - max number of BPM processor jobs allowed to run (does not include controller)  It does not attempt to stop jobs when it already exceeds.
    NUM_JOBS_TO_DEL_DURING_ADJUST - max number of jobs to stop at an adjust time when more should be stopped because they are sleeping
    NUM_JOBS_TO_ADD_DURING_ADJUST - max number of jobs to add at an adjust time when more should be added because of workload
    NUM_GROUP_CYCLES_BEFORE_ADD - number of expected future batch loops are expected for current jobs before adding more jobs
    CONTROL_JOB_SLEEP_SECONDS - time to wait between each ADJUST_ALL_JOB loop in the controller
    LOCK_TIMEOUT_SECONDS - timeout to wait when trying to reserve work (config via db not yet implemented, hardcoded)
    PROCESS_SLEEP_SECONDS - time to sleep when processor has not work or is unable to reserve work  (config via db not yet implemented, hardcoded)
    PROCESS_BATCH_SECONDS - time between each processor batch loop  (config via db not yet implemented, hardcoded)
    START_DELAY_SECONDS - spread start time for each processor being started so they don't bunch up initially
    STOP_DELAY_SECONDS - wait so that each processor being stopped has time to get to a safe sleep mode before stopping
    PROCESSING_ENABLED - Y or N, whether any processor job should run (read during each ADJUST_NUM_OF_JOBS BSL_ID,BDM_ID) loop)

  Change a parameters in table PROCESS_BPM_QUEUE_JOB_CONFIG
  
    (for each BSL_ID,BDM_ID pair, 0 in BSL_ID and/or BDM_ID means default)
  
    MIN_NUM_JOBS - min number of job processors of this type that should be running in parallel
    INIT_NUM_JOBS - initial startup number of job processors of this type to run in parallel
    MAX_NUM_JOBS - max number of job processors of this type that can run in parallel
    BATCH_SIZE - number of distinct identifiers to reserve and work on for each batch (only set initially when job created, it does not attempt to adjust batch size for currently running jobs)
    ENABLED - Y or N, whether processor job of this type should run (read during each ADJUST_NUM_OF_JOBS BSL_ID,BDM_ID) loop)
   
    Configuration precedence: (highest to lowest)
  
      PROCESS_BPM_QUEUE_JOB_CONFIG(BSL_ID,BDM_ID)
      PROCESS_BPM_QUEUE_JOB_CONFIG(BSL_ID,v_default_bsl_id hardcoded below)
      PROCESS_BPM_QUEUE_JOB_CONFIG(v_default_bdm_id hardcoded below,BDM_ID)
      PROCESS_BPM_QUEUE_JOB_CONFIG(v_default_bsl_id hardcoded below,v_default_bdm_id hardcoded below)

