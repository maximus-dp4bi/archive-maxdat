CREATE OR REPLACE Procedure TS_SYSTEM_AVAILABILITY_INSERT
    (
    IN_SYSTEM_TYPE      IN VARCHAR2,
IN_SYSTEM_NAME   IN VARCHAR2,
IN_REPORTING_MONTH       IN DATE,
IN_REQD_AVAIL_MINS       IN NUMBER,
IN_SCHD_DOWN_MINS        IN NUMBER,
IN_SYSTEM_UPTIME_MINS    IN NUMBER,
IN_SYSTEM_AVAIL_MINS     IN NUMBER,
IN_ALWD_UNSCHD_DOWN_PERWK_MINS   IN NUMBER,
IN_UNSCHD_DOWN_MINS      IN NUMBER,
IN_REQUIREMENT_MET  IN VARCHAR2,
IN_STAFF_ID      IN VARCHAR2
)

AS

BEGIN
 If   IN_REPORTING_MONTH is null  or IN_STAFF_ID is null or trunc(IN_REPORTING_MONTH) > trunc(sysdate) then
        /*do nothing*/
         null;
   else
      
      insert into TS_SYSTEM_AVAILABILITY
(
SYSTEM_AVAIL_ID,
SYSTEM_TYPE,
SYSTEM_NAME,
REPORTING_MONTH,
REQD_AVAIL_MINS,
SCHD_DOWN_MINS,
SYSTEM_UPTIME_MINS,
SYSTEM_AVAIL_MINS,
ALWD_UNSCHD_DOWN_PERWK_MINS,
UNSCHD_DOWN_MINS,
REQUIREMENT_MET,
CREATE_BY,
CREATE_DATE,
LAST_UPDATE_BY,
LAST_UPDATE_DATE
)
      values
(
SEQ_SYSTEM_AVAIL_ID.Nextval,
IN_SYSTEM_TYPE ,
IN_SYSTEM_NAME,
TRUNC(IN_REPORTING_MONTH, 'month'),
IN_REQD_AVAIL_MINS,
IN_SCHD_DOWN_MINS,
IN_SYSTEM_UPTIME_MINS,
IN_SYSTEM_AVAIL_MINS,
IN_ALWD_UNSCHD_DOWN_PERWK_MINS,
IN_UNSCHD_DOWN_MINS,
IN_REQUIREMENT_MET,
IN_STAFF_ID,
SYSDATE,
IN_STAFF_ID,
SYSDATE
);

       commit;
     end if;
   NULL;
END;
/

CREATE OR REPLACE Procedure TS_SYSTEM_AVAILABILITY_UPDATE
(
IN_SYSTEM_AVAIL_ID IN NUMBER,
IN_SYSTEM_TYPE IN VARCHAR2,
IN_SYSTEM_NAME IN VARCHAR2,
IN_REPORTING_MONTH  IN DATE,
IN_REQD_AVAIL_MINS IN NUMBER,
IN_SCHD_DOWN_MINS IN NUMBER,
IN_SYSTEM_UPTIME_MINS IN NUMBER,
IN_SYSTEM_AVAIL_MINS IN NUMBER,
IN_ALWD_UNSCHD_DOWN_PERWK_MINS IN NUMBER,
IN_UNSCHD_DOWN_MINS IN NUMBER,
IN_REQUIREMENT_MET IN VARCHAR2,
IN_SYSTEM_AVAIL_DELETE_FLAG IN NUMBER,
IN_STAFF_ID IN VARCHAR2
)

AS
   
BEGIN
if IN_SYSTEM_AVAIL_DELETE_FLAG = 1 then
     delete from TS_SYSTEM_AVAILABILITY where SYSTEM_AVAIL_ID = IN_SYSTEM_AVAIL_ID;
     commit;
elsif  
length(IN_REQD_AVAIL_MINS) is NULL AND 
length(IN_SCHD_DOWN_MINS) is NULL AND 
length(IN_SYSTEM_UPTIME_MINS) is NULL AND 
length(IN_SYSTEM_AVAIL_MINS) is NULL AND 
length(IN_ALWD_UNSCHD_DOWN_PERWK_MINS) is NULL AND 
length(IN_UNSCHD_DOWN_MINS) is NULL then
     /*do nothing*/
      null;
   else
              
update TS_SYSTEM_AVAILABILITY
       set REQD_AVAIL_MINS = case when (length(IN_REQD_AVAIL_MINS)> 0) then IN_REQD_AVAIL_MINS else  REQD_AVAIL_MINS end, 
       SCHD_DOWN_MINS = case when (length(IN_SCHD_DOWN_MINS)  > 0) then IN_SCHD_DOWN_MINS else  SCHD_DOWN_MINS end, 
       SYSTEM_UPTIME_MINS = case when (length(IN_SYSTEM_UPTIME_MINS)  > 0) then IN_SYSTEM_UPTIME_MINS else  SYSTEM_UPTIME_MINS end, 
       SYSTEM_AVAIL_MINS = case when (length(IN_SYSTEM_AVAIL_MINS)  > 0) then IN_SYSTEM_AVAIL_MINS else  SYSTEM_AVAIL_MINS end, 
       ALWD_UNSCHD_DOWN_PERWK_MINS = case when (length(IN_ALWD_UNSCHD_DOWN_PERWK_MINS) > 0) then IN_ALWD_UNSCHD_DOWN_PERWK_MINS else  ALWD_UNSCHD_DOWN_PERWK_MINS end, 
       UNSCHD_DOWN_MINS = case when (length(IN_UNSCHD_DOWN_MINS) > 0) then IN_UNSCHD_DOWN_MINS else  UNSCHD_DOWN_MINS end,        
       LAST_UPDATE_BY = IN_STAFF_ID,
       LAST_UPDATE_DATE = sysdate
        where SYSTEM_AVAIL_ID = IN_SYSTEM_AVAIL_ID;

       commit;

   end if;
   NULL;

END;
/

    
CREATE OR REPLACE Procedure TS_GENERAL_COMMENTS_INSERT
    (
    IN_REPORT_DATE       IN DATE,
    IN_SYSTEM_TYPE      IN VARCHAR2,
    IN_GEN_COMMENTS	      IN VARCHAR2,
    IN_AVAIL_REQ_COMMENTS     IN VARCHAR2,
    IN_AVAIL_TIME_COMMENTS    IN VARCHAR2,
    IN_SCHED_DOWNTIME_COMMENTS    IN VARCHAR2,
    IN_UNSCHED_DOWNTIME_COMMENTS    IN VARCHAR2,
    IN_TOT_DOWNTIME_DUR  IN INTEGER,
    IN_DOWNTIME_ROOT_CAUSE IN VARCHAR2,
    IN_RESOLUTION_MIT_STRTGY IN VARCHAR2,
    IN_STAFF_ID      IN VARCHAR2
   )
    
AS

BEGIN
 If  IN_REPORT_DATE is null  or IN_STAFF_ID is null or trunc(IN_REPORT_DATE) > trunc(sysdate) then
     /*do nothing*/
      null;
   else
      
      insert into TS_GENERAL_COMMENTS
(
   GENERAL_COMMENTS_ID,
   REPORT_DATE,
   SYSTEM_TYPE,
   GEN_COMMENTS,
   AVAIL_REQ_COMMENTS,
   AVAIL_TIME_COMMENTS,
   SCHED_DOWNTIME_COMMENTS,
   UNSCHED_DOWNTIME_COMMENTS,
   TOT_DOWNTIME_DUR,
   DOWNTIME_ROOT_CAUSE,
   RESOLUTION_MIT_STRTGY,
   CREATE_BY,
   CREATE_DATE,
   LAST_UPDATE_BY,
   LAST_UPDATE_DATE
)
      values
(
   SEQ_GENERAL_COMMENTS_ID.Nextval,
   IN_REPORT_DATE,
   IN_SYSTEM_TYPE,
   IN_GEN_COMMENTS,
   IN_AVAIL_REQ_COMMENTS,
   IN_AVAIL_TIME_COMMENTS,
   IN_SCHED_DOWNTIME_COMMENTS,
   IN_UNSCHED_DOWNTIME_COMMENTS,
   IN_TOT_DOWNTIME_DUR,
   IN_DOWNTIME_ROOT_CAUSE,
   IN_RESOLUTION_MIT_STRTGY,
   IN_STAFF_ID,
   SYSDATE,
   IN_STAFF_ID,
   SYSDATE
);

       commit;

   end if;
   NULL;
END;
/

CREATE OR REPLACE Procedure TS_GENERAL_COMMENTS_UPDATE
    (
   IN_GENERAL_COMMENTS_ID	      IN NUMBER,
   IN_REPORT_DATE	      IN DATE,
   IN_SYSTEM_TYPE      IN VARCHAR2,
   IN_GEN_COMMENTS  IN VARCHAR2,
   IN_AVAIL_REQ_COMMENTS  IN VARCHAR2,
   IN_AVAIL_TIME_COMMENTS  IN VARCHAR2,
   IN_SCHED_DOWNTIME_COMMENTS    IN VARCHAR2,
   IN_UNSCHED_DOWNTIME_COMMENTS    IN VARCHAR2,
   IN_TOT_DOWNTIME_DUR  IN INTEGER,
   IN_DOWNTIME_ROOT_CAUSE IN VARCHAR2,
   IN_RESOLUTION_MIT_STRTGY IN VARCHAR2,
   IN_GENERAL_COMMENTS_DELETE_FLAG IN NUMBER,
   IN_STAFF_ID      IN VARCHAR2
   )
     
AS
   
BEGIN
if IN_GENERAL_COMMENTS_DELETE_FLAG = 1 then
     delete from TS_GENERAL_COMMENTS where GENERAL_COMMENTS_ID = IN_GENERAL_COMMENTS_ID;
     commit;
elsif  
length(IN_GEN_COMMENTS) is NULL AND
length(IN_AVAIL_REQ_COMMENTS) is NULL AND
length(IN_AVAIL_TIME_COMMENTS) is NULL AND 
length(IN_SCHED_DOWNTIME_COMMENTS) is NULL AND
length(IN_UNSCHED_DOWNTIME_COMMENTS) is NULL AND 
length(IN_TOT_DOWNTIME_DUR) is NULL AND 
length(IN_DOWNTIME_ROOT_CAUSE) is NULL AND
length(IN_RESOLUTION_MIT_STRTGY) is NULL 
then
     /*do nothing*/
      null;
   else
       
      update TS_GENERAL_COMMENTS
       set  GEN_COMMENTS = case when (length(IN_GEN_COMMENTS)> 0) then IN_GEN_COMMENTS else  GEN_COMMENTS end,
	      AVAIL_REQ_COMMENTS = case when (length(IN_AVAIL_REQ_COMMENTS)> 0) then IN_AVAIL_REQ_COMMENTS else  AVAIL_REQ_COMMENTS end,
	      AVAIL_TIME_COMMENTS = case when (length(IN_AVAIL_TIME_COMMENTS)> 0) then IN_AVAIL_TIME_COMMENTS else  AVAIL_TIME_COMMENTS end,
              SCHED_DOWNTIME_COMMENTS = case when (length(IN_SCHED_DOWNTIME_COMMENTS)> 0) then IN_SCHED_DOWNTIME_COMMENTS else  SCHED_DOWNTIME_COMMENTS end,
              UNSCHED_DOWNTIME_COMMENTS = case when (length(IN_UNSCHED_DOWNTIME_COMMENTS)> 0) then IN_UNSCHED_DOWNTIME_COMMENTS else  UNSCHED_DOWNTIME_COMMENTS end,

              TOT_DOWNTIME_DUR = case when (length(IN_TOT_DOWNTIME_DUR)> 0) then IN_TOT_DOWNTIME_DUR else  TOT_DOWNTIME_DUR end,
              DOWNTIME_ROOT_CAUSE = case when (length(IN_DOWNTIME_ROOT_CAUSE)> 0) then IN_DOWNTIME_ROOT_CAUSE else  DOWNTIME_ROOT_CAUSE end,
              RESOLUTION_MIT_STRTGY = case when (length(IN_RESOLUTION_MIT_STRTGY)> 0) then IN_RESOLUTION_MIT_STRTGY else  RESOLUTION_MIT_STRTGY end,
              
	      LAST_UPDATE_BY = IN_STAFF_ID,
        LAST_UPDATE_DATE = sysdate
        where GENERAL_COMMENTS_ID = IN_GENERAL_COMMENTS_ID;

       commit;

   end if;
   NULL;

END;
/    

GRANT execute ON TS_SYSTEM_AVAILABILITY_INSERT TO MAXDAT_MSTR_TRX_RPT;
GRANT execute ON TS_SYSTEM_AVAILABILITY_UPDATE TO MAXDAT_MSTR_TRX_RPT;
GRANT execute ON TS_GENERAL_COMMENTS_INSERT TO MAXDAT_MSTR_TRX_RPT;
GRANT execute ON TS_GENERAL_COMMENTS_UPDATE TO MAXDAT_MSTR_TRX_RPT;
/