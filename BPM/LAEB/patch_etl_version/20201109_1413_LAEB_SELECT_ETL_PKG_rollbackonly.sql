CREATE OR REPLACE package MAXDAT_LAEB.LAEB_SELECT_ETL_PKG as


  -- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
  SVN_FILE_URL varchar2(200) := '$URL: svn://svn-staging.maximus.com/dev1d/maxdat/BPM/LAEB/createdb_etl_version/EMRS/ERMS_Insert_Update_table_pkg.sql $';
  SVN_REVISION varchar2(20) := '$Revision: 31178 $';
  SVN_REVISION_DATE varchar2(60) := '$Date: 2020-11-09 14:05:13 -0800 (Mon, 09 Nov 2020) $';
  SVN_REVISION_AUTHOR varchar2(20) := '$Author: aa24065 $';

  con_pkg    CONSTANT  VARCHAR2(30) := $$PLSQL_UNIT;
  c_abort    CONSTANT  corp_etl_error_log.err_level%TYPE := 'ABORT';
  c_critical CONSTANT  corp_etl_error_log.err_level%TYPE := 'CRITICAL';
  c_log      CONSTANT  corp_etl_error_log.err_level%TYPE := 'LOG';

  PROCEDURE SELECTION_TXN_UPD;
  
  PROCEDURE SELECTION_MISSING_INFO_UPD;

  PROCEDURE SELECTION_SEGMENT_UPD;

  PROCEDURE SELECTN_MISSING_INFO_DETAIL_UPD;

  PROCEDURE NETWORK_UPD;

  PROCEDURE PROVIDER_UPD;

  PROCEDURE NETWORK_LANGUAGE_UPD;
  
  PROCEDURE PANEL_LIMIT_UPD;
  
  PROCEDURE NETWORK_OFFICE_HOURS_UPD;
  
  PROCEDURE NETWORK_SPECIALTY_UPD;
  
  PROCEDURE SELECTION_TXN_STAT_HIST_UPD;
  
  PROCEDURE SELECTION_SEGMENT_SYNC;
    
end;
/
CREATE OR REPLACE PACKAGE BODY MAXDAT_LAEB.LAEB_SELECT_ETL_PKG AS

    v_code corp_etl_error_log.error_codes%TYPE;
    v_desc corp_etl_error_log.error_desc%TYPE;

PROCEDURE SELECTION_TXN_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM Errlog_SELECTION_TXN WHERE ora_err_tag$ = 'SELECTION_TXN_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'SELECTION_TXN_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_SELECTION_TXN s
   USING EMRS_S_SELECTION_TXN_STG ST
	ON (s.SELECTION_TXN_ID = st.SELECTION_TXN_ID)
    WHEN MATCHED THEN UPDATE
     SET s.SELECTION_TXN_GROUP_ID=st.SELECTION_TXN_GROUP_ID
	,s.PROGRAM_TYPE_CD=st.PROGRAM_TYPE_CD
	,s.TRANSACTION_TYPE_CD=st.TRANSACTION_TYPE_CD
	,s.SELECTION_SOURCE_CD=st.SELECTION_SOURCE_CD
	,s.REF_SOURCE_ID=st.REF_SOURCE_ID
	,s.REF_SOURCE_TYPE=st.REF_SOURCE_TYPE
	,s.REF_EXT_TXN_ID=st.REF_EXT_TXN_ID
	,s.PLAN_TYPE_CD=st.PLAN_TYPE_CD
	,s.PLAN_ID=st.PLAN_ID
	,s.PLAN_ID_EXT=st.PLAN_ID_EXT
	,s.CONTRACT_ID=st.CONTRACT_ID
	,s.NETWORK_ID=st.NETWORK_ID
	,s.PROVIDER_ID=st.PROVIDER_ID
	,s.PROVIDER_ID_EXT=st.PROVIDER_ID_EXT
	,s.PROVIDER_FIRST_NAME=st.PROVIDER_FIRST_NAME
	,s.PROVIDER_MIDDLE_NAME=st.PROVIDER_MIDDLE_NAME
	,s.PROVIDER_LAST_NAME=st.PROVIDER_LAST_NAME
	,s.START_DATE=st.START_DATE
	,s.END_DATE=st.END_DATE
	,s.CHOICE_REASON_CD=st.CHOICE_REASON_CD
	,s.DISENROLL_REASON_CD_1=st.DISENROLL_REASON_CD_1
	,s.DISENROLL_REASON_CD_2=st.DISENROLL_REASON_CD_2
	,s.OVERRIDE_REASON_CD=st.OVERRIDE_REASON_CD
	,s.FOLLOWUP_REASON_CD=st.FOLLOWUP_REASON_CD
	,s.FOLLOWUP_CALL_DATE=st.FOLLOWUP_CALL_DATE
	,s.FOLLOWUP_FORM_RCV_DATE=st.FOLLOWUP_FORM_RCV_DATE
	,s.FOLLOWUP_BY=st.FOLLOWUP_BY
	,s.MISSING_INFO_ID=st.MISSING_INFO_ID
	,s.MISSING_SIGNATURE_IND=st.MISSING_SIGNATURE_IND
	,s.OUTREACH_SESSION_ID=st.OUTREACH_SESSION_ID
	,s.BENEFITS_PACKAGE_CD=st.BENEFITS_PACKAGE_CD
	,s.SELECTION_SEGMENT_ID=st.SELECTION_SEGMENT_ID
	,s.CLIENT_ID=st.CLIENT_ID
	,s.STATUS_CD=st.STATUS_CD
	,s.STATUS_DATE=st.STATUS_DATE
	,s.CLIENT_AID_CATEGORY_CD=st.CLIENT_AID_CATEGORY_CD
	,s.COUNTY=st.COUNTY
	,s.ZIPCODE=st.ZIPCODE
	,s.CLIENT_RESIDENCE_ADDRESS_ID=st.CLIENT_RESIDENCE_ADDRESS_ID
	,s.PRIOR_SELECTION_SEGMENT_ID=st.PRIOR_SELECTION_SEGMENT_ID
	,s.PRIOR_SELECTION_START_DATE=st.PRIOR_SELECTION_START_DATE
	,s.PRIOR_SELECTION_END_DATE=st.PRIOR_SELECTION_END_DATE
	,s.PRIOR_PLAN_ID=st.PRIOR_PLAN_ID
	,s.PRIOR_PLAN_ID_EXT=st.PRIOR_PLAN_ID_EXT
	,s.PRIOR_PROVIDER_ID=st.PRIOR_PROVIDER_ID
	,s.PRIOR_PROVIDER_ID_EXT=st.PRIOR_PROVIDER_ID_EXT
	,s.PRIOR_PROVIDER_FIRST_NAME=st.PRIOR_PROVIDER_FIRST_NAME
	,s.PRIOR_PROVIDER_MIDDLE_NAME=st.PRIOR_PROVIDER_MIDDLE_NAME
	,s.PRIOR_PROVIDER_LAST_NAME=st.PRIOR_PROVIDER_LAST_NAME
	,s.REF_SELECTION_TXN_ID=st.REF_SELECTION_TXN_ID
	,s.SURPLUS_INFO=st.SURPLUS_INFO
	,s.CREATED_BY=st.CREATED_BY
	,s.CREATE_TS=st.CREATE_TS
	,s.UPDATED_BY=st.UPDATED_BY
	,s.UPDATE_TS=st.UPDATE_TS
	,s.PRIOR_CONTRACT_ID=st.PRIOR_CONTRACT_ID
	,s.PRIOR_NETWORK_ID=st.PRIOR_NETWORK_ID
	,s.START_ND=st.START_ND
	,s.END_ND=st.END_ND
	,s.PRIOR_CHOICE_REASON_CD=st.PRIOR_CHOICE_REASON_CD
	,s.PRIOR_DISENROLL_REASON_CD_1=st.PRIOR_DISENROLL_REASON_CD_1
	,s.PRIOR_DISENROLL_REASON_CD_2=st.PRIOR_DISENROLL_REASON_CD_2
	,s.PRIOR_CLIENT_AID_CATEGORY_CD=st.PRIOR_CLIENT_AID_CATEGORY_CD
	,s.PRIOR_COUNTY_CD=st.PRIOR_COUNTY_CD
	,s.PRIOR_ZIPCODE=st.PRIOR_ZIPCODE
	,s.ORIGINAL_START_DATE=st.ORIGINAL_START_DATE
	,s.ORIGINAL_END_DATE=st.ORIGINAL_END_DATE
	,s.SELECTION_GENERIC_FIELD1_DATE=st.SELECTION_GENERIC_FIELD1_DATE
	,s.SELECTION_GENERIC_FIELD2_DATE=st.SELECTION_GENERIC_FIELD2_DATE
	,s.SELECTION_GENERIC_FIELD3_NUM=st.SELECTION_GENERIC_FIELD3_NUM
	,s.SELECTION_GENERIC_FIELD4_NUM=st.SELECTION_GENERIC_FIELD4_NUM
	,s.SELECTION_GENERIC_FIELD5_TXT=st.SELECTION_GENERIC_FIELD5_TXT
	,s.SELECTION_GENERIC_FIELD6_TXT=st.SELECTION_GENERIC_FIELD6_TXT
	,s.SELECTION_GENERIC_FIELD7_TXT=st.SELECTION_GENERIC_FIELD7_TXT
	,s.SELECTION_GENERIC_FIELD8_TXT=st.SELECTION_GENERIC_FIELD8_TXT
	,s.SELECTION_GENERIC_FIELD9_TXT=st.SELECTION_GENERIC_FIELD9_TXT
	,s.SELECTION_GENERIC_FIELD10_TXT=st.SELECTION_GENERIC_FIELD10_TXT
 WHEN NOT MATCHED THEN INSERT (	
	  S.SELECTION_TXN_ID
	, S.SELECTION_TXN_GROUP_ID
	, S.PROGRAM_TYPE_CD
	, S.TRANSACTION_TYPE_CD
	, S.SELECTION_SOURCE_CD
	, S.REF_SOURCE_ID
	, S.REF_SOURCE_TYPE
	, S.REF_EXT_TXN_ID
	, S.PLAN_TYPE_CD
	, S.PLAN_ID
	, S.PLAN_ID_EXT
	, S.CONTRACT_ID
	, S.NETWORK_ID
	, S.PROVIDER_ID
	, S.PROVIDER_ID_EXT
	, S.PROVIDER_FIRST_NAME
	, S.PROVIDER_MIDDLE_NAME
	, S.PROVIDER_LAST_NAME
	, S.START_DATE
	, S.END_DATE
	, S.CHOICE_REASON_CD
	, S.DISENROLL_REASON_CD_1
	, S.DISENROLL_REASON_CD_2
	, S.OVERRIDE_REASON_CD
	, S.FOLLOWUP_REASON_CD
	, S.FOLLOWUP_CALL_DATE
	, S.FOLLOWUP_FORM_RCV_DATE
	, S.FOLLOWUP_BY
	, S.MISSING_INFO_ID
	, S.MISSING_SIGNATURE_IND
	, S.OUTREACH_SESSION_ID
	, S.BENEFITS_PACKAGE_CD
	, S.SELECTION_SEGMENT_ID
	, S.CLIENT_ID
	, S.STATUS_CD
	, S.STATUS_DATE
	, S.CLIENT_AID_CATEGORY_CD
	, S.COUNTY
	, S.ZIPCODE
	, S.CLIENT_RESIDENCE_ADDRESS_ID
	, S.PRIOR_SELECTION_SEGMENT_ID
	, S.PRIOR_SELECTION_START_DATE
	, S.PRIOR_SELECTION_END_DATE
	, S.PRIOR_PLAN_ID
	, S.PRIOR_PLAN_ID_EXT
	, S.PRIOR_PROVIDER_ID
	, S.PRIOR_PROVIDER_ID_EXT
	, S.PRIOR_PROVIDER_FIRST_NAME
	, S.PRIOR_PROVIDER_MIDDLE_NAME
	, S.PRIOR_PROVIDER_LAST_NAME
	, S.REF_SELECTION_TXN_ID
	, S.SURPLUS_INFO
	, S.CREATED_BY
	, S.CREATE_TS
	, S.UPDATED_BY
	, S.UPDATE_TS
	, S.PRIOR_CONTRACT_ID
	, S.PRIOR_NETWORK_ID
	, S.START_ND
	, S.END_ND
	, S.PRIOR_CHOICE_REASON_CD
	, S.PRIOR_DISENROLL_REASON_CD_1
	, S.PRIOR_DISENROLL_REASON_CD_2
	, S.PRIOR_CLIENT_AID_CATEGORY_CD
	, S.PRIOR_COUNTY_CD
	, S.PRIOR_ZIPCODE
	, S.ORIGINAL_START_DATE
	, S.ORIGINAL_END_DATE
	, S.SELECTION_GENERIC_FIELD1_DATE
	, S.SELECTION_GENERIC_FIELD2_DATE
	, S.SELECTION_GENERIC_FIELD3_NUM
	, S.SELECTION_GENERIC_FIELD4_NUM
	, S.SELECTION_GENERIC_FIELD5_TXT
	, S.SELECTION_GENERIC_FIELD6_TXT
	, S.SELECTION_GENERIC_FIELD7_TXT
	, S.SELECTION_GENERIC_FIELD8_TXT
	, S.SELECTION_GENERIC_FIELD9_TXT
	, S.SELECTION_GENERIC_FIELD10_TXT
	) VALUES (
	  ST.SELECTION_TXN_ID
	, ST.SELECTION_TXN_GROUP_ID
	, ST.PROGRAM_TYPE_CD
	, ST.TRANSACTION_TYPE_CD
	, ST.SELECTION_SOURCE_CD
	, ST.REF_SOURCE_ID
	, ST.REF_SOURCE_TYPE
	, ST.REF_EXT_TXN_ID
	, ST.PLAN_TYPE_CD
	, ST.PLAN_ID
	, ST.PLAN_ID_EXT
	, ST.CONTRACT_ID
	, ST.NETWORK_ID
	, ST.PROVIDER_ID
	, ST.PROVIDER_ID_EXT
	, ST.PROVIDER_FIRST_NAME
	, ST.PROVIDER_MIDDLE_NAME
	, ST.PROVIDER_LAST_NAME
	, ST.START_DATE
	, ST.END_DATE
	, ST.CHOICE_REASON_CD
	, ST.DISENROLL_REASON_CD_1
	, ST.DISENROLL_REASON_CD_2
	, ST.OVERRIDE_REASON_CD
	, ST.FOLLOWUP_REASON_CD
	, ST.FOLLOWUP_CALL_DATE
	, ST.FOLLOWUP_FORM_RCV_DATE
	, ST.FOLLOWUP_BY
	, ST.MISSING_INFO_ID
	, ST.MISSING_SIGNATURE_IND
	, ST.OUTREACH_SESSION_ID
	, ST.BENEFITS_PACKAGE_CD
	, ST.SELECTION_SEGMENT_ID
	, ST.CLIENT_ID
	, ST.STATUS_CD
	, ST.STATUS_DATE
	, ST.CLIENT_AID_CATEGORY_CD
	, ST.COUNTY
	, ST.ZIPCODE
	, ST.CLIENT_RESIDENCE_ADDRESS_ID
	, ST.PRIOR_SELECTION_SEGMENT_ID
	, ST.PRIOR_SELECTION_START_DATE
	, ST.PRIOR_SELECTION_END_DATE
	, ST.PRIOR_PLAN_ID
	, ST.PRIOR_PLAN_ID_EXT
	, ST.PRIOR_PROVIDER_ID
	, ST.PRIOR_PROVIDER_ID_EXT
	, ST.PRIOR_PROVIDER_FIRST_NAME
	, ST.PRIOR_PROVIDER_MIDDLE_NAME
	, ST.PRIOR_PROVIDER_LAST_NAME
	, ST.REF_SELECTION_TXN_ID
	, ST.SURPLUS_INFO
	, ST.CREATED_BY
	, ST.CREATE_TS
	, ST.UPDATED_BY
	, ST.UPDATE_TS
	, ST.PRIOR_CONTRACT_ID
	, ST.PRIOR_NETWORK_ID
	, ST.START_ND
	, ST.END_ND
	, ST.PRIOR_CHOICE_REASON_CD
	, ST.PRIOR_DISENROLL_REASON_CD_1
	, ST.PRIOR_DISENROLL_REASON_CD_2
	, ST.PRIOR_CLIENT_AID_CATEGORY_CD
	, ST.PRIOR_COUNTY_CD
	, ST.PRIOR_ZIPCODE
	, ST.ORIGINAL_START_DATE
	, ST.ORIGINAL_END_DATE
	, ST.SELECTION_GENERIC_FIELD1_DATE
	, ST.SELECTION_GENERIC_FIELD2_DATE
	, ST.SELECTION_GENERIC_FIELD3_NUM
	, ST.SELECTION_GENERIC_FIELD4_NUM
	, ST.SELECTION_GENERIC_FIELD5_TXT
	, ST.SELECTION_GENERIC_FIELD6_TXT
	, ST.SELECTION_GENERIC_FIELD7_TXT
	, ST.SELECTION_GENERIC_FIELD8_TXT
	, ST.SELECTION_GENERIC_FIELD9_TXT
	, ST.SELECTION_GENERIC_FIELD10_TXT
	)	
     Log Errors INTO Errlog_SELECTION_TXN ('SELECTION_TXN_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_TXN_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_SELECTION_TXN', SELECTION_TXN_ID
      FROM Errlog_SELECTION_TXN
     WHERE Ora_Err_Tag$ = 'SELECTION_TXN_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_TXN_UPD', 1, v_desc, v_code, 'EMRS_D_SELECTION_TXN');

      COMMIT;
END SELECTION_TXN_UPD;

PROCEDURE SELECTION_MISSING_INFO_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_upd_cnt number;
    v_err_cnt number;
BEGIN

   DELETE FROM Errlog_SELECT_MISS_INFO WHERE ora_err_tag$ = 'SELECTION_MISSING_INFO_UPD';

--   INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--   VALUES (SEQ_JOB_ID.Nextval, 'SELECTION_MISSING_INFO_UPD','STARTED',SYSDATE)
--   RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_SELECTN_MISSING_INFO s
   USING EMRS_S_SELECTN_MISSING_INFO_STG ST
	ON (s.MISSING_INFO_ID = st.MISSING_INFO_ID)
    WHEN MATCHED THEN UPDATE
     SET s.COMMENTS=st.COMMENTS
	,s.COMMENTS_FOR_CLIENT=st.COMMENTS_FOR_CLIENT
	,s.CREATE_TS=st.CREATE_TS
	,s.CREATED_BY=st.CREATED_BY
	,s.UPDATE_TS=st.UPDATE_TS
	,s.UPDATED_BY=st.UPDATED_BY
	,s.MISSING_INFO_TYPE_CD=st.MISSING_INFO_TYPE_CD
    WHEN NOT MATCHED THEN INSERT (
      S.MISSING_INFO_ID
	, S.COMMENTS
	, S.COMMENTS_FOR_CLIENT
	, S.CREATE_TS
	, S.CREATED_BY
	, S.UPDATE_TS
	, S.UPDATED_BY
	, S.MISSING_INFO_TYPE_CD
   ) VALUES (
      ST.MISSING_INFO_ID
	, ST.COMMENTS
	, ST.COMMENTS_FOR_CLIENT
	, ST.CREATE_TS
	, ST.CREATED_BY
	, ST.UPDATE_TS
	, ST.UPDATED_BY
	, ST.MISSING_INFO_TYPE_CD
   ) 
     Log Errors INTO Errlog_SELECT_MISS_INFO ('SELECTION_MISSING_INFO_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

 --   UPDATE CORP_ETL_JOB_STATISTICS
 --      SET Job_end_date = SYSDATE
 --        , RECORD_COUNT = v_upd_cnt
 --        , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_UPDATED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;
   
    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_MISSING_INFO_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_SELECTION_MISSING_INFO', MISSING_INFO_ID
    FROM Errlog_SELECT_MISS_INFO
    WHERE Ora_Err_Tag$ = 'SELECTION_MISSING_INFO_UPD';

    v_err_cnt := SQL%RowCount;

 --   UPDATE CORP_ETL_JOB_STATISTICS
 --      SET ERROR_COUNT = v_err_cnt
 --        , RECORD_COUNT = v_upd_cnt + v_err_cnt
 --        , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
 --    WHERE JOB_ID =  v_job_id;
     
    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_MISSING_INFO_UPD', 1, v_desc, v_code, 'EMRS_D_SELECTION_MISSING_INFO');

      COMMIT;
END SELECTION_MISSING_INFO_UPD;

PROCEDURE SELECTION_SEGMENT_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_upd_cnt number;
    v_err_cnt number;
BEGIN

   DELETE FROM Errlog_SELECTION_SEGMENT WHERE ora_err_tag$ = 'SELECTION_SEGMENT_UPD';

--   INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--   VALUES (SEQ_JOB_ID.Nextval, 'SELECTION_SEGMENT_UPD','STARTED',SYSDATE)
--   RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_SELECTION_SEGMENT s
   USING EMRS_S_SELECTION_SEGMENT_STG ST
	ON (s.SELECTION_SEGMENT_ID = st.SELECTION_SEGMENT_ID)
    WHEN MATCHED THEN UPDATE
     SET s.CLIENT_ID=st.CLIENT_ID
	,s.PROGRAM_TYPE_CD=st.PROGRAM_TYPE_CD
	,s.PLAN_TYPE_CD=st.PLAN_TYPE_CD
	,s.START_DATE=st.START_DATE
	,s.END_DATE=st.END_DATE
	,s.STATUS_CD=st.STATUS_CD
	,s.STATUS_DATE=st.STATUS_DATE
	,s.PLAN_ID=st.PLAN_ID
	,s.PLAN_ID_EXT=st.PLAN_ID_EXT
	,s.NETWORK_ID=st.NETWORK_ID
	,s.PROVIDER_ID_EXT=st.PROVIDER_ID_EXT
	,s.PROVIDER_FIRST_NAME=st.PROVIDER_FIRST_NAME
	,s.PROVIDER_MIDDLE_NAME=st.PROVIDER_MIDDLE_NAME
	,s.PROVIDER_LAST_NAME=st.PROVIDER_LAST_NAME
	,s.CHOICE_REASON_CD=st.CHOICE_REASON_CD
	,s.DISENROLL_REASON_CD_1=st.DISENROLL_REASON_CD_1
	,s.DISENROLL_REASON_CD_2=st.DISENROLL_REASON_CD_2
	,s.CLIENT_AID_CATEGORY_CD=st.CLIENT_AID_CATEGORY_CD
	,s.COUNTY_CD=st.COUNTY_CD
	,s.ZIPCODE=st.ZIPCODE
	,s.CREATED_BY=st.CREATED_BY
	,s.CREATE_TS=st.CREATE_TS
	,s.UPDATED_BY=st.UPDATED_BY
	,s.UPDATE_TS=st.UPDATE_TS
	,s.CONTRACT_ID=st.CONTRACT_ID
	,s.START_ND=st.START_ND
	,s.END_ND=st.END_ND
	,s.SS_GENERIC_FIELD1_DATE=st.SS_GENERIC_FIELD1_DATE
	,s.SS_GENERIC_FIELD2_DATE=st.SS_GENERIC_FIELD2_DATE
	,s.SS_GENERIC_FIELD3_NUM=st.SS_GENERIC_FIELD3_NUM
	,s.SS_GENERIC_FIELD4_NUM=st.SS_GENERIC_FIELD4_NUM
	,s.SS_GENERIC_FIELD5_TXT=st.SS_GENERIC_FIELD5_TXT
	,s.SS_GENERIC_FIELD6_TXT=st.SS_GENERIC_FIELD6_TXT
	,s.SS_GENERIC_FIELD7_TXT=st.SS_GENERIC_FIELD7_TXT
	,s.SS_GENERIC_FIELD8_TXT=st.SS_GENERIC_FIELD8_TXT
	,s.SS_GENERIC_FIELD9_TXT=st.SS_GENERIC_FIELD9_TXT
	,s.SS_GENERIC_FIELD10_TXT=st.SS_GENERIC_FIELD10_TXT
	WHEN NOT MATCHED THEN INSERT (
	  S.SELECTION_SEGMENT_ID
	, S.CLIENT_ID
	, S.PROGRAM_TYPE_CD
	, S.PLAN_TYPE_CD
	, S.START_DATE
	, S.END_DATE
	, S.STATUS_CD
	, S.STATUS_DATE
	, S.PLAN_ID
	, S.PLAN_ID_EXT
	, S.NETWORK_ID
	, S.PROVIDER_ID_EXT
	, S.PROVIDER_FIRST_NAME
	, S.PROVIDER_MIDDLE_NAME
	, S.PROVIDER_LAST_NAME
	, S.CHOICE_REASON_CD
	, S.DISENROLL_REASON_CD_1
	, S.DISENROLL_REASON_CD_2
	, S.CLIENT_AID_CATEGORY_CD
	, S.COUNTY_CD
	, S.ZIPCODE
	, S.CREATED_BY
	, S.CREATE_TS
	, S.UPDATED_BY
	, S.UPDATE_TS
	, S.CONTRACT_ID
	, S.START_ND
	, S.END_ND
	, S.SS_GENERIC_FIELD1_DATE
	, S.SS_GENERIC_FIELD2_DATE
	, S.SS_GENERIC_FIELD3_NUM
	, S.SS_GENERIC_FIELD4_NUM
	, S.SS_GENERIC_FIELD5_TXT
	, S.SS_GENERIC_FIELD6_TXT
	, S.SS_GENERIC_FIELD7_TXT
	, S.SS_GENERIC_FIELD8_TXT
	, S.SS_GENERIC_FIELD9_TXT
	, S.SS_GENERIC_FIELD10_TXT
	) VALUES (
	  ST.SELECTION_SEGMENT_ID
	, ST.CLIENT_ID
	, ST.PROGRAM_TYPE_CD
	, ST.PLAN_TYPE_CD
	, ST.START_DATE
	, ST.END_DATE
	, ST.STATUS_CD
	, ST.STATUS_DATE
	, ST.PLAN_ID
	, ST.PLAN_ID_EXT
	, ST.NETWORK_ID
	, ST.PROVIDER_ID_EXT
	, ST.PROVIDER_FIRST_NAME
	, ST.PROVIDER_MIDDLE_NAME
	, ST.PROVIDER_LAST_NAME
	, ST.CHOICE_REASON_CD
	, ST.DISENROLL_REASON_CD_1
	, ST.DISENROLL_REASON_CD_2
	, ST.CLIENT_AID_CATEGORY_CD
	, ST.COUNTY_CD
	, ST.ZIPCODE
	, ST.CREATED_BY
	, ST.CREATE_TS
	, ST.UPDATED_BY
	, ST.UPDATE_TS
	, ST.CONTRACT_ID
	, ST.START_ND
	, ST.END_ND
	, ST.SS_GENERIC_FIELD1_DATE
	, ST.SS_GENERIC_FIELD2_DATE
	, ST.SS_GENERIC_FIELD3_NUM
	, ST.SS_GENERIC_FIELD4_NUM
	, ST.SS_GENERIC_FIELD5_TXT
	, ST.SS_GENERIC_FIELD6_TXT
	, ST.SS_GENERIC_FIELD7_TXT
	, ST.SS_GENERIC_FIELD8_TXT
	, ST.SS_GENERIC_FIELD9_TXT
	, ST.SS_GENERIC_FIELD10_TXT
	)
     Log Errors INTO Errlog_SELECTION_SEGMENT ('SELECTION_SEGMENT_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_UPDATED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;
   
    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_SEGMENT_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_SELECTION_SEGMENT', SELECTION_SEGMENT_ID
    FROM Errlog_SELECTION_SEGMENT
    WHERE Ora_Err_Tag$ = 'SELECTION_SEGMENT_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;
     
    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_SEGMENT_UPD', 1, v_desc, v_code, 'EMRS_D_SELECTION_SEGMENT');

      COMMIT;
END SELECTION_SEGMENT_UPD;

PROCEDURE SELECTN_MISSING_INFO_DETAIL_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_upd_cnt number;
    v_err_cnt number;
BEGIN

   DELETE FROM Errlog_SELECT_MISS_INFO_DETAIL WHERE ora_err_tag$ = 'SELECTN_MISSING_INFO_DETAIL_UPD';

--   INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
 --  VALUES (SEQ_JOB_ID.Nextval, 'SELECTN_MISSING_INFO_DETAIL_UPD','STARTED',SYSDATE)
--   RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_SELTN_MISNG_INFO_DETL s
   USING EMRS_S_SELTN_MISNG_INFO_DETL_STG ST
	ON (s.MISSING_INFO_DETAILS_ID = st.MISSING_INFO_DETAILS_ID)
    WHEN MATCHED THEN UPDATE
     SET s.MISSING_INFO_ID=st.MISSING_INFO_ID
	,s.ERROR_CODE=st.ERROR_CODE
	,s.CLIENT_ID=st.CLIENT_ID
	,s.SEND_IN_LETTER_IND=st.SEND_IN_LETTER_IND
	,s.ADDITIONAL_MESSAGE_IND=st.ADDITIONAL_MESSAGE_IND
	,s.CREATE_TS=st.CREATE_TS
	,s.CREATED_BY=st.CREATED_BY
	,s.UPDATE_TS=st.UPDATE_TS
	,s.UPDATED_BY=st.UPDATED_BY
	,s.COMMENTS=st.COMMENTS
	,s.DENIAL_ERROR_CD=st.DENIAL_ERROR_CD
	,s.SUPPLEMENTAL_INFO=st.SUPPLEMENTAL_INFO
    WHEN NOT MATCHED THEN INSERT (
    S.MISSING_INFO_DETAILS_ID	
    , S.MISSING_INFO_ID
	, S.ERROR_CODE
	, S.CLIENT_ID
	, S.SEND_IN_LETTER_IND
	, S.ADDITIONAL_MESSAGE_IND
	, S.CREATE_TS
	, S.CREATED_BY
	, S.UPDATE_TS
	, S.UPDATED_BY
	, S.COMMENTS
	, S.DENIAL_ERROR_CD
	, S.SUPPLEMENTAL_INFO
	) VALUES (
	ST.MISSING_INFO_DETAILS_ID	
    , ST.MISSING_INFO_ID
	, ST.ERROR_CODE
	, ST.CLIENT_ID
	, ST.SEND_IN_LETTER_IND
	, ST.ADDITIONAL_MESSAGE_IND
	, ST.CREATE_TS
	, ST.CREATED_BY
	, ST.UPDATE_TS
	, ST.UPDATED_BY
	, ST.COMMENTS
	, ST.DENIAL_ERROR_CD
	, ST.SUPPLEMENTAL_INFO
	)
     Log Errors INTO Errlog_SELECT_MISS_INFO_DETAIL ('SELECTN_MISSING_INFO_DETAIL_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_UPDATED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;
   
    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTN_MISSING_INFO_DETAIL_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_SELTN_MISNG_INFO_DETL', MISSING_INFO_DETAILS_ID
    FROM Errlog_SELECT_MISS_INFO_DETAIL
    WHERE Ora_Err_Tag$ = 'SELECTN_MISSING_INFO_DETAIL_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
 --      SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;
     
    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTN_MISSING_INFO_DETAIL_UPD', 1, v_desc, v_code, 'EMRS_D_SELTN_MISNG_INFO_DETL');

      COMMIT;
END SELECTN_MISSING_INFO_DETAIL_UPD;

PROCEDURE NETWORK_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_NETWORK WHERE ora_err_tag$ = 'NETWORK_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'NETWORK_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_NETWORK s
   USING EMRS_S_NETWORK_STG ST
	ON (s.NETWORK_ID = st.NETWORK_ID)
    WHEN MATCHED THEN UPDATE
     SET s.PROVIDER_ID=st.PROVIDER_ID
		,s.PLAN_ID=st.PLAN_ID
		,s.FIRST_NAME=st.FIRST_NAME
		,s.FIRST_NAME_CANNON=st.FIRST_NAME_CANNON
		,s.FIRST_NAME_SOUNDLIKE=st.FIRST_NAME_SOUNDLIKE
		,s.LAST_NAME=st.LAST_NAME
		,s.LAST_NAME_SOUNDLIKE=st.LAST_NAME_SOUNDLIKE
		,s.LAST_NAME_CANNON=st.LAST_NAME_CANNON
		,s.MIDDLE_NAME=st.MIDDLE_NAME
		,s.OFFICE_ADDR_1=st.OFFICE_ADDR_1
		,s.OFFICE_ADDR_2=st.OFFICE_ADDR_2
		,s.OFFICE_CITY=st.OFFICE_CITY
		,s.OFFICE_STATE=st.OFFICE_STATE
		,s.OFFICE_ZIP=st.OFFICE_ZIP
		,s.OFFICE_COUNTY=st.OFFICE_COUNTY
		,s.OFFICE_PHONE=st.OFFICE_PHONE
		,s.OFFICE_FAX=st.OFFICE_FAX
		,s.OFFICE_EMAIL=st.OFFICE_EMAIL
		,s.AGE_LOW_LIMIT=st.AGE_LOW_LIMIT
		,s.AGE_HIGH_LIMIT=st.AGE_HIGH_LIMIT
		,s.MEDICAID_ID_EXT=st.MEDICAID_ID_EXT
		,s.WHEEL_CHAIR_ACCESSIBLE_IND=st.WHEEL_CHAIR_ACCESSIBLE_IND
		,s.PCP_IND=st.PCP_IND
		,s.ACCEPTING_NEW_CLIENTS_MCO_IND=st.ACCEPTING_NEW_CLIENTS_MCO_IND
		,s.ACCEPTING_NEW_CLIENTS_PCP_IND=st.ACCEPTING_NEW_CLIENTS_PCP_IND
		,s.SEX_LIMITS_CD=st.SEX_LIMITS_CD
		,s.PROVIDER_GENDER_CD=st.PROVIDER_GENDER_CD
		,s.CREATE_TS=st.CREATE_TS
		,s.CREATED_BY=st.CREATED_BY
		,s.UPDATE_TS=st.UPDATE_TS
		,s.UPDATED_BY=st.UPDATED_BY
		,s.LICENSE_NUMBER=st.LICENSE_NUMBER
		,s.START_DATE=st.START_DATE
		,s.MULTIPLE_LOCATIONS_IND=st.MULTIPLE_LOCATIONS_IND
		,s.SITENAME=st.SITENAME
		,s.SITENAME_SOUNDLIKE=st.SITENAME_SOUNDLIKE
		,s.SITENAME_CANNON=st.SITENAME_CANNON
		,s.FQHC_STATUS_IND=st.FQHC_STATUS_IND
		,s.NETWORK_ID_EXT=st.NETWORK_ID_EXT
		,s.PLAN_ID_EXT=st.PLAN_ID_EXT
		,s.PROVIDER_ID_EXT=st.PROVIDER_ID_EXT
		,s.FILE_ID_EXT=st.FILE_ID_EXT
		,s.STATUS_CD=st.STATUS_CD
		,s.ACCEPTS_OBSTETRICS_IND=st.ACCEPTS_OBSTETRICS_IND
		,s.WOMEN_ONLY_IND=st.WOMEN_ONLY_IND
		,s.ADMIT_PRIVILEGES_IND=st.ADMIT_PRIVILEGES_IND
		,s.DELIVERY_PRIVILEGES_IND=st.DELIVERY_PRIVILEGES_IND
		,s.EFFECTIVE_DT=st.EFFECTIVE_DT
		,s.END_DT=st.END_DT
		,s.LOCATION_CD=st.LOCATION_CD
		,s.EXTERNAL_GROUP_ID=st.EXTERNAL_GROUP_ID
		,s.PROGRAM_TYPE_CD=st.PROGRAM_TYPE_CD
		,s.ACCEPTING_NEW_CLIENTS_PCP_CD=st.ACCEPTING_NEW_CLIENTS_PCP_CD
		,s.ACCEPTING_NEW_CLIENTS_MCO_CD=st.ACCEPTING_NEW_CLIENTS_MCO_CD
		,s.NETWORK_GENERIC_FIELD1_DATE=st.NETWORK_GENERIC_FIELD1_DATE
		,s.NETWORK_GENERIC_FIELD2_DATE=st.NETWORK_GENERIC_FIELD2_DATE
		,s.NETWORK_GENERIC_FIELD3_NUM=st.NETWORK_GENERIC_FIELD3_NUM
		,s.NETWORK_GENERIC_FIELD4_NUM=st.NETWORK_GENERIC_FIELD4_NUM
		,s.NETWORK_GENERIC_FIELD5_TXT=st.NETWORK_GENERIC_FIELD5_TXT
		,s.NETWORK_GENERIC_FIELD6_TXT=st.NETWORK_GENERIC_FIELD6_TXT
		,s.NETWORK_GENERIC_FIELD7_TXT=st.NETWORK_GENERIC_FIELD7_TXT
		,s.NETWORK_GENERIC_FIELD8_TXT=st.NETWORK_GENERIC_FIELD8_TXT
		,s.NETWORK_GENERIC_FIELD9_TXT=st.NETWORK_GENERIC_FIELD9_TXT
		,s.NETWORK_GENERIC_FIELD10_TXT=st.NETWORK_GENERIC_FIELD10_TXT
		,s.NETWORK_GENERIC_REF11_ID=st.NETWORK_GENERIC_REF11_ID
		,s.NETWORK_GENERIC_REF12_ID=st.NETWORK_GENERIC_REF12_ID
		,s.RAW_ADDRESS_ID=st.RAW_ADDRESS_ID
		,s.NORM_ADDRESS_ID=st.NORM_ADDRESS_ID
		,s.ADDR_UPDATED_BY=st.ADDR_UPDATED_BY
		,s.ADDR_UPDATE_TS=st.ADDR_UPDATE_TS
		,s.HASH_NUM=st.HASH_NUM
 WHEN NOT MATCHED THEN INSERT (	
	  S.NETWORK_ID
	, S.PROVIDER_ID
	, S.PLAN_ID
	, S.FIRST_NAME
	, S.FIRST_NAME_CANNON
	, S.FIRST_NAME_SOUNDLIKE
	, S.LAST_NAME
	, S.LAST_NAME_SOUNDLIKE
	, S.LAST_NAME_CANNON
	, S.MIDDLE_NAME
	, S.OFFICE_ADDR_1
	, S.OFFICE_ADDR_2
	, S.OFFICE_CITY
	, S.OFFICE_STATE
	, S.OFFICE_ZIP
	, S.OFFICE_COUNTY
	, S.OFFICE_PHONE
	, S.OFFICE_FAX
	, S.OFFICE_EMAIL
	, S.AGE_LOW_LIMIT
	, S.AGE_HIGH_LIMIT
	, S.MEDICAID_ID_EXT
	, S.WHEEL_CHAIR_ACCESSIBLE_IND
	, S.PCP_IND
	, S.ACCEPTING_NEW_CLIENTS_MCO_IND
	, S.ACCEPTING_NEW_CLIENTS_PCP_IND
	, S.SEX_LIMITS_CD
	, S.PROVIDER_GENDER_CD
	, S.CREATE_TS
	, S.CREATED_BY
	, S.UPDATE_TS
	, S.UPDATED_BY
	, S.LICENSE_NUMBER
	, S.START_DATE
	, S.MULTIPLE_LOCATIONS_IND
	, S.SITENAME
	, S.SITENAME_SOUNDLIKE
	, S.SITENAME_CANNON
	, S.FQHC_STATUS_IND
	, S.NETWORK_ID_EXT
	, S.PLAN_ID_EXT
	, S.PROVIDER_ID_EXT
	, S.FILE_ID_EXT
	, S.STATUS_CD
	, S.ACCEPTS_OBSTETRICS_IND
	, S.WOMEN_ONLY_IND
	, S.ADMIT_PRIVILEGES_IND
	, S.DELIVERY_PRIVILEGES_IND
	, S.EFFECTIVE_DT
	, S.END_DT
	, S.LOCATION_CD
	, S.EXTERNAL_GROUP_ID
	, S.PROGRAM_TYPE_CD
	, S.ACCEPTING_NEW_CLIENTS_PCP_CD
	, S.ACCEPTING_NEW_CLIENTS_MCO_CD
	, S.NETWORK_GENERIC_FIELD1_DATE
	, S.NETWORK_GENERIC_FIELD2_DATE
	, S.NETWORK_GENERIC_FIELD3_NUM
	, S.NETWORK_GENERIC_FIELD4_NUM
	, S.NETWORK_GENERIC_FIELD5_TXT
	, S.NETWORK_GENERIC_FIELD6_TXT
	, S.NETWORK_GENERIC_FIELD7_TXT
	, S.NETWORK_GENERIC_FIELD8_TXT
	, S.NETWORK_GENERIC_FIELD9_TXT
	, S.NETWORK_GENERIC_FIELD10_TXT
	, S.NETWORK_GENERIC_REF11_ID
	, S.NETWORK_GENERIC_REF12_ID
	, S.RAW_ADDRESS_ID
	, S.NORM_ADDRESS_ID
	, S.ADDR_UPDATED_BY
	, S.ADDR_UPDATE_TS
	, S.HASH_NUM
	) VALUES (
	  ST.NETWORK_ID
	, ST.PROVIDER_ID
	, ST.PLAN_ID
	, ST.FIRST_NAME
	, ST.FIRST_NAME_CANNON
	, ST.FIRST_NAME_SOUNDLIKE
	, ST.LAST_NAME
	, ST.LAST_NAME_SOUNDLIKE
	, ST.LAST_NAME_CANNON
	, ST.MIDDLE_NAME
	, ST.OFFICE_ADDR_1
	, ST.OFFICE_ADDR_2
	, ST.OFFICE_CITY
	, ST.OFFICE_STATE
	, ST.OFFICE_ZIP
	, ST.OFFICE_COUNTY
	, ST.OFFICE_PHONE
	, ST.OFFICE_FAX
	, ST.OFFICE_EMAIL
	, ST.AGE_LOW_LIMIT
	, ST.AGE_HIGH_LIMIT
	, ST.MEDICAID_ID_EXT
	, ST.WHEEL_CHAIR_ACCESSIBLE_IND
	, ST.PCP_IND
	, ST.ACCEPTING_NEW_CLIENTS_MCO_IND
	, ST.ACCEPTING_NEW_CLIENTS_PCP_IND
	, ST.SEX_LIMITS_CD
	, ST.PROVIDER_GENDER_CD
	, ST.CREATE_TS
	, ST.CREATED_BY
	, ST.UPDATE_TS
	, ST.UPDATED_BY
	, ST.LICENSE_NUMBER
	, ST.START_DATE
	, ST.MULTIPLE_LOCATIONS_IND
	, ST.SITENAME
	, ST.SITENAME_SOUNDLIKE
	, ST.SITENAME_CANNON
	, ST.FQHC_STATUS_IND
	, ST.NETWORK_ID_EXT
	, ST.PLAN_ID_EXT
	, ST.PROVIDER_ID_EXT
	, ST.FILE_ID_EXT
	, ST.STATUS_CD
	, ST.ACCEPTS_OBSTETRICS_IND
	, ST.WOMEN_ONLY_IND
	, ST.ADMIT_PRIVILEGES_IND
	, ST.DELIVERY_PRIVILEGES_IND
	, ST.EFFECTIVE_DT
	, ST.END_DT
	, ST.LOCATION_CD
	, ST.EXTERNAL_GROUP_ID
	, ST.PROGRAM_TYPE_CD
	, ST.ACCEPTING_NEW_CLIENTS_PCP_CD
	, ST.ACCEPTING_NEW_CLIENTS_MCO_CD
	, ST.NETWORK_GENERIC_FIELD1_DATE
	, ST.NETWORK_GENERIC_FIELD2_DATE
	, ST.NETWORK_GENERIC_FIELD3_NUM
	, ST.NETWORK_GENERIC_FIELD4_NUM
	, ST.NETWORK_GENERIC_FIELD5_TXT
	, ST.NETWORK_GENERIC_FIELD6_TXT
	, ST.NETWORK_GENERIC_FIELD7_TXT
	, ST.NETWORK_GENERIC_FIELD8_TXT
	, ST.NETWORK_GENERIC_FIELD9_TXT
	, ST.NETWORK_GENERIC_FIELD10_TXT
	, ST.NETWORK_GENERIC_REF11_ID
	, ST.NETWORK_GENERIC_REF12_ID
	, ST.RAW_ADDRESS_ID
	, ST.NORM_ADDRESS_ID
	, ST.ADDR_UPDATED_BY
	, ST.ADDR_UPDATE_TS
	, ST.HASH_NUM
	)	
     Log Errors INTO ERRLOG_NETWORK ('NETWORK_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_NETWORK', NETWORK_ID
      FROM ERRLOG_NETWORK
     WHERE Ora_Err_Tag$ = 'NETWORK_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
---       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_UPD', 1, v_desc, v_code, 'EMRS_D_NETWORK');

      COMMIT;
END NETWORK_UPD;

PROCEDURE PROVIDER_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_PROVIDER WHERE ora_err_tag$ = 'PROVIDER_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'PROVIDER_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_PROVIDER s
   USING EMRS_S_PROVIDER_STG ST
	ON (s.PROVIDER_ID = st.PROVIDER_ID)
    WHEN MATCHED THEN UPDATE
     SET s.PROVIDER_ID_EXT=st.PROVIDER_ID_EXT
	,s.DEA_ID_EXT=st.DEA_ID_EXT
	,s.NPI_ID_EXT=st.NPI_ID_EXT
	,s.STATUS_CD=st.STATUS_CD
	,s.DBA_NAME=st.DBA_NAME
	,s.TAX_NAME=st.TAX_NAME
	,s.FIRST_NAME_CANNON=st.FIRST_NAME_CANNON
	,s.FIRST_NAME_SOUNDLIKE=st.FIRST_NAME_SOUNDLIKE
	,s.TITLE=st.TITLE
	,s.FIRST_NAME=st.FIRST_NAME
	,s.LAST_NAME=st.LAST_NAME
	,s.MIDDLE_NAME=st.MIDDLE_NAME
	,s.NAME_SUFFIX=st.NAME_SUFFIX
	,s.SSN=st.SSN
	,s.PCP_IND=st.PCP_IND
	,s.PROV_ENRL_CNT_STATE=st.PROV_ENRL_CNT_STATE
	,s.CREATE_TS=st.CREATE_TS
	,s.CREATED_BY=st.CREATED_BY
	,s.UPDATE_TS=st.UPDATE_TS
	,s.UPDATED_BY=st.UPDATED_BY
	,s.PHONE=st.PHONE
	,s.FAX=st.FAX
	,s.EMAIL=st.EMAIL
	,s.NPI_TYPE_CD=st.NPI_TYPE_CD
	,s.LAST_NAME_CANNON=st.LAST_NAME_CANNON
	,s.LAST_NAME_SOUNDLIKE=st.LAST_NAME_SOUNDLIKE
	,s.LICENSE_NUMBER=st.LICENSE_NUMBER
	,s.PROVIDER_GENDER_CD=st.PROVIDER_GENDER_CD
	,s.OUT_OF_STATE_IND=st.OUT_OF_STATE_IND
	,s.MEDICAID_IND=st.MEDICAID_IND
	,s.TYPE_CD=st.TYPE_CD
	,s.CLASSIFICATION_CD=st.CLASSIFICATION_CD
	,s.PROVIDER_GENERIC_FIELD1_DATE=st.PROVIDER_GENERIC_FIELD1_DATE
	,s.PROVIDER_GENERIC_FIELD2_DATE=st.PROVIDER_GENERIC_FIELD2_DATE
	,s.PROVIDER_GENERIC_FIELD3_NUM=st.PROVIDER_GENERIC_FIELD3_NUM
	,s.PROVIDER_GENERIC_FIELD4_NUM=st.PROVIDER_GENERIC_FIELD4_NUM
	,s.PROVIDER_GENERIC_FIELD5_TXT=st.PROVIDER_GENERIC_FIELD5_TXT
	,s.PROVIDER_GENERIC_FIELD6_TXT=st.PROVIDER_GENERIC_FIELD6_TXT
	,s.PROVIDER_GENERIC_FIELD7_TXT=st.PROVIDER_GENERIC_FIELD7_TXT
	,s.PROVIDER_GENERIC_FIELD8_TXT=st.PROVIDER_GENERIC_FIELD8_TXT
	,s.PROVIDER_GENERIC_FIELD9_TXT=st.PROVIDER_GENERIC_FIELD9_TXT
	,s.PROVIDER_GENERIC_FIELD10_TXT=st.PROVIDER_GENERIC_FIELD10_TXT
	,s.PROVIDER_GENERIC_REF11_ID=st.PROVIDER_GENERIC_REF11_ID
	,s.PROVIDER_GENERIC_REF12_ID=st.PROVIDER_GENERIC_REF12_ID
 WHEN NOT MATCHED THEN INSERT (	
		S.PROVIDER_ID
		, S.PROVIDER_ID_EXT
		, S.DEA_ID_EXT
		, S.NPI_ID_EXT
		, S.STATUS_CD
		, S.DBA_NAME
		, S.TAX_NAME
		, S.FIRST_NAME_CANNON
		, S.FIRST_NAME_SOUNDLIKE
		, S.TITLE
		, S.FIRST_NAME
		, S.LAST_NAME
		, S.MIDDLE_NAME
		, S.NAME_SUFFIX
		, S.SSN
		, S.PCP_IND
		, S.PROV_ENRL_CNT_STATE
		, S.CREATE_TS
		, S.CREATED_BY
		, S.UPDATE_TS
		, S.UPDATED_BY
		, S.PHONE
		, S.FAX
		, S.EMAIL
		, S.NPI_TYPE_CD
		, S.LAST_NAME_CANNON
		, S.LAST_NAME_SOUNDLIKE
		, S.LICENSE_NUMBER
		, S.PROVIDER_GENDER_CD
		, S.OUT_OF_STATE_IND
		, S.MEDICAID_IND
		, S.TYPE_CD
		, S.CLASSIFICATION_CD
		, S.PROVIDER_GENERIC_FIELD1_DATE
		, S.PROVIDER_GENERIC_FIELD2_DATE
		, S.PROVIDER_GENERIC_FIELD3_NUM
		, S.PROVIDER_GENERIC_FIELD4_NUM
		, S.PROVIDER_GENERIC_FIELD5_TXT
		, S.PROVIDER_GENERIC_FIELD6_TXT
		, S.PROVIDER_GENERIC_FIELD7_TXT
		, S.PROVIDER_GENERIC_FIELD8_TXT
		, S.PROVIDER_GENERIC_FIELD9_TXT
		, S.PROVIDER_GENERIC_FIELD10_TXT
		, S.PROVIDER_GENERIC_REF11_ID
		, S.PROVIDER_GENERIC_REF12_ID
	) VALUES (
		ST.PROVIDER_ID
		, ST.PROVIDER_ID_EXT
		, ST.DEA_ID_EXT
		, ST.NPI_ID_EXT
		, ST.STATUS_CD
		, ST.DBA_NAME
		, ST.TAX_NAME
		, ST.FIRST_NAME_CANNON
		, ST.FIRST_NAME_SOUNDLIKE
		, ST.TITLE
		, ST.FIRST_NAME
		, ST.LAST_NAME
		, ST.MIDDLE_NAME
		, ST.NAME_SUFFIX
		, ST.SSN
		, ST.PCP_IND
		, ST.PROV_ENRL_CNT_STATE
		, ST.CREATE_TS
		, ST.CREATED_BY
		, ST.UPDATE_TS
		, ST.UPDATED_BY
		, ST.PHONE
		, ST.FAX
		, ST.EMAIL
		, ST.NPI_TYPE_CD
		, ST.LAST_NAME_CANNON
		, ST.LAST_NAME_SOUNDLIKE
		, ST.LICENSE_NUMBER
		, ST.PROVIDER_GENDER_CD
		, ST.OUT_OF_STATE_IND
		, ST.MEDICAID_IND
		, ST.TYPE_CD
		, ST.CLASSIFICATION_CD
		, ST.PROVIDER_GENERIC_FIELD1_DATE
		, ST.PROVIDER_GENERIC_FIELD2_DATE
		, ST.PROVIDER_GENERIC_FIELD3_NUM
		, ST.PROVIDER_GENERIC_FIELD4_NUM
		, ST.PROVIDER_GENERIC_FIELD5_TXT
		, ST.PROVIDER_GENERIC_FIELD6_TXT
		, ST.PROVIDER_GENERIC_FIELD7_TXT
		, ST.PROVIDER_GENERIC_FIELD8_TXT
		, ST.PROVIDER_GENERIC_FIELD9_TXT
		, ST.PROVIDER_GENERIC_FIELD10_TXT
		, ST.PROVIDER_GENERIC_REF11_ID
		, ST.PROVIDER_GENERIC_REF12_ID
	)	
     Log Errors INTO ERRLOG_PROVIDER ('PROVIDER_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.PROVIDER_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_PROVIDER', PROVIDER_ID
      FROM ERRLOG_PROVIDER
     WHERE Ora_Err_Tag$ = 'PROVIDER_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
 --      SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.PROVIDER_UPD', 1, v_desc, v_code, 'EMRS_D_PROVIDER');

      COMMIT;
END PROVIDER_UPD;


PROCEDURE NETWORK_LANGUAGE_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_NETWORK_LANGUAGE WHERE ora_err_tag$ = 'NETWORK_LANGUAGE_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'NETWORK_LANGUAGE_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_NETWORK_LANGUAGE s
   USING EMRS_S_NETWORK_LANGUAGE_STG ST
	ON (s.NETWORK_ID = st.NETWORK_ID AND S.LANGUAGE_TYPE_CD = ST.LANGUAGE_TYPE_CD)
    WHEN MATCHED THEN UPDATE
     SET s.PROVIDER_SPEAKS_IND=st.PROVIDER_SPEAKS_IND
		,s.CREATE_TS=st.CREATE_TS
		,s.CREATED_BY=st.CREATED_BY
		,s.UPDATE_TS=st.UPDATE_TS
		,s.UPDATED_BY=st.UPDATED_BY
		,s.LANGUAGE_EXT_CD=st.LANGUAGE_EXT_CD
 WHEN NOT MATCHED THEN INSERT (	
		S.NETWORK_ID
		, S.LANGUAGE_TYPE_CD
		, S.PROVIDER_SPEAKS_IND
		, S.CREATE_TS
		, S.CREATED_BY
		, S.UPDATE_TS
		, S.UPDATED_BY
		, S.LANGUAGE_EXT_CD
		) VALUES (
		 ST.NETWORK_ID
		, ST.LANGUAGE_TYPE_CD
		, ST.PROVIDER_SPEAKS_IND
		, ST.CREATE_TS
		, ST.CREATED_BY
		, ST.UPDATE_TS
		, ST.UPDATED_BY
		, ST.LANGUAGE_EXT_CD
	)	
     Log Errors INTO ERRLOG_NETWORK_LANGUAGE ('NETWORK_LANGUAGE_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_LANGUAGE_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_NETWORK_LANGUAGE', NETWORK_ID ||', '||LANGUAGE_TYPE_CD
      FROM ERRLOG_NETWORK_LANGUAGE
     WHERE Ora_Err_Tag$ = 'NETWORK_LANGUAGE_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--        , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_LANGUAGE_UPD', 1, v_desc, v_code, 'EMRS_D_NETWORK_LANGUAGE');

      COMMIT;
END NETWORK_LANGUAGE_UPD;

PROCEDURE PANEL_LIMIT_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_PANEL_LIMIT WHERE ora_err_tag$ = 'PANEL_LIMIT_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'PANEL_LIMIT_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_PANEL_LIMIT s
   USING EMRS_S_PANEL_LIMIT_STG ST
	ON (s.PANEL_LIMIT_ID = st.PANEL_LIMIT_ID)
    WHEN MATCHED THEN UPDATE
     SET S.NETWORK_ID=ST.NETWORK_ID
        ,s.PROVIDER_ID=st.PROVIDER_ID
		,s.PANEL_SIZE=st.PANEL_SIZE
		,s.ENROLLED_COUNT=st.ENROLLED_COUNT
		,s.HOLD_CD=st.HOLD_CD
		,s.CREATE_TS=st.CREATE_TS
		,s.CREATED_BY=st.CREATED_BY
		,s.UPDATE_TS=st.UPDATE_TS
		,s.UPDATED_BY=st.UPDATED_BY
		,s.TYPE_CD=st.TYPE_CD
		,s.PLAN_ID=st.PLAN_ID
 WHEN NOT MATCHED THEN INSERT (	
		  S.PANEL_LIMIT_ID
		, S.NETWORK_ID
		, S.PROVIDER_ID
		, S.PANEL_SIZE
		, S.ENROLLED_COUNT
		, S.HOLD_CD
		, S.CREATE_TS
		, S.CREATED_BY
		, S.UPDATE_TS
		, S.UPDATED_BY
		, S.TYPE_CD
		, S.PLAN_ID
		) VALUES (
		  ST.PANEL_LIMIT_ID
		, ST.NETWORK_ID
		, ST.PROVIDER_ID
		, ST.PANEL_SIZE
		, ST.ENROLLED_COUNT
		, ST.HOLD_CD
		, ST.CREATE_TS
		, ST.CREATED_BY
		, ST.UPDATE_TS
		, ST.UPDATED_BY
		, ST.TYPE_CD
		, ST.PLAN_ID
	)	
     Log Errors INTO ERRLOG_PANEL_LIMIT ('PANEL_LIMIT_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.PANEL_LIMIT_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_PANEL_LIMIT', PANEL_LIMIT_ID
      FROM ERRLOG_PANEL_LIMIT
     WHERE Ora_Err_Tag$ = 'PANEL_LIMIT_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.PANEL_LIMIT_UPD', 1, v_desc, v_code, 'EMRS_D_PANEL_LIMIT');

      COMMIT;
END PANEL_LIMIT_UPD;


PROCEDURE NETWORK_OFFICE_HOURS_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_NETWORK_OFFICE_HOURS WHERE ora_err_tag$ = 'NETWORK_OFFICE_HOURS_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'NETWORK_OFFICE_HOURS_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_NETWORK_OFFICE_HOURS s
   USING EMRS_S_NETWORK_OFFICE_HOURS_STG ST
   ON (s.NETWORK_OFFICE_HOURS_ID = st.NETWORK_OFFICE_HOURS_ID)
    WHEN MATCHED THEN UPDATE
     SET S.DAY_OF_WEEK=ST.DAY_OF_WEEK
		, S.OPEN_FROM=ST.OPEN_FROM
		, S.CLOSE_AT=ST.OPEN_FROM
		, S.CREATED_BY=ST.OPEN_FROM
		, S.CREATE_TS=ST.OPEN_FROM
		, S.UPDATED_BY=ST.OPEN_FROM
		, S.UPDATE_TS=ST.OPEN_FROM
		, S.NETWORK_ID=ST.OPEN_FROM
 WHEN NOT MATCHED THEN INSERT (	
		  S.NETWORK_OFFICE_HOURS_ID
		, S.DAY_OF_WEEK
		, S.OPEN_FROM
		, S.CLOSE_AT
		, S.CREATED_BY
		, S.CREATE_TS
		, S.UPDATED_BY
		, S.UPDATE_TS
		, S.NETWORK_ID
		) VALUES (
		  ST.NETWORK_OFFICE_HOURS_ID
		, ST.DAY_OF_WEEK
		, ST.OPEN_FROM
		, ST.CLOSE_AT
		, ST.CREATED_BY
		, ST.CREATE_TS
		, ST.UPDATED_BY
		, ST.UPDATE_TS
		, ST.NETWORK_ID
	)	
     Log Errors INTO ERRLOG_NETWORK_OFFICE_HOURS ('NETWORK_OFFICE_HOURS_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_OFFICE_HOURS_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_NETWORK_OFFICE_HOURS', NETWORK_OFFICE_HOURS_ID
      FROM ERRLOG_NETWORK_OFFICE_HOURS
     WHERE Ora_Err_Tag$ = 'NETWORK_OFFICE_HOURS_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_OFFICE_HOURS_UPD', 1, v_desc, v_code, 'EMRS_D_NETWORK_OFFICE_HOURS');

      COMMIT;
END NETWORK_OFFICE_HOURS_UPD;


PROCEDURE NETWORK_SPECIALTY_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_NETWORK_SPECIALTY WHERE ora_err_tag$ = 'NETWORK_SPECIALTY_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'NETWORK_SPECIALTY_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_NETWORK_SPECIALTY s
   USING EMRS_S_NETWORK_SPECIALTY_STG ST
    ON (s.NETWORK_ID = st.NETWORK_ID AND  S.SPECIALTY_TYPE_CD = ST.SPECIALTY_TYPE_CD)
    WHEN MATCHED THEN UPDATE
     SET S.CREATE_TS = ST.CREATE_TS
		, S.CREATED_BY = ST.CREATED_BY
		, S.UPDATE_TS = ST.UPDATE_TS
		, S.UPDATED_BY = ST.UPDATED_BY
		, S.SPECIALTY_EXT_CD = ST.SPECIALTY_EXT_CD
 WHEN NOT MATCHED THEN INSERT (	
		S.NETWORK_ID
		, S.SPECIALTY_TYPE_CD
		, S.CREATE_TS
		, S.CREATED_BY
		, S.UPDATE_TS
		, S.UPDATED_BY
		, S.SPECIALTY_EXT_CD
		) VALUES (
		  ST.NETWORK_ID
		, ST.SPECIALTY_TYPE_CD
		, ST.CREATE_TS
		, ST.CREATED_BY
		, ST.UPDATE_TS
		, ST.UPDATED_BY
		, ST.SPECIALTY_EXT_CD

	)	
     Log Errors INTO ERRLOG_NETWORK_SPECIALTY ('NETWORK_SPECIALTY_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_SPECIALTY_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_NETWORK_SPECIALTY', NETWORK_ID ||', '||SPECIALTY_TYPE_CD
      FROM ERRLOG_NETWORK_SPECIALTY
     WHERE Ora_Err_Tag$ = 'NETWORK_SPECIALTY_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.NETWORK_SPECIALTY_UPD', 1, v_desc, v_code, 'EMRS_D_NETWORK_SPECIALTY');

      COMMIT;
END NETWORK_SPECIALTY_UPD;

PROCEDURE SELECTION_TXN_STAT_HIST_UPD
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_ins_cnt number;
    v_upd_cnt NUMBER;
    v_err_cnt number;

BEGIN

    DELETE FROM ERRLOG_SELECTN_TXN_STAT_HIST WHERE ora_err_tag$ = 'SELECTION_TXN_STAT_HIST_UPD';

--    INSERT INTO Corp_Etl_Job_Statistics (Job_id, Job_Name, Job_Status_CD, Job_Start_Date)
--    VALUES (SEQ_JOB_ID.Nextval, 'SELECTION_TXN_STAT_HIST_UPD','STARTED',SYSDATE)
--    RETURNING JOB_ID INTO v_job_id;

   MERGE /*+ Enable_Parallel_Dml Parallel */
    INTO  EMRS_D_SELECTN_TXN_STAT_HIST s
   USING EMRS_S_SELECTN_TXN_STAT_HIST_STG ST
    ON (s.SELECTION_TXN_STATUS_HIST_ID = st.SELECTION_TXN_STATUS_HIST_ID)
    WHEN MATCHED THEN UPDATE
     SET S.SELECTION_TXN_ID = ST.SELECTION_TXN_ID
     	, S.CREATE_TS = ST.CREATE_TS
		, S.CREATED_BY = ST.CREATED_BY
		, S.STATUS_CD = ST.STATUS_CD
 WHEN NOT MATCHED THEN INSERT (	
		S.SELECTION_TXN_STATUS_HIST_ID
		, S.SELECTION_TXN_ID
		, S.STATUS_CD
		, S.CREATED_BY
		, S.CREATE_TS
		) VALUES (
		  ST.SELECTION_TXN_STATUS_HIST_ID
		, ST.SELECTION_TXN_ID
		, ST.STATUS_CD
		, ST.CREATED_BY
		, ST.CREATE_TS
	)	
    Log Errors INTO ERRLOG_SELECTN_TXN_STAT_HIST ('SELECTION_TXN_STAT_HIST_UPD') Reject Limit Unlimited;

    v_upd_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET Job_end_date = SYSDATE
--         , RECORD_COUNT = v_upd_cnt
--         , PROCESSED_COUNT = v_upd_cnt
--         , RECORD_INSERTED_COUNT = v_upd_cnt
--         , JOB_STATUS_CD = 'COMPLETED'
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

    INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name,driver_key_number)
    SELECT c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_TXN_STAT_HIST_UPD', 1, Ora_Err_Mesg$, ora_err_number$, 'EMRS_D_SELECTN_TXN_STAT_HIST', SELECTION_TXN_STATUS_HIST_ID
      FROM ERRLOG_SELECTN_TXN_STAT_HIST
     WHERE Ora_Err_Tag$ = 'SELECTION_TXN_STAT_HIST_UPD';

    v_err_cnt := SQL%RowCount;

--    UPDATE CORP_ETL_JOB_STATISTICS
--       SET ERROR_COUNT = v_err_cnt
--         , RECORD_COUNT = v_upd_cnt + v_err_cnt
--         , PROCESSED_COUNT = v_upd_cnt + v_err_cnt
--     WHERE JOB_ID =  v_job_id;

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      v_code := SQLCODE;
      v_desc := SQLERRM;

      INSERT INTO corp_etl_error_log( err_level, job_name, process_name, nr_of_error, error_desc , error_codes, driver_table_name)
      VALUES( c_critical, con_pkg, 'LAEB_SELECT_ETL_PKG.SELECTION_TXN_STAT_HIST_UPD', 1, v_desc, v_code, 'EMRS_D_SELECTN_TXN_STAT_HIST');

      COMMIT;
END SELECTION_TXN_STAT_HIST_UPD;

PROCEDURE SELECTION_SEGMENT_SYNC
IS
    v_job_id CORP_ETL_JOB_STATISTICS.Job_Id%Type;
    v_upd_cnt number;
    v_err_cnt number;
    v_max_process_ts DATE;
    v_processed_to_app_ts DATE;
    v_processed_cnt NUMBER :=0;
    v_stg_cnt NUMBER :=0;
BEGIN
   --get max processed date and count of records processed
   FOR p IN (SELECT MAX(processed_to_app_ts) processed_to_app_ts, count(1) ss_stg_count
             FROM emrs_etl_selection_segment_stg)
   LOOP
     v_processed_to_app_ts := p.processed_to_app_ts;
     v_stg_cnt := p.ss_stg_count;
   END LOOP;
   
   --get max processed date
   FOR m IN (SELECT MAX(processed_to_app_ts) processed_to_app_ts
             FROM emrs_etl_selection_segment)
   LOOP
     v_max_process_ts := m.processed_to_app_ts;
   END LOOP;
   
   --get number of records inserted into selection segment today
   FOR s IN(SELECT COUNT(1) ss_processed_count
            FROM emrs_d_selection_segment  ss
            WHERE EXISTS(SELECT 1 FROM emrs_etl_selection_segment_stg e WHERE ss.client_id = e.matched_client_id AND TRUNC(ss.create_ts) = TRUNC(e.processed_to_app_ts)) ) LOOP
     v_processed_cnt := s.ss_processed_count;       
   END LOOP;         
   
   --if the max date in emrs_etl_selection_segment is not the same as in the stage table then that means the synch has not happened yet
   IF v_max_process_ts IS NULL OR v_processed_to_app_ts != v_max_process_ts THEN
     --check if selection segment table has the records from the etl selection segment table
     --if the etl selection segment and selection segment tables are synched then remove old segments based on the client ids in etl_l_selection segment table
     IF v_stg_cnt = v_processed_cnt THEN
       DELETE FROM emrs_d_selection_segment ss
       WHERE EXISTS(SELECT 1 FROM emrs_etl_selection_segment_stg e WHERE ss.client_id = e.matched_client_id AND TRUNC(ss.create_ts) < TRUNC(e.processed_to_app_ts));
       
       --once the records are deleted, move the records from the stg to the main emrs_etl_selection_segment table
       INSERT /*+ Enable_Parallel_Dml Parallel */ 
       INTO emrs_etl_selection_segment(etl_selection_segment_id,job_id,row_id,program_type_cd,plan_id_ext,plan_type_cd,matched_client_id,matched_plan_id,processed_to_app_ts,contract_id,ss_generic_field5_txt)       
       SELECT etl_selection_segment_id,job_id,row_id,program_type_cd,plan_id_ext,plan_type_cd,matched_client_id,matched_plan_id,processed_to_app_ts,contract_id,ss_generic_field5_txt
       FROM emrs_etl_selection_segment_stg;
       
       COMMIT;
              
       INSERT /*+ Enable_Parallel_Dml Parallel */ 
       INTO emrs_etl_selection_segment(etl_selection_segment_id,job_id,row_id,program_type_cd,plan_id_ext,plan_type_cd,matched_client_id,matched_plan_id,processed_to_app_ts,contract_id,ss_generic_field5_txt)
       SELECT selection_segment_id,1,rownum,program_type_cd,plan_id_ext,plan_type_cd,client_id,plan_id,TRUNC(v_processed_to_app_ts),contract_id,ss_generic_field5_txt
       FROM emrs_d_selection_segment ss
       WHERE TRUNC(ss.create_ts) != TRUNC(v_processed_to_app_ts)
       AND EXISTS(select 1 from emrs_d_selection_segment s where ss.client_id = s.client_id and TRUNC(s.create_ts) = TRUNC(v_processed_to_app_ts));
       /*WHERE EXISTS(SELECT 1 FROM emrs_d_elig_segment_details sd where ss.client_id = sd.client_id and sd.segment_type_cd = 'MI' and sd.start_date = ss.start_date --and sd.start_date = sd.end_date 
                    AND TRUNC(sd.record_date) >= TRUNC(v_processed_to_app_ts)
                    AND TO_NUMBER(TO_CHAR(ss.create_ts,'yyyymmddhh24mi')) < TO_NUMBER(TO_CHAR(sd.record_date,'yyyymmddhh24mi')) );*/
       
       /*DELETE FROM emrs_d_selection_segment ss
       WHERE EXISTS(SELECT 1 FROM emrs_d_elig_segment_details sd where ss.client_id = sd.client_id and sd.segment_type_cd = 'MI' and sd.start_date = ss.start_date --and sd.start_date = sd.end_date 
                    AND TRUNC(sd.record_date) >= TRUNC(v_processed_to_app_ts)
                    AND TO_NUMBER(TO_CHAR(ss.create_ts,'yyyymmddhh24mi')) < TO_NUMBER(TO_CHAR(sd.record_date,'yyyymmddhh24mi')) );*/
       
       DELETE FROM emrs_d_selection_segment e
       WHERE TRUNC(e.create_ts) != TRUNC(v_processed_to_app_ts)
       AND EXISTS(select 1 from emrs_d_selection_segment s where e.client_id = s.client_id and TRUNC(s.create_ts) = TRUNC(v_processed_to_app_ts));

       COMMIT;     
       
       --INSERT /*+ Enable_Parallel_Dml Parallel */ 
       /*INTO emrs_etl_selection_segment(etl_selection_segment_id,job_id,row_id,program_type_cd,plan_id_ext,plan_type_cd,matched_client_id,matched_plan_id,processed_to_app_ts,contract_id,ss_generic_field5_txt)
       SELECT selection_segment_id,2,rownum,program_type_cd,plan_id_ext,plan_type_cd,client_id,plan_id,TRUNC(v_processed_to_app_ts),contract_id,ss_generic_field5_txt
       FROM emrs_d_selection_segment ss       
       WHERE EXISTS(SELECT 1 FROM emrs_etl_override_response r where ss.client_id = r.matched_client_id AND TRUNC(ss.create_ts) < TRUNC(v_processed_to_app_ts));
       
       DELETE FROM emrs_d_selection_segment ss
       WHERE EXISTS(SELECT 1 FROM emrs_etl_override_response r where ss.client_id = r.matched_client_id AND TRUNC(ss.create_ts) < TRUNC(v_processed_to_app_ts));
       
       COMMIT; */
       
     END IF;
   
   END IF;
   
   
END;


END;
/
GRANT EXECUTE ON MAXDAT_LAEB.LAEB_SELECT_ETL_PKG TO MAXDAT_LAEB_PFP_E;

