-- Objects for IBR 

-- Sequences 

CREATE SEQUENCE SEQ_SIB_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_SIBRPR_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_SIBRD_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_SIBRRI_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_DIDR_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_DIST_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

-- dimension tables

CREATE TABLE D_IBR_DISPOSITION_REASON
  (
    DIDR_ID    	   		        	   NUMBER (20) NOT NULL ,
    DISPOSITION_REASON_ID          NUMBER (20) NOT NULL ,
    DISPOSITION_REASON_CODE        VARCHAR2(255) ,
    DISPOSITION_REASON_NAME        VARCHAR2(255),
    DISPOSITION_REASON_SORT_ORDER  NUMBER(10),
    DISPOSITION_REASON_ACTIVE_FLAG NUMBER (1),
    CREATE_DT                   DATE NOT NULL ,
    UPDATE_DT                   DATE NOT NULL
  ) TABLESPACE MAXDAT_DATA;

ALTER TABLE D_IBR_DISPOSITION_REASON ADD CONSTRAINT DIDR_ID_PK PRIMARY KEY (DIDR_ID);

CREATE OR REPLACE TRIGGER BIU_D_IBR_DISPOSITION_REASON
    BEFORE INSERT OR UPDATE ON D_IBR_DISPOSITION_REASON
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.DIDR_ID IS NULL THEN 
          SELECT SEQ_DIDR_ID.NEXTVAL INTO :NEW.DIDR_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
END IF;
:NEW.UPDATE_DT := SYSDATE;
END;  
/

CREATE TABLE D_IBR_STATUS_TYPE
  (
    DIST_ID    	   		    NUMBER (20) NOT NULL ,
    STATUS_ID               NUMBER (20) NOT NULL ,
    STATUS_CODE             VARCHAR2(255) ,
    STATUS_NAME             VARCHAR2(255),
    STATUS_DISPLAY_ORDER    NUMBER(10),
    STATUS_ACTIVE_FLAG      NUMBER(1),
    CREATE_DT               DATE NOT NULL ,
    UPDATE_DT               DATE NOT NULL
  ) TABLESPACE MAXDAT_DATA;

ALTER TABLE D_IBR_STATUS_TYPE ADD CONSTRAINT DIST_ID_PK PRIMARY KEY (DIST_ID) ;

CREATE OR REPLACE TRIGGER BIU_D_IBR_STATUS_TYPE
    BEFORE INSERT OR UPDATE ON D_IBR_STATUS_TYPE
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.DIST_ID IS NULL THEN 
          SELECT SEQ_DIST_ID.NEXTVAL INTO :NEW.DIST_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
END IF;
:NEW.UPDATE_DT := SYSDATE;
END;  
/

CREATE TABLE S_IBR
(
  SIB_ID					   NUMBER(20) NOT NULL,	
  IBR_ID                       NUMBER(20) NOT NULL,
  ID_WORKFLOW                  NUMBER(20),
  CA_APPEAL_NUMBER             VARCHAR2(15),
  CASE_NUMBER                  VARCHAR2(14),
  CASE_RECEIVED_DATE           DATE,
  CLAIM_NUMBER                 VARCHAR2(255),
  COPY_IBR                     NUMBER(1),
  C_DATE                       DATE,
  DATE_LETTER_SENT             DATE,
  DATE_OF_ASSIGNMENT_LETTER    DATE,
  DATE_SECOND_REVIEW           DATE,
  DBA                          VARCHAR2(255),
  DECISION_DATE                DATE,
  DISPOSITION_REASON           NUMBER(10),
  END_DATE_SERVICE             DATE,
  FINAL_DETERMINATION_LETTER_DUE_DATE DATE,
  IBR_STATUS                   NUMBER(10),
  INJURY_DATE                  DATE,
  IS_SUBMITTED                 NUMBER(1),
  JCN_OR_WORKERS_COMPENSATION  VARCHAR2(20),
  MAILED_DOCUMENTS             NUMBER(1),
  OVERALL_DISP                 NUMBER(10),
  PROVIDER_TYPE                VARCHAR2(255),
  REASON                       VARCHAR2(510),
  REFERENCE_NUMBER             VARCHAR2(15),
  REFERENCE_NUMBER_2           VARCHAR2(15),
  START_DATE_SERVICE           DATE,
  AMOUNT_BILLED                NUMBER(18,2),
  AMOUNT_DISPUTE               NUMBER(18,2),
  AMOUNT_PAID                  NUMBER(18,2),
  TOTAL_AMOUNT_REWARDED        NUMBER(18,2),
  TREATMENT_AUTHORIZED         NUMBER(1),
  CODES_TO_BE_REVIEWED         VARCHAR2(4000), 
  CREATE_DT                    DATE,
  CREATED_BY                   VARCHAR2(100),
  LAST_UPDATE_DT               DATE,
  LAST_UPDATED_BY              VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );

ALTER TABLE S_IBR ADD CONSTRAINT SIB_ID_PK PRIMARY KEY (SIB_ID);
ALTER TABLE S_IBR ADD CONSTRAINT S_IBR_ID_UN UNIQUE (IBR_ID);

CREATE OR REPLACE TRIGGER BIU_S_IBR
    BEFORE INSERT OR UPDATE ON S_IBR
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIB_ID IS NULL THEN 
          SELECT SEQ_SIB_ID.NEXTVAL INTO :NEW.SIB_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

CREATE TABLE S_IBR_PRELIMINARY_REVIEW
(
  SIBRPR_ID					         NUMBER(20) NOT NULL,	
  IBR_PRELIMINARY_REVIEW_ID  NUMBER(20) NOT NULL,
  IBR_ID                     NUMBER(20),
  DATE_TO_DWC                DATE,
  DATE_ELIGDETERM            DATE,
  DATE_PRELIM_DETERM         DATE,
  DATE_NOTIFPRELIMISSUE      DATE,
  PRELIMDETERM               NUMBER(10), 
  DATE_PRELIM_START          DATE,
  DOCUMENT_SOURCE            VARCHAR2(255),
  DWCELIGDETERM              VARCHAR2(255), 
  PRELIMINARY_REVIEW_ISSUE   VARCHAR2(255),
  CREATE_DT                  DATE,
  CREATED_BY                 VARCHAR2(100),
  LAST_UPDATE_DT             DATE,
  LAST_UPDATED_BY            VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );
  
ALTER TABLE S_IBR_PRELIMINARY_REVIEW ADD CONSTRAINT SIBRPR_ID_PK PRIMARY KEY (SIBRPR_ID) ;  

CREATE INDEX S_IBRPR_IBR_ID_FK ON S_IBR_PRELIMINARY_REVIEW (IBR_ID) TABLESPACE MAXDAT_INDX;

CREATE OR REPLACE TRIGGER BIU_S_IBR_PRELIMINARY_REVIEW
    BEFORE INSERT OR UPDATE ON S_IBR_PRELIMINARY_REVIEW
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIBRPR_ID IS NULL THEN 
          SELECT SEQ_SIBRPR_ID.NEXTVAL INTO :NEW.SIBRPR_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

CREATE TABLE S_IBR_DECISION
(
  SIBRD_ID				       NUMBER(20) NOT NULL,	
  IBR_DECISION_ID        NUMBER(20) NOT NULL,
  IBR_ID                 NUMBER(20),
  DATE_LETTER_SENT       DATE,
  DECISION_DATE          DATE,
  DISPOSITION_REASON     NUMBER(10),
  TOTAL_AMOUNT_REWARDED  NUMBER(18,2),
  CREATE_DT              DATE,
  CREATED_BY             VARCHAR2(100),
  LAST_UPDATE_DT         DATE,
  LAST_UPDATED_BY        VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );
  
ALTER TABLE S_IBR_DECISION ADD CONSTRAINT SIBRD_ID_PK PRIMARY KEY (SIBRD_ID);  

CREATE INDEX S_IBRD_IBR_ID_FK ON S_IBR_DECISION (IBR_ID) TABLESPACE MAXDAT_INDX;

CREATE OR REPLACE TRIGGER BIU_S_IBR_DECISION
    BEFORE INSERT OR UPDATE ON S_IBR_DECISION
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIBRD_ID IS NULL THEN 
          SELECT SEQ_SIBRD_ID.NEXTVAL INTO :NEW.SIBRD_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

CREATE TABLE S_IBR_REQUEST_INFORMATION
(
  SIBRRI_ID				         NUMBER(20) NOT NULL,	
  REQUEST_INFORMATION_ID   NUMBER(20) NOT NULL,
  IBR_ID                   NUMBER(20),
  CATEGORY_OF_DATA         VARCHAR2(2),
  DATE_EVALUATED           DATE,
  DATE_EXPECTED_BACK       DATE,
  DATE_RETURNED            DATE,
  DETAILS                  VARCHAR2(100),
  RE_REQUEST_REQUIRED      NUMBER(1),
  REQUEST_DATE             DATE,
  REQUESTED_OF             VARCHAR2(255),
  REVIEW_OUTCOME           NUMBER(10),
  RI_TYPE                  NUMBER(10),
  DATE_RI_LETTER_MAILED    DATE,
  DUE_DATE_FOR_RI_RESPONSE DATE,
  RI_LETTER_TYPE           VARCHAR2(255),  
  CREATE_DT                DATE,
  CREATED_BY               VARCHAR2(100),
  LAST_UPDATE_DT           DATE,
  LAST_UPDATED_BY          VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );
  
ALTER TABLE S_IBR_REQUEST_INFORMATION ADD CONSTRAINT SIBRRI_ID_PK PRIMARY KEY (SIBRRI_ID) ;  

CREATE INDEX SIBRRI_IBR_ID_FK ON S_IBR_REQUEST_INFORMATION (IBR_ID) TABLESPACE MAXDAT_INDX;

CREATE OR REPLACE TRIGGER BIU_S_IBR_REQUEST_INFORMATION
    BEFORE INSERT OR UPDATE ON S_IBR_REQUEST_INFORMATION
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIBRRI_ID IS NULL THEN 
          SELECT SEQ_SIBRRI_ID.NEXTVAL INTO :NEW.SIBRRI_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

-- Grants

grant select, insert, update on D_IBR_DISPOSITION_REASON to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on D_IBR_DISPOSITION_REASON to MAXDAT_OLTP_SIUD;
grant select on D_IBR_DISPOSITION_REASON to MAXDAT_READ_ONLY;  

grant select, insert, update on D_IBR_STATUS_TYPE to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on D_IBR_STATUS_TYPE to MAXDAT_OLTP_SIUD;
grant select on D_IBR_STATUS_TYPE to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR to MAXDAT_OLTP_SIUD;
grant select on S_IBR  to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR_PRELIMINARY_REVIEW to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR_PRELIMINARY_REVIEW to MAXDAT_OLTP_SIUD;
grant select on S_IBR_PRELIMINARY_REVIEW to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR_DECISION to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR_DECISION to MAXDAT_OLTP_SIUD;
grant select on S_IBR_DECISION to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR_REQUEST_INFORMATION to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR_REQUEST_INFORMATION to MAXDAT_OLTP_SIUD;
grant select on S_IBR_REQUEST_INFORMATION to MAXDAT_READ_ONLY;  

-- Create Semantic View

CREATE OR REPLACE VIEW D_IBR_DISPOSITION_REASON_SV AS
SELECT *   FROM D_IBR_DISPOSITION_REASON WITH READ ONLY;

CREATE OR REPLACE VIEW D_IBR_STATUS_TYPE_SV AS
SELECT *   FROM D_IBR_STATUS_TYPE WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_DECISION_SV AS
SELECT D.* 
      ,RANK() OVER( PARTITION BY IBR_ID ORDER BY IBR_DECISION_ID DESC) RNK
  FROM S_IBR_DECISION D WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_SV AS
SELECT IB.*   
	 , CASE WHEN D.DISPOSITION_REASON = 2446972
	  	    THEN '1' ELSE '0' END AS WITHDRAWALS_IBR_FLAG
	 , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859)
	  	    THEN '1' ELSE '0' END AS COMPLETED_IBR_FLAG		
	 , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859) AND (D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER) <= 60
	  	    THEN '1' ELSE '0' END AS COMPLETED_IBR_WITHIN_SLA_FLAG					
	 , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859) AND (D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER) > 60
	  	    THEN '1' ELSE '0' END AS COMPLETED_IBR_OUTSIDE_SLA_FLAG				
	 , CASE WHEN D.DISPOSITION_REASON = 2432857
	  	    THEN '1' ELSE '0' END AS OVERTURNED_FLAG							
   , D.DATE_LETTER_SENT AS DECISION_LETTER_DATE
	 , D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER AS DAYS_TO_COMPLETE
  FROM S_IBR IB 
  LEFT OUTER JOIN S_IBR_DECISION_SV D ON IB.IBR_ID = D.IBR_ID AND D.RNK = 1
  WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_PRELIMINARY_REVIEW_SV AS
SELECT PR.* 
	   , CASE WHEN DOCUMENT_SOURCE = 'code.providerdocuments' 
			  THEN '1' ELSE '0' END AS PR_POTENTIALLY_INELIGIBLE_FLAG
	   , CASE WHEN DOCUMENT_SOURCE = 'code.providerdocuments' AND D.DISPOSITION_REASON=15854
			  THEN '1' ELSE '0' END AS PR_DETERMINED_INELIGIBLE_FLAG
	   , CASE WHEN DOCUMENT_SOURCE = 'code.cadocuments' 
			  THEN '1' ELSE '0' END AS CA_POTENTIALLY_INELIGIBLE_FLAG
	   , CASE WHEN DOCUMENT_SOURCE = 'code.cadocuments' AND D.DISPOSITION_REASON=15854
			  THEN '1' ELSE '0' END AS CA_DETERMINED_INELIGIBLE_FLAG
     , D.DATE_LETTER_SENT AS DECISION_LETTER_DATE
  FROM S_IBR_PRELIMINARY_REVIEW PR 
  LEFT OUTER JOIN S_IBR_DECISION_SV D ON PR.IBR_ID = D.IBR_ID AND D.RNK = 1
  WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_REQUEST_INFORMATION_SV AS
SELECT RI.*
	   , CASE WHEN RI_LETTER_TYPE = 'riLetterType.Opportunity' AND LOWER(RI.DETAILS) LIKE 'cons%' 
			  THEN '1' ELSE '0' END AS AGGREGATED_IBR_FLAG
	   , CASE WHEN RI_LETTER_TYPE = 'riLetterType.disaggregation' AND LOWER(RI.DETAILS) <> 'no' 
			  THEN '1' ELSE '0' END AS DISAGGREGATED_IBR_FLAG			  
  FROM S_IBR_REQUEST_INFORMATION RI WITH READ ONLY;
  
CREATE OR REPLACE VIEW S_IBR_BY_MONTH_REPORT_SV AS
Select DEC_LTR_DT REPORT_MONTH
     , RCVD_CNT IBR_RECEIVED_COUNT
     , ELIG_CNT IBR_ELIGIBLE_COUNT
     , PR_POTENTIALLY_INELIGIBLE_COUNT
     , CA_POTENTIALLY_INELIGIBLE_COUNT
     , PR_DETERMINED_INELIGIBLE_COUNT
     , CA_DETERMINED_INELIGIBLE_COUNT
     , AGGREGATED_IBR_COUNT
     , DISAGGREGATED_IBR_COUNT
     , WITHDRAWALS_IBR_COUNT
     , COMPLETED_IBR_COUNT
     , COMPLETED_IBR_WITHIN_SLA_COUNT
     , COMPLETED_IBR_OUTSIDE_SLA_COUNT
     , OVERTURNED_COUNT
     , AVG_DAYS_TO_COMPLETE
  from 
(
Select TRUNC(DECISION_LETTER_DATE,'MM') DEC_LTR_DT
      ,SUM(WITHDRAWALS_IBR_FLAG) WITHDRAWALS_IBR_COUNT
      ,SUM(COMPLETED_IBR_FLAG) COMPLETED_IBR_COUNT
      ,SUM(COMPLETED_IBR_WITHIN_SLA_FLAG) COMPLETED_IBR_WITHIN_SLA_COUNT
      ,SUM(COMPLETED_IBR_OUTSIDE_SLA_FLAG) COMPLETED_IBR_OUTSIDE_SLA_COUNT
      ,SUM(OVERTURNED_FLAG) OVERTURNED_COUNT
      ,ROUND(AVG(DAYS_TO_COMPLETE)) AVG_DAYS_TO_COMPLETE
  from s_ibr_sv
 Group by TRUNC(DECISION_LETTER_DATE,'MM') ) IBR
 LEFT JOIN (Select TRUNC(IB.CASE_RECEIVED_DATE,'MM') case_rcvd_dt, count(ibr_id) Rcvd_cnt from s_ibr IB group by TRUNC(IB.CASE_RECEIVED_DATE,'MM') ) R on IBR.DEC_LTR_DT = R.CASE_RCVD_DT
 LEFT JOIN (Select TRUNC(IB.DATE_OF_ASSIGNMENT_LETTER,'MM') dt_of_Assgn_ltr, count(ibr_id) elig_cnt from s_ibr IB group by TRUNC(IB.DATE_OF_ASSIGNMENT_LETTER,'MM')) E on IBR.DEC_LTR_DT = E.dt_of_Assgn_ltr
 LEFT JOIN (Select TRUNC(DATE_TO_DWC,'MM') DT_TO_DWC
                , SUM(PR_POTENTIALLY_INELIGIBLE_FLAG) PR_POTENTIALLY_INELIGIBLE_COUNT
                , SUM(CA_POTENTIALLY_INELIGIBLE_FLAG) CA_POTENTIALLY_INELIGIBLE_COUNT
             from S_IBR_PRELIMINARY_REVIEW_SV PR
            Group by TRUNC(DATE_TO_DWC,'MM') ) P1 ON IBR.DEC_LTR_DT = P1.DT_TO_DWC
 LEFT JOIN (Select TRUNC(DECISION_LETTER_DATE,'MM') P2_DEC_LTR_DT
                , SUM(PR_DETERMINED_INELIGIBLE_FLAG) PR_DETERMINED_INELIGIBLE_COUNT
                , SUM(CA_DETERMINED_INELIGIBLE_FLAG) CA_DETERMINED_INELIGIBLE_COUNT
             from S_IBR_PRELIMINARY_REVIEW_SV PR
            Group by TRUNC(DECISION_LETTER_DATE,'MM') ) P2 ON IBR.DEC_LTR_DT = P2.P2_DEC_LTR_DT
 LEFT JOIN (Select TRUNC(REQUEST_DATE,'MM') REQ_DT
                 , SUM(AGGREGATED_IBR_FLAG) AGGREGATED_IBR_COUNT
                 , SUM(DISAGGREGATED_IBR_FLAG) DISAGGREGATED_IBR_COUNT
              from S_IBR_REQUEST_INFORMATION_SV RI
             Group by TRUNC(REQUEST_DATE,'MM')) R ON IBR.DEC_LTR_DT = R.REQ_DT
WITH READ ONLY;

GRANT SELECT ON D_IBR_DISPOSITION_REASON_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON D_IBR_STATUS_TYPE_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_DECISION_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_PRELIMINARY_REVIEW_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_REQUEST_INFORMATION_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_BY_MONTH_REPORT_SV TO MAXDAT_READ_ONLY;

