-- Changes to S_IBR Object

ALTER TABLE S_IBR ADD PROVIDER_NAME VARCHAR(255);
ALTER TABLE S_IBR ADD EMP_COMPANY_NAME VARCHAR(255);
ALTER TABLE S_IBR ADD EMP_ZIP_CODE VARCHAR(10);
ALTER TABLE S_IBR ADD PROVIDER_ZIP_CODE VARCHAR(20);

CREATE OR REPLACE VIEW S_IBR_SV AS
SELECT 
      IB.SIB_ID                       , 
      IB.IBR_ID                       ,
      IB.ID_WORKFLOW                  ,
      IB.CA_APPEAL_NUMBER             ,
      IB.CASE_NUMBER                  ,
      IB.CASE_RECEIVED_DATE           ,
      IB.CLAIM_NUMBER                 ,
      IB.COPY_IBR                     ,
      IB.C_DATE                       ,
      IB.DATE_LETTER_SENT             ,
      IB.DATE_OF_ASSIGNMENT_LETTER    ,
      IB.DATE_SECOND_REVIEW           ,
      IB.DBA                          ,
      IB.DISPOSITION_REASON           ,
      IB.END_DATE_SERVICE             ,
      IB.FINAL_DETERMINATION_LETTER_DUE_DATE ,
      IB.IBR_STATUS                   ,
      IB.INJURY_DATE                  ,
      IB.IS_SUBMITTED                 ,
      IB.JCN_OR_WORKERS_COMPENSATION  ,
      IB.MAILED_DOCUMENTS             ,
      IB.OVERALL_DISP                 ,
	  IB.PROVIDER_NAME				  ,
      IB.PROVIDER_TYPE                ,
	  IB.PROVIDER_ZIP_CODE			  ,
	  Z.PROVIDER_COUNTY			      ,
	  Z.PROVIDER_REGION_CODE		  ,
	  Z.PROVIDER_REGION			      ,
      IB.REASON                       ,
      IB.REFERENCE_NUMBER             ,
      IB.REFERENCE_NUMBER_2           ,
      IB.START_DATE_SERVICE           ,
	  IB.EMP_COMPANY_NAME			  ,
	  IB.EMP_ZIP_CODE				  ,
      IB.AMOUNT_BILLED                ,
      IB.AMOUNT_DISPUTE               ,
      IB.AMOUNT_PAID                  ,
      IB.TREATMENT_AUTHORIZED         ,
      IB.CODES_TO_BE_REVIEWED         , 
      IB.CREATE_DT                    ,
      IB.CREATED_BY                   ,
      IB.LAST_UPDATE_DT               ,
      IB.LAST_UPDATED_BY              

   , CASE WHEN D.DISPOSITION_REASON = 2446972
          THEN '1' ELSE '0' END AS WITHDRAWALS_IBR_FLAG
   , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859)
          THEN '1' ELSE '0' END AS COMPLETED_IBR_FLAG   
   , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859) AND (D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER) <= 60
          THEN '1' ELSE '0' END AS COMPLETED_IBR_WITHIN_SLA_FLAG          
   , CASE WHEN D.DISPOSITION_REASON IN (2432857,2432859) AND (D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER) > 60
          THEN '1' ELSE '0' END AS COMPLETED_IBR_OUTSIDE_SLA_FLAG       
   , CASE WHEN D.DISPOSITION_REASON = 2432857
          THEN '1' ELSE '0' END AS OVERTURNED_FLAG              
     , D.DATE_LETTER_SENT AS DECISION_LETTER_DATE
     , D.DECISION_DATE AS DECISON_DATE
     , D.TOTAL_AMOUNT_REWARDED AS TOTAL_AMOUNT_REWARDED
     , NVL(R.DISPOSITION_REASON_NAME,'Open') AS CASE_DECISION
     , D.DATE_LETTER_SENT - DATE_OF_ASSIGNMENT_LETTER AS DAYS_TO_COMPLETE
  FROM S_IBR IB 
  LEFT OUTER JOIN S_IBR_DECISION_SV D ON IB.IBR_ID = D.IBR_ID AND D.RNK = 1
  LEFT OUTER JOIN D_IBR_DISPOSITION_REASON R ON R.DISPOSITION_REASON_ID = D.DISPOSITION_REASON
  LEFT OUTER JOIN (SELECT COUNTY_ZIP_CODE ZIP_CODE, CLAIM_ADMIN_COUNTY PROVIDER_COUNTY,
						  REGION_CODE PROVIDER_REGION_CODE, INITCAP(REGION_DESC) PROVIDER_REGION
					 FROM D_CA_COUNTY_REGION C
					INNER JOIN D_ZIP_COUNTY Z ON UPPER(CLAIM_ADMIN_COUNTY) = COUNTY_DESC ) Z ON Z.ZIP_CODE = SUBSTR(PROVIDER_ZIP_CODE,1,5)
  WITH READ ONLY;
  
-- Service Type lookup 

CREATE SEQUENCE SEQ_DISRVT_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 2 ;

CREATE TABLE D_IBR_SERVICE_TYPE
  (
    DISRVT_ID  	   		  NUMBER (20) NOT NULL ,
    SERVICE_TYPE_ID       NUMBER (20) NOT NULL ,
    SERVICE_CODE          VARCHAR2(50) ,
    SERVICE_NAME          VARCHAR2(255),
    SERVICE_DISPLAY_ORDER NUMBER(10),
    SERVICE_ACTIVE_FLAG   NUMBER(1),
    CREATE_DT             DATE NOT NULL ,
    UPDATE_DT             DATE NOT NULL
  ) TABLESPACE MAXDAT_DATA;

ALTER TABLE D_IBR_SERVICE_TYPE ADD CONSTRAINT DISRVT_ID_PK PRIMARY KEY (DISRVT_ID) ;

CREATE OR REPLACE TRIGGER BIU_D_IBR_SERVICE_TYPE
    BEFORE INSERT OR UPDATE ON D_IBR_SERVICE_TYPE
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.DISRVT_ID IS NULL THEN 
          SELECT SEQ_DISRVT_ID.NEXTVAL INTO :NEW.DISRVT_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
END IF;
:NEW.UPDATE_DT := SYSDATE;
END;
/
  
-- IBR SERVICE 

CREATE SEQUENCE SEQ_SIBRS_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE TABLE S_IBR_SERVICE
(
  SIBRS_ID				 NUMBER(20) NOT NULL,	
  SERVICE_ID             NUMBER(20) NOT NULL,
  IBR_ID                 NUMBER(20),
  LIST_ORDER     		 NUMBER(10),
  SERVICE_TYPE_ID        NUMBER(20),
  CREATE_DT              DATE,
  CREATED_BY             VARCHAR2(100),
  LAST_UPDATE_DT         DATE,
  LAST_UPDATED_BY        VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );
  
ALTER TABLE S_IBR_SERVICE ADD CONSTRAINT SIBRS_ID_PK PRIMARY KEY (SIBRS_ID);  

CREATE INDEX S_IBRS_IBR_ID_IDX ON S_IBR_SERVICE (IBR_ID) TABLESPACE MAXDAT_INDX;

CREATE OR REPLACE TRIGGER BIU_S_IBR_SERVICE
    BEFORE INSERT OR UPDATE ON S_IBR_SERVICE
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIBRS_ID IS NULL THEN 
          SELECT SEQ_SIBRS_ID.NEXTVAL INTO :NEW.SIBRS_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

-- IBR Procedure Ref
CREATE SEQUENCE SEQ_DIBRPR_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 5 ;

CREATE TABLE D_IBR_PROCEDURE_REF
  (
    PR_ID          NUMBER (20) NOT NULL ,
    PR_CODE        VARCHAR2(50) ,
    PR_DESCRIPTION VARCHAR2(2000) ,
	PR_SRC VARCHAR2(50)
  ) TABLESPACE MAXDAT_DATA;

-- IBR CLAIM

CREATE SEQUENCE SEQ_SIBRC_ID START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE TABLE S_IBR_CLAIM
(
  SIBRC_ID					 NUMBER(20) NOT NULL,	
  IBR_CLAIM_ID				 NUMBER(20) NOT NULL,  
  IBR_ID                     NUMBER(20) NOT NULL,
  AMT_CHARGED                NUMBER(18,2),
  AMT_IN_DISPUTE             NUMBER(18,2),
  AMT_PAID                   NUMBER(18,2),
  APPLICABLE_FEE_SCHEDULE    NUMBER(10),
  CLAIM_NUMBER               VARCHAR2(20),
  CLAIM_TYPE                 NUMBER(10),
  DOS                        DATE,
  DRG                        VARCHAR2(4),
  MODIFIER                   VARCHAR2(2),
  MODIFIER_2                 VARCHAR2(2),
  NON_STANDARD_PAY_INDICATOR NUMBER(1),
  PROC_CODE                  VARCHAR2(6),
  PROC_CODE_SOURCE           NUMBER(10),
  WC_ALLOWED_AMOUNT          NUMBER(18,2),
  ZIP_CODE                   VARCHAR2(5),
  NOTES                      VARCHAR2(700),
  CREATE_DT                  DATE,
  CREATED_BY                 VARCHAR2(100),
  LAST_UPDATE_DT             DATE,
  LAST_UPDATED_BY            VARCHAR2(100)  
)
TABLESPACE MAXDAT_DATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    NEXT 1M
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  );

ALTER TABLE S_IBR_CLAIM ADD CONSTRAINT SIBRC_ID_PK PRIMARY KEY (SIBRC_ID);

CREATE INDEX S_IBRC_IBR_ID_IDX ON S_IBR_CLAIM (IBR_ID) TABLESPACE MAXDAT_INDX;

CREATE OR REPLACE TRIGGER BIU_S_IBR_CLAIM
    BEFORE INSERT OR UPDATE ON S_IBR_CLAIM
    FOR EACH ROW 
    ENABLE 
BEGIN
IF INSERTING AND :NEW.SIBRC_ID IS NULL THEN 
          SELECT SEQ_SIBRC_ID.NEXTVAL INTO :NEW.SIBRC_ID FROM DUAL;      
END IF;
IF INSERTING THEN
  :NEW.CREATE_DT := SYSDATE;
  :NEW.CREATED_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END;  
/

-- Create Semantic View

CREATE OR REPLACE VIEW D_IBR_SERVICE_TYPE_SV AS
SELECT *   FROM D_IBR_SERVICE_TYPE WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_SERVICE_SV AS
SELECT SR.* 
     , I.DECISION_LETTER_DATE
	 , I.CASE_NUMBER
	 , ST.SERVICE_NAME
  FROM S_IBR_SERVICE SR 
  INNER JOIN S_IBR_SV I ON SR.IBR_ID = I.IBR_ID
  LEFT OUTER JOIN D_IBR_SERVICE_TYPE ST ON SR.SERVICE_TYPE_ID = ST.SERVICE_TYPE_ID
  WITH READ ONLY;
  
CREATE OR REPLACE VIEW D_IBR_PROCEDURE_REF_SV AS
SELECT R.PR_ID, R.PR_CODE, R.PR_DESCRIPTION   
   , CASE 
      WHEN R.PR_SRC IS NOT NULL THEN R.PR_SRC
      WHEN R.PR_CODE like 'WC%' THEN 'WC Code' 
      WHEN R.PR_CODE like 'ML%' THEN 'Med-Legal' 
      WHEN LENGTH(R.PR_CODE) = 3 THEN 'DRG'
      WHEN LENGTH(R.PR_CODE) = 4 THEN 'Rev Code'      
      WHEN LENGTH(R.PR_CODE) = 5 AND REGEXP_INSTR(R.PR_CODE,'\d', 1) = 1 THEN 'CPT'     
      ELSE 'HCPCS' END AS PR_SOURCE
  FROM D_IBR_PROCEDURE_REF R WITH READ ONLY;

CREATE OR REPLACE VIEW S_IBR_CLAIM_SV AS
SELECT C.*
	 , R.PR_DESCRIPTION
	 , R.PR_SOURCE
	 , (Select CASE_NUMBER from S_IBR I WHERE I.IBR_ID = C.IBR_ID) AS CASE_NUMBER 
 FROM (SELECT S.* 
	        , CASE WHEN LENGTH(S.DRG) > 2 THEN S.DRG 
                 ELSE UPPER(REGEXP_REPLACE(S.PROC_CODE, '[^0-9A-Za-z]', ''))
                  END AS PROC_CODE_TRANSFORMED
		FROM S_IBR_CLAIM S ) C
  LEFT OUTER JOIN D_IBR_PROCEDURE_REF_SV R ON C.PROC_CODE_TRANSFORMED = R.PR_CODE
  WITH READ ONLY;
  
  -- Grants on Semantic view
  
GRANT SELECT ON D_IBR_SERVICE_TYPE_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON D_IBR_PROCEDURE_REF_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_SERVICE_SV TO MAXDAT_READ_ONLY;
GRANT SELECT ON S_IBR_CLAIM_SV TO MAXDAT_READ_ONLY;
  
-- Grants

grant select, insert, update on D_IBR_SERVICE_TYPE to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on D_IBR_SERVICE_TYPE to MAXDAT_OLTP_SIUD;
grant select on D_IBR_SERVICE_TYPE to MAXDAT_READ_ONLY;  

grant select, insert, update on D_IBR_PROCEDURE_REF to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on D_IBR_PROCEDURE_REF to MAXDAT_OLTP_SIUD;
grant select on D_IBR_PROCEDURE_REF  to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR_SERVICE to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR_SERVICE to MAXDAT_OLTP_SIUD;
grant select on S_IBR_SERVICE to MAXDAT_READ_ONLY;  

grant select, insert, update on S_IBR_CLAIM to MAXDAT_OLTP_SIU;
grant select, insert, update, delete on S_IBR_CLAIM to MAXDAT_OLTP_SIUD;
grant select on S_IBR_CLAIM to MAXDAT_READ_ONLY;  
  