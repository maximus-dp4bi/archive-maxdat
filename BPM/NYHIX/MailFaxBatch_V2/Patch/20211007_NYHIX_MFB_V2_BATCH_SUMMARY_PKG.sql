create or replace Package        NYHIX_MFB_V2_BATCH_SUMMARY_PKG AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL$'; 
  	SVN_REVISION varchar2(20) := '$Revision$'; 
 	SVN_REVISION_DATE varchar2(60) := '$Date$'; 
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author$';


    Procedure Insert_BATCH_SUMMARY;
    Procedure Update_BATCH_SUMMARY;
    Procedure Delete_BATCH_SUMMARY;
	Procedure Load_BATCH_SUMMARY ( p_job_id number default 0);
    Procedure Extract_Target ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Stats_Batch ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Batch_Event ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Document ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Envelope ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Stats_Batch_Module ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Maxdat_Reporting ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
    Procedure Extract_Stats_Form_Type ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null);
	Procedure Post_Error;
	Procedure Insert_Corp_ETL_Job_Statistics;
	Procedure Update_Corp_ETL_Job_Statistics;
	Procedure Extract_CORP_ETL_CONTROL;

END NYHIX_MFB_V2_BATCH_SUMMARY_PKG;
/
show errors

create or replace PACKAGE BODY        NYHIX_MFB_V2_BATCH_SUMMARY_PKG AS

-- Table Relationships
-- Stats_Batch <------>> Stats_Batch_Module <<----> Stats_Batch_Module_Launch
--						
--						 Stats_Batch_Module <------->> Stats_Form_Type 
  
-- BATCH_STATUS Codes
-- 0, 2 - Ready, 
-- 4 - In Progress, 
-- 8 - Suspended, 
-- 32 - Error, 
-- 64 - Completed, 
-- 128 â€“ Reserved, 
-- 512 - locked.

	-- USED FOR THE CORP_ETL_ERROR_LOG
	GV_PARENT_JOB_ID          	NUMBER				:= 0;
	GV_ERROR_CODE				VARCHAR2(50)		:= NULL;
	GV_ERROR_MESSAGE			VARCHAR2(4000)		:= NULL;
	GV_ERROR_FIELD				VARCHAR2(400)		:= NULL;
	GV_ERROR_CODES				VARCHAR2(400)		:= NULL;
	GV_ERR_DATE					DATE				:= SYSDATE;
	GV_ERR_LEVEL				VARCHAR2(20)		:= 'CRITICAL';
	GV_PROCESS_NAME				VARCHAR2(120)		:= 'NYHIX_MFB_V2';
	GV_JOB_NAME					VARCHAR2(120)		:= '';
	GV_DRIVER_TABLE_NAME  		VARCHAR2(100 BYTE)	:= 'NYHIX_MFB_V2_STATS_BATCH';
	GV_DRIVER_KEY_NUMBER  		VARCHAR2(100 BYTE)	:= NULL;
	GV_NR_OF_ERROR        		NUMBER				:= 0;
    GV_UPDATE_TS                DATE                := SYSDATE;
    GV_TARGET_ROWID             ROWID               := NULL;

	-- USED FOR THE CORP_ETL_JOB_STATISTICS
	GV_JOB_ID                 	NUMBER              := 0;
	GV_JOB_STATUS_CD          	VARCHAR2(20 BYTE)   := 'STARTED';
	GV_FILE_NAME              	VARCHAR2(512 BYTE)	:= 'NYHIX_MFB_V2_STATS_BATCH';
	GV_RECORD_COUNT           	NUMBER				:= 0;
	GV_ERROR_COUNT            	NUMBER				:= 0;
	GV_WARNING_COUNT          	NUMBER				:= 0;
	GV_PROCESSED_COUNT        	NUMBER				:= 0;
	GV_RECORD_INSERTED_COUNT  	NUMBER				:= 0;
	GV_RECORD_UPDATED_COUNT   	NUMBER				:= 0;
	GV_JOB_START_DATE         	DATE				:= SYSDATE;
	GV_JOB_END_DATE           	DATE				:= SYSDATE;
	GV_BATCH_GUID_ID			VARCHAR2(38 BYTE) 	:= NULL;
	GV_SOURCE_SERVER			VARCHAR2(38 BYTE) 	:= NULL;

	GV_EVENT_COUNT				NUMBER				:= 0;

    -- Values from CORP_ETL_CONTROL used as filters
    GV_MFB_SCAN_MODULE_NAME				VARCHAR2(256) := NULL;
    GV_MFB_QC_MODULE_NAME				VARCHAR2(256) := NULL;
    GV_MFB_CLASSIFICATION_MODULE_NAME	VARCHAR2(256) := NULL;
    GV_MFB_RECOGNITION_MODULE_NAME		VARCHAR2(256) := NULL;
    GV_MFB_VALIDATION_MODULE_NAME		VARCHAR2(256) := NULL;
    GV_MFB_PDF_MODULE_NAME				VARCHAR2(256) := NULL;
    GV_MFB_REPORT_MODULE_NAME			VARCHAR2(256) := NULL;
    GV_MFB_EXPORT_MODULE_NAME			VARCHAR2(256) := NULL;
    GV_MFB_BATCH_CLASS_LIST9			VARCHAR2(256) := NULL;
    GV_MFB_BATCH_CLASS_LIST10			VARCHAR2(256) := NULL;
    GV_MFB_REPORTING_PERIOD_TYPE		VARCHAR2(256) := NULL;


	-------------------------------------------------------------------------------------------
	-- THIS IS THE "DRIVING" CURSOR  
	-- It selects a distinct list of any  BATCH_GUID 
	-- that was Inserted or Updated
	-- based on the "Parent Job ID"
	-------------------------------------------------------------------------------------------



	CURSOR BATCH_GUID_CSR IS
	SELECT 
	MIN(SOURCE_SERVER) AS SOURCE_SERVER, 
    BATCH_GUID
	FROM (
			SELECT source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_BATCH_EVENT
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT  'CENTRAL' as source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_DOCUMENT
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT  'CENTRAL' as source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_ENVELOPE
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT 'CENTRAL' as source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_MAXDAT_REPORTING
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_STATS_BATCH
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_STATS_BATCH_MODULE
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
			UNION
			SELECT source_server, BATCH_GUID 
            FROM maxdat.NYHIX_MFB_V2_STATS_FORM_TYPE
			WHERE nvl(MFB_V2_PARENT_JOB_ID,0) >= GV_PARENT_JOB_ID 
		)
        GROUP BY BATCH_GUID
        ORDER BY BATCH_GUID, SOURCE_SERVER;

	GV_SRC_REC_SUMMARY          			NYHIX_MFB_V2_BATCH_SUMMARY%ROWTYPE;
	GV_TARGET_REC       					NYHIX_MFB_V2_BATCH_SUMMARY%ROWTYPE;

	GV_SRC_REC_EVENT    					NYHIX_MFB_V2_BATCH_EVENT%ROWTYPE;
	GV_SRC_REC_MAXDAT_REPORTING				NYHIX_MFB_V2_MAXDAT_REPORTING%ROWTYPE;
	GV_SRC_REC_DOCUMENT						NYHIX_MFB_V2_DOCUMENT%ROWTYPE;
	GV_SRC_REC_ENVELOPE						NYHIX_MFB_V2_ENVELOPE%ROWTYPE;
	GV_SRC_REC_STATS_BATCH					NYHIX_MFB_V2_STATS_BATCH%ROWTYPE;
	GV_SRC_REC_STATS_BATCH_MODULE			NYHIX_MFB_V2_STATS_BATCH_MODULE%ROWTYPE; 
	GV_SRC_REC_STATS_BATCH_MODULE_LAUNCH	NYHIX_MFB_V2_STATS_BATCH_MODULE_LAUNCH%ROWTYPE;
	GV_SRC_REC_STATS_FORM_TYPE				NYHIX_MFB_V2_STATS_FORM_TYPE%ROWTYPE; 


	-------------------------------------------------------------------------------------------
	-- THE CURSOR USES SQL FROM QUERIES 1, 2, 3 AND 4
	-------------------------------------------------------------------------------------------
PROCEDURE Extract_CORP_ETL_CONTROL IS

    LV_NAME                     VARCHAR2(256) := NULL;
    LV_VALUE                    VARCHAR2(256) := NULL;

    CURSOR ETL_CONTROL_CSR IS
    SELECT NAME, VALUE
    FROM CORP_ETL_CONTROL
    WHERE SUBSTR(NAME,1,4) = 'MFB_'
    AND SUBSTR(NAME,1,6) <> 'MFB_V2';

BEGIN
    GV_MFB_SCAN_MODULE_NAME				:= NULL;
    GV_MFB_QC_MODULE_NAME				:= NULL;
    GV_MFB_CLASSIFICATION_MODULE_NAME	:= NULL;
    GV_MFB_RECOGNITION_MODULE_NAME		:= NULL;
    GV_MFB_VALIDATION_MODULE_NAME		:= NULL;
    GV_MFB_PDF_MODULE_NAME				:= NULL;
    GV_MFB_REPORT_MODULE_NAME			:= NULL;
    GV_MFB_EXPORT_MODULE_NAME			:= NULL;
    GV_MFB_BATCH_CLASS_LIST9			:= NULL;
    GV_MFB_BATCH_CLASS_LIST10			:= NULL;
    GV_MFB_REPORTING_PERIOD_TYPE		:= NULL;

		IF (ETL_CONTROL_CSR%ISOPEN)
		THEN
			CLOSE ETL_CONTROL_CSR;
		END IF;

		OPEN ETL_CONTROL_CSR;

		LOOP  -- 

			FETCH ETL_CONTROL_CSR 
                INTO LV_NAME, LV_VALUE;

        IF 
            LV_NAME = 'MFB_SCAN_MODULE_NAME' 
            THEN GV_MFB_SCAN_MODULE_NAME		:= LV_VALUE;
        ELSIF    
            LV_NAME = 'MFB_QC_MODULE_NAME' 
            THEN GV_MFB_QC_MODULE_NAME		:= LV_VALUE;
        ELSIF   
            LV_NAME = 'MFB_CLASSIFICATION_MODULE_NAME' 
            THEN GV_MFB_CLASSIFICATION_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_RECOGNITION_MODULE_NAME' 
            THEN GV_MFB_RECOGNITION_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_VALIDATION_MODULE_NAME' 
        THEN GV_MFB_VALIDATION_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_PDF_MODULE_NAME' 
            THEN GV_MFB_PDF_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_REPORT_MODULE_NAME' 
            THEN GV_MFB_REPORT_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_EXPORT_MODULE_NAME' 
            THEN GV_MFB_EXPORT_MODULE_NAME		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_BATCH_CLASS_LIST9' 
            THEN GV_MFB_BATCH_CLASS_LIST9		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_BATCH_CLASS_LIST10' 
            THEN GV_MFB_BATCH_CLASS_LIST10		:= LV_VALUE;
        ELSIF
            LV_NAME = 'MFB_REPORTING_PERIOD_TYPE' 
            THEN GV_MFB_REPORTING_PERIOD_TYPE		:= LV_VALUE;
        END IF;

			EXIT WHEN ETL_CONTROL_CSR%NOTFOUND;

		--	DBMS_OUTPUT.PUT_LINE('Processing ETL_CONTROL_CSR: '||GV_BATCH_GUID_ID);

		END LOOP;

		IF (ETL_CONTROL_CSR%ISOPEN)
		THEN
			CLOSE ETL_CONTROL_CSR;
		END IF;

        DBMS_OUTPUT.PUT_LINE('GV_MFB_SCAN_MODULE_NAME: 			'||GV_MFB_SCAN_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_QC_MODULE_NAME:				'||GV_MFB_QC_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_CLASSIFICATION_MODULE_NAME: '||GV_MFB_CLASSIFICATION_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_RECOGNITION_MODULE_NAME: 	'||GV_MFB_RECOGNITION_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_VALIDATION_MODULE_NAME: 	'||GV_MFB_VALIDATION_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_PDF_MODULE_NAME: 			'||GV_MFB_PDF_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_REPORT_MODULE_NAME: 		'||GV_MFB_REPORT_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_EXPORT_MODULE_NAME: 		'||GV_MFB_EXPORT_MODULE_NAME);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_BATCH_CLASS_LIST9: 			'||GV_MFB_BATCH_CLASS_LIST9);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_BATCH_CLASS_LIST10: 		'||GV_MFB_BATCH_CLASS_LIST10);
        DBMS_OUTPUT.PUT_LINE('GV_MFB_REPORTING_PERIOD_TYPE: 		'||GV_MFB_REPORTING_PERIOD_TYPE);


EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE;
    WHEN OTHERS THEN RAISE;
END;

-----------------------------------------------------
PROCEDURE INITIALIZE_GV_SRC_REC_SUMMARY 
IS

BEGIN
       GV_SRC_REC_SUMMARY.BATCH_NAME := NULL;	  					-- 	5	VARCHAR2
       GV_SRC_REC_SUMMARY.SOURCE_SERVER := NULL;	  				-- 	6	VARCHAR2
       GV_SRC_REC_SUMMARY.BATCH_DESCRIPTION := NULL;	  			-- 	7	VARCHAR2
       GV_SRC_REC_SUMMARY.REPROCESSED_FLAG := NULL;	  				-- 	8	VARCHAR2
       GV_SRC_REC_SUMMARY.CREATION_STATION_ID := NULL;	  			-- 	9	VARCHAR2
       GV_SRC_REC_SUMMARY.CREATION_USER_NAME := NULL;	  			-- 	10	VARCHAR2
       GV_SRC_REC_SUMMARY.CREATION_USER_ID := NULL;	  				-- 	11	VARCHAR2
       GV_SRC_REC_SUMMARY.BATCH_CLASS := NULL;	  					-- 	12	VARCHAR2
       GV_SRC_REC_SUMMARY.BATCH_CLASS_DES := NULL;	  				-- 	13	VARCHAR2
       GV_SRC_REC_SUMMARY.BATCH_TYPE := NULL;	  					-- 	14	VARCHAR2
       GV_SRC_REC_SUMMARY.CREATE_DT := TO_DATE(NULL);	  			-- 	15	DATE
       GV_SRC_REC_SUMMARY.COMPLETE_DT := TO_DATE(NULL);	  			-- 	16	DATE
       GV_SRC_REC_SUMMARY.INSTANCE_STATUS := NULL;	  				-- 	17	VARCHAR2
       GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT := TO_DATE(NULL);	  	-- 	18	DATE
       GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT := NULL;	  				-- 	19	NUMBER
       GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT := NULL;	  				-- 	20	NUMBER
       GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT := NULL;	  			-- 	21	NUMBER
       GV_SRC_REC_SUMMARY.CANCEL_DT := TO_DATE(NULL);	  			-- 	22	DATE
       GV_SRC_REC_SUMMARY.CANCEL_BY := NULL;	  					-- 	23	VARCHAR2
       GV_SRC_REC_SUMMARY.CANCEL_REASON := NULL;	  				-- 	24	VARCHAR2
       GV_SRC_REC_SUMMARY.CANCEL_METHOD := NULL;	  				-- 	25	VARCHAR2
       GV_SRC_REC_SUMMARY.ASF_SCAN_BATCH := NULL;	  				-- 	26	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH := TO_DATE(NULL);	  		-- 	27	DATE
       GV_SRC_REC_SUMMARY.ASED_SCAN_BATCH := TO_DATE(NULL);	  		-- 	28	DATE
       GV_SRC_REC_SUMMARY.ASPB_SCAN_BATCH := NULL;	  				-- 	29	VARCHAR2
       GV_SRC_REC_SUMMARY.ASF_PERFORM_QC := NULL;	  				-- 	30	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC := TO_DATE(NULL);	  		-- 	31	DATE
       GV_SRC_REC_SUMMARY.ASED_PERFORM_QC := TO_DATE(NULL);	  		-- 	32	DATE
       GV_SRC_REC_SUMMARY.ASPB_PERFORM_QC := NULL;	  				-- 	33	VARCHAR2
       GV_SRC_REC_SUMMARY.KOFAX_QC_REASON := NULL;	  				-- 	34	VARCHAR2
       GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION := NULL;	  			-- 	35	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION := TO_DATE(NULL);	  	-- 	36	DATE
       GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION := TO_DATE(NULL);	  	-- 	37	DATE
       GV_SRC_REC_SUMMARY.CLASSIFICATION_DT := TO_DATE(NULL);	  	-- 	38	DATE
       GV_SRC_REC_SUMMARY.ASF_RECOGNITION := NULL;	  			    -- 	39	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_RECOGNITION := TO_DATE(NULL);	  	-- 	40	DATE
       GV_SRC_REC_SUMMARY.ASED_RECOGNITION := TO_DATE(NULL);	  	-- 	41	DATE
       GV_SRC_REC_SUMMARY.RECOGNITION_DT := NULL;	  			    -- 	42	DATE
       GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA := NULL;	  		    -- 	43	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA := TO_DATE(NULL);	  	-- 	44	DATE
       GV_SRC_REC_SUMMARY.ASED_VALIDATE_DATA := TO_DATE(NULL);	  	-- 	45	DATE
       GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA := NULL;	  		    -- 	46	VARCHAR2
       GV_SRC_REC_SUMMARY.VALIDATION_DT := TO_DATE(NULL);	  		-- 	47	DATE
       GV_SRC_REC_SUMMARY.ASF_CREATE_PDF := NULL;	  			    -- 	48	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF := TO_DATE(NULL);	  		-- 	49	DATE
       GV_SRC_REC_SUMMARY.ASED_CREATE_PDF := TO_DATE(NULL);	  		-- 	50	DATE
       GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS := NULL;	  	    	-- 	51	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS := TO_DATE(NULL);	-- 	52	DATE
       GV_SRC_REC_SUMMARY.ASED_POPULATE_REPORTS := TO_DATE(NULL);	-- 	53	DATE
       GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS := NULL;	  				-- 	54	VARCHAR2
       GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS := TO_DATE(NULL);	  	-- 	55	DATE
       GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS := TO_DATE(NULL);	  	-- 	56	DATE
       GV_SRC_REC_SUMMARY.BATCH_PRIORITY := NULL;	  			    -- 	57	NUMBER
       GV_SRC_REC_SUMMARY.BATCH_DELETED := NULL;	  			    -- 	58	VARCHAR2
       GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG := NULL;	  			-- 	59	VARCHAR2
       GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG := NULL;	  			-- 	60	VARCHAR2
       GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG := NULL;	  			-- 	61	VARCHAR2
       GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG := NULL;	  			-- 	62	VARCHAR2
       GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG := NULL;	  			-- 	63	VARCHAR2
       GV_SRC_REC_SUMMARY.STG_DONE_DATE := TO_DATE(NULL);	  		-- 	64	DATE
       GV_SRC_REC_SUMMARY.STG_EXTRACT_DATE := TO_DATE(NULL);	  	-- 	65	DATE
       GV_SRC_REC_SUMMARY.STG_LAST_UPDATE_DATE := TO_DATE(NULL);	-- 	66	DATE
       GV_SRC_REC_SUMMARY.STG_PROCESSED_DATE := TO_DATE(NULL);	  	-- 	67	DATE
       GV_SRC_REC_SUMMARY.UPDATED := NULL;	  						-- 	68	VARCHAR2
       GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT := TO_DATE(NULL);	  	-- 	69	DATE
       GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID := NULL;	  		-- 	70	VARCHAR2
       GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED := NULL;	  				-- 	71	VARCHAR2
       GV_SRC_REC_SUMMARY.CURRENT_STEP := NULL;	  					-- 	72	VARCHAR2
       GV_SRC_REC_SUMMARY.CEJS_JOB_ID := NULL;	  					-- 	73	NUMBER
       GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA_USER_ID := NULL;		-- 	74	VARCHAR2
       GV_SRC_REC_SUMMARY.FAX_BATCH_SOURCE := NULL;	  				-- 	75	VARCHAR2

EXCEPTION
    WHEN OTHERS THEN RAISE;
END;
-----------------------------------------------------

-----------------------------------------------------
PROCEDURE LOAD_BATCH_SUMMARY (P_JOB_ID number default 0) 
IS
-----------------------------------------------------

	BEGIN

		-- INITIAL SET Setup

        GV_RECORD_COUNT           	:= 0;
        GV_ERROR_COUNT            	:= 0;
        GV_WARNING_COUNT          	:= 0;
        GV_PROCESSED_COUNT        	:= 0;
        GV_RECORD_INSERTED_COUNT  	:= 0;
        GV_RECORD_UPDATED_COUNT   	:= 0;
		GV_EVENT_COUNT				:= 0;

		GV_PARENT_JOB_ID := P_JOB_ID;

        -- GET VALUES FROM CORP_ETL_CONTROL
        Extract_CORP_ETL_CONTROL;

		GV_JOB_ID 	:= SEQ_JOB_ID.NEXTVAL;

        GV_JOB_NAME	:= GV_PROCESS_NAME||' Parent ID: '||GV_PARENT_JOB_ID||' - '||'Step NYHIX_MFB_V2_BATCH_SUMMARY';			

		Insert_Corp_ETL_Job_Statistics;


		IF (BATCH_GUID_CSR%ISOPEN)
		THEN
			CLOSE BATCH_GUID_CSR;
		END IF;

		OPEN BATCH_GUID_CSR;

		LOOP  -- Main "Driving" Loop

			FETCH BATCH_GUID_CSR INTO GV_SOURCE_SERVER, GV_BATCH_GUID_ID;

			EXIT WHEN BATCH_GUID_CSR%NOTFOUND;

			GV_RECORD_COUNT := GV_RECORD_COUNT+1;

--			DBMS_OUTPUT.PUT_LINE('Processing BATCH_GUID: '||GV_BATCH_GUID_ID);

			INITIALIZE_GV_SRC_REC_SUMMARY;

			GV_SRC_REC_SUMMARY := NULL;
			GV_TARGET_REC := NULL;

			Extract_Target(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
			Extract_Stats_Batch(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            -- THE EXTRACTS MUST BE IN THE PROPER ORDER
            -- ALL EXTRAXTS MAY NOT BE NEEDED
            Extract_Batch_Event(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            Extract_Document(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            Extract_Envelope(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            Extract_Stats_Batch_Module(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            Extract_Maxdat_Reporting(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);
            Extract_Stats_Form_Type(GV_SOURCE_SERVER, GV_BATCH_GUID_ID);

            IF GV_TARGET_ROWID IS NULL
				AND GV_SRC_REC_SUMMARY.BATCH_GUID IS NOT NULL
				THEN INSERT_BATCH_SUMMARY();
            ELSIF GV_TARGET_ROWID IS NOT NULL
				AND GV_SRC_REC_SUMMARY.BATCH_GUID IS NOT NULL
				THEN UPDATE_BATCH_SUMMARY();
            ELSIF GV_TARGET_ROWID IS NOT NULL
				AND GV_SRC_REC_SUMMARY.BATCH_GUID IS NULL
				THEN DELETE_BATCH_SUMMARY();
			END IF;



		END LOOP;

		COMMIT;

		IF (BATCH_GUID_CSR%ISOPEN)
		THEN
			CLOSE BATCH_GUID_CSR;
		END IF;

	-- Post the job statistics	
		DBMS_OUTPUT.PUT_LINE('GV_RECORD_COUNT: '||GV_RECORD_COUNT);
--		DBMS_OUTPUT.PUT_LINE('GV_RECORD_INSERTED_COUNT: '||GV_RECORD_INSERTED_COUNT);
--		DBMS_OUTPUT.PUT_LINE('GV_RECORD_UPDATED_COUNT: '||GV_RECORD_UPDATED_COUNT);

		DBMS_OUTPUT.PUT_LINE('GV_EVENT_COUNT: '||GV_EVENT_COUNT);

		GV_JOB_STATUS_CD          	:= 'COMPLETED';
		GV_JOB_END_DATE				:= SYSDATE;

		Update_Corp_ETL_Job_Statistics;



	EXCEPTION

		WHEN NO_DATA_FOUND
		THEN
			NULL;

        WHEN OTHERS THEN

            GV_ERROR_CODE := SQLCODE;
            GV_ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 3000);                 

/*			DBMS_OUTPUT.PUT_LINE('Main Cursor failure for '||
				'SRC_DB_RECORD_NUM: '||JOIN_REC.SRC_EXTERNAL_BATCH_ID
				||' TARGET_DB_RECORD_NUM: '||JOIN_REC.TARGET_EXTERNAL_BATCH_ID
				||'SQLCODE '||GV_ERROR_CODE
				||' '||GV_ERROR_MESSAGE);
*/
			ROLLBACK;

			RAISE;

END Load_BATCH_SUMMARY;

-----------------------------------------------------

-----------------------------------------------------
PROCEDURE UPDATE_BATCH_SUMMARY IS
PRAGMA AUTONOMOUS_TRANSACTION;
-----------------------------------------------------

	BEGIN

    NULL;

	IF 1 = 2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_NAME),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_NAME),'?')						-- 	5	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.SOURCE_SERVER),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.SOURCE_SERVER),'?')					-- 	6	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_DESCRIPTION),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_DESCRIPTION),'?')				-- 	7	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.REPROCESSED_FLAG),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.REPROCESSED_FLAG),'?')				-- 	8	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CREATION_STATION_ID),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.CREATION_STATION_ID),'?')				-- 	9	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CREATION_USER_NAME),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.CREATION_USER_NAME),'?')				-- 	10	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CREATION_USER_ID),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.CREATION_USER_ID),'?')				-- 	11	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_CLASS),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_CLASS),'?')						-- 	12	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_CLASS_DES),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_CLASS_DES),'?')					-- 	13	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_TYPE),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_TYPE),'?')						-- 	14	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CREATE_DT),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.CREATE_DT),'?')						-- 	15	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.COMPLETE_DT),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.COMPLETE_DT),'?')						-- 	16	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.INSTANCE_STATUS),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.INSTANCE_STATUS),'?')					-- 	17	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.INSTANCE_STATUS_DT),'?')				-- 	18	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_PAGE_COUNT),'?')				-- 	19	NUMBER
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_DOC_COUNT),'?')					-- 	20	NUMBER
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_ENVELOPE_COUNT),'?')			-- 	21	NUMBER
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CANCEL_DT),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.CANCEL_DT),'?')						-- 	22	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CANCEL_BY),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.CANCEL_BY),'?')						-- 	23	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CANCEL_REASON),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.CANCEL_REASON),'?')			   		-- 	24	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CANCEL_METHOD),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.CANCEL_METHOD),'?')			   		-- 	25	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_SCAN_BATCH),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_SCAN_BATCH),'?')			   		-- 	26	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_SCAN_BATCH),'?')			   		-- 	27	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_SCAN_BATCH),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_SCAN_BATCH),'?')			   		-- 	28	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASPB_SCAN_BATCH),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASPB_SCAN_BATCH),'?')			   		-- 	29	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_PERFORM_QC),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_PERFORM_QC),'?')			   		-- 	30	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_PERFORM_QC),'?')			   		-- 	31	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_PERFORM_QC),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_PERFORM_QC),'?')			   		-- 	32	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASPB_PERFORM_QC),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASPB_PERFORM_QC),'?')			   		-- 	33	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.KOFAX_QC_REASON),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.KOFAX_QC_REASON),'?')			   		-- 	34	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_CLASSIFICATION),'?')		 		-- 	35	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_CLASSIFICATION),'?')		   		-- 	36	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_CLASSIFICATION),'?')		   		-- 	37	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CLASSIFICATION_DT),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.CLASSIFICATION_DT),'?')		        -- 	38	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_RECOGNITION),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_RECOGNITION),'?')			        -- 	39	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_RECOGNITION),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_RECOGNITION),'?')		        -- 	40	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_RECOGNITION),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_RECOGNITION),'?')		        -- 	41	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.RECOGNITION_DT),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.RECOGNITION_DT),'?')			        -- 	42	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_VALIDATE_DATA),'?')		        -- 	43	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_VALIDATE_DATA),'?')		        -- 	44	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_VALIDATE_DATA),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_VALIDATE_DATA),'?')		        -- 	45	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASPB_VALIDATE_DATA),'?')		        -- 	46	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.VALIDATION_DT),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.VALIDATION_DT),'?')			        -- 	47	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_CREATE_PDF),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_CREATE_PDF),'?')			        -- 	48	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_CREATE_PDF),'?')			        -- 	49	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_CREATE_PDF),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_CREATE_PDF),'?')			        -- 	50	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_POPULATE_REPORTS),'?')	        -- 	51	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS),'?')	  	<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_POPULATE_REPORTS),'?')	        -- 	52	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_POPULATE_REPORTS),'?')	  	<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_POPULATE_REPORTS),'?')	        -- 	53	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASF_RELEASE_DMS),'?')					-- 	54	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASSD_RELEASE_DMS),'?')		        -- 	55	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.ASED_RELEASE_DMS),'?')		        -- 	56	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_PRIORITY),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_PRIORITY),'?')			        -- 	57	NUMBER
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_DELETED),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_DELETED),'?')			        -- 	58	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.PAGES_SCANNED_FLAG),'?')				-- 	59	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.DOCS_CREATED_FLAG),'?')				-- 	60	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.DOCS_DELETED_FLAG),'?')				-- 	61	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.PAGES_REPLACED_FLAG),'?')				-- 	62	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.PAGES_DELETED_FLAG),'?')				-- 	63	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.STG_DONE_DATE),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.STG_DONE_DATE),'?')					-- 	64	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.STG_EXTRACT_DATE),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.STG_EXTRACT_DATE),'?')				-- 	65	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.STG_LAST_UPDATE_DATE),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.STG_LAST_UPDATE_DATE),'?')			-- 	66	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.STG_PROCESSED_DATE),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.STG_PROCESSED_DATE),'?')				-- 	67	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.UPDATED),'?')	  					<>  	NVL(TO_CHAR(GV_TARGET_REC.UPDATED),'?')							-- 	68	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT),'?')	  		<>  	NVL(TO_CHAR(GV_TARGET_REC.BATCH_COMPLETE_DT),'?')				-- 	69	DATE
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID),'?')	  	<>  	NVL(TO_CHAR(GV_TARGET_REC.CURRENT_BATCH_MODULE_ID),'?')			-- 	70	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.GWF_QC_REQUIRED),'?')					-- 	71	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CURRENT_STEP),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.CURRENT_STEP),'?')					-- 	72	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.CEJS_JOB_ID),'?')	  				<>  	NVL(TO_CHAR(GV_TARGET_REC.CEJS_JOB_ID),'?')						-- 	73	NUMBER
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA_USER_ID),'?')	<>  	NVL(TO_CHAR(GV_TARGET_REC.ASPB_VALIDATE_DATA_USER_ID),'?')		-- 	74	VARCHAR2
       OR NVL(TO_CHAR(GV_SRC_REC_SUMMARY.FAX_BATCH_SOURCE),'?')	  			<>  	NVL(TO_CHAR(GV_TARGET_REC.FAX_BATCH_SOURCE),'?')				-- 	75	VARCHAR2
---------	   
	THEN
		UPDATE NYHIX_MFB_V2_BATCH_SUMMARY
		SET
			MFB_V2_CREATE_DATE 			= GV_SRC_REC_SUMMARY.MFB_V2_CREATE_DATE,    		--	1
			MFB_V2_UPDATE_DATE 			= GV_SRC_REC_SUMMARY.MFB_V2_UPDATE_DATE,   	 		--	2
			BATCH_GUID 					= GV_SRC_REC_SUMMARY.BATCH_GUID,    				--	3
			EXTERNAL_BATCH_ID 			= GV_SRC_REC_SUMMARY.EXTERNAL_BATCH_ID,    			--	4
			BATCH_NAME 					= GV_SRC_REC_SUMMARY.BATCH_NAME,    				--	5
			SOURCE_SERVER 				= GV_SRC_REC_SUMMARY.SOURCE_SERVER,    				--	6
			BATCH_DESCRIPTION 			= GV_SRC_REC_SUMMARY.BATCH_DESCRIPTION,    			--	7
			REPROCESSED_FLAG 			= GV_SRC_REC_SUMMARY.REPROCESSED_FLAG,    			--	8
			CREATION_STATION_ID 		= GV_SRC_REC_SUMMARY.CREATION_STATION_ID,    		--	9
			CREATION_USER_NAME 			= GV_SRC_REC_SUMMARY.CREATION_USER_NAME,    		--	10
			CREATION_USER_ID 			= GV_SRC_REC_SUMMARY.CREATION_USER_ID,    			--	11
			BATCH_CLASS 				= GV_SRC_REC_SUMMARY.BATCH_CLASS,    				--	12
			BATCH_CLASS_DES 			= GV_SRC_REC_SUMMARY.BATCH_CLASS_DES,    			--	13
			BATCH_TYPE 					= GV_SRC_REC_SUMMARY.BATCH_TYPE,    				--	14
			CREATE_DT 					= GV_SRC_REC_SUMMARY.CREATE_DT,    					--	15
			COMPLETE_DT 				= GV_SRC_REC_SUMMARY.COMPLETE_DT,    				--	16
			INSTANCE_STATUS 			= GV_SRC_REC_SUMMARY.INSTANCE_STATUS,    			--	17
			INSTANCE_STATUS_DT 			= GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT,    		--	18
			BATCH_PAGE_COUNT 			= GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT,    			--	19
			BATCH_DOC_COUNT 			= GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT,    			--	20
			BATCH_ENVELOPE_COUNT 		= GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT,    		--	21
			CANCEL_DT 					= GV_SRC_REC_SUMMARY.CANCEL_DT,    					--	22
			CANCEL_BY 					= GV_SRC_REC_SUMMARY.CANCEL_BY,    					--	23
			CANCEL_REASON 				= GV_SRC_REC_SUMMARY.CANCEL_REASON,    				--	24
			CANCEL_METHOD 				= GV_SRC_REC_SUMMARY.CANCEL_METHOD,    				--	25
			ASF_SCAN_BATCH 				= GV_SRC_REC_SUMMARY.ASF_SCAN_BATCH,    			--	26
			ASSD_SCAN_BATCH 			= GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH,    			--	27
			ASED_SCAN_BATCH 			= GV_SRC_REC_SUMMARY.ASED_SCAN_BATCH,    			--	28
			ASPB_SCAN_BATCH 			= GV_SRC_REC_SUMMARY.ASPB_SCAN_BATCH,    			--	29
			ASF_PERFORM_QC 				= GV_SRC_REC_SUMMARY.ASF_PERFORM_QC,    			--	30
			ASSD_PERFORM_QC 			= GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC,    			--	31
			ASED_PERFORM_QC 			= GV_SRC_REC_SUMMARY.ASED_PERFORM_QC,    			--	32
			ASPB_PERFORM_QC 			= GV_SRC_REC_SUMMARY.ASPB_PERFORM_QC,    			--	33
			KOFAX_QC_REASON 			= GV_SRC_REC_SUMMARY.KOFAX_QC_REASON,    			--	34
			ASF_CLASSIFICATION 			= GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION,    		--	35
			ASSD_CLASSIFICATION 		= GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION,    		--	36
			ASED_CLASSIFICATION 		= GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION,    		--	37
			CLASSIFICATION_DT 			= GV_SRC_REC_SUMMARY.CLASSIFICATION_DT,    			--	38
			ASF_RECOGNITION 			= GV_SRC_REC_SUMMARY.ASF_RECOGNITION,    			--	39
			ASSD_RECOGNITION 			= GV_SRC_REC_SUMMARY.ASSD_RECOGNITION,    			--	40
			ASED_RECOGNITION 			= GV_SRC_REC_SUMMARY.ASED_RECOGNITION,    			--	41
			RECOGNITION_DT 				= GV_SRC_REC_SUMMARY.RECOGNITION_DT,    			--	42
			ASF_VALIDATE_DATA 			= GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA,    			--	43
			ASSD_VALIDATE_DATA 			= GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA,    		--	44
			ASED_VALIDATE_DATA 			= GV_SRC_REC_SUMMARY.ASED_VALIDATE_DATA,    		--	45
			ASPB_VALIDATE_DATA 			= GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA,    		--	46
			VALIDATION_DT 				= GV_SRC_REC_SUMMARY.VALIDATION_DT,    				--	47
			ASF_CREATE_PDF 				= GV_SRC_REC_SUMMARY.ASF_CREATE_PDF,    			--	48
			ASSD_CREATE_PDF 			= GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF,    			--	49
			ASED_CREATE_PDF 			= GV_SRC_REC_SUMMARY.ASED_CREATE_PDF,    			--	50
			ASF_POPULATE_REPORTS 		= GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS,    		--	51
			ASSD_POPULATE_REPORTS 		= GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS,    		--	52
			ASED_POPULATE_REPORTS 		= GV_SRC_REC_SUMMARY.ASED_POPULATE_REPORTS,    		--	53
			ASF_RELEASE_DMS 			= GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS,    			--	54
			ASSD_RELEASE_DMS 			= GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS,    			--	55
			ASED_RELEASE_DMS 			= GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS,    			--	56
			BATCH_PRIORITY 				= GV_SRC_REC_SUMMARY.BATCH_PRIORITY,    			--	57
			BATCH_DELETED 				= GV_SRC_REC_SUMMARY.BATCH_DELETED,    				--	58
			PAGES_SCANNED_FLAG 			= GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG,    		--	59
			DOCS_CREATED_FLAG 			= GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG,    			--	60
			DOCS_DELETED_FLAG 			= GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG,    			--	61
			PAGES_REPLACED_FLAG 		= GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG,    		--	62
			PAGES_DELETED_FLAG 			= GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG,    		--	63
			STG_DONE_DATE 				= GV_SRC_REC_SUMMARY.STG_DONE_DATE,    				--	64
			STG_EXTRACT_DATE 			= GV_SRC_REC_SUMMARY.STG_EXTRACT_DATE,    			--	65
			STG_LAST_UPDATE_DATE 		= GV_SRC_REC_SUMMARY.STG_LAST_UPDATE_DATE,    		--	66
			STG_PROCESSED_DATE 			= GV_SRC_REC_SUMMARY.STG_PROCESSED_DATE,    		--	67
			UPDATED 					= GV_SRC_REC_SUMMARY.UPDATED,    					--	68
			BATCH_COMPLETE_DT 			= GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT,    			--	69
			CURRENT_BATCH_MODULE_ID 	= GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID,    	--	70
			GWF_QC_REQUIRED 			= GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED,    			--	71
			CURRENT_STEP 				= GV_SRC_REC_SUMMARY.CURRENT_STEP,    				--	72
			CEJS_JOB_ID 				= GV_SRC_REC_SUMMARY.CEJS_JOB_ID,    				--	73
			ASPB_VALIDATE_DATA_USER_ID 	= GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA_USER_ID,    --	74
			FAX_BATCH_SOURCE 			= GV_SRC_REC_SUMMARY.FAX_BATCH_SOURCE,    			--	75
			MFB_V2_PARENT_JOB_ID 		= GV_PARENT_JOB_ID    						--	76		
		WHERE ROWID = GV_TARGET_ROWID; 

	if GV_SRC_REC_SUMMARY.batch_guid = '{0015d100-97cf-4a3e-bf8f-5cdd04cf789e}'
	then 
		dbms_output.put_line('Pre GV_SRC_REC_SUMMARY.create_dt '||GV_SRC_REC_SUMMARY.create_dt);
		dbms_output.put_line('Pre GV_TARGET_REC.CREATE_DT '||GV_TARGET_REC.CREATE_DT);
		dbms_output.put_line('Pre GV_SRC_REC_SUMMARY.complete_DT '||GV_SRC_REC_SUMMARY.complete_dt);
		dbms_output.put_line('Pre GV_TARGET_REC.complete_DT '||GV_TARGET_REC.complete_DT);
	end if;	

    END IF;

    COMMIT;

	if GV_SRC_REC_SUMMARY.batch_guid = '{0015d100-97cf-4a3e-bf8f-5cdd04cf789e}'
	then 
		dbms_output.put_line('POST GV_SRC_REC_SUMMARY.create_dt '||GV_SRC_REC_SUMMARY.create_dt);
		dbms_output.put_line('POST GV_TARGET_REC.CREATE_DT '||GV_TARGET_REC.CREATE_DT);
		dbms_output.put_line('POST GV_SRC_REC_SUMMARY.complete_DT '||GV_SRC_REC_SUMMARY.complete_dt);
		dbms_output.put_line('POST GV_TARGET_REC.complete_DT '||GV_TARGET_REC.complete_DT);
	end if;	

	EXCEPTION

        WHEN OTHERS THEN

/*        DBMS_OUTPUT.PUT_LINE('UPDATE FAILURE '
            ||JOIN_REC.SRC_BATCH_GUID||' '
            ||JOIN_REC.SRC_rowid||' '
            ||JOIN_REC.target_rowid);
*/
		GV_DRIVER_KEY_NUMBER  	:= 'SRC_REC.BATCH_GUID : '||GV_SRC_REC_SUMMARY.BATCH_GUID;
		GV_DRIVER_TABLE_NAME  	:= 'NYHIX_MFB_MAXDAT_V2_STATS_BATCH_OLTP';	
		GV_ERR_LEVEL		  	:= 'Warning';
		GV_PROCESS_NAME 		:= 'Update_STATS_BATCH';

		POST_ERROR;

	END UPDATE_BATCH_SUMMARY;	

-----------------------------------------------------
PROCEDURE INSERT_BATCH_SUMMARY IS
PRAGMA AUTONOMOUS_TRANSACTION;
-----------------------------------------------------

	BEGIN

--    DBMS_OUTPUT.PUT_LINE('Inserting Batch_GUID: '||GV_SRC_REC_SUMMARY.BATCH_GUID);

	Insert into NYHIX_MFB_V2_BATCH_SUMMARY
	( 
        --MFB_V2_CREATE_DATE,
        --MFB_V2_UPDATE_DATE,
        BATCH_GUID,
        EXTERNAL_BATCH_ID,
        BATCH_NAME,
        SOURCE_SERVER,
        BATCH_DESCRIPTION,
        REPROCESSED_FLAG,
        CREATION_STATION_ID,
        CREATION_USER_NAME,
        CREATION_USER_ID,
        BATCH_CLASS,
        BATCH_CLASS_DES,
        BATCH_TYPE,
        CREATE_DT,
        COMPLETE_DT,
        INSTANCE_STATUS,
        INSTANCE_STATUS_DT,
        BATCH_PAGE_COUNT,
        BATCH_DOC_COUNT,
        BATCH_ENVELOPE_COUNT,
         CANCEL_DT,
        CANCEL_BY,
        CANCEL_REASON,
        CANCEL_METHOD,
        ASF_SCAN_BATCH,
        ASSD_SCAN_BATCH,
        ASED_SCAN_BATCH,
        ASPB_SCAN_BATCH,
        ASF_PERFORM_QC,
        ASSD_PERFORM_QC,
        ASED_PERFORM_QC,
        ASPB_PERFORM_QC,
        KOFAX_QC_REASON,
        ASF_CLASSIFICATION,
        ASSD_CLASSIFICATION,
        ASED_CLASSIFICATION,
        CLASSIFICATION_DT,
        ASF_RECOGNITION,
        ASSD_RECOGNITION,
        ASED_RECOGNITION,
        RECOGNITION_DT,
        ASF_VALIDATE_DATA,
        ASSD_VALIDATE_DATA,
        ASED_VALIDATE_DATA,
        ASPB_VALIDATE_DATA,
        VALIDATION_DT,
        ASF_CREATE_PDF,
        ASSD_CREATE_PDF,
        ASED_CREATE_PDF,
        ASF_POPULATE_REPORTS,
        ASSD_POPULATE_REPORTS,
        ASED_POPULATE_REPORTS,
        ASF_RELEASE_DMS,
        ASSD_RELEASE_DMS,
        ASED_RELEASE_DMS,
        BATCH_PRIORITY,
        BATCH_DELETED,
        PAGES_SCANNED_FLAG,
        DOCS_CREATED_FLAG,
        DOCS_DELETED_FLAG,
        PAGES_REPLACED_FLAG,
        PAGES_DELETED_FLAG,
        STG_DONE_DATE,
        STG_EXTRACT_DATE,
        STG_LAST_UPDATE_DATE,
        STG_PROCESSED_DATE,
        UPDATED,
        BATCH_COMPLETE_DT,
        CURRENT_BATCH_MODULE_ID,
        GWF_QC_REQUIRED,
        CURRENT_STEP,
        CEJS_JOB_ID,
        ASPB_VALIDATE_DATA_USER_ID,
        FAX_BATCH_SOURCE,
        MFB_V2_PARENT_JOB_ID
        )
	values
	(
        --MFB_V2_CREATE_DATE,
        --MFB_V2_UPDATE_DATE,
        GV_SRC_REC_SUMMARY.BATCH_GUID,
        nvl(GV_SRC_REC_SUMMARY.EXTERNAL_BATCH_ID,0),
        GV_SRC_REC_SUMMARY.BATCH_NAME,
        GV_SRC_REC_SUMMARY.SOURCE_SERVER,
        GV_SRC_REC_SUMMARY.BATCH_DESCRIPTION,
        GV_SRC_REC_SUMMARY.REPROCESSED_FLAG,
        GV_SRC_REC_SUMMARY.CREATION_STATION_ID,
        GV_SRC_REC_SUMMARY.CREATION_USER_NAME,
        GV_SRC_REC_SUMMARY.CREATION_USER_ID,
        GV_SRC_REC_SUMMARY.BATCH_CLASS,
        GV_SRC_REC_SUMMARY.BATCH_CLASS_DES,
        GV_SRC_REC_SUMMARY.BATCH_TYPE,
        NVL(GV_SRC_REC_SUMMARY.CREATE_DT,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.COMPLETE_DT,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.INSTANCE_STATUS,'Active'),
        NVL(GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT,SYSDATE),
        nvl(GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT,0),
        NVL(GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT,0),
        NVL(GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT,0),
        NVL(GV_SRC_REC_SUMMARY.CANCEL_DT,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.CANCEL_BY,
        GV_SRC_REC_SUMMARY.CANCEL_REASON,
        GV_SRC_REC_SUMMARY.CANCEL_METHOD,
        NVL(GV_SRC_REC_SUMMARY.ASF_SCAN_BATCH,'?'),
        NVL(GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_SCAN_BATCH,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASPB_SCAN_BATCH,'?'),
        GV_SRC_REC_SUMMARY.ASF_PERFORM_QC,
        GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC,
        GV_SRC_REC_SUMMARY.ASED_PERFORM_QC,
        GV_SRC_REC_SUMMARY.ASPB_PERFORM_QC,
        GV_SRC_REC_SUMMARY.KOFAX_QC_REASON,
        GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION,
        NVL(GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.CLASSIFICATION_DT,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASF_RECOGNITION,
        NVL(GV_SRC_REC_SUMMARY.ASSD_RECOGNITION,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_RECOGNITION,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.RECOGNITION_DT,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA,
        NVL(GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_VALIDATE_DATA,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA,
        NVL(GV_SRC_REC_SUMMARY.VALIDATION_DT,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASF_CREATE_PDF,
        NVL(GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_CREATE_PDF,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS,
        NVL(GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_POPULATE_REPORTS,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS,
        NVL(GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.BATCH_PRIORITY,0),
        GV_SRC_REC_SUMMARY.BATCH_DELETED,
        GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG,
        GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG,
        GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG,
        GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG,
        GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG,
        NVL(GV_SRC_REC_SUMMARY.STG_DONE_DATE,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.STG_EXTRACT_DATE,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.STG_LAST_UPDATE_DATE,TO_DATE(NULL)),
        NVL(GV_SRC_REC_SUMMARY.STG_PROCESSED_DATE,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.UPDATED,
        NVL(GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT,TO_DATE(NULL)),
        GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID,
        GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED,
        GV_SRC_REC_SUMMARY.CURRENT_STEP,
        NVL(GV_SRC_REC_SUMMARY.CEJS_JOB_ID,0),
        GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA_USER_ID,
        GV_SRC_REC_SUMMARY.FAX_BATCH_SOURCE,
        NVL(GV_PARENT_JOB_ID,-999)
	);

   -- ROLLBACK;

    COMMIT;

    GV_SRC_REC_SUMMARY.EXTERNAL_BATCH_ID := 0;
    GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT := 0;
    GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT := 0;
    GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT := 0;
    GV_SRC_REC_SUMMARY.BATCH_PRIORITY := 0;
    GV_SRC_REC_SUMMARY.CEJS_JOB_ID := 0;
    GV_PARENT_JOB_ID := 0;


	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE '
            ||GV_SRC_REC_SUMMARY.BATCH_GUID||' '||SUBSTR(SQLERRM, 1, 3000));

        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE CEJS_JOB_ID '||GV_SRC_REC_SUMMARY.CEJS_JOB_ID);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE BATCH_PAGE_COUNT '||GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE CANCEL_DT'||GV_SRC_REC_SUMMARY.CANCEL_DT);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE EXTERNAL_BATCH_ID '||GV_SRC_REC_SUMMARY.EXTERNAL_BATCH_ID);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE BATCH_ENVELOPE_COUNT '||GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE BATCH_DOC_COUNT '||GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE BATCH_PRIORITY '||GV_SRC_REC_SUMMARY.BATCH_PRIORITY);
        DBMS_OUTPUT.PUT_LINE('INSERT FAILURE MFB_V2_PARENT_JOB_ID '||GV_SRC_REC_SUMMARY.MFB_V2_PARENT_JOB_ID);

        -- '${MFB_V2_REMOTE_START_DATE}'
--		GV_DRIVER_KEY_NUMBER  	:= 'SRC_REC.BATCH_GUID: '||GV_SRC_REC_SUMMARY.BATCH_GUID;
--		GV_DRIVER_TABLE_NAME  	:= 'NYHIX_MFB_MAXDAT_V2_STATS_BATCH';	
--		GV_ERR_LEVEL		  	:= 'Warning';
--		GV_PROCESS_NAME 		:= 'Update_STATS_BATCH_Summary';

		POST_ERROR;

	END INSERT_BATCH_SUMMARY;	

-----------------------------------------------------
PROCEDURE DELETE_BATCH_SUMMARY IS
-- IF THE JOIN CURSOR USES A FULL OUTTER JOIN THEN 
-- THIS PROCEDURE CAN BE USED TO IDENTIFY
-- ROECORDS DELETED FROM THE SORCE SYSTEM
-----------------------------------------------------

	BEGIN

		NULL;

		GV_PROCESSED_COUNT := GV_PROCESSED_COUNT + 1;

	EXCEPTION

        WHEN OTHERS THEN

/*        DBMS_OUTPUT.PUT_LINE('DELETE FAILURE'||' '
            ||JOIN_REC.SRC_rowid||' '
            ||JOIN_REC.target_rowid);
*/
		Post_Error;

	END DELETE_BATCH_SUMMARY;	


-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
Procedure Insert_Corp_ETL_Job_Statistics IS
PRAGMA AUTONOMOUS_TRANSACTION;
-----------------------------------------------------
BEGIN

	INSERT INTO MAXDAT.CORP_ETL_JOB_STATISTICS (
		ERROR_COUNT, 
		FILE_NAME, 
		JOB_END_DATE, 
		JOB_ID, 
		JOB_NAME, 
		JOB_START_DATE, 
		JOB_STATUS_CD, 
		PARENT_JOB_ID, 
		PROCESSED_COUNT, 
		RECORD_COUNT, 
		RECORD_INSERTED_COUNT, 
		RECORD_UPDATED_COUNT, 
		WARNING_COUNT) 
	VALUES ( 
		GV_ERROR_COUNT, 			-- ERROR_COUNT 
		GV_FILE_NAME, 				-- FILE_NAME 
		GV_JOB_END_DATE, 			-- JOB_END_DATE 
		GV_JOB_ID, 					-- JOB_ID 
		GV_JOB_NAME, 				-- JOB_NAME 
		GV_JOB_START_DATE, 			-- JOB_START_DATE 
		GV_JOB_STATUS_CD, 			-- JOB_STATUS_CD 
		GV_PARENT_JOB_ID, 			-- PARENT_JOB_ID 
		GV_PROCESSED_COUNT, 		-- PROCESSED_COUNT 
		GV_RECORD_COUNT, 			-- RECORD_COUNT 
		GV_RECORD_INSERTED_COUNT,	-- RECORD_INSERTED_COUNT 
		GV_RECORD_UPDATED_COUNT, 	-- RECORD_UPDATED_COUNT 
		GV_WARNING_COUNT); 			-- WARNING_COUNT 

	COMMIT;

EXCEPTION
	WHEN OTHERS THEN
	RAISE;
END;	

-----------------------------------------------------
Procedure Update_Corp_ETL_Job_Statistics IS
PRAGMA AUTONOMOUS_TRANSACTION;
-----------------------------------------------------
BEGIN

	UPDATE MAXDAT.CORP_ETL_JOB_STATISTICS
	SET    
		ERROR_COUNT       		= GV_ERROR_COUNT,
		FILE_NAME            	= GV_FILE_NAME,
		JOB_END_DATE         	= GV_JOB_END_DATE,
--		JOB_ID                	= GV_JOB_ID,
		JOB_NAME              	= GV_JOB_NAME,
		JOB_START_DATE        	= GV_JOB_START_DATE,
		JOB_STATUS_CD         	= GV_JOB_STATUS_CD,
		PARENT_JOB_ID         	= GV_PARENT_JOB_ID,
		PROCESSED_COUNT       	= GV_PROCESSED_COUNT,
		RECORD_COUNT          	= GV_RECORD_COUNT,
		RECORD_INSERTED_COUNT 	= GV_RECORD_INSERTED_COUNT,
		RECORD_UPDATED_COUNT  	= GV_RECORD_UPDATED_COUNT,
		WARNING_COUNT         	= GV_WARNING_COUNT
	WHERE  
		JOB_ID                = GV_JOB_ID;	

	COMMIT;

EXCEPTION
	WHEN OTHERS THEN
	RAISE;
END;	

-----------------------------------------------------
PROCEDURE Post_Error IS
PRAGMA AUTONOMOUS_TRANSACTION;
-----------------------------------------------------
BEGIN

	GV_ERROR_COUNT := GV_ERROR_COUNT + 1;
	GV_NR_OF_ERROR := GV_NR_OF_ERROR + 1;

    GV_ERROR_CODES := SQLCODE;
    GV_ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 3000);                 

	GV_ERR_DATE		:= SYSDATE;
	GV_ERROR_FIELD  := NULL;

	GV_UPDATE_TS 	:= SYSDATE;


	INSERT INTO MAXDAT.CORP_ETL_ERROR_LOG (
		--CEEL_ID, 
		--CREATE_TS, 
		DRIVER_KEY_NUMBER, 
		DRIVER_TABLE_NAME, 
		ERR_DATE, 
		ERR_LEVEL, 
		ERROR_CODES, 
		ERROR_DESC, ERROR_FIELD, 
		JOB_NAME, 
        NR_OF_ERROR, 
        PROCESS_NAME 
		--UPDATE_TS
		) 
	VALUES ( 
--		GV_CEEL_ID
--		GV_CREATE_TS,
		GV_DRIVER_KEY_NUMBER,
		GV_DRIVER_TABLE_NAME,
		SYSDATE,
		'CRITICAL',
		GV_ERROR_CODES,
		GV_ERROR_MESSAGE,
		GV_ERROR_FIELD,
		GV_JOB_NAME,
		GV_NR_OF_ERROR,
		GV_PROCESS_NAME
--		GV_UPDATE_TS 
		);

	COMMIT;


/*			INSERT INTO MAXDAT.NYHIX_MFB_V2_STATS_BATCH_OLTP_ERR
		(   
         --   MFB_V2_CREATE_DATE,                     	-- 7 	1
          --  MFB_V2_UPDATE_DATE,                     	-- 7 	2
			OLTP_LOAD_SEQ,
			OLTP_LOAD_DATE_TIME, 
            SOURCE_SERVER,                          	-- 7 	3
        --    SBM_START_DATE_TIME,                    	-- 7 	4
            EXTERNAL_BATCH_ID,                      	-- 7 	5
            BATCH_GUID,                             	-- 7 	6
            BATCH_NAME,                             	-- 7 	7
            BATCH_CLASS,                            	-- 7 	8
            BATCH_CLASS_DESCRIPTION,                	-- 7 	9
            BATCH_DESCRIPTION,                      	-- 7 	10
            BATCH_REFERENCE_ID,                     	-- 7 	11
            BATCH_TYPE,                             	-- 7 	12
            CREATION_STATION_ID,                    	-- 7 	13
            CREATION_USER_ID,                       	-- 7 	14
            CREATION_USER_NAME,                     	-- 7 	15
            TRANSFER_ID,                           		-- 7 	16
			SBM_MIN_START_DATE_TIME,
			SBM_MAX_END_DATE_TIME
		)
		VALUES (
          --  JOIN_REC.SRC_MFB_V2_CREATE_DATE,	-- 8 	1
          --  JOIN_REC.SRC_MFB_V2_UPDATE_DATE,	-- 8 	2
			JOIN_REC.SRC_OLTP_LOAD_SEQ,
			JOIN_REC.SRC_OLTP_LOAD_DATE_TIME, 
            JOIN_REC.SRC_SOURCE_SERVER,	-- 8 	3
         --   JOIN_REC.SRC_SBM_START_DATE_TIME,	-- 8 	4
            JOIN_REC.SRC_EXTERNAL_BATCH_ID,	-- 8 	5
            JOIN_REC.SRC_BATCH_GUID,	-- 8 	6
            JOIN_REC.SRC_BATCH_NAME,	-- 8 	7
            JOIN_REC.SRC_BATCH_CLASS,	-- 8 	8
            JOIN_REC.SRC_BATCH_CLASS_DESCRIPTION,	-- 8 	9
            JOIN_REC.SRC_BATCH_DESCRIPTION,	-- 8 	10
            JOIN_REC.SRC_BATCH_REFERENCE_ID,	-- 8 	11
            JOIN_REC.SRC_BATCH_TYPE,	-- 8 	12
            JOIN_REC.SRC_CREATION_STATION_ID,	-- 8 	13
            JOIN_REC.SRC_CREATION_USER_ID,	-- 8 	14
            JOIN_REC.SRC_CREATION_USER_NAME,	-- 8 	15
            JOIN_REC.SRC_TRANSFER_ID,	-- 8 	16
			JOIN_REC.SRC_SBM_MIN_START_DATE_TIME,
			JOIN_REC.SRC_SBM_MAX_END_DATE_TIME
			);

        COMMIT;
*/



EXCEPTION

	When Others then 
		GV_ERROR_CODE := SQLCODE;
		GV_ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 3000);                 
	DBMS_OUTPUT.PUT_LINE('Procedure Post_Error failed with '||GV_Error_Code||': '||GV_Error_Message);

	--RAISE;


END;

-----------------------------------------------------------------
    Procedure Extract_Target ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS
	BEGIN
    -- NOTE THIS TABLE IS CENTRAL ONLY.. THE P_SOURCE_SERVER IS NOT NEEDED 
		GV_TARGET_REC := NULL;

	SELECT 
		ROWID,
		NVL(MFB_V2_CREATE_DATE,TO_DATE(NULL)),
		NVL(MFB_V2_UPDATE_DATE,TO_DATE(NULL)),
		BATCH_GUID,
		EXTERNAL_BATCH_ID,
		BATCH_NAME,
		SOURCE_SERVER,
		BATCH_DESCRIPTION,
		REPROCESSED_FLAG,
		CREATION_STATION_ID,
		CREATION_USER_NAME,
		CREATION_USER_ID,
		BATCH_CLASS,
		BATCH_CLASS_DES,
		BATCH_TYPE,
		NVL(CREATE_DT,TO_DATE(NULL)),
		NVL(COMPLETE_DT,TO_DATE(NULL)),
		INSTANCE_STATUS,
		NVL(INSTANCE_STATUS_DT,TO_DATE(NULL)),
		BATCH_PAGE_COUNT,
		BATCH_DOC_COUNT,
		BATCH_ENVELOPE_COUNT,
		NVL(CANCEL_DT,TO_DATE(NULL)),
		CANCEL_BY,
		CANCEL_REASON,
		CANCEL_METHOD,
		ASF_SCAN_BATCH,
		NVL(ASSD_SCAN_BATCH,TO_DATE(NULL)),
		NVL(ASED_SCAN_BATCH,TO_DATE(NULL)),
		ASPB_SCAN_BATCH,
		ASF_PERFORM_QC,
		NVL(ASSD_PERFORM_QC,TO_DATE(NULL)),
		NVL(ASED_PERFORM_QC,TO_DATE(NULL)),
		ASPB_PERFORM_QC,
		KOFAX_QC_REASON,
		ASF_CLASSIFICATION,
		NVL(ASSD_CLASSIFICATION,TO_DATE(NULL)),
		NVL(ASED_CLASSIFICATION,TO_DATE(NULL)),
		NVL(CLASSIFICATION_DT,TO_DATE(NULL)),
		ASF_RECOGNITION,
		NVL(ASSD_RECOGNITION,TO_DATE(NULL)),
		NVL(ASED_RECOGNITION,TO_DATE(NULL)),
		NVL(RECOGNITION_DT,TO_DATE(NULL)),
		ASF_VALIDATE_DATA,
		NVL(ASSD_VALIDATE_DATA,TO_DATE(NULL)),
		NVL(ASED_VALIDATE_DATA,TO_DATE(NULL)),
		ASPB_VALIDATE_DATA,
		NVL(VALIDATION_DT,TO_DATE(NULL)),
		ASF_CREATE_PDF,
		NVL(ASSD_CREATE_PDF,TO_DATE(NULL)),
		NVL(ASED_CREATE_PDF,TO_DATE(NULL))
	INTO
		GV_TARGET_ROWID,
		GV_TARGET_REC.MFB_V2_CREATE_DATE,
		GV_TARGET_REC.MFB_V2_UPDATE_DATE,
		GV_TARGET_REC.BATCH_GUID,
		GV_TARGET_REC.EXTERNAL_BATCH_ID,
		GV_TARGET_REC.BATCH_NAME,
		GV_TARGET_REC.SOURCE_SERVER,
		GV_TARGET_REC.BATCH_DESCRIPTION,
		GV_TARGET_REC.REPROCESSED_FLAG,
		GV_TARGET_REC.CREATION_STATION_ID,
		GV_TARGET_REC.CREATION_USER_NAME,
		GV_TARGET_REC.CREATION_USER_ID,
		GV_TARGET_REC.BATCH_CLASS,
		GV_TARGET_REC.BATCH_CLASS_DES,
		GV_TARGET_REC.BATCH_TYPE,
		GV_TARGET_REC.CREATE_DT,
		GV_TARGET_REC.COMPLETE_DT,
		GV_TARGET_REC.INSTANCE_STATUS,
		GV_TARGET_REC.INSTANCE_STATUS_DT,
		GV_TARGET_REC.BATCH_PAGE_COUNT,
		GV_TARGET_REC.BATCH_DOC_COUNT,
		GV_TARGET_REC.BATCH_ENVELOPE_COUNT,
		GV_TARGET_REC.CANCEL_DT,
		GV_TARGET_REC.CANCEL_BY,
		GV_TARGET_REC.CANCEL_REASON,
		GV_TARGET_REC.CANCEL_METHOD,
		GV_TARGET_REC.ASF_SCAN_BATCH,
		GV_TARGET_REC.ASSD_SCAN_BATCH,
		GV_TARGET_REC.ASED_SCAN_BATCH,
		GV_TARGET_REC.ASPB_SCAN_BATCH,
		GV_TARGET_REC.ASF_PERFORM_QC,
		GV_TARGET_REC.ASSD_PERFORM_QC,
		GV_TARGET_REC.ASED_PERFORM_QC,
		GV_TARGET_REC.ASPB_PERFORM_QC,
		GV_TARGET_REC.KOFAX_QC_REASON,
		GV_TARGET_REC.ASF_CLASSIFICATION,
		GV_TARGET_REC.ASSD_CLASSIFICATION,
		GV_TARGET_REC.ASED_CLASSIFICATION,
		GV_TARGET_REC.CLASSIFICATION_DT,
		GV_TARGET_REC.ASF_RECOGNITION,
		GV_TARGET_REC.ASSD_RECOGNITION,
		GV_TARGET_REC.ASED_RECOGNITION,
		GV_TARGET_REC.RECOGNITION_DT,
		GV_TARGET_REC.ASF_VALIDATE_DATA,
		GV_TARGET_REC.ASSD_VALIDATE_DATA,
		GV_TARGET_REC.ASED_VALIDATE_DATA,
		GV_TARGET_REC.ASPB_VALIDATE_DATA,
		GV_TARGET_REC.VALIDATION_DT,
		GV_TARGET_REC.ASF_CREATE_PDF,
		GV_TARGET_REC.ASSD_CREATE_PDF,
		GV_TARGET_REC.ASED_CREATE_PDF
	FROM NYHIX_MFB_V2_BATCH_SUMMARY
	WHERE BATCH_GUID = p_Batch_GUID;

	-- BECAUSE THE GV_SRC_REC IS POPULATED FROM MULTIPLE TABLES
	-- AND SOME OF THE TABLES MAY NOT HAVE THE SPECIFIC BATCH_GUID
	-- THE GV_TARGET_REC IS LOADED INTO THE GV_SRC_REC

--	DBMS_OUTPUT.PUT_LINE('Target BATCH_GUID : '||GV_BATCH_GUID_ID|| 'found');


	EXCEPTION
		WHEN NO_DATA_FOUND
			THEN

 --           DBMS_OUTPUT.PUT_LINE('Target BATCH_GUID : '||GV_BATCH_GUID_ID|| 'NOT found');
            GV_TARGET_ROWID := NULL;
			GV_TARGET_REC := NULL;
		WHEN OTHERS THEN
			RAISE;
	End;

-----------------------------------------------------------------
    Procedure Extract_Stats_Batch ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS
	BEGIN

		SELECT 
			BATCH_GUID,
			EXTERNAL_BATCH_ID,
			BATCH_NAME,
			SOURCE_SERVER,
			BATCH_DESCRIPTION,
			CASE WHEN SOURCE_SERVER = 'CENTRAL' THEN NVL(REPROCESSED_FLAG,'N') ELSE 'N' END AS REPROCESSED_FLAG,
			CREATION_STATION_ID,
			CREATION_USER_NAME,
			CREATION_USER_ID,
			BATCH_CLASS,
			BATCH_CLASS_DESCRIPTION,
			--BATCH_TYPE,
			SBM_MIN_START_DATE_TIME AS CREATE_DT,
            CASE     
                WHEN BATCH_CLASS   =  'NYSOH_NoPrep_FAX'          then 'Expedited Appeals'
                WHEN BATCH_CLASS   =  'NYSOH_FAX_NavCAC'          then 'Nav/CAC Faxes'
                WHEN BATCH_CLASS   =  'NYSOH_RETURNED_MAIL'       then 'Returned Mail'
                WHEN BATCH_CLASS LIKE '%FAX'                      then 'Fax Batches'
                WHEN BATCH_CLASS LIKE '%MAIL'                     then 'Mail Batches' 
            ELSE 'NA' END AS BATCH_GROUP
		INTO
			GV_SRC_REC_SUMMARY.BATCH_GUID,
			GV_SRC_REC_SUMMARY.EXTERNAL_BATCH_ID,
			GV_SRC_REC_SUMMARY.BATCH_NAME,
			GV_SRC_REC_SUMMARY.SOURCE_SERVER,
			GV_SRC_REC_SUMMARY.BATCH_DESCRIPTION,
			GV_SRC_REC_SUMMARY.REPROCESSED_FLAG,
			GV_SRC_REC_SUMMARY.CREATION_STATION_ID,
			GV_SRC_REC_SUMMARY.CREATION_USER_NAME,
			GV_SRC_REC_SUMMARY.CREATION_USER_ID,
			GV_SRC_REC_SUMMARY.BATCH_CLASS,
			GV_SRC_REC_SUMMARY.BATCH_CLASS_DES,
			--GV_SRC_REC_SUMMARY.BATCH_TYPE,
			GV_SRC_REC_SUMMARY.CREATE_DT,
            GV_SRC_REC_SUMMARY.batch_type
		FROM NYHIX_MFB_V2_STATS_BATCH
		WHERE SOURCE_SERVER = P_SOURCE_SERVER
        AND BATCH_GUID = 	p_Batch_GUID;

--        DBMS_OUTPUT.PUT_LINE('p_BATCH_GUID : '||p_Batch_GUID|| ' found');


	EXCEPTION
		WHEN NO_DATA_FOUND
			THEN
            DBMS_OUTPUT.PUT_LINE('Extract_Stats_Batch: P_SOURCE_SERVER, p_BATCH_GUID : '||P_SOURCE_SERVER||', '||p_Batch_GUID|| 'NOT found');

			GV_SRC_REC_SUMMARY.BATCH_GUID := p_Batch_GUID;
			--GV_TARGET_REC := NULL;
		WHEN OTHERS THEN
			RAISE;
	End;

-----------------------------------------------------------------
    Procedure Extract_Document ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS

    -- NOTE THIS TABLE IS CENTRAL ONLY.. THE P_SOURCE_SERVER IS NOT NEEDED 

		CURSOR DOCUMENT_CSR IS
		SELECT 
			--MFB_V2_CREATE_DATE
			--MFB_V2_UPDATE_DATE
			BATCH_GUID,
			ECN,
			DOCUMENT_NUMBER,
			DCN,
			ORDERNUMBER,
			FORM_TYPE,
			DOC_CLASS,
			DOC_RECEIPT_DT,
			DOC_CREATION_DT,
			DOC_PAGE_COUNT,
			CLASSIFIED_DOC,
			DELETED,
			CONFIDENCE,
			CONFIDENT
			--MFB_V2_PARENT_JOB_ID
		FROM NYHIX_MFB_V2_DOCUMENT
		WHERE BATCH_GUID = P_BATCH_GUID
		ORDER BY DOC_RECEIPT_DT;

	BEGIN

		IF (DOCUMENT_CSR%ISOPEN)
		THEN
			CLOSE DOCUMENT_CSR;
		END IF;

		OPEN DOCUMENT_CSR;

		LOOP  -- 

			FETCH DOCUMENT_CSR 
			INTO 
				GV_SRC_REC_DOCUMENT.BATCH_GUID,
				GV_SRC_REC_DOCUMENT.ECN,
				GV_SRC_REC_DOCUMENT.DOCUMENT_NUMBER,
				GV_SRC_REC_DOCUMENT.DCN,
				GV_SRC_REC_DOCUMENT.ORDERNUMBER,
				GV_SRC_REC_DOCUMENT.FORM_TYPE,
				GV_SRC_REC_DOCUMENT.DOC_CLASS,
				GV_SRC_REC_DOCUMENT.DOC_RECEIPT_DT,
				GV_SRC_REC_DOCUMENT.DOC_CREATION_DT,
				GV_SRC_REC_DOCUMENT.DOC_PAGE_COUNT,
				GV_SRC_REC_DOCUMENT.CLASSIFIED_DOC,
				GV_SRC_REC_DOCUMENT.DELETED,
				GV_SRC_REC_DOCUMENT.CONFIDENCE,
				GV_SRC_REC_DOCUMENT.CONFIDENT;

			EXIT WHEN DOCUMENT_CSR%NOTFOUND;

		--	DBMS_OUTPUT.PUT_LINE('Processing DOCUMENT_CSR: '||GV_BATCH_GUID_ID);

		END LOOP;

		IF (DOCUMENT_CSR%ISOPEN)
		THEN
			CLOSE DOCUMENT_CSR;
		END IF;


	EXCEPTION
		WHEN NO_DATA_FOUND 
			THEN NULL;
		WHEN OTHERS 
			THEN RAISE;

	End;

-----------------------------------------------------------------

    Procedure Extract_Envelope ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS

    -- NOTE THIS TABLE IS CENTRAL ONLY.. THE P_SOURCE_SERVER IS NOT NEEDED 

	BEGIN
		null;
	End;

-----------------------------------------------------------------
    Procedure Extract_Stats_Batch_Module ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS
--GV_SRC_REC_STATS_BATCH_MODULE			
	BEGIN
		null;
	End;

-----------------------------------------------------------------
    Procedure Extract_Maxdat_Reporting ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS
--GV_SRC_REC_MAXDAT_REPORTING				
	BEGIN
    -- NOTE THIS TABLE IS CENTRAL ONLY.. THE P_SOURCE_SERVER IS NOT NEEDED 

		SELECT 
			sum(doc_page_count)	    			AS BATCH_PAGE_COUNT,
			COUNT(distinct dcn )				AS BATCH_DOC_COUNT,
			COUNT(distinct ecn )			    AS BATCH_ENVELOPE_COUNT,
			MAX(FAX_BATCH_SOURCE)				AS FAX_BATCH_SOURCE
		INTO 
			GV_SRC_REC_SUMMARY.BATCH_PAGE_COUNT,
			GV_SRC_REC_SUMMARY.BATCH_DOC_COUNT,
			GV_SRC_REC_SUMMARY.BATCH_ENVELOPE_COUNT,
			GV_SRC_REC_SUMMARY.FAX_BATCH_SOURCE
		FROM NYHIX_MFB_V2_MAXDAT_REPORTING
		WHERE BATCH_GUID = P_BATCH_GUID
		AND VALID = 1;

    Exception
        when No_data_found 
            then null;
        when others
            then raise;

	End;

-----------------------------------------------------------------
    Procedure Extract_Stats_Form_Type ( P_SOURCE_SERVER varchar DEFAULT 'CENTRAL', p_Batch_GUID varchar default null) IS
--GV_SRC_REC_STATS_FORM_TYPE				
	BEGIN
		null;
	End;

-----------------------------------------------------------------

-----------------------------------------------------------------
    Procedure Extract_Batch_Event ( P_SOURCE_SERVER VARCHAR DEFAULT 'CENTRAL', P_BATCH_GUID varchar default null) IS

    -- NOTE THIS TABLE IS CENTRAL ONLY.. THE P_SOURCE_SERVER IS NOT NEEDED 

	CURSOR BATCH_EVENT_CSR IS
	select MFB_V2_CREATE_DATE,
        MFB_V2_UPDATE_DATE,
        BATCH_MODULE_ID,
        BATCH_GUID,
        MODULE_LAUNCH_ID,
        MODULE_UNIQUE_ID,
        MODULENAME,
        MODULE_CLOSE_UNIQUE_ID,
        MODULE_CLOSE_NAME,
        BATCH_STATUS,
        START_DATE_TIME,
        END_DATE_TIME,
        USER_NAME,
        USER_ID,
        STATION_ID,
        SITE_NAME,
        SITE_ID,
        DELETED,
        PAGES_PER_DOCUMENT,
        PAGES_SCANNED,
        PAGES_DELETED,
        DOCUMENTS_CREATED,
        DOCUMENTS_DELETED,
        PAGES_REPLACED,
        ERROR_TEXT,
        EXTRACT_DATE,
        SOURCE_SERVER,
        MFB_V2_PARENT_JOB_ID,
		PRIORITY
    from NYHIX_MFB_V2_BATCH_EVENT
	where batch_guid = p_Batch_GUID
    order by nvl(END_DATE_TIME,sysdate), START_DATE_TIME;

	--------------------------------------	
	BEGIN

		IF (BATCH_EVENT_CSR%ISOPEN)
		THEN
			CLOSE BATCH_EVENT_CSR;
		END IF;

		OPEN BATCH_EVENT_CSR;

		LOOP  -- 

			FETCH BATCH_EVENT_CSR 
            INTO GV_SRC_REC_EVENT.MFB_V2_CREATE_DATE,
                GV_SRC_REC_EVENT.MFB_V2_UPDATE_DATE,
                GV_SRC_REC_EVENT.BATCH_MODULE_ID,
                GV_SRC_REC_EVENT.BATCH_GUID,
                GV_SRC_REC_EVENT.MODULE_LAUNCH_ID,
                GV_SRC_REC_EVENT.MODULE_UNIQUE_ID,
                GV_SRC_REC_EVENT.MODULENAME,
                GV_SRC_REC_EVENT.MODULE_CLOSE_UNIQUE_ID,
                GV_SRC_REC_EVENT.MODULE_CLOSE_NAME,
                GV_SRC_REC_EVENT.BATCH_STATUS,
                GV_SRC_REC_EVENT.START_DATE_TIME,
                GV_SRC_REC_EVENT.END_DATE_TIME,
                GV_SRC_REC_EVENT.USER_NAME,
                GV_SRC_REC_EVENT.USER_ID,
                GV_SRC_REC_EVENT.STATION_ID,
                GV_SRC_REC_EVENT.SITE_NAME,
                GV_SRC_REC_EVENT.SITE_ID,
                GV_SRC_REC_EVENT.DELETED,
                GV_SRC_REC_EVENT.PAGES_PER_DOCUMENT,
                GV_SRC_REC_EVENT.PAGES_SCANNED,
                GV_SRC_REC_EVENT.PAGES_DELETED,
                GV_SRC_REC_EVENT.DOCUMENTS_CREATED,
                GV_SRC_REC_EVENT.DOCUMENTS_DELETED,
                GV_SRC_REC_EVENT.PAGES_REPLACED,
                GV_SRC_REC_EVENT.ERROR_TEXT,
                GV_SRC_REC_EVENT.EXTRACT_DATE,
                GV_SRC_REC_EVENT.SOURCE_SERVER,
                GV_SRC_REC_EVENT.MFB_V2_PARENT_JOB_ID,
				GV_SRC_REC_EVENT.PRIORITY;

			GV_EVENT_COUNT	:= 	GV_EVENT_COUNT+1;

			EXIT WHEN BATCH_EVENT_CSR%NOTFOUND;

--			DBMS_OUTPUT.PUT_LINE('Processing BATCH_EVENT_CSR: '||GV_BATCH_GUID_ID);

-- NEW Code for BATCH_STATUS

IF GV_SRC_REC_EVENT.BATCH_STATUS = 0
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Ready';
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS = 2
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Ready';
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS = 4 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'In Progress'; 
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS =  8 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Suspended'; 
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS =  32 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Error'; 
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS = 64 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Completed';
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS =  128 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Reserved'; 
ELSIF GV_SRC_REC_EVENT.BATCH_STATUS = 512 
	THEN GV_SRC_REC_SUMMARY.Instance_Status := 'Locked';
END IF;	

GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT := GV_SRC_REC_EVENT.END_DATE_TIME; 

-- UPD_001 BATCH_PRIORITY

IF ( GV_SRC_REC_SUMMARY.BATCH_PRIORITY IS NULL
OR GV_SRC_REC_SUMMARY.BATCH_PRIORITY  = 0 )
AND GV_SRC_REC_EVENT.PRIORITY IS NOT NULL
AND GV_SRC_REC_EVENT.MODULENAME = 'Scan' -- '${SCAN_MODULE_NAME}'
THEN 
	GV_SRC_REC_SUMMARY.BATCH_PRIORITY := GV_SRC_REC_EVENT.PRIORITY;
END IF;

-- UPD1_BATCH_Pages_Scanned Note Pages_scanned is a number 

IF GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG IS NULL
 THEN GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG := 'N';
END IF; 

IF NVL(GV_SRC_REC_EVENT.PAGES_SCANNED,'0') <> 0
AND NVL(GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG,'N') = 'N' 
THEN 
    GV_SRC_REC_SUMMARY.PAGES_SCANNED_FLAG := 'Y';
END IF;	

-- UPD1_BATCH_Pages_Deleted
IF GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG IS NULL
THEN GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG := 'N';
END IF;

IF NVL(GV_SRC_REC_EVENT.PAGES_DELETED,'0') <> 0
AND NVL(GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG,'N') = 'N' 
THEN GV_SRC_REC_SUMMARY.PAGES_DELETED_FLAG := 'Y';
END IF;

-- UPD1_BATCH_DOCS_Created
IF GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG IS NULL
THEN GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG := 'N';
END IF;

IF NVL(GV_SRC_REC_EVENT.DOCUMENTS_CREATED,'0') <> '0'
AND NVL(GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG,'N') = 'N'
THEN GV_SRC_REC_SUMMARY.DOCS_CREATED_FLAG := 'Y';
END IF;	

-- UPD1_BATCH_DOCS_DELETED
IF GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG IS NULL
THEN GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG := 'N';
END IF;

IF NVL(GV_SRC_REC_EVENT.DOCUMENTS_DELETED,'0') <> '0'
AND NVL(GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG,'N') = 'N'
THEN GV_SRC_REC_SUMMARY.DOCS_DELETED_FLAG := 'Y';
END IF;	

-- UPD1_BATCH_PAGES_REPLACED
IF GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG IS NULL
THEN GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG := 'N';
END IF;

IF NVL(GV_SRC_REC_EVENT.PAGES_REPLACED,'0') <> 0
AND NVL(GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG,'N') = 'N' 
THEN GV_SRC_REC_SUMMARY.PAGES_REPLACED_FLAG := 'Y';
END IF;

-----------------------------------------------------------
-----------------------------------------------------------

-- UPD1_600 - SET BATCH_COMPLETE_DATE
IF gv_src_rec_event.MODULENAME = 'Export' --<< '${EXPORT_MODULE_NAME}'
and gv_src_rec_event.BATCH_STATUS = 64
and GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT is NULL
and gv_src_rec_event.END_DATE_TIME is not NULL
and ( gv_src_rec_event.END_DATE_TIME > GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT
    OR GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT IS NULL )
then GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT := gv_src_rec_event.END_DATE_TIME;
end if;

-- UPD1_610 - SET CURRENT_BATCH_MODULE_ID ( FOR INCOMPLETE BATCHES )
IF GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT is NULL 
AND gv_src_rec_event.MODULENAME <> 'Scan' --<< '${EXPORT_MODULE_NAME}'
and gv_src_rec_event.BATCH_STATUS = 64
and gv_src_rec_event.END_DATE_TIME is not NULL
and ( gv_src_rec_event.END_DATE_TIME > GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT
    OR GV_SRC_REC_SUMMARY.BATCH_COMPLETE_DT IS NULL )
then GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID := gv_src_rec_event.batch_module_id;
end if;

-- UPD2_010 
-- IF GV_TARGET_REC.CANCEL_DT IS NULL
-- AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
IF gv_src_rec_event.MODULENAME= 'Scan' --<<'${SCAN_MODULE_NAME}'
AND gv_src_rec_event.BATCH_STATUS=64
AND gv_src_rec_event.START_DATE_TIME IS NOT NULL
AND ( gv_src_rec_event.START_DATE_TIME <= GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH
     OR GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH IS NULL )
THEN
	GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH := gv_src_rec_event.START_DATE_TIME;
	gv_src_rec_summary.ASED_SCAN_BATCH 	:= gv_src_rec_event.START_DATE_TIME;
	gv_src_rec_summary.ASPB_SCAN_BATCH 	:= gv_src_rec_event.USER_NAME; 
	gv_src_rec_summary.ASF_SCAN_BATCH	:= 'Y';
END IF;

-------------------------------------------------------------------------------
-- UPD3_010
-------------------------------------------------------------------------------
IF GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED IS NULL
THEN	
	GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED := 'N';
END IF;	


IF 1=1
--AND GV_TARGET_REC.CANCEL_DT IS NULL
--AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
--AND gv_src_rec_summary.ASSD_PERFORM_QC is null
--AND gv_src_rec_summary.ASED_SCAN_BATCH is null  -- ASSD_CLASSIFICATION
AND gv_src_rec_event.MODULENAME= 'Scan' --<<'${SCAN_MODULE_NAME}'
AND gv_src_rec_event.MODULE_CLOSE_NAME = 'Quality Control' -- '${QC_MODULE_NAME}'
AND gv_src_rec_event.START_DATE_TIME IS NOT NULL
AND gv_src_rec_event.END_DATE_TIME IS NULL
THEN 
	gv_src_rec_summary.ASSD_PERFORM_QC 	:= gv_src_rec_event.END_DATE_TIME;
	gv_src_rec_summary.GWF_QC_REQUIRED 	:= 'Y';
END IF;	


-------------------------------------------------------------------------------
-- UPD3_030
-------------------------------------------------------------------------------
 IF  1=1
 -- AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
 -- AND GV_SRC_REC_SUMMARY.ASED_SCAN_BATCH IS NOT NULL
 -- AND GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC is null
 -- AND GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION is null
 -- AND GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED = IS NULL

AND (GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED <> 'N'
	 OR GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION	IS NULL
	 OR GV_SRC_REC_SUMMARY.ASSD_RECOGNITION IS NULL 
	 )
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
 AND GV_SRC_REC_EVENT.MODULENAME='Scan' -- '${SCAN_MODULE_NAME}'
 AND gv_src_rec_event.MODULE_CLOSE_NAME <> 'Quality Control' -- '${QC_MODULE_NAME}'
THEN
	GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED := 'N';
	GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION	:=	gv_src_rec_event.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASSD_RECOGNITION		:=	gv_src_rec_event.END_DATE_TIME;
END IF;

-------------------------------------------------------------------------------
-- UPD4_010
-------------------------------------------------------------------------------
 IF GV_SRC_REC_SUMMARY.ASF_PERFORM_QC IS NULL
 THEN GV_SRC_REC_SUMMARY.ASF_PERFORM_QC := 'N';
 END IF;

 IF 1=1
 -- AND GV_SRC_REC_SUMMARY.ASED_PERFORM_QC IS NULL
 -- AND ASSD_PERFORM_QC IS NOT NULL
 AND GV_SRC_REC_EVENT.MODULENAME = 'Quality Control'	--	'${QC_MODULE_NAME}'
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
 AND GV_SRC_REC_EVENT.BATCH_STATUS = 64
THEN 
	GV_SRC_REC_SUMMARY.ASED_PERFORM_QC		:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASPB_PERFORM_QC		:= GV_SRC_REC_EVENT.USER_NAME;
	GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION	:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_PERFORM_QC		:= 'Y';
END IF;



-------------------------------------------------------------------------------
-- UPD5_010
-------------------------------------------------------------------------------

-- UPD5_010

IF GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION	IS NULL
THEN
	GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION	:= 'N';
END IF;

IF GV_TARGET_REC.CANCEL_DT IS NULL
	AND GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION IS NOT NULL
	AND GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION IS NULL
	AND GV_SRC_REC_EVENT.MODULENAME =  'KCN Server' 		--'${CLASSIFICATION_MODULE_NAME}'
	AND GV_SRC_REC_EVENT.MODULE_CLOSE_NAME = 'KTM Server'	--'${RECOGNITION_MODULE_NAME}'
	AND GV_SRC_REC_EVENT.BATCH_STATUS=64
	AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN 
	GV_SRC_REC_SUMMARY.ASED_CLASSIFICATION	:= GV_SRC_REC_EVENT.END_DATE_TIME; 
	GV_SRC_REC_SUMMARY.ASSD_RECOGNITION		:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_CLASSIFICATION	:= 'Y';
END IF;	

--IF GV_TARGET_REC.CANCEL_DT IS NULL
--AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
--IF gv_src_rec_event.MODULENAME= 'Scan' --<<'${SCAN_MODULE_NAME}'
--AND gv_src_rec_event.BATCH_STATUS=64
--AND gv_src_rec_event.START_DATE_TIME IS NOT NULL
--AND gv_src_rec_event.END_DATE_TIME IS NULL
--THEN 
--	gv_src_rec_summary.ASED_SCAN_BATCH 	:= gv_src_rec_event.START_DATE_TIME;
--	gv_src_rec_summary.ASPB_SCAN_BATCH 	:= gv_src_rec_event.USER_NAME; 
--	gv_src_rec_summary.ASF_SCAN_BATCH	:= 'Y';
--END IF;	

-------------------------------------------------------------------------------
-- UPD6_010
-------------------------------------------------------------------------------
-- UPD6_010

IF GV_SRC_REC_SUMMARY.ASF_RECOGNITION	IS NULL
THEN 
	GV_SRC_REC_SUMMARY.ASF_RECOGNITION			:= 'Y';
END IF;	

 IF  GV_SRC_REC_SUMMARY.ASSD_RECOGNITION IS NOT NULL
 AND GV_SRC_REC_SUMMARY.ASED_RECOGNITION IS NULL
 AND GV_SRC_REC_EVENT.MODULENAME = 'KTM Server' --'${RECOGNITION_MODULE_NAME}'
 AND GV_SRC_REC_EVENT.BATCH_STATUS =64
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN
	GV_SRC_REC_SUMMARY.ASED_RECOGNITION			:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA		:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_RECOGNITION			:= 'Y';
END IF;

-------------------------------------------------------------------------------
-- UPD7_020 KTM VALIDATION
-------------------------------------------------------------------------------

IF NVL(GV_SRC_REC_EVENT.SML_MODULE_NAME,'?') <>  'KTM Validation'
	THEN
        NULL;
    ELSIF    
		GV_SRC_REC_SUMMARY.VALIDATION_DT IS NULL
		OR 	( GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
			AND GV_SRC_REC_EVENT.END_DATE_TIME > GV_SRC_REC_SUMMARY.VALIDATION_DT
			)
	THEN  
			GV_SRC_REC_SUMMARY.VALIDATION_DT := GV_SRC_REC_EVENT.END_DATE_TIME;
	END IF;


IF NVL(GV_SRC_REC_EVENT.SML_MODULE_NAME,'?') <> 'KTM Server'
	THEN
        NULL;
    ELSIF    
		GV_SRC_REC_SUMMARY.RECOGNITION_DT IS NULL
		OR 	( GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
			AND GV_SRC_REC_EVENT.END_DATE_TIME > GV_SRC_REC_SUMMARY.RECOGNITION_DT
			)
    THEN  
		GV_SRC_REC_SUMMARY.RECOGNITION_DT := GV_SRC_REC_EVENT.END_DATE_TIME;
	END IF;

GV_SRC_REC_SUMMARY.Classification_DT := GV_SRC_REC_SUMMARY.RECOGNITION_DT;

-- UPD7_020 KTM VALIDATION
IF GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA IS NULL
THEN
	GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA := 'N';
END IF;	

IF 1=1
 AND GV_SRC_REC_EVENT.MODULENAME = 'KTM Validation' 	-- '${VALIDATION_MODULE_NAME}'
 AND GV_SRC_REC_EVENT.BATCH_STATUS	=	64
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN
	GV_SRC_REC_SUMMARY.ASED_VALIDATE_DATA			:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA			:= GV_SRC_REC_EVENT.USER_NAME;
	GV_SRC_REC_SUMMARY.ASPB_VALIDATE_DATA_USER_ID	:= GV_SRC_REC_EVENT.USER_ID;
	GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF				:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_VALIDATE_DATA			:= 'Y';
	GV_SRC_REC_SUMMARY.VALIDATION_DT				:= GV_SRC_REC_EVENT.END_DATE_TIME;
END IF;

-- UPD8_010 - Create PDF
IF GV_SRC_REC_SUMMARY.ASF_CREATE_PDF IS NULL
THEN GV_SRC_REC_SUMMARY.ASF_CREATE_PDF := 'N';
END IF;

IF 1=1
-- AND CANCEL_DT IS NULL
-- AND GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF IS NOT NULL
-- AND GV_SRC_REC_SUMMARY.ASED_CREATE_PDF IS NULL
 AND GV_SRC_REC_EVENT.MODULENAME = 'PDF Generator' --'${PDF_MODULE_NAME}'
 AND GV_SRC_REC_EVENT.BATCH_STATUS=64
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN
	GV_SRC_REC_SUMMARY.ASED_CREATE_PDF 			:=  GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS 	:=  GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_CREATE_PDF			:= 'Y';
END IF;

-- UPD9_010 - ASED_POPULATE_REPORTS

IF GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS IS NULL
THEN
	GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS := 'N';
END IF;	

IF 1=1
-- AND ASSD_POPULATE_REPORTS IS NOT NULL
-- AND ASED_POPULATE_REPORTS IS NULL
 AND GV_SRC_REC_EVENT.MODULENAME   = 'Export' --${EXPORT_MODULE_NAME}'
 AND GV_SRC_REC_EVENT.BATCH_STATUS = 64
 AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN
	GV_SRC_REC_SUMMARY.ASED_POPULATE_REPORTS 	:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS			:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_POPULATE_REPORTS		:= 'Y';
END IF;


-- UPD11_010 - SET BATCH_DELETED

IF  GV_SRC_REC_SUMMARY.BATCH_DELETED IS NULL
THEN GV_SRC_REC_SUMMARY.BATCH_DELETED := 'N';
END IF;

--?????  {0015d100-97cf-4a3e-bf8f-5cdd04cf789e}
IF GV_SRC_REC_SUMMARY.BATCH_GUID =  '{0015d100-97cf-4a3e-bf8f-5cdd04cf789e}'
OR GV_SRC_REC_EVENT.BATCH_GUID =  '{0015d100-97cf-4a3e-bf8f-5cdd04cf789e}'
THEN
DBMS_OUTPUT.PUT_LINE('BEFORE');
DBMS_OUTPUT.PUT_LINE('GV_SRC_REC_SUMMARY.CANCEL_DT :'||GV_SRC_REC_SUMMARY.CANCEL_DT);
DBMS_OUTPUT.PUT_LINE('GV_SRC_REC_EVENT.DELETED :'||GV_SRC_REC_EVENT.DELETED);
DBMS_OUTPUT.PUT_LINE('GV_SRC_REC_EVENT.MODULENAME : '||GV_SRC_REC_EVENT.MODULENAME);
END IF;
--?????


IF GV_SRC_REC_EVENT.DELETED = 'Y'
AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
AND GV_SRC_REC_EVENT.MODULENAME  <> 'Export' --'${EXPORT_MODULE_NAME}'
THEN 	
	GV_SRC_REC_SUMMARY.COMPLETE_DT					:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT			:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.CURRENT_BATCH_MODULE_ID		:= NULL;
	GV_SRC_REC_SUMMARY.BATCH_DELETED 				:= 'Y';
	GV_SRC_REC_SUMMARY.INSTANCE_STATUS 				:= 'Complete';
	GV_SRC_REC_SUMMARY.CANCEL_BY 					:= GV_SRC_REC_EVENT.USER_NAME;	
	GV_SRC_REC_SUMMARY.CANCEL_REASON 				:= 'Deleted';
	GV_SRC_REC_SUMMARY.CANCEL_METHOD 				:= 'Normal'; 
	GV_SRC_REC_SUMMARY.CANCEL_DT					:= GV_SRC_REC_EVENT.END_DATE_TIME;
END IF;

-- New method for batch_Status



-- UPD10_010

IF GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS IS NULL
THEN 
	GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS := 'N';
END IF;

IF 	GV_SRC_REC_EVENT.MODULENAME  = 'Export' --'${EXPORT_MODULE_NAME}'
AND GV_SRC_REC_SUMMARY.CANCEL_DT IS NULL
AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
AND GV_TARGET_REC.ASED_RELEASE_DMS IS NULL
AND GV_SRC_REC_EVENT.BATCH_STATUS=64
AND GV_SRC_REC_EVENT.END_DATE_TIME IS NOT NULL
THEN 
	GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS		:= GV_SRC_REC_EVENT.END_DATE_TIME;
	GV_SRC_REC_SUMMARY.ASF_RELEASE_DMS		:= 'Y'; --	YES_FLAG
	GV_SRC_REC_SUMMARY.COMPLETE_DT			:= GV_SRC_REC_EVENT.END_DATE_TIME;	--ASED_RELEASE_DMS
	GV_SRC_REC_SUMMARY.INSTANCE_STATUS		:= 'Complete'; 
	GV_SRC_REC_SUMMARY.INSTANCE_STATUS_DT	:= GV_SRC_REC_EVENT.END_DATE_TIME;	--ASED_RELEASE_DMS
END IF;



-----------------------------------------------
-----------------------------------------------

		END LOOP;

-- UPD12_010  -- SET CURRENT_STEP	
IF 		GV_SRC_REC_SUMMARY.CANCEL_DT 				IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'End - Cancelled';
ELSIF 	GV_SRC_REC_SUMMARY.ASED_RELEASE_DMS 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'End - Release to DMS';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_RELEASE_DMS 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Release to DMS';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_POPULATE_REPORTS 	IS NOT NULL  
	THEN 	GV_SRC_REC_SUMMARY.CURRENT_STEP :=  'Populate Reports Data';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_CREATE_PDF 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Create PDFs';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_VALIDATE_DATA 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Review Batch (KTM Validation Module)';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_RECOGNITION 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Batch Recognition (Recognition Server)';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_CLASSIFICATION 	IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Classify Document and Extract Metadata';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_PERFORM_QC 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Perform QC';
ELSIF 	GV_SRC_REC_SUMMARY.GWF_QC_REQUIRED 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Gateway - QC Required';
ELSIF 	GV_SRC_REC_SUMMARY.ASSD_SCAN_BATCH 		IS NOT NULL  
	THEN  	GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Scan Batch';
ELSE GV_SRC_REC_SUMMARY.CURRENT_STEP := 'Unknown'; 
END IF;


		IF (BATCH_EVENT_CSR%ISOPEN)
		THEN
			CLOSE BATCH_EVENT_CSR;
		END IF;

EXCEPTION
		WHEN NO_DATA_FOUND
			THEN
            DBMS_OUTPUT.PUT_LINE('Extract_Batch_Event: P_SOURCE_SERVER, p_BATCH_GUID : '||P_SOURCE_SERVER||' '||p_Batch_GUID|| 'NOT found');

			GV_SRC_REC_SUMMARY.BATCH_GUID := p_Batch_GUID;
			--GV_TARGET_REC := NULL;
		WHEN OTHERS THEN
			RAISE;



	End;
	--------------------------------------	

END NYHIX_MFB_V2_BATCH_SUMMARY_PKG;
/
show errors
