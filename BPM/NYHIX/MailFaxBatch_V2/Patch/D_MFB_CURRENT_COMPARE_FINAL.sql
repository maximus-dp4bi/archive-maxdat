  WITH
V1 AS 
( SELECT 'V1' AS SRC,  V1.* FROM MAXDAT.D_MFB_CURRENT_SV V1 
  WHERE (BATCH_GUID, SOURCE_SERVER ) IN ( SELECT BATCH_GUID, SOURCE_SERVER FROM MAXDAT.NYHIX_MFB_V2_STATS_BATCH )	
  AND CREATE_DT >= TO_DATE('20210101','YYYYMMDD')
  AND BATCH_GUID IN ( -- FILTERED OUT BECAUSE V1 WAS NOT UP TO DATE ON CANCEL_DT, REPROCESSED_DATE AND BATCH_DELETED
                        SELECT BATCH_GUID FROM MAXDAT.NYHIX_MFB_V2_BATCH_SUMMARY  
                        WHERE CANCEL_DT IS NULL AND REPROCESSED_DATE IS NULL AND NVL(BATCH_DELETED,'N') = 'N' ) 
),
V2 AS 
( SELECT 'V2' AS SRC,  V2.* FROM MAXDAT.D_MFB_V2_CURRENT_SV V2 
  WHERE (BATCH_GUID, SOURCE_SERVER )IN ( SELECT BATCH_GUID, SOURCE_SERVER FROM MAXDAT.NYHIX_MFB_V2_STATS_BATCH )	
  AND CREATE_DT >= TO_DATE('20210101','YYYYMMDD')
),
MATCHED_GUIDS AS
( SELECT V1.SOURCE_SERVER AS V1_SOURCE_SERVER, 
		 V1.BATCH_GUID AS V1_BATCH_GUID, 
		 V2.BATCH_GUID AS V2_BATCH_GUID
	FROM V1 
	JOIN V2 
		ON V1.BATCH_GUID = V2.BATCH_GUID
		AND V1.SOURCE_SERVER  = V2.SOURCE_SERVER  
),
V3 AS
(
SELECT 'V3' AS SRC,
---------	
		V1.BATCH_GUID,
     --  CASE WHEN NVL(TO_CHAR(V1.BATCH_GUID),'?')	  	<>  	NVL(TO_CHAR(V2.BATCH_GUID),'?')	then '?' ELSE ' ' END as BATCH_GUID, -- 	3	VARCHAR2
	CASE WHEN NVL(TO_CHAR( V1.BATCH_ID),'0')	  			<> NVL(TO_CHAR( V2.BATCH_ID),'0')				then '?' ELSE ' ' END as BATCH_ID,				-- 3	NUMBER	
    CASE WHEN NVL(TO_CHAR(V1.BATCH_NAME),'?')	  		<>  	NVL(TO_CHAR(V2.BATCH_NAME),'?')	then '?' ELSE ' ' END as BATCH_NAME, -- 	5	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.SOURCE_SERVER),'?')	  	<>  	NVL(TO_CHAR(V2.SOURCE_SERVER),'?')	then '?' ELSE ' ' END as SOURCE_SERVER, -- 	6	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.BATCH_DESCRIPTION),'?')	  <>  	NVL(TO_CHAR(V2.BATCH_DESCRIPTION),'?')	then '?' ELSE ' ' END as BATCH_DESCRIPTION, -- 	7	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.REPROCESSED_FLAG),'?')	  	<>  	NVL(TO_CHAR(V2.REPROCESSED_FLAG),'?')	then '?' ELSE ' ' END as REPROCESSED_FLAG, -- 	8	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CREATION_STATION_ID),'?')	  <>  	NVL(TO_CHAR(V2.CREATION_STATION_ID),'?')	then '?' ELSE ' ' END as CREATION_STATION_ID, -- 	9	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.BATCH_CREATED_BY),'?')	  	<>  	NVL(TO_CHAR(V2.BATCH_CREATED_BY),'?')	then '?' ELSE ' ' END as BATCH_CREATED_BY, -- 	10	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CREATION_USER_ID),'?')	  	<>  	NVL(TO_CHAR(V2.CREATION_USER_ID),'?')	then '?' ELSE ' ' END as CREATION_USER_ID, -- 	11	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.BATCH_CLASS),'?')	  		<>  	NVL(TO_CHAR(V2.BATCH_CLASS),'?')	then '?' ELSE ' ' END as BATCH_CLASS, -- 	12	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.BATCH_CLASS_DESCRIPTION),'?')	  <>  	NVL(TO_CHAR(V2.BATCH_CLASS_DESCRIPTION),'?')	then '?' ELSE ' ' END as BATCH_CLASS_DESCRIPTION, -- 	13	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.BATCH_TYPE),'?')	  		<>  	NVL(TO_CHAR(V2.BATCH_TYPE),'?')	then '?' ELSE ' ' END as BATCH_TYPE, -- 	14	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CREATE_DT),'?')	  		<>  	NVL(TO_CHAR(V2.CREATE_DT),'?')	then '?' ELSE ' ' END as CREATE_DT, -- 	15	DATE
    CASE WHEN NVL(TO_CHAR(V1.COMPLETE_DT),'?')	  		<>  	NVL(TO_CHAR(V2.COMPLETE_DT),'?')	then '?' ELSE ' ' END as COMPLETE_DT, -- 	16	DATE
    CASE WHEN NVL(TO_CHAR(V1.INSTANCE_STATUS),'?')	  	<>      NVL(TO_CHAR(
                                                                            CASE WHEN V2.INSTANCE_STATUS = 'Deleted' THEN 'Complete' ELSE V2.INSTANCE_STATUS END
                                                                            ),'?') then '?' else ' ' end as  INSTANCE_STATUS, -- 	17	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.INSTANCE_STATUS_DT),'?')	<>  	NVL(TO_CHAR(V2.INSTANCE_STATUS_DT),'?')	then '?' ELSE ' ' END as INSTANCE_STATUS_DT, -- 	18	DATE
    CASE WHEN NVL(TO_CHAR(V1.BATCH_PAGE_COUNT),'0')	  	<>  	NVL(TO_CHAR(V2.BATCH_PAGE_COUNT),'0')	then '?' ELSE ' ' END as BATCH_PAGE_COUNT, -- 	19	NUMBER
    CASE WHEN NVL(TO_CHAR(V1.BATCH_DOC_COUNT),'0')	  	<>  	NVL(TO_CHAR(V2.BATCH_DOC_COUNT),'0')	then '?' ELSE ' ' END as BATCH_DOC_COUNT, -- 	20	NUMBER
    CASE WHEN NVL(TO_CHAR(V1.BATCH_ENVELOPE_COUNT),'0')	  <>  	NVL(TO_CHAR(V2.BATCH_ENVELOPE_COUNT),'0')	then '?' ELSE ' ' END as BATCH_ENVELOPE_COUNT, -- 	21	NUMBER
    CASE WHEN NVL(TO_CHAR(V1.CANCEL_DT),'?')	  		<>  	NVL(TO_CHAR(V2.CANCEL_DT),'?')	then '?' ELSE ' ' END as CANCEL_DT, -- 	22	DATE
    CASE WHEN NVL(TO_CHAR(V1.CANCEL_BY),'?')	  		<>  	NVL(TO_CHAR(V2.CANCEL_BY),'?')	then '?' ELSE ' ' END as CANCEL_BY, -- 	23	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CANCEL_REASON),'?')	  	<>  	NVL(TO_CHAR(V2.CANCEL_REASON),'?')	then '?' ELSE ' ' END as CANCEL_REASON, -- 	24	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CANCEL_METHOD),'?')	  	<>  	NVL(TO_CHAR(V2.CANCEL_METHOD),'?')	then '?' ELSE ' ' END as CANCEL_METHOD, -- 	25	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.SCAN_BATCH_FLAG),'?')	  	<>  	NVL(TO_CHAR(V2.SCAN_BATCH_FLAG),'?')	then '?' ELSE ' ' END as SCAN_BATCH_FLAG, -- 	26	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_SCAN_START),'?')  	<>  	NVL(TO_CHAR(V2.PERFORM_SCAN_START),'?')	then '?' ELSE ' ' END as PERFORM_SCAN_START, -- 	27	DATE
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_SCAN_END),'?')	  	<>  	NVL(TO_CHAR(V2.PERFORM_SCAN_END),'?')	then '?' ELSE ' ' END as PERFORM_SCAN_END, -- 	28	DATE
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_SCAN_PERFORMED_BY),'?')	  <>  	NVL(TO_CHAR(V2.PERFORM_SCAN_PERFORMED_BY),'?')	then '?' ELSE ' ' END as PERFORM_SCAN_PERFORMED_BY, -- 	29	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_QC_FLAG),'?')	  	<>  	NVL(TO_CHAR(V2.PERFORM_QC_FLAG),'?')	then '?' ELSE ' ' END as PERFORM_QC_FLAG, -- 	30	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_QC_START),'?')	  	<>  	NVL(TO_CHAR(V2.PERFORM_QC_START),'?')	then '?' ELSE ' ' END as PERFORM_QC_START, -- 	31	DATE
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_QC_END),'?')	  	<>  	NVL(TO_CHAR(V2.PERFORM_QC_END),'?')	then '?' ELSE ' ' END as PERFORM_QC_END, -- 	32	DATE
    CASE WHEN NVL(TO_CHAR(V1.PERFORM_QC_PERFORMED_BY),'?')	  <>  	NVL(TO_CHAR(V2.PERFORM_QC_PERFORMED_BY),'?')	then '?' ELSE ' ' END as PERFORM_QC_PERFORMED_BY, -- 	33	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.KOFAX_QC_REASON),'?')	  	<>  	NVL(TO_CHAR(V2.KOFAX_QC_REASON),'?')	then '?' ELSE ' ' END as KOFAX_QC_REASON, -- 	34	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CLASSIFICATION_FLAG),'?')	<>  	NVL(TO_CHAR(V2.CLASSIFICATION_FLAG),'?')	then '?' ELSE ' ' END as CLASSIFICATION_FLAG, -- 	35	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CLASSIFICATION_START),'?')	<>  	NVL(TO_CHAR(V2.CLASSIFICATION_START),'?')	then '?' ELSE ' ' END as CLASSIFICATION_START, -- 	36	DATE
    CASE WHEN NVL(TO_CHAR(V1.CLASSIFICATION_END),'?')	<>  	NVL(TO_CHAR(V2.CLASSIFICATION_END),'?')	then '?' ELSE ' ' END as CLASSIFICATION_END, -- 	37	DATE
    CASE WHEN NVL(TO_CHAR(V1.CLASSIFICATION_DT),'?')	<>  	NVL(TO_CHAR(V2.CLASSIFICATION_DT),'?')	then '?' ELSE ' ' END as CLASSIFICATION_DT, -- 	38	DATE
    CASE WHEN NVL(TO_CHAR(V1.RECOGNITION_FLAG),'?')	  	<>  	NVL(TO_CHAR(V2.RECOGNITION_FLAG),'?')	then '?' ELSE ' ' END as RECOGNITION_FLAG, -- 	39	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.RECOGNITION_START),'?')	<>  	NVL(TO_CHAR(V2.RECOGNITION_START),'?')	then '?' ELSE ' ' END as RECOGNITION_START, -- 	40	DATE
    CASE WHEN NVL(TO_CHAR(V1.RECOGNITION_END),'?')	  	<>  	NVL(TO_CHAR(V2.RECOGNITION_END),'?')	then '?' ELSE ' ' END as RECOGNITION_END, -- 	41	DATE
    CASE WHEN NVL(TO_CHAR(V1.RECOGNITION_DT),'?')	  	<>  	NVL(TO_CHAR(V2.RECOGNITION_DT),'?')	then '?' ELSE ' ' END as RECOGNITION_DT, -- 	42	DATE
    CASE WHEN NVL(TO_CHAR(V1.VALIDATE_DATA_FLAG),'?')	<>  	NVL(TO_CHAR(V2.VALIDATE_DATA_FLAG),'?')	then '?' ELSE ' ' END as VALIDATE_DATA_FLAG, -- 	43	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.VALIDATE_DATA_START),'?')	<>  	NVL(TO_CHAR(V2.VALIDATE_DATA_START),'?')	then '?' ELSE ' ' END as VALIDATE_DATA_START, -- 	44	DATE
    CASE WHEN NVL(TO_CHAR(V1.VALIDATE_DATA_END),'?')	<>  	NVL(TO_CHAR(V2.VALIDATE_DATA_END),'?')	then '?' ELSE ' ' END as VALIDATE_DATA_END, -- 	45	DATE
    CASE WHEN NVL(TO_CHAR(V1.VALIDATE_DATA_PERFORMED_BY),'?')	  <>  	NVL(TO_CHAR(V2.VALIDATE_DATA_PERFORMED_BY),'?')	then '?' ELSE ' ' END as VALIDATE_DATA_PERFORMED_BY, -- 	46	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.VALIDATION_DT),'?')	  	<>  	NVL(TO_CHAR(V2.VALIDATION_DT),'?')	then '?' ELSE ' ' END as VALIDATION_DT, -- 	47	DATE
    CASE WHEN NVL(TO_CHAR(V1.CREATE_PDF_FLAG),'?')	  	<>  	NVL(TO_CHAR(V2.CREATE_PDF_FLAG),'?')	then '?' ELSE ' ' END as CREATE_PDF_FLAG, -- 	48	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CREATE_PDFS_START),'?')	<>  	NVL(TO_CHAR(V2.CREATE_PDFS_START),'?')	then '?' ELSE ' ' END as CREATE_PDFS_START, -- 	49	DATE
    CASE WHEN NVL(TO_CHAR(V1.CREATE_PDFS_END),'?')	  	<>  	NVL(TO_CHAR(V2.CREATE_PDFS_END),'?')	then '?' ELSE ' ' END as CREATE_PDFS_END, -- 	50	DATE
    CASE WHEN NVL(TO_CHAR(V1.POPULATE_REPORTS_DATA_FLAG),'?')	  <>  	NVL(TO_CHAR(V2.POPULATE_REPORTS_DATA_FLAG),'?')	then '?' ELSE ' ' END as POPULATE_REPORTS_DATA_FLAG, -- 	51	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.POPULATE_REPORTS_DATA_START),'?')	  <>  	NVL(TO_CHAR(V2.POPULATE_REPORTS_DATA_START),'?')	then '?' ELSE ' ' END as POPULATE_REPORTS_DATA_START, -- 	52	DATE
    CASE WHEN NVL(TO_CHAR(V1.POPULATE_REPORTS_DATA_END),'?')	  <>  	NVL(TO_CHAR(V2.POPULATE_REPORTS_DATA_END),'?')	then '?' ELSE ' ' END as POPULATE_REPORTS_DATA_END, -- 	53	DATE
    CASE WHEN NVL(TO_CHAR(V1.RELEASE_TO_DMS_FLAG),'?')	<>  	NVL(TO_CHAR(V2.RELEASE_TO_DMS_FLAG),'?')	then '?' ELSE ' ' END as RELEASE_TO_DMS_FLAG, -- 	54	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.RELEASE_TO_DMS_START),'?')	<>  	NVL(TO_CHAR(V2.RELEASE_TO_DMS_START),'?')	then '?' ELSE ' ' END as RELEASE_TO_DMS_START, -- 	55	DATE
    CASE WHEN NVL(TO_CHAR(V1.RELEASE_TO_DMS_END),'?')	<>  	NVL(TO_CHAR(V2.RELEASE_TO_DMS_END),'?')	then '?' ELSE ' ' END as RELEASE_TO_DMS_END, -- 	56	DATE
    CASE WHEN NVL(TO_CHAR(V1.BATCH_PRIORITY),'?')	  	<>  	NVL(TO_CHAR(V2.BATCH_PRIORITY),'?')	then '?' ELSE ' ' END as BATCH_PRIORITY, -- 	57	NUMBER
    CASE WHEN NVL(TO_CHAR(V1.BATCH_DELETED),'?')	  	<>  	NVL(TO_CHAR(V2.BATCH_DELETED),'?')	then '?' ELSE ' ' END as BATCH_DELETED, -- 	58	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PAGES_SCANNED),'?')	  	<>  	NVL(TO_CHAR(V2.PAGES_SCANNED),'?')	then '?' ELSE ' ' END as PAGES_SCANNED, -- 	59	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.DOCUMENTS_CREATED),'?')	<>  	NVL(TO_CHAR(V2.DOCUMENTS_CREATED),'?')	then '?' ELSE ' ' END as DOCUMENTS_CREATED, -- 	60	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.DOCUMENTS_DELETED),'?')	<>  	NVL(TO_CHAR(V2.DOCUMENTS_DELETED),'?')	then '?' ELSE ' ' END as DOCUMENTS_DELETED, -- 	61	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PAGES_REPLACED_FLAG),'?')	<>  	NVL(TO_CHAR(V2.PAGES_REPLACED_FLAG),'?')	then '?' ELSE ' ' END as PAGES_REPLACED_FLAG, -- 	62	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.PAGES_DELETED_FLAG),'?')	<>  	NVL(TO_CHAR(V2.PAGES_DELETED_FLAG),'?')	then '?' ELSE ' ' END as PAGES_DELETED_FLAG, -- 	63	VARCHAR2
	CASE WHEN NVL(TO_CHAR( V1.AGE_IN_BUSINESS_DAYS),'0')	<> NVL(TO_CHAR( V2.AGE_IN_BUSINESS_DAYS),'0') 	then '?' ELSE ' ' END as AGE_IN_BUSINESS_DAYS,	-- 60   NUMBER
	CASE WHEN NVL(TO_CHAR( V1.AGE_IN_CALENDAR_DAYS),'0') 	<> NVL(TO_CHAR(  V2.AGE_IN_CALENDAR_DAYS),'0') 	then '?' ELSE ' ' END as AGE_IN_CALENDAR_DAYS,	-- 61	NUMBER	
	CASE WHEN NVL(TO_CHAR( V1.TIMELINESS_STATUS),'?') 		<> NVL(TO_CHAR( V2.TIMELINESS_STATUS),'?')		then '?' ELSE ' ' END as TIMELINESS_STATUS,  	-- 62	VARCHAR2 
	CASE WHEN NVL(TO_CHAR( V1.TIMELINESS_DAYS),'0')	  		<> NVL(TO_CHAR( V2.TIMELINESS_DAYS),'0') 		then '?' ELSE ' ' END as TIMELINESS_DAYS,		-- 63	NUMBER	
	CASE WHEN NVL(TO_CHAR( V1.TIMELINESS_DAYS_TYPE),'?')		<> NVL(TO_CHAR( V2.TIMELINESS_DAYS_TYPE),'?') 	then '?' ELSE ' ' END as TIMELINESS_DAYS_TYPE,	-- 64	VARCHAR2 
	CASE WHEN NVL(TO_CHAR( V1.TIMELINESS_DT),'?')	  		<> NVL(TO_CHAR(V2.TIMELINESS_DT),'?') 			then '?' ELSE ' ' END as TIMELINESS_DT,			-- 65	DATE	
	CASE WHEN NVL(TO_CHAR( V1.JEOPARDY_FLAG),'?')	  		<> NVL(TO_CHAR(V2.JEOPARDY_FLAG),'?') 			then '?' ELSE ' ' END as JEOPARDY_FLAG,			-- 66	VARCHAR2 
	CASE WHEN NVL(TO_CHAR( V1.JEOPARDY_DAYS),'0')	  		<> NVL(TO_CHAR(V2.JEOPARDY_DAYS),'0') 			then '?' ELSE ' ' END as JEOPARDY_DAYS, 			-- 67 	NUMBER	
	CASE WHEN NVL(TO_CHAR( V1.JEOPARDY_DAYS_TYPE),'?')  		<> NVL(TO_CHAR(V2.JEOPARDY_DAYS_TYPE),'?')		then '?' ELSE ' ' END as JEOPARDY_DAYS_TYPE,		-- 68	VARCHAR2 
	CASE WHEN NVL(TO_CHAR( V1.JEOPARDY_DT),'?')	  			<> NVL(TO_CHAR(V2.JEOPARDY_DT),'?')				then '?' ELSE ' ' END as JEOPARDY_DT,			-- 69	DATE	
	CASE WHEN NVL(TO_CHAR( V1.TARGET_DAYS),'0')	  			<> NVL(TO_CHAR( V2.TARGET_DAYS),'0') 			then '?' ELSE ' ' END as TARGET_DAYS,	  		-- 70	NUMBER	
    CASE WHEN NVL(TO_CHAR(V1.BATCH_COMPLETE_DT),'?')	<>  	NVL(TO_CHAR(V2.BATCH_COMPLETE_DT),'?')	then '?' ELSE ' ' END as BATCH_COMPLETE_DT, -- 	69	DATE
    CASE WHEN NVL(TO_CHAR(V1.CURRENT_BATCH_MODULE_ID),'?')	  <>  	NVL(TO_CHAR(V2.CURRENT_BATCH_MODULE_ID),'?')	then '?' ELSE ' ' END as CURRENT_BATCH_MODULE_ID, -- 	70	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.GWF_QC_REQUIRED),'?')	  	<>  	NVL(TO_CHAR(V2.GWF_QC_REQUIRED),'?')	then '?' ELSE ' ' END as GWF_QC_REQUIRED, -- 	71	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.CURRENT_STEP),'?')	  		<>  	NVL(TO_CHAR(V2.CURRENT_STEP),'?')	then '?' ELSE ' ' END as CURRENT_STEP, -- 	72	VARCHAR2
--??       CASE WHEN NVL(TO_CHAR(V1.CEJS_JOB_ID),'?')	  <>  	NVL(TO_CHAR(V2.CEJS_JOB_ID),'?')	then '?' ELSE ' ' END as CEJS_JOB_ID, -- 	73	NUMBER
    CASE WHEN NVL(TO_CHAR(V1.VALIDATE_DATA_PERF_BY_USER_ID),'?')	  <>  	NVL(TO_CHAR(V2.VALIDATE_DATA_PERF_BY_USER_ID),'?')	then '?' ELSE ' ' END as VALIDATE_DATA_PERF_BY_USER_ID, -- 	74	VARCHAR2
    CASE WHEN NVL(TO_CHAR(V1.FAX_BATCH_SOURCE),'?')	  <>  	NVL(TO_CHAR(V2.FAX_BATCH_SOURCE),'?')	then '?' ELSE ' ' END as FAX_BATCH_SOURCE -- 	75	VARCHAR2---------	   
---------	
	from v1 join v2 on v1.source_server = v2.source_server and v1.batch_guid = v2.batch_guid
	AND (V1.BATCH_GUID, V1.SOURCE_SERVER) 
	IN ( SELECT V1_BATCH_GUID, V1_SOURCE_SERVER FROM MATCHED_GUIDS )
),
DIFFS AS
( SELECT * 
FROM V3
       WHERE 
       ( 1=2
	   OR BATCH_ID = '?'				-- 3	NUMBER	
	   OR BATCH_NAME = '?'  -- 	5	VARCHAR2
       OR SOURCE_SERVER = '?'  -- 	6	VARCHAR2
       OR BATCH_DESCRIPTION = '?'  -- 	7	VARCHAR2
       OR REPROCESSED_FLAG = '?'  -- 	8	VARCHAR2
       OR CREATION_STATION_ID = '?'  -- 	9	VARCHAR2
       OR BATCH_CREATED_BY = '?'  -- 	10	VARCHAR2
       OR CREATION_USER_ID = '?'  -- 	11	VARCHAR2
       OR BATCH_CLASS = '?'  -- 	12	VARCHAR2
       OR BATCH_CLASS_DESCRIPTION = '?'  -- 	13	VARCHAR2
       OR BATCH_TYPE = '?'  -- 	14	VARCHAR2
	   OR CREATE_DT = '?'  -- 	15	DATE
       OR COMPLETE_DT = '?'  -- 	16	DATE
       OR INSTANCE_STATUS = '?'  -- 	17	VARCHAR2
       OR INSTANCE_STATUS_DT = '?'  -- 	18	DATE
       OR BATCH_PAGE_COUNT = '?'  -- 	19	NUMBER
       OR BATCH_DOC_COUNT = '?'  -- 	20	NUMBER
       OR BATCH_ENVELOPE_COUNT = '?'  -- 	21	NUMBER
	   OR CANCEL_DT = '?'  -- 	22	DATE
	   OR CANCEL_BY = '?'  -- 	23	VARCHAR2
       OR CANCEL_REASON = '?'  -- 	24	VARCHAR2
       OR CANCEL_METHOD = '?'  -- 	25	VARCHAR2
       OR SCAN_BATCH_FLAG = '?'  -- 	26	VARCHAR2
       OR PERFORM_SCAN_START = '?'  -- 	27	DATE
       OR PERFORM_SCAN_END = '?'  -- 	28	DATE
       OR PERFORM_SCAN_PERFORMED_BY = '?'  -- 	29	VARCHAR2
       OR PERFORM_QC_FLAG = '?'  -- 	30	VARCHAR2
       OR PERFORM_QC_START = '?'  -- 	31	DATE
       OR PERFORM_QC_END = '?'  -- 	32	DATE
       OR PERFORM_QC_PERFORMED_BY = '?'  -- 	33	VARCHAR2
       OR KOFAX_QC_REASON = '?'  -- 	34	VARCHAR2
       OR CLASSIFICATION_FLAG = '?'  -- 	35	VARCHAR2
       OR CLASSIFICATION_START = '?'  -- 	36	DATE
       OR CLASSIFICATION_END = '?'  -- 	37	DATE
       OR CLASSIFICATION_DT = '?'  -- 	38	DATE
       OR RECOGNITION_FLAG = '?'  -- 	39	VARCHAR2
       OR RECOGNITION_START = '?'  -- 	40	DATE
       OR RECOGNITION_END = '?'  -- 	41	DATE
       OR RECOGNITION_DT = '?'  -- 	42	DATE
       OR VALIDATE_DATA_FLAG = '?'  -- 	43	VARCHAR2
       OR VALIDATE_DATA_START = '?'  -- 	44	DATE
       OR VALIDATE_DATA_END = '?'  -- 	45	DATE
       OR VALIDATE_DATA_PERFORMED_BY = '?'  -- 	46	VARCHAR2
       OR VALIDATION_DT = '?'  -- 	47	DATE
       OR CREATE_PDF_FLAG = '?'  -- 	48	VARCHAR2
       OR CREATE_PDFS_START = '?'  -- 	49	DATE
       OR CREATE_PDFS_END = '?'  -- 	50	DATE
       OR POPULATE_REPORTS_DATA_FLAG = '?'  -- 	51	VARCHAR2
       OR POPULATE_REPORTS_DATA_START = '?'  -- 	52	DATE
       OR POPULATE_REPORTS_DATA_END = '?'  -- 	53	DATE
       OR RELEASE_TO_DMS_FLAG = '?'  -- 	54	VARCHAR2
       OR RELEASE_TO_DMS_START = '?'  -- 	55	DATE
       OR RELEASE_TO_DMS_END = '?'  -- 	56	DATE
       OR BATCH_PRIORITY = '?'  -- 	57	NUMBER
       OR BATCH_DELETED = '?'  -- 	58	VARCHAR2
       OR PAGES_SCANNED = '?'  -- 	59	VARCHAR2
       OR DOCUMENTS_CREATED = '?'  -- 	60	VARCHAR2
       OR DOCUMENTS_DELETED = '?'  -- 	61	VARCHAR2
       OR PAGES_REPLACED_FLAG = '?'  -- 	62	VARCHAR2
       OR PAGES_DELETED_FLAG = '?'  -- 	63	VARCHAR2
        OR AGE_IN_CALENDAR_DAYS = '?'
        OR AGE_IN_BUSINESS_DAYS = '?'
        OR BATCH_ID = '?'
        OR JEOPARDY_DAYS= '?'
        OR JEOPARDY_DAYS_TYPE= '?'
        OR JEOPARDY_DT = '?'
        OR JEOPARDY_FLAG = '?'
        --OR MFB_BI_ID = '?'
        OR TARGET_DAYS = '?'
        OR TIMELINESS_DAYS = '?'
        OR TIMELINESS_DAYS_TYPE = '?'
        OR TIMELINESS_DT = '?'
        OR TIMELINESS_STATUS = '?'
        OR BATCH_COMPLETE_DT = '?'  -- 	69	DATE
        OR CURRENT_BATCH_MODULE_ID = '?'  -- 	70	VARCHAR2
        OR GWF_QC_REQUIRED = '?'  -- 	71	VARCHAR2
        OR CURRENT_STEP = '?'  -- 	72	VARCHAR2
--??       OR CEJS_JOB_ID = '?'  -- 	73	NUMBER
       OR VALIDATE_DATA_PERF_BY_USER_ID = '?'  -- 	74	VARCHAR2
       OR FAX_BATCH_SOURCE = '?'  -- 	75	VARCHAR2---------
       )
       AND 
       ( 1=2
       OR INSTANCE_STATUS = '?'
--       OR TIMELINESS_STATUS = '?'	  
--        OR JEOPARDY_DT = '?'
--        OR JEOPARDY_FLAG = '?'   
        )
),
DIFF_COUNTS as
(
SELECT 'V0' AS src,
'** Diff Totals **'AS BATCH_GUID,     
TO_CHAR(SUM(CASE WHEN  BATCH_ID = '?' THEN 1 ELSE 0 END)) 				AS BATCH_ID,   
TO_CHAR(SUM(CASE WHEN BATCH_NAME  = '?'  THEN 1 ELSE 0 END)) AS BATCH_NAME,
TO_CHAR(SUM(CASE WHEN SOURCE_SERVER  = '?'  THEN 1 ELSE 0 END)) AS SOURCE_SERVER,
TO_CHAR(SUM(CASE WHEN BATCH_DESCRIPTION  = '?'  THEN 1 ELSE 0 END)) AS BATCH_DESCRIPTION,
TO_CHAR(SUM(CASE WHEN REPROCESSED_FLAG  = '?'  THEN 1 ELSE 0 END)) AS REPROCESSED_FLAG,
TO_CHAR(SUM(CASE WHEN CREATION_STATION_ID  = '?'  THEN 1 ELSE 0 END)) AS CREATION_STATION_ID,
TO_CHAR(SUM(CASE WHEN BATCH_CREATED_BY  = '?'  THEN 1 ELSE 0 END)) AS BATCH_CREATED_BY,
TO_CHAR(SUM(CASE WHEN CREATION_USER_ID  = '?'  THEN 1 ELSE 0 END)) AS CREATION_USER_ID,
TO_CHAR(SUM(CASE WHEN BATCH_CLASS  = '?'  THEN 1 ELSE 0 END)) AS BATCH_CLASS,
TO_CHAR(SUM(CASE WHEN BATCH_CLASS_DESCRIPTION  = '?'  THEN 1 ELSE 0 END)) AS BATCH_CLASS_DESCRIPTION,
TO_CHAR(SUM(CASE WHEN BATCH_TYPE  = '?'  THEN 1 ELSE 0 END)) AS BATCH_TYPE,
TO_CHAR(SUM(CASE WHEN CREATE_DT  = '?'  THEN 1 ELSE 0 END)) AS CREATE_DT,
TO_CHAR(SUM(CASE WHEN COMPLETE_DT  = '?'  THEN 1 ELSE 0 END)) AS COMPLETE_DT,
TO_CHAR(SUM(CASE WHEN INSTANCE_STATUS  = '?'  THEN 1 ELSE 0 END)) AS INSTANCE_STATUS,
TO_CHAR(SUM(CASE WHEN INSTANCE_STATUS_DT  = '?'  THEN 1 ELSE 0 END)) AS INSTANCE_STATUS_DT,
TO_CHAR(SUM(CASE WHEN BATCH_PAGE_COUNT  = '?'  THEN 1 ELSE 0 END)) AS BATCH_PAGE_COUNT,
TO_CHAR(SUM(CASE WHEN BATCH_DOC_COUNT  = '?'  THEN 1 ELSE 0 END)) AS BATCH_DOC_COUNT,
TO_CHAR(SUM(CASE WHEN BATCH_ENVELOPE_COUNT  = '?'  THEN 1 ELSE 0 END)) AS BATCH_ENVELOPE_COUNT,
TO_CHAR(SUM(CASE WHEN CANCEL_DT  = '?'  THEN 1 ELSE 0 END)) AS CANCEL_DT,
TO_CHAR(SUM(CASE WHEN CANCEL_BY  = '?'  THEN 1 ELSE 0 END)) AS CANCEL_BY,
TO_CHAR(SUM(CASE WHEN CANCEL_REASON  = '?'  THEN 1 ELSE 0 END)) AS CANCEL_REASON,
TO_CHAR(SUM(CASE WHEN CANCEL_METHOD  = '?'  THEN 1 ELSE 0 END)) AS CANCEL_METHOD,
TO_CHAR(SUM(CASE WHEN SCAN_BATCH_FLAG  = '?'  THEN 1 ELSE 0 END)) AS SCAN_BATCH_FLAG,
TO_CHAR(SUM(CASE WHEN PERFORM_SCAN_START  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_SCAN_START,
TO_CHAR(SUM(CASE WHEN PERFORM_SCAN_END  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_SCAN_END,
TO_CHAR(SUM(CASE WHEN PERFORM_SCAN_PERFORMED_BY  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_SCAN_PERFORMED_BY,
TO_CHAR(SUM(CASE WHEN PERFORM_QC_FLAG  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_QC_FLAG,
TO_CHAR(SUM(CASE WHEN PERFORM_QC_START  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_QC_START,
TO_CHAR(SUM(CASE WHEN PERFORM_QC_END  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_QC_END,
TO_CHAR(SUM(CASE WHEN PERFORM_QC_PERFORMED_BY  = '?'  THEN 1 ELSE 0 END)) AS PERFORM_QC_PERFORMED_BY,
TO_CHAR(SUM(CASE WHEN KOFAX_QC_REASON  = '?'  THEN 1 ELSE 0 END)) AS KOFAX_QC_REASON,
TO_CHAR(SUM(CASE WHEN CLASSIFICATION_FLAG  = '?'  THEN 1 ELSE 0 END)) AS CLASSIFICATION_FLAG,
TO_CHAR(SUM(CASE WHEN CLASSIFICATION_START  = '?'  THEN 1 ELSE 0 END)) AS CLASSIFICATION_START,
TO_CHAR(SUM(CASE WHEN CLASSIFICATION_END  = '?'  THEN 1 ELSE 0 END)) AS CLASSIFICATION_END,
TO_CHAR(SUM(CASE WHEN CLASSIFICATION_DT  = '?'  THEN 1 ELSE 0 END)) AS CLASSIFICATION_DT,
TO_CHAR(SUM(CASE WHEN RECOGNITION_FLAG  = '?'  THEN 1 ELSE 0 END)) AS RECOGNITION_FLAG,
TO_CHAR(SUM(CASE WHEN RECOGNITION_START  = '?'  THEN 1 ELSE 0 END)) AS RECOGNITION_START,
TO_CHAR(SUM(CASE WHEN RECOGNITION_END  = '?'  THEN 1 ELSE 0 END)) AS RECOGNITION_END,
TO_CHAR(SUM(CASE WHEN RECOGNITION_DT  = '?'  THEN 1 ELSE 0 END)) AS RECOGNITION_DT,
TO_CHAR(SUM(CASE WHEN VALIDATE_DATA_FLAG  = '?'  THEN 1 ELSE 0 END)) AS VALIDATE_DATA_FLAG,
TO_CHAR(SUM(CASE WHEN VALIDATE_DATA_START  = '?'  THEN 1 ELSE 0 END)) AS VALIDATE_DATA_START,
TO_CHAR(SUM(CASE WHEN VALIDATE_DATA_END  = '?'  THEN 1 ELSE 0 END)) AS VALIDATE_DATA_END,
TO_CHAR(SUM(CASE WHEN VALIDATE_DATA_PERFORMED_BY  = '?'  THEN 1 ELSE 0 END)) AS VALIDATE_DATA_PERFORMED_BY,
TO_CHAR(SUM(CASE WHEN VALIDATION_DT  = '?'  THEN 1 ELSE 0 END)) AS VALIDATION_DT,
TO_CHAR(SUM(CASE WHEN CREATE_PDF_FLAG  = '?'  THEN 1 ELSE 0 END)) AS CREATE_PDF_FLAG,
TO_CHAR(SUM(CASE WHEN CREATE_PDFS_START  = '?'  THEN 1 ELSE 0 END)) AS CREATE_PDFS_START,
TO_CHAR(SUM(CASE WHEN CREATE_PDFS_END  = '?'  THEN 1 ELSE 0 END)) AS CREATE_PDFS_END,
TO_CHAR(SUM(CASE WHEN POPULATE_REPORTS_DATA_FLAG  = '?'  THEN 1 ELSE 0 END)) AS POPULATE_REPORTS_DATA_FLAG,
TO_CHAR(SUM(CASE WHEN POPULATE_REPORTS_DATA_START  = '?'  THEN 1 ELSE 0 END)) AS POPULATE_REPORTS_DATA_START,
TO_CHAR(SUM(CASE WHEN POPULATE_REPORTS_DATA_END  = '?'  THEN 1 ELSE 0 END)) AS POPULATE_REPORTS_DATA_END,
TO_CHAR(SUM(CASE WHEN RELEASE_TO_DMS_FLAG  = '?'  THEN 1 ELSE 0 END)) AS RELEASE_TO_DMS_FLAG,
TO_CHAR(SUM(CASE WHEN RELEASE_TO_DMS_START  = '?'  THEN 1 ELSE 0 END)) AS RELEASE_TO_DMS_START,
TO_CHAR(SUM(CASE WHEN RELEASE_TO_DMS_END  = '?'  THEN 1 ELSE 0 END)) AS RELEASE_TO_DMS_END,
TO_CHAR(SUM(CASE WHEN BATCH_PRIORITY  = '?'  THEN 1 ELSE 0 END)) AS BATCH_PRIORITY,
TO_CHAR(SUM(CASE WHEN BATCH_DELETED  = '?'  THEN 1 ELSE 0 END)) AS BATCH_DELETED,
TO_CHAR(SUM(CASE WHEN PAGES_SCANNED  = '?'  THEN 1 ELSE 0 END)) AS PAGES_SCANNED,
TO_CHAR(SUM(CASE WHEN DOCUMENTS_CREATED  = '?'  THEN 1 ELSE 0 END)) AS DOCUMENTS_CREATED,
TO_CHAR(SUM(CASE WHEN DOCUMENTS_DELETED  = '?'  THEN 1 ELSE 0 END)) AS DOCUMENTS_DELETED,
TO_CHAR(SUM(CASE WHEN PAGES_REPLACED_FLAG  = '?'  THEN 1 ELSE 0 END)) AS PAGES_REPLACED_FLAG,
TO_CHAR(SUM(CASE WHEN PAGES_DELETED_FLAG  = '?'  THEN 1 ELSE 0 END)) AS PAGES_DELETED_FLAG,
TO_CHAR(SUM(CASE WHEN  AGE_IN_BUSINESS_DAYS = '?' THEN 1 ELSE 0 END)) 	AS AGE_IN_BUSINESS_DAYS,
TO_CHAR(SUM(CASE WHEN  AGE_IN_CALENDAR_DAYS = '?' THEN 1 ELSE 0 END)) 	AS AGE_IN_CALENDAR_DAYS,
TO_CHAR(SUM(CASE WHEN  TIMELINESS_STATUS = '?' THEN 1 ELSE 0 END)) 		AS TIMELINESS_STATUS,
TO_CHAR(SUM(CASE WHEN  TIMELINESS_DAYS = '?' THEN 1 ELSE 0 END)) 		AS TIMELINESS_DAYS,
TO_CHAR(SUM(CASE WHEN  TIMELINESS_DAYS_TYPE = '?' THEN 1 ELSE 0 END)) 	AS TIMELINESS_DAYS_TYPE,
TO_CHAR(SUM(CASE WHEN  TIMELINESS_DT = '?' THEN 1 ELSE 0 END)) 			AS TIMELINESS_DT,
TO_CHAR(SUM(CASE WHEN  JEOPARDY_FLAG = '?' THEN 1 ELSE 0 END)) 			AS JEOPARDY_FLAG,
TO_CHAR(SUM(CASE WHEN  JEOPARDY_DAYS = '?' THEN 1 ELSE 0 END)) 			AS JEOPARDY_DAYS,
TO_CHAR(SUM(CASE WHEN  JEOPARDY_DAYS_TYPE = '?' THEN 1 ELSE 0 END)) 	AS JEOPARDY_DAYS_TYPE,
TO_CHAR(SUM(CASE WHEN  JEOPARDY_DT = '?' THEN 1 ELSE 0 END)) 			AS JEOPARDY_DT,
TO_CHAR(SUM(CASE WHEN  TARGET_DAYS = '?' THEN 1 ELSE 0 END)) 			AS TARGET_DAYS,
TO_CHAR(SUM(CASE WHEN BATCH_COMPLETE_DT  = '?'  THEN 1 ELSE 0 END)) AS BATCH_COMPLETE_DT,
TO_CHAR(SUM(CASE WHEN CURRENT_BATCH_MODULE_ID  = '?'  THEN 1 ELSE 0 END)) AS CURRENT_BATCH_MODULE_ID,
TO_CHAR(SUM(CASE WHEN GWF_QC_REQUIRED  = '?'  THEN 1 ELSE 0 END)) AS GWF_QC_REQUIRED,
TO_CHAR(SUM(CASE WHEN CURRENT_STEP  = '?'  THEN 1 ELSE 0 END)) AS CURRENT_STEP,
--??TO_CHAR(SUM(CASE WHEN CEJS_JOB_ID  = '?'  THEN 1 ELSE 0 END)) AS CEJS_JOB_ID,
TO_CHAR(SUM(CASE WHEN VALIDATE_DATA_PERF_BY_USER_ID  = '?'  THEN 1 ELSE 0 END)) AS VALIDATE_DATA_PERF_BY_USER_ID,
TO_CHAR(SUM(CASE WHEN FAX_BATCH_SOURCE  = '?'  THEN 1 ELSE 0 END)) AS FAX_BATCH_SOURCE
FROM DIFFS
--WHERE 1 = 2
--GROUP BY TO_CHAR(BATCH_GUID)
),
RESULTS AS (
SELECT 
TO_CHAR(SRC) AS SRC,   --1
TO_CHAR(BATCH_GUID) AS BATCH_GUID,   --2
TO_CHAR(BATCH_ID) AS BATCH_ID,   --3
TO_CHAR(BATCH_NAME) AS BATCH_NAME,   --4
TO_CHAR(SOURCE_SERVER) AS SOURCE_SERVER,   --5
TO_CHAR(BATCH_DESCRIPTION) AS BATCH_DESCRIPTION,   --6
TO_CHAR(REPROCESSED_FLAG) AS REPROCESSED_FLAG,   --7
TO_CHAR(CREATION_STATION_ID) AS CREATION_STATION_ID,   --8
TO_CHAR(BATCH_CREATED_BY) AS BATCH_CREATED_BY,   --9
TO_CHAR(CREATION_USER_ID) AS CREATION_USER_ID,   --10
TO_CHAR(BATCH_CLASS) AS BATCH_CLASS,   --11
TO_CHAR(BATCH_CLASS_DESCRIPTION) AS BATCH_CLASS_DESCRIPTION,   --12
TO_CHAR(BATCH_TYPE) AS BATCH_TYPE,   --13
TO_CHAR(CREATE_DT) AS CREATE_DT,   --14
TO_CHAR(COMPLETE_DT) AS COMPLETE_DT,   --15
TO_CHAR(INSTANCE_STATUS) AS INSTANCE_STATUS,   --16
TO_CHAR(INSTANCE_STATUS_DT) AS INSTANCE_STATUS_DT,   --17
TO_CHAR(BATCH_PAGE_COUNT) AS BATCH_PAGE_COUNT,   --18
TO_CHAR(BATCH_DOC_COUNT) AS BATCH_DOC_COUNT,   --19
TO_CHAR(BATCH_ENVELOPE_COUNT) AS BATCH_ENVELOPE_COUNT,   --20
TO_CHAR(CANCEL_DT) AS CANCEL_DT,   --21
TO_CHAR(CANCEL_BY) AS CANCEL_BY,   --22
TO_CHAR(CANCEL_REASON) AS CANCEL_REASON,   --23
TO_CHAR(CANCEL_METHOD) AS CANCEL_METHOD,   --24
TO_CHAR(SCAN_BATCH_FLAG) AS SCAN_BATCH_FLAG,   --25
TO_CHAR(PERFORM_SCAN_START) AS PERFORM_SCAN_START,   --26
TO_CHAR(PERFORM_SCAN_END) AS PERFORM_SCAN_END,   --27
TO_CHAR(PERFORM_SCAN_PERFORMED_BY) AS PERFORM_SCAN_PERFORMED_BY,   --28
TO_CHAR(PERFORM_QC_FLAG) AS PERFORM_QC_FLAG,   --29
TO_CHAR(PERFORM_QC_START) AS PERFORM_QC_START,   --30
TO_CHAR(PERFORM_QC_END) AS PERFORM_QC_END,   --31
TO_CHAR(PERFORM_QC_PERFORMED_BY) AS PERFORM_QC_PERFORMED_BY,   --32
TO_CHAR(KOFAX_QC_REASON) AS KOFAX_QC_REASON,   --33
TO_CHAR(CLASSIFICATION_FLAG) AS CLASSIFICATION_FLAG,   --34
TO_CHAR(CLASSIFICATION_START) AS CLASSIFICATION_START,   --35
TO_CHAR(CLASSIFICATION_END) AS CLASSIFICATION_END,   --36
TO_CHAR(CLASSIFICATION_DT) AS CLASSIFICATION_DT,   --37
TO_CHAR(RECOGNITION_FLAG) AS RECOGNITION_FLAG,   --38
TO_CHAR(RECOGNITION_START) AS RECOGNITION_START,   --39
TO_CHAR(RECOGNITION_END) AS RECOGNITION_END,   --40
TO_CHAR(RECOGNITION_DT) AS RECOGNITION_DT,   --41
TO_CHAR(VALIDATE_DATA_FLAG) AS VALIDATE_DATA_FLAG,   --42
TO_CHAR(VALIDATE_DATA_START) AS VALIDATE_DATA_START,   --43
TO_CHAR(VALIDATE_DATA_END) AS VALIDATE_DATA_END,   --44
TO_CHAR(VALIDATE_DATA_PERFORMED_BY) AS VALIDATE_DATA_PERFORMED_BY,   --45
TO_CHAR(VALIDATION_DT) AS VALIDATION_DT,   --46
TO_CHAR(CREATE_PDF_FLAG) AS CREATE_PDF_FLAG,   --47
TO_CHAR(CREATE_PDFS_START) AS CREATE_PDFS_START,   --48
TO_CHAR(CREATE_PDFS_END) AS CREATE_PDFS_END,   --49
TO_CHAR(POPULATE_REPORTS_DATA_FLAG) AS POPULATE_REPORTS_DATA_FLAG,   --50
TO_CHAR(POPULATE_REPORTS_DATA_START) AS POPULATE_REPORTS_DATA_START,   --51
TO_CHAR(POPULATE_REPORTS_DATA_END) AS POPULATE_REPORTS_DATA_END,   --52
TO_CHAR(RELEASE_TO_DMS_FLAG) AS RELEASE_TO_DMS_FLAG,   --53
TO_CHAR(RELEASE_TO_DMS_START) AS RELEASE_TO_DMS_START,   --54
TO_CHAR(RELEASE_TO_DMS_END) AS RELEASE_TO_DMS_END,   --55
TO_CHAR(BATCH_PRIORITY) AS BATCH_PRIORITY,   --56
TO_CHAR(BATCH_DELETED) AS BATCH_DELETED,   --57
TO_CHAR(PAGES_SCANNED) AS PAGES_SCANNED,   --58
TO_CHAR(DOCUMENTS_CREATED) AS DOCUMENTS_CREATED,   --59
TO_CHAR(DOCUMENTS_DELETED) AS DOCUMENTS_DELETED,   --60
TO_CHAR(PAGES_REPLACED_FLAG) AS PAGES_REPLACED_FLAG,   --61
TO_CHAR(PAGES_DELETED_FLAG) AS PAGES_DELETED_FLAG,   --62
TO_CHAR(AGE_IN_BUSINESS_DAYS) AS AGE_IN_BUSINESS_DAYS,   --63
TO_CHAR(AGE_IN_CALENDAR_DAYS) AS AGE_IN_CALENDAR_DAYS,   --64
TO_CHAR(TIMELINESS_STATUS) AS TIMELINESS_STATUS,   --65
TO_CHAR(TIMELINESS_DAYS) AS TIMELINESS_DAYS,   --66
TO_CHAR(TIMELINESS_DAYS_TYPE) AS TIMELINESS_DAYS_TYPE,   --67
TO_CHAR(TIMELINESS_DT) AS TIMELINESS_DT,   --68
TO_CHAR(JEOPARDY_FLAG) AS JEOPARDY_FLAG,   --69
TO_CHAR(JEOPARDY_DAYS) AS JEOPARDY_DAYS,   --70
TO_CHAR(JEOPARDY_DAYS_TYPE) AS JEOPARDY_DAYS_TYPE,   --71
TO_CHAR(JEOPARDY_DT) AS JEOPARDY_DT,   --72
TO_CHAR(TARGET_DAYS) AS TARGET_DAYS,   --73
TO_CHAR(BATCH_COMPLETE_DT) AS BATCH_COMPLETE_DT,   --74
TO_CHAR(CURRENT_BATCH_MODULE_ID) AS CURRENT_BATCH_MODULE_ID,   --75
TO_CHAR(GWF_QC_REQUIRED) AS GWF_QC_REQUIRED,   --76
TO_CHAR(CURRENT_STEP) AS CURRENT_STEP,   --77
TO_CHAR(VALIDATE_DATA_PERF_BY_USER_ID) AS VALIDATE_DATA_PERF_BY_USER_ID,   --78
TO_CHAR(FAX_BATCH_SOURCE) AS FAX_BATCH_SOURCE   --79
FROM DIFF_COUNTS 
UNION ALL
SELECT 
TO_CHAR(SRC) AS SRC,   --1
TO_CHAR(BATCH_GUID) AS BATCH_GUID,   --2
TO_CHAR(BATCH_ID) AS BATCH_ID,   --3
TO_CHAR(BATCH_NAME) AS BATCH_NAME,   --4
TO_CHAR(SOURCE_SERVER) AS SOURCE_SERVER,   --5
TO_CHAR(BATCH_DESCRIPTION) AS BATCH_DESCRIPTION,   --6
TO_CHAR(REPROCESSED_FLAG) AS REPROCESSED_FLAG,   --7
TO_CHAR(CREATION_STATION_ID) AS CREATION_STATION_ID,   --8
TO_CHAR(BATCH_CREATED_BY) AS BATCH_CREATED_BY,   --9
TO_CHAR(CREATION_USER_ID) AS CREATION_USER_ID,   --10
TO_CHAR(BATCH_CLASS) AS BATCH_CLASS,   --11
TO_CHAR(BATCH_CLASS_DESCRIPTION) AS BATCH_CLASS_DESCRIPTION,   --12
TO_CHAR(BATCH_TYPE) AS BATCH_TYPE,   --13
TO_CHAR(CREATE_DT) AS CREATE_DT,   --14
TO_CHAR(COMPLETE_DT) AS COMPLETE_DT,   --15
TO_CHAR(INSTANCE_STATUS) AS INSTANCE_STATUS,   --16
TO_CHAR(INSTANCE_STATUS_DT) AS INSTANCE_STATUS_DT,   --17
TO_CHAR(BATCH_PAGE_COUNT) AS BATCH_PAGE_COUNT,   --18
TO_CHAR(BATCH_DOC_COUNT) AS BATCH_DOC_COUNT,   --19
TO_CHAR(BATCH_ENVELOPE_COUNT) AS BATCH_ENVELOPE_COUNT,   --20
TO_CHAR(CANCEL_DT) AS CANCEL_DT,   --21
TO_CHAR(CANCEL_BY) AS CANCEL_BY,   --22
TO_CHAR(CANCEL_REASON) AS CANCEL_REASON,   --23
TO_CHAR(CANCEL_METHOD) AS CANCEL_METHOD,   --24
TO_CHAR(SCAN_BATCH_FLAG) AS SCAN_BATCH_FLAG,   --25
TO_CHAR(PERFORM_SCAN_START) AS PERFORM_SCAN_START,   --26
TO_CHAR(PERFORM_SCAN_END) AS PERFORM_SCAN_END,   --27
TO_CHAR(PERFORM_SCAN_PERFORMED_BY) AS PERFORM_SCAN_PERFORMED_BY,   --28
TO_CHAR(PERFORM_QC_FLAG) AS PERFORM_QC_FLAG,   --29
TO_CHAR(PERFORM_QC_START) AS PERFORM_QC_START,   --30
TO_CHAR(PERFORM_QC_END) AS PERFORM_QC_END,   --31
TO_CHAR(PERFORM_QC_PERFORMED_BY) AS PERFORM_QC_PERFORMED_BY,   --32
TO_CHAR(KOFAX_QC_REASON) AS KOFAX_QC_REASON,   --33
TO_CHAR(CLASSIFICATION_FLAG) AS CLASSIFICATION_FLAG,   --34
TO_CHAR(CLASSIFICATION_START) AS CLASSIFICATION_START,   --35
TO_CHAR(CLASSIFICATION_END) AS CLASSIFICATION_END,   --36
TO_CHAR(CLASSIFICATION_DT) AS CLASSIFICATION_DT,   --37
TO_CHAR(RECOGNITION_FLAG) AS RECOGNITION_FLAG,   --38
TO_CHAR(RECOGNITION_START) AS RECOGNITION_START,   --39
TO_CHAR(RECOGNITION_END) AS RECOGNITION_END,   --40
TO_CHAR(RECOGNITION_DT) AS RECOGNITION_DT,   --41
TO_CHAR(VALIDATE_DATA_FLAG) AS VALIDATE_DATA_FLAG,   --42
TO_CHAR(VALIDATE_DATA_START) AS VALIDATE_DATA_START,   --43
TO_CHAR(VALIDATE_DATA_END) AS VALIDATE_DATA_END,   --44
TO_CHAR(VALIDATE_DATA_PERFORMED_BY) AS VALIDATE_DATA_PERFORMED_BY,   --45
TO_CHAR(VALIDATION_DT) AS VALIDATION_DT,   --46
TO_CHAR(CREATE_PDF_FLAG) AS CREATE_PDF_FLAG,   --47
TO_CHAR(CREATE_PDFS_START) AS CREATE_PDFS_START,   --48
TO_CHAR(CREATE_PDFS_END) AS CREATE_PDFS_END,   --49
TO_CHAR(POPULATE_REPORTS_DATA_FLAG) AS POPULATE_REPORTS_DATA_FLAG,   --50
TO_CHAR(POPULATE_REPORTS_DATA_START) AS POPULATE_REPORTS_DATA_START,   --51
TO_CHAR(POPULATE_REPORTS_DATA_END) AS POPULATE_REPORTS_DATA_END,   --52
TO_CHAR(RELEASE_TO_DMS_FLAG) AS RELEASE_TO_DMS_FLAG,   --53
TO_CHAR(RELEASE_TO_DMS_START) AS RELEASE_TO_DMS_START,   --54
TO_CHAR(RELEASE_TO_DMS_END) AS RELEASE_TO_DMS_END,   --55
TO_CHAR(BATCH_PRIORITY) AS BATCH_PRIORITY,   --56
TO_CHAR(BATCH_DELETED) AS BATCH_DELETED,   --57
TO_CHAR(PAGES_SCANNED) AS PAGES_SCANNED,   --58
TO_CHAR(DOCUMENTS_CREATED) AS DOCUMENTS_CREATED,   --59
TO_CHAR(DOCUMENTS_DELETED) AS DOCUMENTS_DELETED,   --60
TO_CHAR(PAGES_REPLACED_FLAG) AS PAGES_REPLACED_FLAG,   --61
TO_CHAR(PAGES_DELETED_FLAG) AS PAGES_DELETED_FLAG,   --62
TO_CHAR(AGE_IN_BUSINESS_DAYS) AS AGE_IN_BUSINESS_DAYS,   --63
TO_CHAR(AGE_IN_CALENDAR_DAYS) AS AGE_IN_CALENDAR_DAYS,   --64
TO_CHAR(TIMELINESS_STATUS) AS TIMELINESS_STATUS,   --65
TO_CHAR(TIMELINESS_DAYS) AS TIMELINESS_DAYS,   --66
TO_CHAR(TIMELINESS_DAYS_TYPE) AS TIMELINESS_DAYS_TYPE,   --67
TO_CHAR(TIMELINESS_DT) AS TIMELINESS_DT,   --68
TO_CHAR(JEOPARDY_FLAG) AS JEOPARDY_FLAG,   --69
TO_CHAR(JEOPARDY_DAYS) AS JEOPARDY_DAYS,   --70
TO_CHAR(JEOPARDY_DAYS_TYPE) AS JEOPARDY_DAYS_TYPE,   --71
TO_CHAR(JEOPARDY_DT) AS JEOPARDY_DT,   --72
TO_CHAR(TARGET_DAYS) AS TARGET_DAYS,   --73
TO_CHAR(BATCH_COMPLETE_DT) AS BATCH_COMPLETE_DT,   --74
TO_CHAR(CURRENT_BATCH_MODULE_ID) AS CURRENT_BATCH_MODULE_ID,   --75
TO_CHAR(GWF_QC_REQUIRED) AS GWF_QC_REQUIRED,   --76
TO_CHAR(CURRENT_STEP) AS CURRENT_STEP,   --77
TO_CHAR(VALIDATE_DATA_PERF_BY_USER_ID) AS VALIDATE_DATA_PERF_BY_USER_ID,   --78
TO_CHAR(FAX_BATCH_SOURCE) AS FAX_BATCH_SOURCE   --79
FROM V3
WHERE BATCH_GUID IN (SELECT BATCH_GUID FROM DIFFS )
UNION ALL
SELECT 
TO_CHAR(SRC) AS SRC,   --1
TO_CHAR(BATCH_GUID) AS BATCH_GUID,   --2
TO_CHAR(BATCH_ID) AS BATCH_ID,   --3
TO_CHAR(BATCH_NAME) AS BATCH_NAME,   --4
TO_CHAR(SOURCE_SERVER) AS SOURCE_SERVER,   --5
TO_CHAR(BATCH_DESCRIPTION) AS BATCH_DESCRIPTION,   --6
TO_CHAR(REPROCESSED_FLAG) AS REPROCESSED_FLAG,   --7
TO_CHAR(CREATION_STATION_ID) AS CREATION_STATION_ID,   --8
TO_CHAR(BATCH_CREATED_BY) AS BATCH_CREATED_BY,   --9
TO_CHAR(CREATION_USER_ID) AS CREATION_USER_ID,   --10
TO_CHAR(BATCH_CLASS) AS BATCH_CLASS,   --11
TO_CHAR(BATCH_CLASS_DESCRIPTION) AS BATCH_CLASS_DESCRIPTION,   --12
TO_CHAR(BATCH_TYPE) AS BATCH_TYPE,   --13
TO_CHAR(CREATE_DT) AS CREATE_DT,   --14
TO_CHAR(COMPLETE_DT) AS COMPLETE_DT,   --15
TO_CHAR(INSTANCE_STATUS) AS INSTANCE_STATUS,   --16
TO_CHAR(INSTANCE_STATUS_DT) AS INSTANCE_STATUS_DT,   --17
TO_CHAR(BATCH_PAGE_COUNT) AS BATCH_PAGE_COUNT,   --18
TO_CHAR(BATCH_DOC_COUNT) AS BATCH_DOC_COUNT,   --19
TO_CHAR(BATCH_ENVELOPE_COUNT) AS BATCH_ENVELOPE_COUNT,   --20
TO_CHAR(CANCEL_DT) AS CANCEL_DT,   --21
TO_CHAR(CANCEL_BY) AS CANCEL_BY,   --22
TO_CHAR(CANCEL_REASON) AS CANCEL_REASON,   --23
TO_CHAR(CANCEL_METHOD) AS CANCEL_METHOD,   --24
TO_CHAR(SCAN_BATCH_FLAG) AS SCAN_BATCH_FLAG,   --25
TO_CHAR(PERFORM_SCAN_START) AS PERFORM_SCAN_START,   --26
TO_CHAR(PERFORM_SCAN_END) AS PERFORM_SCAN_END,   --27
TO_CHAR(PERFORM_SCAN_PERFORMED_BY) AS PERFORM_SCAN_PERFORMED_BY,   --28
TO_CHAR(PERFORM_QC_FLAG) AS PERFORM_QC_FLAG,   --29
TO_CHAR(PERFORM_QC_START) AS PERFORM_QC_START,   --30
TO_CHAR(PERFORM_QC_END) AS PERFORM_QC_END,   --31
TO_CHAR(PERFORM_QC_PERFORMED_BY) AS PERFORM_QC_PERFORMED_BY,   --32
TO_CHAR(KOFAX_QC_REASON) AS KOFAX_QC_REASON,   --33
TO_CHAR(CLASSIFICATION_FLAG) AS CLASSIFICATION_FLAG,   --34
TO_CHAR(CLASSIFICATION_START) AS CLASSIFICATION_START,   --35
TO_CHAR(CLASSIFICATION_END) AS CLASSIFICATION_END,   --36
TO_CHAR(CLASSIFICATION_DT) AS CLASSIFICATION_DT,   --37
TO_CHAR(RECOGNITION_FLAG) AS RECOGNITION_FLAG,   --38
TO_CHAR(RECOGNITION_START) AS RECOGNITION_START,   --39
TO_CHAR(RECOGNITION_END) AS RECOGNITION_END,   --40
TO_CHAR(RECOGNITION_DT) AS RECOGNITION_DT,   --41
TO_CHAR(VALIDATE_DATA_FLAG) AS VALIDATE_DATA_FLAG,   --42
TO_CHAR(VALIDATE_DATA_START) AS VALIDATE_DATA_START,   --43
TO_CHAR(VALIDATE_DATA_END) AS VALIDATE_DATA_END,   --44
TO_CHAR(VALIDATE_DATA_PERFORMED_BY) AS VALIDATE_DATA_PERFORMED_BY,   --45
TO_CHAR(VALIDATION_DT) AS VALIDATION_DT,   --46
TO_CHAR(CREATE_PDF_FLAG) AS CREATE_PDF_FLAG,   --47
TO_CHAR(CREATE_PDFS_START) AS CREATE_PDFS_START,   --48
TO_CHAR(CREATE_PDFS_END) AS CREATE_PDFS_END,   --49
TO_CHAR(POPULATE_REPORTS_DATA_FLAG) AS POPULATE_REPORTS_DATA_FLAG,   --50
TO_CHAR(POPULATE_REPORTS_DATA_START) AS POPULATE_REPORTS_DATA_START,   --51
TO_CHAR(POPULATE_REPORTS_DATA_END) AS POPULATE_REPORTS_DATA_END,   --52
TO_CHAR(RELEASE_TO_DMS_FLAG) AS RELEASE_TO_DMS_FLAG,   --53
TO_CHAR(RELEASE_TO_DMS_START) AS RELEASE_TO_DMS_START,   --54
TO_CHAR(RELEASE_TO_DMS_END) AS RELEASE_TO_DMS_END,   --55
TO_CHAR(BATCH_PRIORITY) AS BATCH_PRIORITY,   --56
TO_CHAR(BATCH_DELETED) AS BATCH_DELETED,   --57
TO_CHAR(PAGES_SCANNED) AS PAGES_SCANNED,   --58
TO_CHAR(DOCUMENTS_CREATED) AS DOCUMENTS_CREATED,   --59
TO_CHAR(DOCUMENTS_DELETED) AS DOCUMENTS_DELETED,   --60
TO_CHAR(PAGES_REPLACED_FLAG) AS PAGES_REPLACED_FLAG,   --61
TO_CHAR(PAGES_DELETED_FLAG) AS PAGES_DELETED_FLAG,   --62
TO_CHAR(AGE_IN_BUSINESS_DAYS) AS AGE_IN_BUSINESS_DAYS,   --63
TO_CHAR(AGE_IN_CALENDAR_DAYS) AS AGE_IN_CALENDAR_DAYS,   --64
TO_CHAR(TIMELINESS_STATUS) AS TIMELINESS_STATUS,   --65
TO_CHAR(TIMELINESS_DAYS) AS TIMELINESS_DAYS,   --66
TO_CHAR(TIMELINESS_DAYS_TYPE) AS TIMELINESS_DAYS_TYPE,   --67
TO_CHAR(TIMELINESS_DT) AS TIMELINESS_DT,   --68
TO_CHAR(JEOPARDY_FLAG) AS JEOPARDY_FLAG,   --69
TO_CHAR(JEOPARDY_DAYS) AS JEOPARDY_DAYS,   --70
TO_CHAR(JEOPARDY_DAYS_TYPE) AS JEOPARDY_DAYS_TYPE,   --71
TO_CHAR(JEOPARDY_DT) AS JEOPARDY_DT,   --72
TO_CHAR(TARGET_DAYS) AS TARGET_DAYS,   --73
TO_CHAR(BATCH_COMPLETE_DT) AS BATCH_COMPLETE_DT,   --74
TO_CHAR(CURRENT_BATCH_MODULE_ID) AS CURRENT_BATCH_MODULE_ID,   --75
TO_CHAR(GWF_QC_REQUIRED) AS GWF_QC_REQUIRED,   --76
TO_CHAR(CURRENT_STEP) AS CURRENT_STEP,   --77
TO_CHAR(VALIDATE_DATA_PERF_BY_USER_ID) AS VALIDATE_DATA_PERF_BY_USER_ID,   --78
TO_CHAR(FAX_BATCH_SOURCE) AS FAX_BATCH_SOURCE   --79
FROM V1 
WHERE ( SOURCE_SERVER, BATCH_GUID) IN ( SELECT V1_SOURCE_SERVER, V1_BATCH_GUID FROM MATCHED_GUIDS )
AND BATCH_GUID IN (SELECT BATCH_GUID FROM DIFFS )
UNION ALL
SELECT 
TO_CHAR(SRC) AS SRC,   --1
TO_CHAR(BATCH_GUID) AS BATCH_GUID,   --2
TO_CHAR(BATCH_ID) AS BATCH_ID,   --3
TO_CHAR(BATCH_NAME) AS BATCH_NAME,   --4
TO_CHAR(SOURCE_SERVER) AS SOURCE_SERVER,   --5
TO_CHAR(BATCH_DESCRIPTION) AS BATCH_DESCRIPTION,   --6
TO_CHAR(REPROCESSED_FLAG) AS REPROCESSED_FLAG,   --7
TO_CHAR(CREATION_STATION_ID) AS CREATION_STATION_ID,   --8
TO_CHAR(BATCH_CREATED_BY) AS BATCH_CREATED_BY,   --9
TO_CHAR(CREATION_USER_ID) AS CREATION_USER_ID,   --10
TO_CHAR(BATCH_CLASS) AS BATCH_CLASS,   --11
TO_CHAR(BATCH_CLASS_DESCRIPTION) AS BATCH_CLASS_DESCRIPTION,   --12
TO_CHAR(BATCH_TYPE) AS BATCH_TYPE,   --13
TO_CHAR(CREATE_DT) AS CREATE_DT,   --14
TO_CHAR(COMPLETE_DT) AS COMPLETE_DT,   --15
TO_CHAR(INSTANCE_STATUS) AS INSTANCE_STATUS,   --16
TO_CHAR(INSTANCE_STATUS_DT) AS INSTANCE_STATUS_DT,   --17
TO_CHAR(BATCH_PAGE_COUNT) AS BATCH_PAGE_COUNT,   --18
TO_CHAR(BATCH_DOC_COUNT) AS BATCH_DOC_COUNT,   --19
TO_CHAR(BATCH_ENVELOPE_COUNT) AS BATCH_ENVELOPE_COUNT,   --20
TO_CHAR(CANCEL_DT) AS CANCEL_DT,   --21
TO_CHAR(CANCEL_BY) AS CANCEL_BY,   --22
TO_CHAR(CANCEL_REASON) AS CANCEL_REASON,   --23
TO_CHAR(CANCEL_METHOD) AS CANCEL_METHOD,   --24
TO_CHAR(SCAN_BATCH_FLAG) AS SCAN_BATCH_FLAG,   --25
TO_CHAR(PERFORM_SCAN_START) AS PERFORM_SCAN_START,   --26
TO_CHAR(PERFORM_SCAN_END) AS PERFORM_SCAN_END,   --27
TO_CHAR(PERFORM_SCAN_PERFORMED_BY) AS PERFORM_SCAN_PERFORMED_BY,   --28
TO_CHAR(PERFORM_QC_FLAG) AS PERFORM_QC_FLAG,   --29
TO_CHAR(PERFORM_QC_START) AS PERFORM_QC_START,   --30
TO_CHAR(PERFORM_QC_END) AS PERFORM_QC_END,   --31
TO_CHAR(PERFORM_QC_PERFORMED_BY) AS PERFORM_QC_PERFORMED_BY,   --32
TO_CHAR(KOFAX_QC_REASON) AS KOFAX_QC_REASON,   --33
TO_CHAR(CLASSIFICATION_FLAG) AS CLASSIFICATION_FLAG,   --34
TO_CHAR(CLASSIFICATION_START) AS CLASSIFICATION_START,   --35
TO_CHAR(CLASSIFICATION_END) AS CLASSIFICATION_END,   --36
TO_CHAR(CLASSIFICATION_DT) AS CLASSIFICATION_DT,   --37
TO_CHAR(RECOGNITION_FLAG) AS RECOGNITION_FLAG,   --38
TO_CHAR(RECOGNITION_START) AS RECOGNITION_START,   --39
TO_CHAR(RECOGNITION_END) AS RECOGNITION_END,   --40
TO_CHAR(RECOGNITION_DT) AS RECOGNITION_DT,   --41
TO_CHAR(VALIDATE_DATA_FLAG) AS VALIDATE_DATA_FLAG,   --42
TO_CHAR(VALIDATE_DATA_START) AS VALIDATE_DATA_START,   --43
TO_CHAR(VALIDATE_DATA_END) AS VALIDATE_DATA_END,   --44
TO_CHAR(VALIDATE_DATA_PERFORMED_BY) AS VALIDATE_DATA_PERFORMED_BY,   --45
TO_CHAR(VALIDATION_DT) AS VALIDATION_DT,   --46
TO_CHAR(CREATE_PDF_FLAG) AS CREATE_PDF_FLAG,   --47
TO_CHAR(CREATE_PDFS_START) AS CREATE_PDFS_START,   --48
TO_CHAR(CREATE_PDFS_END) AS CREATE_PDFS_END,   --49
TO_CHAR(POPULATE_REPORTS_DATA_FLAG) AS POPULATE_REPORTS_DATA_FLAG,   --50
TO_CHAR(POPULATE_REPORTS_DATA_START) AS POPULATE_REPORTS_DATA_START,   --51
TO_CHAR(POPULATE_REPORTS_DATA_END) AS POPULATE_REPORTS_DATA_END,   --52
TO_CHAR(RELEASE_TO_DMS_FLAG) AS RELEASE_TO_DMS_FLAG,   --53
TO_CHAR(RELEASE_TO_DMS_START) AS RELEASE_TO_DMS_START,   --54
TO_CHAR(RELEASE_TO_DMS_END) AS RELEASE_TO_DMS_END,   --55
TO_CHAR(BATCH_PRIORITY) AS BATCH_PRIORITY,   --56
TO_CHAR(BATCH_DELETED) AS BATCH_DELETED,   --57
TO_CHAR(PAGES_SCANNED) AS PAGES_SCANNED,   --58
TO_CHAR(DOCUMENTS_CREATED) AS DOCUMENTS_CREATED,   --59
TO_CHAR(DOCUMENTS_DELETED) AS DOCUMENTS_DELETED,   --60
TO_CHAR(PAGES_REPLACED_FLAG) AS PAGES_REPLACED_FLAG,   --61
TO_CHAR(PAGES_DELETED_FLAG) AS PAGES_DELETED_FLAG,   --62
TO_CHAR(AGE_IN_BUSINESS_DAYS) AS AGE_IN_BUSINESS_DAYS,   --63
TO_CHAR(AGE_IN_CALENDAR_DAYS) AS AGE_IN_CALENDAR_DAYS,   --64
TO_CHAR(TIMELINESS_STATUS) AS TIMELINESS_STATUS,   --65
TO_CHAR(TIMELINESS_DAYS) AS TIMELINESS_DAYS,   --66
TO_CHAR(TIMELINESS_DAYS_TYPE) AS TIMELINESS_DAYS_TYPE,   --67
TO_CHAR(TIMELINESS_DT) AS TIMELINESS_DT,   --68
TO_CHAR(JEOPARDY_FLAG) AS JEOPARDY_FLAG,   --69
TO_CHAR(JEOPARDY_DAYS) AS JEOPARDY_DAYS,   --70
TO_CHAR(JEOPARDY_DAYS_TYPE) AS JEOPARDY_DAYS_TYPE,   --71
TO_CHAR(JEOPARDY_DT) AS JEOPARDY_DT,   --72
TO_CHAR(TARGET_DAYS) AS TARGET_DAYS,   --73
TO_CHAR(BATCH_COMPLETE_DT) AS BATCH_COMPLETE_DT,   --74
TO_CHAR(CURRENT_BATCH_MODULE_ID) AS CURRENT_BATCH_MODULE_ID,   --75
TO_CHAR(GWF_QC_REQUIRED) AS GWF_QC_REQUIRED,   --76
TO_CHAR(CURRENT_STEP) AS CURRENT_STEP,   --77
TO_CHAR(VALIDATE_DATA_PERF_BY_USER_ID) AS VALIDATE_DATA_PERF_BY_USER_ID,   --78
TO_CHAR(FAX_BATCH_SOURCE) AS FAX_BATCH_SOURCE   --79
FROM V2 WHERE ( SOURCE_SERVER, BATCH_GUID) IN ( SELECT V1_SOURCE_SERVER, V1_BATCH_GUID FROM MATCHED_GUIDS )
AND BATCH_GUID IN (SELECT BATCH_GUID FROM DIFFS )
)
-- SAMPLE QUERY FROM RESULTS
SELECT --
 SRC,
 (SELECT SUM(1) FROM MATCHED_GUIDS )  AS MATCHED_GUIDS,
 BATCH_GUID,
 INSTANCE_STATUS,
 BATCH_DELETED, 
 CANCEL_DT,
 REPROCESSED_FLAG,
 BATCH_PRIORITY,
 FAX_BATCH_SOURCE ,
 RELEASE_TO_DMS_FLAG,
 TIMELINESS_STATUS,
 JEOPARDY_FLAG,
  R.* 
from RESULTS R --MAXDAT.WFL_NYHIX_MFB_V2_BATCH_SUMMARY_COMPARE_V R -- count(distinct v1_guid) FROM match_guids
WHERE SRC = 'V0'
OR ( SRC IN ( 'V1','V2','V3') 
     AND BATCH_GUID 
     IN ( SELECT BATCH_GUID 
        FROM DIFFS  --( NOTE FILTER DIFFS FOR PERFORMANCE )
     )
   )
--and batch_guid = '{9ef5dec9-ad28-4944-b409-76a6e514b5b9}'   
ORDER BY R.batch_guid, R.src;
