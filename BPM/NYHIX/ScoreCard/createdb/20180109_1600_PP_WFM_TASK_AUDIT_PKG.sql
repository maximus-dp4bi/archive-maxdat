CREATE OR REPLACE PACKAGE DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG AS
 PROCEDURE CREATE_TASK_AUDIT_SC_CNTRL(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_TASK_AUDIT_CNTRL_DIFFS(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE DELETE_TASK_AUDIT_PPK_TASK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_SC_DELETE_FLAG_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_SC_INSERT_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE UPDATE_PP_WFM_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL); 
 PROCEDURE PP_WFM_MERGE_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
END  PP_WFM_TASK_AUDIT_PKG;
/

CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG AS

-- THE PROCEDURES IN THIS PACKAGE ARE USED TO AUDIT ANS SYNCRONIZE THE TASKS BETWEEN
-- PIPKINS.TASK AND DP_SCORECARD.PP_WFM_TASK_BO.  THIS SYNCORONIZATION IS NEEDED
-- BECAUSE PIPKINS CAN PHYSICALLY 'DELETE' TASKS AND THESE IS NO RECORD OF THE
-- DELETTION IN PIPKINS


 PROCEDURE CREATE_TASK_AUDIT_SC_CNTRL(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
  IS
  
    -- THIS PROCEDURE TRUNCATES AND RE-LOADS THE SCORECARD CONTROL COUNTS
    -- BASED ON DP_SCORECARD.PP_WFM_TASK_BO
    
    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;


 BEGIN
    
    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
    DBMS_OUTPUT.PUT_LINE('LOAD_TASK_AUDIT_CNTRL_SC START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
 
    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
    
    INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC
    (
    TASK_YYYYMM, 
    STAFF_ID, 
    TASK_COUNT, 
    TASK_SUM, 
    RUN_DATE
    )
    SELECT TO_CHAR(TASK_START,'YYYYMM') AS TASK_YYYYMM, 
    STAFF_ID, 
    COUNT(TASK_ID) AS TASK_COUNT, 
    SUM(TASK_ID) AS TASK_SUM, 
    SYSDATE AS RUN_DATE
    FROM DP_SCORECARD.PP_WFM_TASK_BO
    WHERE NVL(DELETE_FLAG,'N') = 'N'
    AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM 
    AND DELETE_DETECTED_DATE IS NULL
    GROUP BY TO_CHAR(TASK_START,'YYYYMM'), STAFF_ID
    ORDER BY TO_CHAR(TASK_START,'YYYYMM'), STAFF_ID;
    
    COMMIT;
      
 END;   

 PROCEDURE CREATE_TASK_AUDIT_CNTRL_DIFFS(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL) 
 IS

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

 BEGIN

    -- THIS PROCEDURE TRUNCATES AND RELOAD THE CONTROL DIFFERENCES
    -- BETWEEN PP_WFM_TASK_AUDIT_CNTRL_SC AND PP_WFM_TASK_AUDIT_CNTRL_PPK
    
    -- for testing only limit to 201711 and 201712
    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
    
   
    DBMS_OUTPUT.PUT_LINE('LOAD_TASK_CONTROL_DIFFS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
 
    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;

    INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    (
        TASK_YYYYMM, STAFF_ID, WFM_TASK_YYYYMM, 
        WFM_STAFF_ID, WFM_TASK_COUNT, WFM_TASK_SUM, 
        SC_TASK_YYYYMM, SC_STAFF_ID, SC_TASK_COUNT, 
        SC_TASK_SUM
    )
    WITH ALL_STAFF_YYYYMM AS
    (
    SELECT TASK_YYYYMM, STAFF_ID FROM PP_WFM_TASK_AUDIT_CNTRL_SC
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    UNION 
    SELECT TASK_YYYYMM, STAFF_ID FROM PP_WFM_TASK_AUDIT_CNTRL_PPK
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    ),
    MATCHING_STAFF_YYYYMM AS
    (
    SELECT TASK_YYYYMM, STAFF_ID, TASK_COUNT, 
        TASK_SUM, RUN_DATE
    FROM PP_WFM_TASK_AUDIT_CNTRL_SC
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    INTERSECT
    SELECT TASK_YYYYMM, STAFF_ID, TASK_COUNT, 
        TASK_SUM, RUN_DATE
    FROM PP_WFM_TASK_AUDIT_CNTRL_PPK
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    ),
    STAFF_DIFFS_YYYYMM AS
    ( 
    SELECT TASK_YYYYMM, STAFF_ID FROM ALL_STAFF_YYYYMM
    MINUS 
    SELECT TASK_YYYYMM, STAFF_ID FROM MATCHING_STAFF_YYYYMM
    ),
    DIFF_DETAIL AS
    (
    SELECT DIFFS.TASK_YYYYMM, 
        DIFFS.STAFF_ID, 
        PIPKINS.TASK_YYYYMM AS WFM_TASK_YYYYMM, 
        PIPKINS.STAFF_ID    AS WFM_STAFF_ID, 
        PIPKINS.TASK_COUNT  AS WFM_TASK_COUNT, 
        PIPKINS.TASK_SUM    AS WFM_TASK_SUM,  
        SCORECARD.TASK_YYYYMM   AS SC_TASK_YYYYMM,
        SCORECARD.STAFF_ID      AS SC_STAFF_ID,
        SCORECARD.TASK_COUNT    AS SC_TASK_COUNT,
        SCORECARD.TASK_SUM      AS SC_TASK_SUM
    FROM STAFF_DIFFS_YYYYMM DIFFS
    LEFT OUTER JOIN PP_WFM_TASK_AUDIT_CNTRL_PPK PIPKINS
        ON PIPKINS.TASK_YYYYMM = DIFFS.TASK_YYYYMM
        AND PIPKINS.STAFF_ID = DIFFS.STAFF_ID
    LEFT OUTER JOIN  PP_WFM_TASK_AUDIT_CNTRL_SC SCORECARD
        ON SCORECARD.TASK_YYYYMM = DIFFS.TASK_YYYYMM
        AND SCORECARD.STAFF_ID = DIFFS.STAFF_ID
    WHERE 1=1
    AND ( NVL(PIPKINS.TASK_COUNT,0) <> NVL(SCORECARD.TASK_COUNT,0)
    OR NVL(PIPKINS.TASK_SUM,0) <> NVL(SCORECARD.TASK_SUM,0)
        )
    )
    SELECT 
        TASK_YYYYMM, STAFF_ID, WFM_TASK_YYYYMM, 
        WFM_STAFF_ID, WFM_TASK_COUNT, WFM_TASK_SUM, 
        SC_TASK_YYYYMM, SC_STAFF_ID, SC_TASK_COUNT, 
        SC_TASK_SUM
    FROM DIFF_DETAIL
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
    
 --   DELETE_TASK_AUDIT_PPK_TASK(LV_START_YYYYMM, LV_END_YYYYMM);

 END;   
 
 PROCEDURE DELETE_TASK_AUDIT_PPK_TASK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
                
 IS
    -- THIS PROCEDURE DELETES FROM THE PP_WFM_TASK_AUDIT_PPK_TASK_ID TABLE
    -- BASED ON THE VALUES IN PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    
    -- THE PARAMETERS P_START_YYYYMM AND P_END_YYYYM ARE USED TO  
    -- CONTROL THE MONTHS BEING PROCESSED.
    
    -- THE DEFAULT FOR P_START_YYYYMM IS ADD_MONTHS -11 ( 1 YEAR BACK )
    -- THE DEFAULT FOR P_END_YYYYMM IS TO_CHAR(SYSDATE('YYYYMM') ( CURRENT MONTH )
     
    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

    
    BEGIN
    
    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    

    DBMS_OUTPUT.PUT_LINE('DELETE_TASK_AUDIT_PPK_TASK START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
 
    DELETE FROM PP_WFM_TASK_AUDIT_PPK_TASK_ID
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
    
 END;
 
 -- ***********************************************************
 -- ***********************************************************
 -------------------------------------------------------------
 -- NOTE THE NEXT STEP IS TO RUN THE KETTLE JOB TO EXTRACT
 -- TASK_IDs BASED ON THE staff_id AND task_yyyymm 
 -- IN PP_WFM_TASK_AUDIT_CNTRL_DIFFS
 -----------------------------------------------------------
 -- ***********************************************************
 -- ***********************************************************
 
PROCEDURE CREATE_SC_DELETE_FLAG_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

-- THIS PROCEDURE POPULATES PP_WFM_TASK_AUDIT_SC_DELETES
-- NOTE BECAUSE OF POSSIBLE TIMING DIFFERENCES THE EXTRACT DATE
-- IS USED TO PREVENT SELECTING ANY RECIENT TASKS IN PP_WFM_TASK_BO
-- WHICH MAY HAVE BEEN CREATED AFTER THE EXTACT FROM PIPKINS.TASK

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;


BEGIN

    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
    DBMS_OUTPUT.PUT_LINE('CREATE_SC_DELETES START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
    
    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
 
INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
(
    TASK_ID, STAFF_ID, TASK_START, 
    TASK_END, EXTRACT_DT, LAST_UPDATE_DT, 
    TASK_YYYYMM, MIN_EXT_DT, BO_ROW_ID
)
SELECT 
	bo.TASK_ID, bo.STAFF_ID, bo.TASK_START, 
    bo.TASK_END, bo.EXTRACT_DT, bo.LAST_UPDATE_DT, 
    to_char(task_start,'YYYYMM'), EXT_DT.MIN_EXT_DT,
    BO.ROWID
FROM ( SELECT * FROM DP_SCORECARD.PP_WFM_TASK_BO 
        WHERE TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
     ) BO
--
left outer JOIN (
    SELECT TASK_YYYYMM, MIN(TRUNC(EXTRACT_DT)) AS MIN_EXT_DT
    FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    GROUP BY TASK_YYYYMM
    ) EXT_DT
    ON EXT_DT.TASK_YYYYMM = TO_CHAR(BO.TASK_START,'YYYYMM')
    AND TRUNC(LAST_UPDATE_DT) < EXT_DT.MIN_EXT_DT
---
WHERE TASK_ID IN ( SELECT TASK_ID 
                    FROM DP_SCORECARD.PP_WFM_TASK_BO
                    WHERE NVL(DELETE_FLAG,'N') = 'N'
                    AND DELETE_DETECTED_DATE IS NULL
                    AND TO_CHAR(TASK_START,'YYYYMM') >= 201601
                    AND TASK_START <= SYSDATE
                    AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
                    AND (STAFF_ID,TO_CHAR(TASK_START,'YYYYMM'))
                        IN ( SELECT SC_STAFF_ID, SC_TASK_YYYYMM 
                            FROM PP_WFM_TASK_AUDIT_CNTRL_DIFFS
                            WHERE SC_TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
                            )
                    MINUS
                    SELECT TASK_ID
                    FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
                    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
                )
AND NVL(DELETE_FLAG,'N') = 'N'                
ORDER BY TASK_ID;

COMMIT;
    
END;    
    
    
 
PROCEDURE UPDATE_PP_WFM_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL) 
IS

    -- Note the LV_DELETE_DETECTED_DATE is 
    -- set at the start so all records updated in this cycle
    -- have the same date
    
    LV_DELETE_DETECTED_DATE   DATE := SYSDATE;
    
    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

    BEGIN
    
        LV_DELETE_DETECTED_DATE := SYSDATE;
        
        SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
        FROM MAXDAT.CORP_ETL_CONTROL
        WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
        SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
        FROM MAXDAT.CORP_ETL_CONTROL
        WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
    DBMS_OUTPUT.PUT_LINE('UPDATE_PP_WFM_TASK_BO START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
        
        UPDATE DP_SCORECARD.PP_WFM_TASK_BO
        SET DELETE_FLAG = 'Y', DELETE_DETECTED_DATE = LV_DELETE_DETECTED_DATE
        WHERE NVL(DELETE_FLAG,'N') = 'N'
        AND DELETE_DETECTED_DATE IS NULL
        -- AND SCENARIO_GROUP_ID = 1
		-- AND TASK_EDIT_ID = 0
        AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
        AND (STAFF_ID, TASK_ID, TO_CHAR(TASK_START,'YYYYMM') )
        IN ( SELECT STAFF_ID, TASK_ID, TASK_YYYYMM
             FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
             WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
           );
           
       COMMIT; 
                 
    END;
    
 PROCEDURE CREATE_SC_INSERT_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

    -- THIS PROCEDURE DETECTS TASKS WHICH COULD HAVE BEEN MISSED BY THE DAILY JOB
    -- OR WHICH MAY HAVE BEEN ADDED OR UPDATED BY PIPKINS
    -- IT IS BASES ON THE PP_WFM_TASK_AUDIT_PPK_TASK MINUS PP_WFM_TASK_BO

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

BEGIN

    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
 
    DBMS_OUTPUT.PUT_LINE('CREATE_SC_INSERTS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
 
    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
    
INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST
(
    TASK_ID, 
    STAFF_ID,  
    EXTRACT_DT,  
    TASK_YYYYMM
)
SELECT DISTINCT
	TASK_ID, 
	STAFF_ID,  
    EXTRACT_DT,  
    TASK_YYYYMM
FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
WHERE TASK_ID 
IN ( SELECT TASK_ID FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
     WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    MINUS
    SELECT TASK_ID
    FROM DP_SCORECARD.PP_WFM_TASK_BO
    WHERE NVL(DELETE_FLAG,'N') <> 'Y'
    AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    )
AND (STAFF_ID, TASK_YYYYMM)
IN (SELECT STAFF_ID, TASK_YYYYMM
    FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    )
    ;

COMMIT;
    

END;     


PROCEDURE PP_WFM_MERGE_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS
   
    LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;
    
    LV_TEST_TASK_ID              NUMBER(38) := 0;       
    LV_FOUND_TASK_ID            NUMBER(38) := 0;      
    
    LV_WRK_TASK_ID NUMBER(38) := 0;
    LV_WRK_ROW_ID  ROWID    := NULL;
    LV_BO_TASK_ID NUMBER(38) := 0;
    LV_BO_ROW_ID  ROWID    := NULL;

    CURSOR TASK_INSERT_CSR IS
    SELECT 
        WRK.STAFF_ID, WRK.TASK_START, WRK.TASK_END, 
        WRK.TASK_CATEGORY_ID, WRK.DURATION, WRK.EVENT_ID, 
        WRK.SUPERVISOR, WRK.TASK_MODIFICATION_REQUEST_REF, WRK.TASK_ID, 
        WRK.SCENARIO_GROUP_ID, WRK.SCHEDULE_INSTANCE_ID, WRK.TASK_EDIT_ID, 
        WRK.EDIT_STATE, WRK.ALT_TASK_EDIT_ID, WRK.NATIONAL_ID, 
        WRK.MAKE_DATE_TIME, WRK.EXTRACT_DT, WRK.LAST_UPDATE_DT, 
        WRK.LAST_UPDATED_BY, WRK.DELETE_FLAG, WRK.DELETE_DETECTED_DATE, 
        BO.ROWID, WRK.ROWID
    FROM PP_WFM_TASK_AUDIT_TASK_BO_WRK WRK
    LEFT OUTER JOIN ( SELECT TASK_ID, ROWID AS BO_ROW_ID FROM PP_WFM_TASK_BO ) BO
    ON BO.TASK_ID = WRK.TASK_ID
    WHERE TO_CHAR(WRK.TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    AND WRK.SCENARIO_GROUP_ID = 1
    AND WRK.TASK_EDIT_ID = 0;
      
    LV_TASK_BO_WRK_REC PP_WFM_TASK_AUDIT_TASK_BO_WRK%ROWTYPE;
        
BEGIN

    -- THE PROCEDURE INSERT_PP_WFM_TASK_BO USES PP_WFM_TASK_AUDIT_TASK_BO_WRK
    -- WHICH WAS CREATED BY A KETTLE TRANSFORM USING PP_WFM_TASK_AUDIT_INSERT_LST
    -- TO ADD OR UPDATE TASKS WHICH MAY HAVE BEEN MISSED BY THE DAILY KETTLE PROCESSING
    -- ( TASKS COULD VAE BEEN ADDES OUTSIDE THE 14 DAT WINDOW FOR NORMAL PROCESSING
    -- OR TASKS COULD HAVE BEEN UPDATED TO SCENARIO_GROUP_ID = 1 AND TASK_EDIT_ID = 0
    -- OUTSIDE OF THE WINDOW )

    SELECT NVL(P_START_YYYYMM,VALUE) INTO LV_START_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    SELECT NVL(P_END_YYYYMM,VALUE) INTO LV_END_YYYYMM 
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
 
    DBMS_OUTPUT.PUT_LINE('CREATE_SC_INSERTS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
     
	IF (TASK_INSERT_CSR%ISOPEN) 
		THEN
			CLOSE TASK_INSERT_CSR;
	END IF;	

	OPEN TASK_INSERT_CSR(); 
	
	LOOP

		FETCH TASK_INSERT_CSR 
		INTO LV_TASK_BO_WRK_REC; 				

		EXIT WHEN TASK_INSERT_CSR%NOTFOUND;

        BEGIN
        
            IF LV_TASK_BO_WRK_REC.WRK_ROW_ID IS NOT NULL
            AND LV_TASK_BO_WRK_REC.BO_ROW_ID IS NOT NULL
            THEN -- UPDATE pp_wfm_task_bo
            
                UPDATE PP_WFM_TASK_BO SET
                STAFF_ID 						= LV_TASK_BO_WRK_REC.STAFF_ID, 						 
                TASK_START 						= LV_TASK_BO_WRK_REC.TASK_START, 						 
                TASK_END 						= LV_TASK_BO_WRK_REC.TASK_END, 						 
                TASK_CATEGORY_ID 				= LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 				 
                DURATION 						= LV_TASK_BO_WRK_REC.DURATION, 						 
                EVENT_ID 						= LV_TASK_BO_WRK_REC.EVENT_ID, 						 
                SUPERVISOR 						= LV_TASK_BO_WRK_REC.SUPERVISOR, 						 
                TASK_MODIFICATION_REQUEST_REF 	= LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF,  
                TASK_ID 						= LV_TASK_BO_WRK_REC.TASK_ID, 						 
                SCENARIO_GROUP_ID 				= LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 				 
                SCHEDULE_INSTANCE_ID 			= LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 			 
                TASK_EDIT_ID 					= LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 					 
                EDIT_STATE 						= LV_TASK_BO_WRK_REC.EDIT_STATE, 						 
                ALT_TASK_EDIT_ID 				= LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 				 
                NATIONAL_ID 					= LV_TASK_BO_WRK_REC.NATIONAL_ID, 					 
                MAKE_DATE_TIME 					= LV_TASK_BO_WRK_REC.MAKE_DATE_TIME,
                -- DO NOT ALTER THE EXTRACT_DT 					 
                -- EXTRACT_DT 						= LV_TASK_BO_WRK_REC.EXTRACT_DT, 						 
                LAST_UPDATE_DT 					= SYSDATE,
                LAST_UPDATED_BY 				= 'TASK AUDIT',
                DELETE_FLAG 					= CASE WHEN SCENARIO_GROUP_ID = 1 
													AND TASK_EDIT_ID = 0 THEN 'N' 
													ELSE 'Y' END, 					 
                DELETE_DETECTED_DATE 			= CASE WHEN SCENARIO_GROUP_ID = 1 
													AND TASK_EDIT_ID = 0 THEN NULL 
													ELSE SYSDATE END					 
                WHERE ROWID = LV_TASK_BO_WRK_REC.BO_ROW_ID;  
            ELSE
                       
                INSERT INTO DP_SCORECARD.PP_WFM_TASK_BO
                (
                STAFF_ID, TASK_START, 
                TASK_END, TASK_CATEGORY_ID, DURATION, 
                EVENT_ID, SUPERVISOR, TASK_MODIFICATION_REQUEST_REF, 
                TASK_ID, SCENARIO_GROUP_ID, SCHEDULE_INSTANCE_ID, 
                TASK_EDIT_ID, EDIT_STATE, ALT_TASK_EDIT_ID, 
                NATIONAL_ID, MAKE_DATE_TIME, EXTRACT_DT, 
                LAST_UPDATE_DT, LAST_UPDATED_BY, DELETE_FLAG, 
                DELETE_DETECTED_DATE
                )    
                VALUES(  
                LV_TASK_BO_WRK_REC.STAFF_ID, 
                LV_TASK_BO_WRK_REC.TASK_START, 
                LV_TASK_BO_WRK_REC.TASK_END, 
                LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 
                LV_TASK_BO_WRK_REC.DURATION, 
                LV_TASK_BO_WRK_REC.EVENT_ID, 
                LV_TASK_BO_WRK_REC.SUPERVISOR, 
                LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF, 
                LV_TASK_BO_WRK_REC.TASK_ID, 
                LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 
                LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 
                LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.EDIT_STATE, 
                LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.NATIONAL_ID, 
                LV_TASK_BO_WRK_REC.MAKE_DATE_TIME, 
                SYSDATE, --AS EXTRACT_DT, 
                SYSDATE, --AS LAST_UPDATE_DT, 
                'TASK AUDIT', --AS LAST_UPDATED_BY, 
                'N', -- AS DELETE_FLAG, 
                NULL --AS DELETE_DETECTED_DATE
                );
                
            END IF;
                
        END;
     
    END LOOP;
    
    COMMIT;
    
    END;
 
 END;
/

show errors

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG TO MAXDAT;

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG TO MAXDAT_REPORTS;

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG TO MAXDAT_READ_ONLY;

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG TO DP_SCORECARD_READ_ONLY;