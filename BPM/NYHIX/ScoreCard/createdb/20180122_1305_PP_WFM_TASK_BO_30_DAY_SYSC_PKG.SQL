CREATE OR REPLACE PACKAGE DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL$';
  	SVN_REVISION varchar2(20) := '$Revision$';
 	SVN_REVISION_DATE varchar2(60) := '$Date$';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author$';


 PROCEDURE PP_WFM_TASK_BO_W30_TRUNCATE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE PP_WFM_TASK_BO_W30_MERGE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);

END PP_WFM_TASK_BO_30_DAY_SYNC_PKG;
/

CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG AS

-- THE PROCEDURES IN THIS PACKAGE ARE USED TO AUDIT ANS SYNCRONIZE THE TASKS BETWEEN
-- PIPKINS.TASK AND DP_SCORECARD.PP_WFM_TASK_BO.  THIS SYNCORONIZATION IS NEEDED
-- BECAUSE PIPKINS CAN PHYSICALLY 'DELETE' TASKS AND THESE IS NO RECORD OF THE
-- DELETTION IN PIPKINS


    PROCEDURE PP_WFM_TASK_BO_W30_TRUNCATE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
    IS
    
        LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
        LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;

    BEGIN
    
        SELECT NVL(P_START_YYYYMM,NVL(VALUE,'201601')) INTO LV_START_YYYYMM 
        FROM MAXDAT.CORP_ETL_CONTROL
        WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
        SELECT NVL(P_END_YYYYMM,NVL(VALUE,TO_CHAR(SYSDATE-30,'YYYYMM'))) INTO LV_END_YYYYMM 
        FROM MAXDAT.CORP_ETL_CONTROL
        WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';
    
        DBMS_OUTPUT.PUT_LINE('LOAD_TASK_AUDIT_CNTRL_SC START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
 
   		EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.PP_WFM_TASK_BO_SYNC_W30';
    
    END;
    

-------------------------------------------------------------------------
-------------------------------------------------------------------------
    PROCEDURE PP_WFM_TASK_BO_W30_MERGE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
    IS
   
    LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;
    
    LV_TEST_TASK_ID              NUMBER(38) := 0;       
    LV_FOUND_TASK_ID            NUMBER(38) := 0;      
    
    LV_WRK_TASK_ID NUMBER(38) := 0;
    LV_WRK_ROW_ID  ROWID    := NULL;
    LV_BO_TASK_ID NUMBER(38) := 0;
    LV_BO_ROW_ID  ROWID    := NULL;

    CURSOR TASK_INSERT_CSR IS
    SELECT 
        W30.STAFF_ID, W30.TASK_START, W30.TASK_END, 
        W30.TASK_CATEGORY_ID, W30.DURATION, W30.EVENT_ID, 
        W30.SUPERVISOR, W30.TASK_MODIFICATION_REQUEST_REF, W30.TASK_ID, 
        W30.SCENARIO_GROUP_ID, W30.SCHEDULE_INSTANCE_ID, W30.TASK_EDIT_ID, 
        W30.EDIT_STATE, W30.ALT_TASK_EDIT_ID, W30.NATIONAL_ID, 
        W30.MAKE_DATE_TIME, BO.EXTRACT_DT, BO.LAST_UPDATE_DT, 
        BO.LAST_UPDATED_BY, BO.DELETE_FLAG, BO.DELETE_DETECTED_DATE, 
		W30.BO_TASK_ID,
        BO.ROWID, W30.ROWID
    FROM PP_WFM_TASK_BO_SYNC_W30 W30
		-- note for the "1s and 0s" the W30.bo_task_id will always be null 
		-- for the NOT "1s and 0s" the W30.bo_task_id will never be null
		-- for physical deletes the W30.bo_task_id will not be null 
		-- but the W30.task_id will be null.
    LEFT OUTER JOIN 
        ( SELECT TASK_ID, ROWID AS BO_ROW_ID, 
            EXTRACT_DT, LAST_UPDATE_DT, LAST_UPDATED_BY, 
            DELETE_FLAG, DELETE_DETECTED_DATE
        FROM PP_WFM_TASK_BO 
        ) BO
    ON BO.TASK_ID = W30.TASK_ID
    WHERE TRUNC(W30.TASK_START) BETWEEN TRUNC(SYSDATE-30) AND TRUNC(SYSDATE);
      
    LV_TASK_BO_WRK_REC PP_WFM_TASK_BO_SYNC_W30%ROWTYPE;
        
    BEGIN

    -- THE PROCEDURE will 'merge' the contens of PP_WFM_TASK_AUDIT_TASK_BO_W30
    -- into PP_WFM_TASK_BO.
    -- Table PP_WFM_TASK_AUDIT_TASK_BO_W30 contains data extracted from PIPKINS
    -- for the last 30 days.

    --SELECT NVL(P_START_YYYYMM,NVL(VALUE,'201601')) INTO LV_START_YYYYMM 
    --FROM MAXDAT.CORP_ETL_CONTROL
    --WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';
     
    --SELECT NVL(P_END_YYYYMM,NVL(VALUE,TO_CHAR(SYSDATE,'YYYYMM'))) INTO LV_END_YYYYMM 
    --FROM MAXDAT.CORP_ETL_CONTROL
    --WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    LV_START_YYYYMM := TO_CHAR(SYSDATE-30,'YYYYMM');
    
    LV_END_YYYYMM := TO_CHAR(SYSDATE,'YYYYMM');
    
    DBMS_OUTPUT.PUT_LINE('CREATE_SC_INSERTS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);
     
	IF (TASK_INSERT_CSR%ISOPEN) 
		THEN
			CLOSE TASK_INSERT_CSR;
	END IF;	

	OPEN TASK_INSERT_CSR(); 
	
	LOOP

		FETCH TASK_INSERT_CSR 
		INTO LV_TASK_BO_WRK_REC; 				

		EXIT WHEN TASK_INSERT_CSR%NOTFOUND;

        BEGIN
		
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- SKIP THIS RECORD
				CONTINUE;
			END IF;	
			
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- THIS IS A PHYSICAL DELETE
				
				UPDATE PP_WFM_TASK_BO
				SET DELETE_FLAG = 'Y',
					LAST_UPDATE_DT = SYSDATE,
					DELETE_DETECTED_DATE = CASE WHEN LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE IS NULL 
											THEN 
												SYSDATE
											ELSE 	
                                                LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE
											END,	
					LAST_UPDATED_BY = 'TASK AUDIT'
				WHERE TASK_ID = LV_TASK_BO_WRK_REC.BO_TASK_ID
				AND NVL(DELETE_FLAG,'N') = 'N';
				
				CONTINUE;
				
			END IF;	
          
		
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			-- THIS IS A "1 AND 0" RECORD.
			-- IT COULD BE EITHER AN INSERT OR UPDATE	
				THEN 
					LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
					LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
			END IF;		
					
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL
			-- THIS WILL BE AN UPDATE
			-- IT COUNT BE A "1 AND 0" OR NOT
			THEN
				IF LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID = 1
				AND LV_TASK_BO_WRK_REC.TASK_EDIT_ID = 0
					THEN
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
				ELSE		
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'Y';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := SYSDATE;
				END IF;		
			END IF;

				 
            IF LV_TASK_BO_WRK_REC.WRK_ROW_ID IS NOT NULL
            AND LV_TASK_BO_WRK_REC.BO_ROW_ID IS NOT NULL
            THEN -- UPDATE pp_wfm_task_bo
            
                UPDATE PP_WFM_TASK_BO SET
                STAFF_ID 						= LV_TASK_BO_WRK_REC.STAFF_ID, 						 
                TASK_START 						= LV_TASK_BO_WRK_REC.TASK_START, 						 
                TASK_END 						= LV_TASK_BO_WRK_REC.TASK_END, 						 
                TASK_CATEGORY_ID 				= LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 				 
                DURATION 						= LV_TASK_BO_WRK_REC.DURATION, 						 
                EVENT_ID 						= LV_TASK_BO_WRK_REC.EVENT_ID, 						 
                SUPERVISOR 						= LV_TASK_BO_WRK_REC.SUPERVISOR, 						 
                TASK_MODIFICATION_REQUEST_REF 	= LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF,  
                TASK_ID 						= LV_TASK_BO_WRK_REC.TASK_ID, 						 
                SCENARIO_GROUP_ID 				= LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 				 
                SCHEDULE_INSTANCE_ID 			= LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 			 
                TASK_EDIT_ID 					= LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 					 
                EDIT_STATE 						= LV_TASK_BO_WRK_REC.EDIT_STATE, 						 
                ALT_TASK_EDIT_ID 				= LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 				 
                NATIONAL_ID 					= LV_TASK_BO_WRK_REC.NATIONAL_ID, 					 
                MAKE_DATE_TIME 					= LV_TASK_BO_WRK_REC.MAKE_DATE_TIME,
                -- DO NOT ALTER THE EXTRACT_DT 					 
                -- EXTRACT_DT 						= LV_TASK_BO_WRK_REC.EXTRACT_DT, 						 
                LAST_UPDATE_DT 					= SYSDATE,
                LAST_UPDATED_BY 				= 'TASK AUDIT',
                DELETE_FLAG 					= LV_TASK_BO_WRK_REC.DELETE_FLAG,	 
                DELETE_DETECTED_DATE 			= LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE
                WHERE ROWID = LV_TASK_BO_WRK_REC.BO_ROW_ID;  
            ELSIF
				LV_TASK_BO_WRK_REC.BO_ROW_ID IS NULL
				and LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL 
				THEN 
				
                INSERT INTO DP_SCORECARD.PP_WFM_TASK_BO
                (
                STAFF_ID, TASK_START, 
                TASK_END, TASK_CATEGORY_ID, DURATION, 
                EVENT_ID, SUPERVISOR, TASK_MODIFICATION_REQUEST_REF, 
                TASK_ID, SCENARIO_GROUP_ID, SCHEDULE_INSTANCE_ID, 
                TASK_EDIT_ID, EDIT_STATE, ALT_TASK_EDIT_ID, 
                NATIONAL_ID, MAKE_DATE_TIME, EXTRACT_DT, 
                LAST_UPDATE_DT, LAST_UPDATED_BY, DELETE_FLAG, 
                DELETE_DETECTED_DATE
                )    
                VALUES(  
                LV_TASK_BO_WRK_REC.STAFF_ID, 
                LV_TASK_BO_WRK_REC.TASK_START, 
                LV_TASK_BO_WRK_REC.TASK_END, 
                LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 
                LV_TASK_BO_WRK_REC.DURATION, 
                LV_TASK_BO_WRK_REC.EVENT_ID, 
                LV_TASK_BO_WRK_REC.SUPERVISOR, 
                LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF, 
                LV_TASK_BO_WRK_REC.TASK_ID, 
                LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 
                LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 
                LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.EDIT_STATE, 
                LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.NATIONAL_ID, 
                LV_TASK_BO_WRK_REC.MAKE_DATE_TIME, 
                SYSDATE, --AS EXTRACT_DT, 
                SYSDATE, --AS LAST_UPDATE_DT, 
                'TASK AUDIT', --AS LAST_UPDATED_BY, 
                'N', -- AS DELETE_FLAG, 
                NULL --AS DELETE_DETECTED_DATE
                );
                ELSE
                    NULL;
                
            END IF;
			
        END;
        
     
    END LOOP;
    
        COMMIT;
    --rollback;
    
    END; 
    
END PP_WFM_TASK_BO_30_DAY_SYNC_PKG;    

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG TO MAXDAT;

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG TO MAXDAT_READ_ONLY;

GRANT DEBUG ON DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG TO MAXDAT_READ_ONLY;

GRANT EXECUTE ON DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG TO DP_SCORECARD_READ_ONLY;

GRANT DEBUG ON DP_SCORECARD.PP_WFM_TASK_BO_30_DAY_SYNC_PKG TO DP_SCORECARD_READ_ONLY;

