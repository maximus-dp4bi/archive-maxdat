CREATE OR REPLACE PACKAGE DP_SCORECARD.PP_WFM_TASK_BO_30D_SYNC_PKG AS
 PROCEDURE CREATE_TASK_BO_30D_CNTRL_SC;
 PROCEDURE CREATE_TASK_BO_3OD_SYNC_DIFFS;
 PROCEDURE TRUNCATE_TASK_30D_WRK;
 PROCEDURE MERGE_TASK_BO_30D_WRK;
END PP_WFM_TASK_BO_30D_SYNC_PKG;
/

CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_TASK_BO_30D_SYNC_PKG AS

-- THE PROCEDURES IN THIS PACKAGE ARE USED TO AUDIT ANS SYNCRONIZE THE TASKS BETWEEN
-- PIPKINS.TASK AND DP_SCORECARD.PP_WFM_TASK_BO.  THIS SYNCORONIZATION IS NEEDED
-- BECAUSE PIPKINS CAN PHYSICALLY 'DELETE' TASKS AND THESE IS NO RECORD OF THE
-- DELETTION IN PIPKINS

 PROCEDURE CREATE_TASK_BO_30D_CNTRL_SC
  IS
  
    -- THIS PROCEDURE TRUNCATES AND RE-LOADS THE SCORECARD CONTROL COUNTS
    -- BASED ON DP_SCORECARD.PP_WFM_TASK_BO
    

 BEGIN
    
	EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_30D_SYNC_CNTRL_SC';
    
    INSERT INTO DP_SCORECARD.PP_WFM_TASK_30D_SYNC_CNTRL_SC
    (
    TASK_YYYYMMDD, 
    STAFF_ID, 
    TASK_COUNT, 
    TASK_SUM, 
    ORAHASH,
    RUN_DATE
    )
    SELECT TASK_YYYYMMDD, 
    STAFF_ID, 
    COUNT(TASK_ID) AS TASK_COUNT, 
    SUM(TASK_ID) AS TASK_SUM, 
    SUM(ORAHASH) AS ORAHASH,
    SYSDATE AS RUN_DATE
    FROM ( SELECT TO_CHAR(TASK_START,'YYYYMMDD') TASK_YYYYMMDD,
            STAFF_ID,
            TASK_ID,
            ORA_HASH(STAFF_ID|| 
                TASK_CATEGORY_ID|| 
                DURATION|| 
                EVENT_ID|| 
                SUPERVISOR|| 
                TASK_MODIFICATION_REQUEST_REF|| 
                TASK_ID|| 
                TASK.SCENARIO_GROUP_ID|| 
                TASK.SCHEDULE_INSTANCE_ID|| 
                TASK.TASK_EDIT_ID|| 
                EDIT_STATE|| 
                ALT_TASK_EDIT_ID) AS ORAHASH
        FROM DP_SCORECARD.PP_WFM_TASK_BO TASK
        WHERE NVL(DELETE_FLAG,'N') = 'N'
        AND TRUNC(TASK_START) BETWEEN TRUNC(SYSDATE-30) AND TRUNC(SYSDATE) 
        AND NVL(DELETE_FLAG,'N') = 'N'
        AND DELETE_DETECTED_DATE IS NULL
        )
        GROUP BY STAFF_ID, TASK_YYYYMMDD;
    
    COMMIT;
      
 END;   

--------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------- 
 PROCEDURE CREATE_TASK_BO_3OD_SYNC_DIFFS
 IS

 BEGIN

 
	EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_30D_SYNC_DIFFS';
    
    --DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    --WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;

    INSERT INTO DP_SCORECARD.PP_WFM_TASK_30D_SYNC_DIFFS
    (
        TASK_YYYYMMDD, STAFF_ID, WFM_TASK_YYYYMMDD, 
        WFM_STAFF_ID, WFM_TASK_COUNT, WFM_TASK_SUM, WFM_ORAHASH,
        SC_TASK_YYYYMMDD, SC_STAFF_ID, SC_TASK_COUNT, 
        SC_TASK_SUM, SC_ORAHASH
    )
    WITH ALL_STAFF_YYYYMMDD AS
    (
    SELECT TASK_YYYYMMDD, STAFF_ID FROM PP_WFM_TASK_30D_SYNC_CNTRL_SC
    UNION 
    SELECT TASK_YYYYMMDD, STAFF_ID FROM PP_WFM_TASK_30D_SYNC_CNTRL_PPK
    ),
    MATCHING_STAFF_YYYYMMDD AS
    (
    SELECT TASK_YYYYMMDD, STAFF_ID, TASK_COUNT, TASK_SUM, ORAHASH
    FROM PP_WFM_TASK_30D_SYNC_CNTRL_SC
    INTERSECT
    SELECT TASK_YYYYMMDD, STAFF_ID, TASK_COUNT, TASK_SUM, ORAHASH
    FROM PP_WFM_TASK_30D_SYNC_CNTRL_PPK
    ),
    STAFF_DIFFS_YYYYMMDD AS
    ( 
    SELECT TASK_YYYYMMDD, STAFF_ID FROM ALL_STAFF_YYYYMMDD
    MINUS 
    SELECT TASK_YYYYMMDD, STAFF_ID FROM MATCHING_STAFF_YYYYMMDD
    ),
    DIFF_DETAIL AS
    (
    SELECT DIFFS.TASK_YYYYMMDD, 
        DIFFS.STAFF_ID, 
        PIPKINS.TASK_YYYYMMDD AS WFM_TASK_YYYYMMDD, 
        PIPKINS.STAFF_ID    AS WFM_STAFF_ID, 
        PIPKINS.TASK_COUNT  AS WFM_TASK_COUNT, 
        PIPKINS.TASK_SUM    AS WFM_TASK_SUM,  
        PIPKINS.ORAHASH     AS WFM_ORAHASH,
        SCORECARD.TASK_YYYYMMDD   AS SC_TASK_YYYYMMDD,
        SCORECARD.STAFF_ID      AS SC_STAFF_ID,
        SCORECARD.TASK_COUNT    AS SC_TASK_COUNT,
        SCORECARD.TASK_SUM      AS SC_TASK_SUM,
        SCORECARD.ORAHASH       AS SC_ORAHASH
    FROM STAFF_DIFFS_YYYYMMDD DIFFS
    LEFT OUTER JOIN PP_WFM_TASK_30D_SYNC_CNTRL_PPK PIPKINS
        ON PIPKINS.TASK_YYYYMMDD = DIFFS.TASK_YYYYMMDD
        AND PIPKINS.STAFF_ID = DIFFS.STAFF_ID
    LEFT OUTER JOIN  PP_WFM_TASK_30D_SYNC_CNTRL_SC SCORECARD
        ON SCORECARD.TASK_YYYYMMDD = DIFFS.TASK_YYYYMMDD
        AND SCORECARD.STAFF_ID = DIFFS.STAFF_ID
    WHERE 1=1
    AND ( NVL(PIPKINS.TASK_COUNT,0) <> NVL(SCORECARD.TASK_COUNT,0)
        OR NVL(PIPKINS.TASK_SUM,0) <> NVL(SCORECARD.TASK_SUM,0)
        OR NVL(PIPKINS.ORAHASH,0) <> NVL(SCORECARD.ORAHASH,0)
        )
    )
    SELECT 
        TASK_YYYYMMDD, STAFF_ID, 
        WFM_TASK_YYYYMMDD, WFM_STAFF_ID, 
        WFM_TASK_COUNT, WFM_TASK_SUM, WFM_ORAHASH,
        SC_TASK_YYYYMMDD, SC_STAFF_ID, SC_TASK_COUNT, 
        SC_TASK_SUM, SC_ORAHASH
    FROM DIFF_DETAIL
    WHERE TASK_YYYYMMDD BETWEEN TO_CHAR(SYSDATE-30,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD');
    -- AND TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;
    
    COMMIT;
    
 END;   

-----------------------------------------------------------------------------------
----------------------------------------------------------------------------------- 


    PROCEDURE TRUNCATE_TASK_30D_WRK
    IS
    
    BEGIN
    
   		EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.PP_WFM_TASK_30D_SYNC_WRK';  
    
    END;
    

-------------------------------------------------------------------------
-------------------------------------------------------------------------
    PROCEDURE MERGE_TASK_BO_30D_WRK
    IS
    
    LV_TEST_TASK_ID              NUMBER(38) := 0;       
    LV_FOUND_TASK_ID            NUMBER(38) := 0;      
    
    LV_WRK_TASK_ID NUMBER(38) := 0;
    LV_WRK_ROW_ID  ROWID    := NULL;
    LV_BO_TASK_ID NUMBER(38) := 0;
    LV_BO_ROW_ID  ROWID    := NULL;

    CURSOR TASK_INSERT_CSR IS
    SELECT 
        W30.STAFF_ID, W30.TASK_START, W30.TASK_END, 
        W30.TASK_CATEGORY_ID, W30.DURATION, W30.EVENT_ID, 
        W30.SUPERVISOR, W30.TASK_MODIFICATION_REQUEST_REF, W30.TASK_ID, 
        W30.SCENARIO_GROUP_ID, W30.SCHEDULE_INSTANCE_ID, W30.TASK_EDIT_ID, 
        W30.EDIT_STATE, W30.ALT_TASK_EDIT_ID, W30.NATIONAL_ID, 
        W30.MAKE_DATE_TIME, BO.EXTRACT_DT, BO.LAST_UPDATE_DT, 
        BO.LAST_UPDATED_BY, BO.DELETE_FLAG, BO.DELETE_DETECTED_DATE, 
		W30.BO_TASK_ID,
        BO.ROWID, W30.ROWID
    FROM PP_WFM_TASK_30D_SYNC_WRK W30
		-- note for the "1s and 0s" the W30.bo_task_id will always be null 
		-- for the NOT "1s and 0s" the W30.bo_task_id will never be null
		-- for physical deletes the W30.bo_task_id will not be null 
		-- but the W30.task_id will be null.
    LEFT OUTER JOIN 
        ( SELECT TASK_ID, ROWID AS BO_ROW_ID, 
            EXTRACT_DT, LAST_UPDATE_DT, LAST_UPDATED_BY, 
            DELETE_FLAG, DELETE_DETECTED_DATE
        FROM PP_WFM_TASK_BO 
        ) BO
    ON BO.TASK_ID = W30.TASK_ID
    WHERE TRUNC(W30.TASK_START) BETWEEN TRUNC(SYSDATE-30) AND TRUNC(SYSDATE);
      
    LV_TASK_BO_WRK_REC PP_WFM_TASK_30D_SYNC_WRK%ROWTYPE;
        
    BEGIN

    -- THE PROCEDURE will 'merge' the contens of PP_WFM_TASK_AUDIT_TASK_BO_W30
    -- into PP_WFM_TASK_BO.
    -- Table PP_WFM_TASK_AUDIT_TASK_BO_W30 contains data extracted from PIPKINS
    -- for the last 30 days.
    
    -- If there records in DP_SCORECARD.PPWFM_TASK_BO for a STAFF_ID, TASK_YYYYMMDD
    -- ( SC_STAFF_ID, SC_TASK_YYYYMMDD in the CNTRL_DIFFS )
    -- but there ARE NOT any WFM_STAFF_ID, WFM_TASK_YYYYMMDD in thee CNTRL)DIFFS
    -- set the DELETE_DETECTED_DATE AND DELETED_FLAG  
    
    UPDATE DP_SCORECARD.PP_WFM_TASK_BO
        SET DELETE_DETECTED_DATE = SYSDATE, DELETE_FLAG = 'Y'
    WHERE DELETE_DETECTED_DATE IS NULL
    AND NVL(DELETE_FLAG,'N') = 'N' 
    AND (STAFF_ID, TO_CHAR(TASK_START,'YYYYMMDD'))
    IN ( SELECT SC_STAFF_ID, SC_TASK_YYYYMMDD 
        FROM PP_WFM_TASK_30D_SYNC_DIFFS
        WHERE WFM_STAFF_ID IS NULL
    );
   
   COMMIT;

    UPDATE PP_WFM_TASK_BO
        SET DELETE_FLAG = 'Y',
        DELETE_DETECTED_DATE = SYSDATE
    WHERE NVL(DELETE_FLAG,'N') = 'N'
    AND TASK_ID 
    IN (
        SELECT BO_TASK_ID 
        FROM (
            SELECT BO.TASK_ID AS BO_TASK_ID, WRK.TASK_ID AS WRK_TASK_ID 
            FROM PP_WFM_TASK_BO BO
            JOIN PP_WFM_TASK_30D_SYNC_DIFFS DIFFS
            ON BO.STAFF_ID = DIFFS.WFM_STAFF_ID
            AND TO_CHAR(TASK_START,'YYYYMMDD') = WFM_TASK_YYYYMMDD
            LEFT OUTER JOIN PP_WFM_TASK_30D_SYNC_WRK WRK
            ON BO.TASK_ID = WRK.TASK_ID
            WHERE NVL(BO.DELETE_FLAG,'N') = 'N'
            )
        WHERE WRK_TASK_ID IS NULL
        );
    
    COMMIT;
    
	IF (TASK_INSERT_CSR%ISOPEN) 
		THEN
			CLOSE TASK_INSERT_CSR;
	END IF;	

	OPEN TASK_INSERT_CSR(); 
	
	LOOP

		FETCH TASK_INSERT_CSR 
		INTO LV_TASK_BO_WRK_REC; 				

		EXIT WHEN TASK_INSERT_CSR%NOTFOUND;

        BEGIN
		
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- SKIP THIS RECORD
				CONTINUE;
			END IF;	
			
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- THIS IS A PHYSICAL DELETE
				
				UPDATE PP_WFM_TASK_BO
				SET DELETE_FLAG = 'Y',
					LAST_UPDATE_DT = SYSDATE,
					DELETE_DETECTED_DATE = SYSDATE,	
					LAST_UPDATED_BY = 'DP_SCORECARD'
				WHERE TASK_ID = LV_TASK_BO_WRK_REC.BO_TASK_ID
				AND NVL(DELETE_FLAG,'N') = 'N';
				
				CONTINUE;
				
			END IF;	
          
		
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			-- THIS IS A "1 AND 0" RECORD.
			-- IT COULD BE EITHER AN INSERT OR UPDATE	
				THEN 
					LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
					LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
			END IF;		
					
			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			-- THIS IS A PIPKINS PHYSICAL DELETE  
				THEN 
					LV_TASK_BO_WRK_REC.DELETE_FLAG := 'Y';
					IF LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE IS NULL
						THEN 
                            LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := SYSDATE;
					END IF;	
			END IF;		

			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL
			-- THIS WILL BE AN UPDATE
			-- IT COUNT BE A "1 AND 0" OR NOT
			THEN
				IF LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID = 1
				AND LV_TASK_BO_WRK_REC.TASK_EDIT_ID = 0
					THEN
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
				ELSE		
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'Y';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := SYSDATE;
				END IF;		
			END IF;

				 
            IF LV_TASK_BO_WRK_REC.WRK_ROW_ID IS NOT NULL
            AND LV_TASK_BO_WRK_REC.BO_ROW_ID IS NOT NULL
            THEN -- UPDATE pp_wfm_task_bo
            
                UPDATE PP_WFM_TASK_BO SET
                STAFF_ID 						= LV_TASK_BO_WRK_REC.STAFF_ID, 						 
                TASK_START 						= LV_TASK_BO_WRK_REC.TASK_START, 						 
                TASK_END 						= LV_TASK_BO_WRK_REC.TASK_END, 						 
                TASK_CATEGORY_ID 				= LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 				 
                DURATION 						= LV_TASK_BO_WRK_REC.DURATION, 						 
                EVENT_ID 						= LV_TASK_BO_WRK_REC.EVENT_ID, 						 
                SUPERVISOR 						= LV_TASK_BO_WRK_REC.SUPERVISOR, 						 
                TASK_MODIFICATION_REQUEST_REF 	= LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF,  
                TASK_ID 						= LV_TASK_BO_WRK_REC.TASK_ID, 						 
                SCENARIO_GROUP_ID 				= LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 				 
                SCHEDULE_INSTANCE_ID 			= LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 			 
                TASK_EDIT_ID 					= LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 					 
                EDIT_STATE 						= LV_TASK_BO_WRK_REC.EDIT_STATE, 						 
                ALT_TASK_EDIT_ID 				= LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 				 
                NATIONAL_ID 					= LV_TASK_BO_WRK_REC.NATIONAL_ID, 					 
                MAKE_DATE_TIME 					= LV_TASK_BO_WRK_REC.MAKE_DATE_TIME,
                -- DO NOT ALTER THE EXTRACT_DT 					 
                -- EXTRACT_DT 						= LV_TASK_BO_WRK_REC.EXTRACT_DT, 						 
                LAST_UPDATE_DT 					= SYSDATE,
                LAST_UPDATED_BY 				= 'TASK AUDIT',
                DELETE_FLAG 					= LV_TASK_BO_WRK_REC.DELETE_FLAG,	 
                DELETE_DETECTED_DATE 			= LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE
                WHERE ROWID = LV_TASK_BO_WRK_REC.BO_ROW_ID;  
            ELSIF
				LV_TASK_BO_WRK_REC.BO_ROW_ID IS NULL
				and LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL 
				THEN 
				
                INSERT INTO DP_SCORECARD.PP_WFM_TASK_BO
                (
                STAFF_ID, TASK_START, 
                TASK_END, TASK_CATEGORY_ID, DURATION, 
                EVENT_ID, SUPERVISOR, TASK_MODIFICATION_REQUEST_REF, 
                TASK_ID, SCENARIO_GROUP_ID, SCHEDULE_INSTANCE_ID, 
                TASK_EDIT_ID, EDIT_STATE, ALT_TASK_EDIT_ID, 
                NATIONAL_ID, MAKE_DATE_TIME, EXTRACT_DT, 
                LAST_UPDATE_DT, LAST_UPDATED_BY, DELETE_FLAG, 
                DELETE_DETECTED_DATE
                )    
                VALUES(  
                LV_TASK_BO_WRK_REC.STAFF_ID, 
                LV_TASK_BO_WRK_REC.TASK_START, 
                LV_TASK_BO_WRK_REC.TASK_END, 
                LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID, 
                LV_TASK_BO_WRK_REC.DURATION, 
                LV_TASK_BO_WRK_REC.EVENT_ID, 
                LV_TASK_BO_WRK_REC.SUPERVISOR, 
                LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF, 
                LV_TASK_BO_WRK_REC.TASK_ID, 
                LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID, 
                LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID, 
                LV_TASK_BO_WRK_REC.TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.EDIT_STATE, 
                LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID, 
                LV_TASK_BO_WRK_REC.NATIONAL_ID, 
                LV_TASK_BO_WRK_REC.MAKE_DATE_TIME, 
                SYSDATE, --AS EXTRACT_DT, 
                SYSDATE, --AS LAST_UPDATE_DT, 
                'TASK AUDIT', --AS LAST_UPDATED_BY, 
                'N', -- AS DELETE_FLAG, 
                NULL --AS DELETE_DETECTED_DATE
                );
                ELSE
                    NULL;
                
            END IF;
			
        END;
        
     
    END LOOP;
    
        COMMIT;
    --rollback;
    
    END; 
    
END PP_WFM_TASK_BO_30D_SYNC_PKG;
/

grant execute on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT;

grant execute on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT_reports;

grant execute on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT_read_only;

grant execute on PP_WFM_TASK_BO_30D_SYNC_PKG to dp_scorecard_read_only;

grant debug on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT;

grant debug on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT_reports;

grant debug on PP_WFM_TASK_BO_30D_SYNC_PKG to MAXDAT_read_only;

grant debug on PP_WFM_TASK_BO_30D_SYNC_PKG to dp_scorecard_read_only;