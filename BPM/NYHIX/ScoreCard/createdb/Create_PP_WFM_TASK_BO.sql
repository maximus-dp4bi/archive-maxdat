declare  c int;
begin
   select count(*) into c from user_tables where table_name ='PP_WFM_TASK_BO';
   if c = 1 then
      execute immediate 'drop table PP_WFM_TASK_BO cascade constraints';
   end if;
end;
/

CREATE TABLE PP_WFM_TASK_BO
(
PP_WFM_TASK_BO_ID          NUMBER(38)	NOT NULL
,STAFF_ID	        NUMBER(38)	NOT NULL
,TASK_START	        DATE	NOT NULL
,TASK_END	        DATE	NOT NULL
,TASK_CATEGORY_ID	NUMBER(38)	NOT NULL
,DURATION	        NUMBER(38)	NOT NULL
,EVENT_ID	        NUMBER(38)	NOT NULL
,SUPERVISOR	        NUMBER(38)	
,TASK_MODIFICATION_REQUEST_REF	NUMBER(38)	
,TASK_ID	NUMBER(38)	NOT NULL
,SCENARIO_GROUP_ID NUMBER(38,0) NOT NULL
,SCHEDULE_INSTANCE_ID NUMBER(38,0) 
,TASK_EDIT_ID NUMBER(38,0) 
,EDIT_STATE NUMBER(38,0) 
,ALT_TASK_EDIT_ID NUMBER(38,0) 
,NATIONAL_ID	varchar(250)
,MAKE_DATE_TIME	date
,EXTRACT_DT             DATE NOT NULL
,LAST_UPDATE_DT         DATE NOT NULL
,LAST_UPDATED_BY        VARCHAR2(30) NOT NULL
);

ALTER TABLE PP_WFM_TASK_BO ADD CONSTRAINT PP_WFM_TASK_BO_PK PRIMARY KEY
(
  PP_WFM_TASK_BO_ID
);

CREATE INDEX BO_TASK_TASK_ID_IDX ON PP_WFM_TASK_BO
  (
    TASK_ID ASC
  )
TABLESPACE MAXDAT_INDX LOGGING ;

CREATE INDEX BO_TASK_STAFF_ID_IDX ON PP_WFM_TASK_BO
  (
    STAFF_ID ASC
  )
TABLESPACE MAXDAT_INDX LOGGING ;

CREATE INDEX BO_TASK_EVENT_ID_IDX ON PP_WFM_TASK_BO
  (
    EVENT_ID ASC
  )
TABLESPACE MAXDAT_INDX LOGGING ;

CREATE INDEX BO_TASK_TASK_CATEGORY_ID_IDX ON PP_WFM_TASK_BO
  (
    TASK_CATEGORY_ID ASC
  )
TABLESPACE MAXDAT_INDX LOGGING ;

grant select on PP_WFM_TASK_BO to maxdat_read_only;
grant select, references, insert, update, delete on PP_WFM_TASK_BO to MAXDAT;

CREATE OR REPLACE FORCE VIEW PP_WFM_TASK_BO_SV (
STAFF_ID
, TASK_START
, TASK_END
, TASK_CATEGORY_ID
, DURATION
, EVENT_ID
, SUPERVISOR
, TASK_MODIFICATION_REQUEST_REF
, TASK_ID
, SCENARIO_GROUP_ID
, SCHEDULE_INSTANCE_ID 
, TASK_EDIT_ID
, EDIT_STATE 
, ALT_TASK_EDIT_ID 
, NATIONAL_ID
, MAKE_DATE_TIME	
, EXTRACT_DT
, LAST_UPDATE_DT
, LAST_UPDATED_BY
) AS 
  SELECT  STAFF_ID	 
,TASK_START	 
,TASK_END	 
,TASK_CATEGORY_ID
,DURATION	 
,EVENT_ID	 
,SUPERVISOR	 
,TASK_MODIFICATION_REQUEST_REF
,TASK_ID
,SCENARIO_GROUP_ID
,SCHEDULE_INSTANCE_ID 
,TASK_EDIT_ID
,EDIT_STATE 
,ALT_TASK_EDIT_ID 
,NATIONAL_ID
,MAKE_DATE_TIME	
,EXTRACT_DT     
,LAST_UPDATE_DT 
,LAST_UPDATED_BY
FROM PP_WFM_TASK_BO
WITH READ ONLY;

grant select on PP_WFM_TASK_BO_SV to maxdat_read_only;
grant select on PP_WFM_TASK_BO_SV to MAXDAT;

declare  c int;
begin
   select count(*) into c from all_sequences where sequence_name ='SEQ_PP_WFM_TASK_BO_ID';
   if c = 1 then
      execute immediate 'drop sequence SEQ_PP_WFM_TASK_BO_ID';
   end if;
end;
/

create sequence DP_SCORECARD.SEQ_PP_WFM_TASK_BO_ID
 minvalue 1
 maxvalue 999999999999999999999999999
 start with 1
 increment by 1
 cache 20; 

create or replace TRIGGER BIU_PP_WFM_TASK_BO
    BEFORE INSERT OR UPDATE ON PP_WFM_TASK_BO
    FOR EACH ROW 
    BEGIN
IF INSERTING AND :NEW.PP_WFM_TASK_BO_ID IS NULL THEN 
          SELECT SEQ_PP_WFM_TASK_BO_ID.NEXTVAL INTO :NEW.PP_WFM_TASK_BO_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATED_BY := USER;
END; 
/