CREATE OR REPLACE PACKAGE CALC_SPPL_LWOP_PKG AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL: svn://rcmxapp1d.maximus.com/maxdat/BPM/NYHIX/patch/20170623_PP_WFM_BACK_OFFICE_LOAD_PKG.sql $';
  	SVN_REVISION varchar2(20) := '$Revision: 20489 $';
 	SVN_REVISION_DATE varchar2(60) := '$Date: 2017-07-03 14:31:06 -0500 (Mon, 03 Jul 2017) $';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author: wl134672 $';

PROCEDURE UPDATE_SC_AUDIT_SPPL_LWOP
(IN_STAFF_ID IN NUMBER DEFAULT NULL );

END CALC_SPPL_LWOP_PKG;
/

SHOW ERRORS

COMMIT;

CREATE OR REPLACE PACKAGE BODY CALC_SPPL_LWOP_PKG AS

	GV_IN_STAFF_ID                 	VARCHAR2(10) 	:= '%';
	GV_CALC_STAFF_ID               	NUMBER 			:= 0;
	GV_ACCRUAL_LIMIT_DATE			DATE 			:= SYSDATE;
	GV_RUN_DATE                     DATE 			:= SYSDATE;
	GV_SPPL_LWOP_FLAG				VARCHAR2(1) 	:= 'N';
	GV_SPPL_LWOP_FLAG_HOLD			VARCHAR2(1) 	:= 'N';
	GV_DAY_OF_WEEK                  VARCHAR2(1) 	:= TO_CHAR(SYSDATE,'D');

	GV_ACCRUAL_HOURS				NUMBER 			:= 0;

	-- THESE ARE USED FOR OUTPUT AND MUST BE RESET ON THE RECORD BREAK
	GV_LWOP_BALANCE					NUMBER 			:= 0;
	GV_ACCRUAL_START_DATE 			DATE 			:= TO_DATE('20200101','YYYYMMDD');
	GV_ACCRUAL_END_DATE 			DATE 			:= SYSDATE;
	GV_MESSAGE						VARCHAR2(52) 	:= NULL;
    GV_LWOP_HOURS					NUMBER 			:= 0;
	GV_ACCRUAL_COUNT				NUMBER(3) 		:= 0;
	GV_LAST_OCCURRENCE_DATE			DATE			:= SYSDATE;

	-- THIS PROCEDURE IS CALLED FROM THE INSERT_SC_AUDIT_LWOP PROCEDURE OR
	-- THE UPDATE_SC_AUDIT_LWOP PROCEDURE OR THE ELT TO LOAD THE HIERARCHY.
	-- INSERT_ATTENDANCE AND UPDATE_ATTENDANCE PROCEDURES WILL PROVIDE 
	-- A SPECIFIC STAFF_ID

	-- THE LWOP ACCRUAL IS 1.54 HOURS PER WEEK AND IT
	-- IS BASED ON A ROLLONG 12 MONTH BASIS.

	-- EACH TIME THEIS PROCEDURE IS CALLED FOR A STAFF_ID
	-- IT WILL RECALCULATE THE ROLLOING BALANCE.

	-- WHEN THIS PROCEDURE IS CALLED WITH A NULL STAFF_ID
	-- IT WILL CALCULATE THE LWOP FOR EVERY STAFF_MEMBER. 


	-- THIS CURSOR PULLS TOGETHER THE:
	--	ACCRUALS, 
	--	LONG TERM LEAVE STARTS,
	--	LONG TERM LEAVE ENDS
	--	AND EXISTION LWOP 

	-- THE CURSOR IS REQUIRED BECAUSE LWOP ACCRUAL STOPS
	-- WHEN THE EMPLOYEE HAS BEEN ON EXTENDED LEAVE FOR 
	-- MORE THA

--	CURSOR STAFF_ID_CSR IS
--	SELECT STAFF_STAFF_ID, MIN(HIRE_DATE) AS HIRE_DATE, GREATEST(NVL(MAX(LWOP_OCCURRENCE_DATE),SYSDATE)) AS T_DATE --,  TERMINATION_DATE 
--	FROM SCORECARD_HIERARCHY H
--	LEFT OUTER JOIN SC_AUDIT_LWOP L
--		ON L.STAFF_STAFF_ID = H.STAFF_STAFF_ID
--	WHERE STAFF_STAFF_ID LIKE GV_IN_STAFF_ID
--	ORDER BY STAFF_STAFF_ID;
-- 

	CURSOR STAFF_ID_CSR IS
	SELECT 
        H.STAFF_STAFF_ID, 
        H.HIRE_DATE, 
        NVL(H.TERMINATION_DATE,SYSDATE) AS TERMINATION_DATE,
        CASE WHEN H.TERMINATION_DATE IS NULL
        THEN GREATEST(NVL(L.MAX_LWOP_DATE,SYSDATE),NVL(H.TERMINATION_DATE,SYSDATE) ) 
        ELSE H.TERMINATION_DATE
        END AS ACCRUAL_LIMIT_DATE
	FROM SCORECARD_HIERARCHY H
    JOIN SC_HIERARCHY_STAFF S
    ON S.STAFF_ID = H.STAFF_STAFF_ID
	LEFT OUTER JOIN 
    ( select staff_staff_id, nvl(max(lwop_occurrence_date),sysdate) max_lwop_date 
      from SC_AUDIT_LWOP 
	  where lwop_occurrence_date <= sysdate
      group by staff_staff_id
    )  L
		ON L.STAFF_STAFF_ID = H.STAFF_STAFF_ID
    WHERE H.STAFF_STAFF_ID LIKE GV_IN_STAFF_ID
    AND TRUNC(S.SENIORITY_EFFECTIVE_DATE) <> TO_DATE('12/31/9999','MM/DD/YYYY')
    /*AND TRUNC(NVL(S.SENIORITY_EFFECTIVE_DATE,H.HIRE_DATE)) >= TO_DATE('04/01/2017','MM/DD/YYYY') */ --Not PArt of the new LWOP calc
	ORDER BY H.STAFF_STAFF_ID;

	STAFF_REC   STAFF_ID_CSR%ROWTYPE;

	CURSOR	LWOP_CSR( GV_CALC_STAFF_ID IN NUMBER, GV_ACCRUAL_LIMIT_DATE IN DATE) IS
	WITH STAFF_START AS -- << Determine when to start the Accrual
		(SELECT 
			STAFF_STAFF_ID,  
			HIRE_DATE, 
			TERMINATION_DATE, 
			GREATEST(HIRE_DATE, 
					ADD_MONTHS(SYSDATE, -12 )-1, 
					TO_DATE('20200101','YYYYMMDD')
					) 									AS ACCRUAL_START_DATE,
--         TRUNC(NVL(TERMINATION_DATE,SYSDATE)) 			AS ACCRUAL_STOP_DATE       
         GV_ACCRUAL_LIMIT_DATE 							AS ACCRUAL_STOP_DATE       
		FROM SCORECARD_HIERARCHY
		WHERE STAFF_STAFF_ID = GV_CALC_STAFF_ID
		),
		END_OF_WEEK AS  -- Determine End Of Week Dates
		( SELECT D_DATE, D_DAY
          FROM (
            SELECT 
                D_DATE, TO_CHAR(D_DATE,'DAY') AS D_DAY -- D_YEAR, D_WEEK_NUM 
			FROM MAXDAT.BPM_D_DATES
			--- this was removed so 'future accruals will not be calculated.
            --UNION
            --SELECT SYSDATE + ROWNUM, TO_CHAR( SYSDATE + ROWNUM, 'DAY' ) 
            --FROM MAXDAT.BPM_D_DATES
            --WHERE D_DATE > SYSDATE - 400
            )
			WHERE TRIM(D_DAY) = 'SUNDAY' 
		),
		STAFF_ACCRUALS AS
		(SELECT 
			STAFF_START.STAFF_STAFF_ID, 
			HIRE_DATE, 
			TERMINATION_DATE, 
			ACCRUAL_START_DATE, 
			D_DATE AS ACCRUAL_DATE
		FROM STAFF_START
		JOIN END_OF_WEEK
			ON  END_OF_WEEK.D_DATE 
				BETWEEN ACCRUAL_START_DATE AND ACCRUAL_STOP_DATE 
		),
    COMBINED AS
    (
	SELECT -- << This is the Accrual Record
		-1                          AS LWOP_INSTANCE_ID, 
		'ACCRUAL'                   AS REC_TYPE, 
		'ACCRUAL'                   AS REC_DESC, 
		STAFF_STAFF_ID, 
		HIRE_DATE, 
		TERMINATION_DATE, 
		ACCRUAL_DATE                AS LWOP_OCCURRENCE_DATE, 
		TO_CHAR(ACCRUAL_DATE,'D')   AS DAY_OF_WEEK,
		1.54 AS LWOP_HOURS,
		0 as lwop_balance,
		TRUNC(SYSDATE)              AS LWOP_UPDATE_DATE,
		NULL AS LWOP_UPDATE_USER
	FROM STAFF_ACCRUALS
    -----------------------------------------------    
	UNION ALL
    -----------------------------------------------    
	SELECT  -- << Extended Leave Start and Return records 
		CASE WHEN LWOP_FLAG = 'START' 
        THEN -3
        WHEN LWOP_FLAG = 'END'
        THEN -2 
        ELSE -9 END 						AS LWOP_INSTANCE_ID,    
        ----
        CASE
        WHEN LWOP_FLAG = 'START'
        THEN 'SPPL START'
        WHEN LWOP_FLAG = 'END'
        THEN 'SPPL END'
        ELSE '??' END						AS REC_TYPE, 
		SC_ATTENDANCE.ABSENCE_TYPE          AS REC_DESC,
    	STAFF_STAFF_ID, 
		HIRE_DATE, 
		TERMINATION_DATE, 
		ENTRY_DATE AS LWOP_OCCURRENCE_DATE, 
		TO_CHAR(ENTRY_DATE,'D') AS DAY_OF_WEEK,
		0 AS LWOP_HOURS,
		0 as lwop_balance,
		LAST_UPDATED_DATETIME AS LWOP_UPDATE_DATE,
		NULL AS LWOP_UPDATE_USER
	FROM SC_ATTENDANCE
	JOIN SC_ATTENDANCE_ABSENCE_LKUP
	ON SC_ATTENDANCE.SC_ALL_ID = SC_ATTENDANCE_ABSENCE_LKUP.SC_ALL_ID
	JOIN SCORECARD_HIERARCHY 
		ON SC_ATTENDANCE.STAFF_ID = SCORECARD_HIERARCHY.STAFF_STAFF_ID
	WHERE SC_ATTENDANCE.SC_ALL_ID 
		IN ( 
			select SC_ALL_ID 
            from dp_scorecard.SC_ATTENDANCE_ABSENCE_LKUP 
            where LWOP_FLAG = 'START' OR LWOP_FLAG = 'END' 
            )
		AND NVL(TERMINATION_DATE,SYSDATE) >= TO_DATE('20200101','YYYYMMDD')
		AND SCORECARD_HIERARCHY.STAFF_STAFF_ID = GV_CALC_STAFF_ID
    -----------------------------------------------    
	UNION ALL
    -----------------------------------------------    
	SELECT  -- LWOP RECORDS 
		LWOP_INSTANCE_ID, 
		'LWOP' AS REC_TYPE, 
		'LWOP' AS REC_DESC,
		SCORECARD_HIERARCHY.STAFF_STAFF_ID, 
		SCORECARD_HIERARCHY.HIRE_DATE, 
		SCORECARD_HIERARCHY.TERMINATION_DATE, 
		LWOP_OCCURRENCE_DATE, 
		TO_CHAR(LWOP_OCCURRENCE_DATE,'D') AS DAY_OF_WEEK,
		LWOP_HOURS*-1, 
		0 AS LWOP_BALANCE, 
		LWOP_UPDATE_DATE,
		LWOP_UPDATE_USER
	FROM SC_AUDIT_LWOP 
	JOIN SCORECARD_HIERARCHY  
		ON SC_AUDIT_LWOP.STAFF_STAFF_ID = SCORECARD_HIERARCHY.STAFF_STAFF_ID
	WHERE SC_AUDIT_LWOP.LWOP_OCCURRENCE_DATE >= GREATEST(TO_DATE('20200101','YYYYMMDD'),ADD_MONTHS(SYSDATE,-12)-1)
	AND SCORECARD_HIERARCHY.STAFF_STAFF_ID = GV_CALC_STAFF_ID
    )
    SELECT LWOP_INSTANCE_ID, 
		REC_TYPE, 
		REC_DESC,
		STAFF_STAFF_ID, 
		HIRE_DATE, 
		TERMINATION_DATE, 
		LWOP_OCCURRENCE_DATE, 
		DAY_OF_WEEK,
		LWOP_HOURS, 
		LWOP_BALANCE, 
		LWOP_UPDATE_DATE,
		LWOP_UPDATE_USER,
		'N'  AS SPPL_LWOP_FLAG
        FROM COMBINED
	ORDER BY STAFF_STAFF_ID, LWOP_OCCURRENCE_DATE, LWOP_INSTANCE_ID;

	LWOP_REC_IN  	 	LWOP_CSR%ROWTYPE;
	LWOP_REC_HOLD   	LWOP_CSR%ROWTYPE;
	LWOP_REC_OUT   		LWOP_CSR%ROWTYPE;

	-------------------------------------------------------------------------
	-- **********************************************************************
	-- **********************************************************************
	-- **********************************************************************
	-------------------------------------------------------------------------


	PROCEDURE INSERT_SC_AUDIT_LWOP IS

	LV_BALANCE_TEST                 NUMBER(6,2) := 0;

	BEGIN	


		IF LWOP_REC_OUT.STAFF_STAFF_ID IS NOT NULL
		THEN

			LV_BALANCE_TEST := GV_LWOP_BALANCE+LWOP_REC_OUT.LWOP_HOURS;

			GV_MESSAGE := 
				CASE 
					WHEN LWOP_REC_OUT.REC_TYPE = 'ACCRUAL'
					AND GV_ACCRUAL_COUNT > 1
						THEN 'Accruals ('||GV_ACCRUAL_COUNT||')'
							||' '||LWOP_REC_OUT.LWOP_OCCURRENCE_DATE
							||' - '||GV_LAST_OCCURRENCE_DATE
					WHEN (NVL(LV_BALANCE_TEST,0) < 0 )
					OR (LWOP_REC_OUT.LWOP_HOURS = 0 AND LWOP_REC_OUT.LWOP_INSTANCE_ID > 0 ) 
						THEN 'Balance Cannot be Negative'
					WHEN ( LWOP_REC_OUT.LWOP_HOURS  IS NULL AND LWOP_REC_OUT.LWOP_INSTANCE_ID > 0 ) 
						THEN 'Error: LWOP Hours used do not meet criteria'
					WHEN LWOP_REC_OUT.REC_TYPE = 'LWOP'
						THEN 'LWOP Hours Used'
					ELSE INITCAP(LWOP_REC_OUT.REC_TYPE)
				END;

			IF GV_MESSAGE = 'Balance Cannot be Negative'
			THEN -- LEAVE THE OLD BALANCE	
				LWOP_REC_OUT.LWOP_HOURS := 0;
		    ELSE -- CALCULATE A NEW BALANCE
				GV_LWOP_BALANCE := LEAST(GV_LWOP_BALANCE+LWOP_REC_OUT.LWOP_HOURS,80);
			END IF;	

			IF LWOP_REC_OUT.REC_TYPE = 'Skipped'
			THEN
				LWOP_REC_OUT.REC_DESC := LWOP_REC_OUT.REC_DESC||' - Skipped';
			END IF;	

			IF (GV_IN_STAFF_ID IS NOT NULL
			AND GV_IN_STAFF_ID <> '%' )
			THEN
			    DBMS_OUTPUT.PUT_LINE('INSERT: '||GV_CALC_STAFF_ID
					|| ' REC_TYPE: '||NVL(LWOP_REC_OUT.REC_TYPE,'NULL')
					|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_OUT.LWOP_OCCURRENCE_DATE
					|| ' MESSAGE: '||NVL(GV_MESSAGE,'NULL')
					|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
					|| ' LWOP_REC_OUT.LWOP_HOURS '|| LWOP_REC_OUT.LWOP_HOURS
					|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
					|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
					|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
					|| ' LWOP_REC_OUT.DAY_OF_WEEK: '||LWOP_REC_OUT.DAY_OF_WEEK
					|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
					|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
					|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
					|| ' LWOP_REC_OUT.SPPL_LWOP_FLAG: '||LWOP_REC_OUT.SPPL_LWOP_FLAG
				);
			END IF;


		-- WRITE OUT THE LWOP_REC_OUT RECORD
				INSERT INTO SC_AUDIT_SPPL_LWOP
				  	(LWOP_INSTANCE_ID,
					REC_TYPE,
					REC_DESC,
					STAFF_STAFF_ID,
					HIRE_DATE,
					TERMINATION_DATE,
					LWOP_OCCURRENCE_DATE,
					LWOP_UPDATE_DATE,
					LWOP_HOURS,
					LWOP_BALANCE,
					ACCRUAL_START_DATE,
					ACCRUAL_END_DATE,
					MESSAGE,
					LWOP_CALC_DATE
				    )
				VALUES (
				  	LWOP_REC_OUT.LWOP_INSTANCE_ID,               
					LWOP_REC_OUT.REC_TYPE,
					LWOP_REC_OUT.REC_DESC,
					LWOP_REC_OUT.STAFF_STAFF_ID,
					LWOP_REC_OUT.HIRE_DATE,
					LWOP_REC_OUT.TERMINATION_DATE,
					LWOP_REC_OUT.LWOP_OCCURRENCE_DATE,
					LWOP_REC_OUT.LWOP_UPDATE_DATE,
					LWOP_REC_OUT.LWOP_HOURS,			
					GV_LWOP_BALANCE,			
					GV_ACCRUAL_START_DATE,
					GV_ACCRUAL_END_DATE,
					GV_MESSAGE,
					SYSDATE
						);

				COMMIT;

				LWOP_REC_OUT := NULL;


		END IF;		

	EXCEPTION

		WHEN OTHERS THEN RAISE;

	END;	

	-------------------------------------------------------------------------
	-- **********************************************************************
	-- **********************************************************************
	-- **********************************************************************
	-------------------------------------------------------------------------


	PROCEDURE ACCRUAL_CHECK IS

	BEGIN

			IF (GV_IN_STAFF_ID IS NOT NULL
			AND GV_IN_STAFF_ID <> '%' )
			THEN
			    DBMS_OUTPUT.PUT_LINE('ACR CHK: '||GV_CALC_STAFF_ID
					|| ' REC_TYPE: '||NVL(LWOP_REC_HOLD.REC_TYPE,'NULL')
					|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE
					|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
					|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
					|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
					|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
					|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
					|| ' LWOP_REC_HOLD.DAY_OF_WEEK: '||LWOP_REC_HOLD.DAY_OF_WEEK
					|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
					|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
					|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
					|| ' LWOP_REC_OUT.SPPL_LWOP_FLAG: '||LWOP_REC_OUT.SPPL_LWOP_FLAG
				);
			END IF;

			IF (GV_IN_STAFF_ID IS NOT NULL
			AND GV_IN_STAFF_ID <> '%' )
			THEN
			    DBMS_OUTPUT.PUT_LINE(
				'ACR CHK PRE INSERT: '||LWOP_REC_HOLD.rec_type
				|| ' LWOP_REC_HOLD.STAFF_STAFF_ID: '|| LWOP_REC_HOLD.STAFF_STAFF_ID
				|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE
				);
			END IF;

		IF LWOP_REC_HOLD.STAFF_STAFF_ID IS NOT NULL
		THEN
			LWOP_REC_OUT := LWOP_REC_HOLD;
			LWOP_REC_HOLD := NULL;

			INSERT_SC_AUDIT_LWOP;

			LWOP_REC_HOLD.STAFF_STAFF_ID := NULL;
			GV_ACCRUAL_COUNT := 0;
			GV_LAST_OCCURRENCE_DATE := null;
			LWOP_REC_HOLD.LWOP_HOURS := null;
		END IF;	

		IF (GV_IN_STAFF_ID IS NOT NULL
		AND GV_IN_STAFF_ID <> '%' )
		THEN
		DBMS_OUTPUT.PUT_LINE(
				'ACR CHK post INSERT: '||LWOP_REC_HOLD.rec_type
				|| ' LWOP_REC_HOLD.STAFF_STAFF_ID: '|| LWOP_REC_HOLD.STAFF_STAFF_ID
				|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE
			);
		END IF;

	EXCEPTION

		WHEN OTHERS THEN RAISE;

	END;


	-------------------------------------------------------------------------
	-- **********************************************************************
	-- **********************************************************************
	-- **********************************************************************
	-------------------------------------------------------------------------

	PROCEDURE UPDATE_SC_AUDIT_SPPL_LWOP
	(IN_STAFF_ID IN NUMBER DEFAULT NULL ) IS


	BEGIN

			-- The cursor reads rows in the following order.
			-- STAFF_STAFF_ID, LWOP_OCCURRENCE_DATE, LWOP_INSTANCE_ID, LWOP_UPDATE_DATE;

			-- The cursor generates an ACCRUAL record for each week between
			-- the GREATER of 1/1/2020 or HIRE_DATE the LESSER of SYSDATE or TERMINATION_DATE.
			-- The LV_SPPL_LWOP Flag is set to 'N'

			-- The determination of weather to include or exclude the ACCRUAL in the 
			-- running totals for a STAFF_ID is as follows:

			-- When the cursor is opened an GV_ACCRUAL_START_DATE and GV_ACCRUAL_END_DATE 
			-- are determined.

			-- The GV_ACCRUAL_START_DATE will be the GREATER of 1/1/2020 or HIRE_DATE.
			-- The GV_ACCRUAL_END_DATE will be the LESSER of SYSDATE or TERMINATION_DATE.

			-- Accruals are calculated on a weekly basis starting 
			-- the GREATER of (1/1/2020 or the HIRE_DATE).
			-- and ending on the LESSSER of ( SYSDATE or TERMINATION_DATE).

			-- Week boundries are dertermined using the MAXDAT.BPM_D_DATES table.
			-- Each week in that table starts on Monday and Ends on Sunday.

			-- Accruals will be at the rate of 1.54 hours per week.

			-- The Accrual amounts will only be included the determination of the LWOP_BALANCE 
			-- if the date is between the GV_ACCRUAL_START_DATE and GV_ACCRUAL_END_DATE.

			-- Effective 1/12020, accruals only will be calculated for the first 4 weeks 
			-- of any extended leave period. 

			-- When a LWOP START entry (LWOP_FLAG='START') is made in SC_ATTENDANCE, 
			-- the ACCRUAL_END_DATE is reset and the LV_SPPL_LWOG Flag is set to 'Y'

			-- The ACCRUAL_END_DATE will be always be on a Sunday.  

			-- If the ENTRY_DATE of the SPPL LWOP is on a Monday the ACCRUAL_END_DATE
			-- will be the ENTRY_DATE + 27. ( Monday of the current week + 27 ) 

			-- If the ENTRY_DATE is > Monday the ACCRUAL_END_DATE will be 
			-- MONDAY OF THE FOLLOWING WEEK + 28.

			-- The Accruals are not generated for weeks greater than the ACCRUAL_END_DATE.

			-- NOTE:  IF there are multiple "LWOP Starts" without an "LWOP END" 
			-- the first LWOP START determines the ACCRUAL_END_DATE.  
			-- IF the LV_SPPL_LWOG Flag is set to 'Y' the LWOP Start record is ignored. 

			-- When a "Return from LWOP" ( LWOP_FLAG = 'END' ) record is created 
			-- in the SC_ATTENDACE table the ACCRUAL_END_DATE is reset to 
			-- the lesser of the TERMINATION_DATE or SYSDATE and
			-- the LV_SPPL_LWOG Flag is set to 'N'

			-- The  ACCRUAL_START_DATE is set to the ENTRY_DATE of the 
			-- "Return from LWOP" record.

			-- In order to reduce the rows displayed in Micro Stategy the ACCRUAL
			-- records are summarized and will show the Starting and Ending date
			-- and the summarized Accrual_amount.


		IF IN_STAFF_ID IS NULL
		THEN -- Set up to run all the Staff
			GV_IN_STAFF_ID := '%';
		ELSE -- run an individual Staff member
			GV_IN_STAFF_ID := IN_STAFF_ID;
		END IF;

		--DBMS_OUTPUT.PUT_LINE('GV_IN_STAFF_ID = '||GV_IN_STAFF_ID);

		-- LOOP BY STAFF_STAFF_IDS

		IF STAFF_ID_CSR%ISOPEN
		THEN			
			CLOSE STAFF_ID_CSR;
		END IF;

		OPEN STAFF_ID_CSR;

				-----------------------------------------------------
		LOOP	-- <<<< ********** START OUTER LOOP BY STAFF_STAFF_ID
				-----------------------------------------------------

			FETCH STAFF_ID_CSR INTO STAFF_REC;
			EXIT WHEN STAFF_ID_CSR%NOTFOUND;

			GV_CALC_STAFF_ID 		:= STAFF_REC.STAFF_STAFF_ID;
			GV_ACCRUAL_LIMIT_DATE 	:= STAFF_REC.ACCRUAL_LIMIT_DATE;

			-- clear out the data for the staff member
			DELETE FROM SC_AUDIT_SPPL_LWOP
			WHERE STAFF_STAFF_ID = STAFF_REC.STAFF_STAFF_ID;

			IF LWOP_CSR%ISOPEN
			THEN
				CLOSE LWOP_CSR;
			END IF;

			OPEN LWOP_CSR(GV_CALC_STAFF_ID,GV_ACCRUAL_LIMIT_DATE);

			GV_LWOP_BALANCE			:= 0;
			GV_SPPL_LWOP_FLAG 		:= 'N'; 
			GV_SPPL_LWOP_FLAG_HOLD	:= 'N'; 

			LWOP_REC_HOLD 	:= NULL;
			LWOP_REC_OUT 	:= NULL;

			GV_ACCRUAL_START_DATE 	:= TO_DATE('20200101','YYYYMMDD');
			GV_ACCRUAL_END_DATE 	:= GV_ACCRUAL_LIMIT_DATE;
			GV_ACCRUAL_COUNT 		:= 0;

					--------------------------------------------------------------------------
			LOOP -- <<<< ********** START INNER LOOP FOR LWOP DETAIL for a single staff member
					--------------------------------------------------------------------------


				FETCH LWOP_CSR INTO LWOP_REC_IN;
				EXIT WHEN LWOP_CSR%NOTFOUND;

				-- Thses are the valid record types 
				--
				-- 'SPPL END'
				-- 'SPPL START'
				-- 'LWOP'
				-- 'ACCRUAL
				-- 'Skipped'

				IF IN_STAFF_ID IS NOT NULL
				THEN
				DBMS_OUTPUT.PUT_LINE('FETCH:  '||GV_CALC_STAFF_ID
					|| ' REC_TYPE: '||NVL(LWOP_REC_IN.REC_TYPE,'NULL')
					|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_IN.LWOP_OCCURRENCE_DATE
					|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
					|| ' LWOP_REC_IN.LWOP_HOURS '|| LWOP_REC_IN.LWOP_HOURS
					|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
					|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
					|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
					|| ' LWOP_REC_IN.DAY_OF_WEEK: '||LWOP_REC_IN.DAY_OF_WEEK
					|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
					|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
					|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
				);
				END IF;

				-- When there are multiple 'SPPL START' without and 'SPPL END'
				-- the records are skipped

				IF LWOP_REC_IN.REC_TYPE = 'SPPL START'
				AND GV_SPPL_LWOP_FLAG = 'Y'
				THEN 
					LWOP_REC_IN.REC_TYPE := 'Skipped';
				END IF;	

				-- The 'SPPL START' sets the ACCURAL_END_DATE
				-- and sets the GV_SPPL_LWOP_FLAG  to 'Y'

			    GV_DAY_OF_WEEK := TRIM(LWOP_REC_IN.DAY_OF_WEEK);

				IF LWOP_REC_IN.REC_TYPE = 'SPPL START'
				AND GV_SPPL_LWOP_FLAG = 'N'
				THEN 

					GV_SPPL_LWOP_FLAG := 'Y';
					LWOP_REC_IN.SPPL_LWOP_FLAG := 'Y';
					-- SET UP THE DATE BOUNDRIES
					IF LWOP_REC_IN.DAY_OF_WEEK = 2 -- 'MONDAY'
			            THEN -- Determine the ACCRUAL_END_DATE 
			                GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 3 -- 'TUESDAY'
						THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+6+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 4 -- 'WEDNESDAY'
						THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+5+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 5 --'THURSDAY'
						THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+4+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 6 -- 'FRIDAY'
						THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+3+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 7 -- 'SATURDAY'
						THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+2+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSIF LWOP_REC_IN.DAY_OF_WEEK = 1 -- 'SUNDAY'
			            THEN 
							GV_ACCRUAL_END_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE+1+28;
							GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			        ELSE     
			            GV_ACCRUAL_END_DATE := TO_DATE(19000101,'YYYYMMDD');
						GV_ACCRUAL_START_DATE := GV_ACCRUAL_END_DATE-28;
			            DBMS_OUTPUT.PUT_LINE('  LWOP_REC_IN.DAY_OF_WEEK: '||LWOP_REC_IN.DAY_OF_WEEK
			            ||'L= '|| LENGTH(LWOP_REC_IN.DAY_OF_WEEK) 
			            );
			        END IF;	

				END IF;


				IF LWOP_REC_IN.REC_TYPE = 'SPPL END'
				THEN 
					-- The 'SPPL END' resets the GV_SPPL_LWOP_FLAG to 'N'
					-- Sets the ACCURAL_START_DATE
					-- and Resets the ACCRUAL_END_DATE

					GV_SPPL_LWOP_FLAG := 'N';
					LWOP_REC_IN.SPPL_LWOP_FLAG := 'N';
					GV_ACCRUAL_START_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE;  -- VALID BECAUSE SOMEONE COULD HAVE AN 'END' IN 2019
				--	GV_ACCRUAL_START_DATE := GREATEST(TO_DATE('20200101','YYYYMMDD'),LWOP_REC_IN.LWOP_OCCURRENCE_DATE;
					GV_ACCRUAL_END_DATE := NVL(GV_ACCRUAL_LIMIT_DATE,SYSDATE);

					LWOP_REC_OUT := LWOP_REC_IN;  --????

				END IF;

				-- DETERMINE IF THE ACCRUAL IS TO BE USED.
				-- IS IT WITH THE DATE RANGE?
				-- IF IT IS NOT WITHIN THE DATE RANGE SET THE AMOUNT TO ZERO

				-- IF THE ACCRUAL IS BEFORE THE GV_ACCRUAL_START_DATE
				-- AND THE GV_SPPL_LWOP_FLAG = Y
				-- WRITE THE RECORD OUT

				IF LWOP_REC_IN.REC_TYPE = 'ACCRUAL'
				AND GV_SPPL_LWOP_FLAG = 'Y'
				AND LWOP_REC_IN.LWOP_OCCURRENCE_DATE < GV_ACCRUAL_START_DATE	
				THEN
					ACCRUAL_CHECK; -- << usually null 
					LWOP_REC_HOLD := LWOP_REC_IN;
					ACCRUAL_CHECK;                           --????
					LWOP_REC_IN := NULL;
				END IF;

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') <> 'ACCRUAL'
				THEN
					NULL;
				---	
				ELSIF GV_SPPL_LWOP_FLAG = 'N'
				AND NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				THEN 
					NULL;
				---	
				ELSIF GV_SPPL_LWOP_FLAG = 'Y'
				AND NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_IN.LWOP_OCCURRENCE_DATE < NVL(GV_ACCRUAL_START_DATE,SYSDATE)	
				THEN  -- THE ACCRUAL RECORD IS BEFORE THE START OF THE 4 WEEK PERIOD
					NULL;
				---	
				ELSIF GV_SPPL_LWOP_FLAG = 'Y'
				AND NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_IN.LWOP_OCCURRENCE_DATE 
					BETWEEN GV_ACCRUAL_START_DATE	
					AND GV_ACCRUAL_END_DATE-1
				THEN  -- THE ACCRUAL RECORD IS WITHIN THE DATES	
					NULL;
				---	
				ELSIF GV_SPPL_LWOP_FLAG = 'Y'
				AND NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_IN.LWOP_OCCURRENCE_DATE				
				NOT	BETWEEN GV_ACCRUAL_START_DATE	
					AND GV_ACCRUAL_END_DATE-1
				THEN -- THE RECORD IS OUTSIDE THE DATES 
					-- SET THE HOURS TO ZERO
					LWOP_REC_IN.LWOP_HOURS := 0;
				---	
				ELSE
					NULL;
				END IF;	


				IF IN_STAFF_ID IS NOT NULL
				THEN
				DBMS_OUTPUT.PUT_LINE('PRE CHK:  '||GV_CALC_STAFF_ID
					|| ' REC_TYPE: '||NVL(LWOP_REC_IN.REC_TYPE,'NULL')
					|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_IN.LWOP_OCCURRENCE_DATE
					|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
					|| ' LWOP_REC_IN.LWOP_HOURS '|| LWOP_REC_IN.LWOP_HOURS
					|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
					|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
					|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
					|| ' LWOP_REC_IN.DAY_OF_WEEK: '||LWOP_REC_IN.DAY_OF_WEEK
					|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
					|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
					|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
				);
				END IF;

				-- For the break logic to work, the first 'ACCRUAL' record after a break  
				-- goes into the LWOP_REC_HOLD

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_HOLD.STAFF_STAFF_ID IS NULL
				AND LWOP_REC_IN.STAFF_STAFF_ID IS NOT NULL
				THEN -- HOLD THE RECORD FOR ACCUMULATION
					LWOP_REC_HOLD := LWOP_REC_IN;
                    GV_ACCRUAL_COUNT := 1;
					GV_ACCRUAL_HOURS := LWOP_REC_IN.LWOP_HOURS;
					GV_SPPL_LWOP_FLAG_HOLD := GV_SPPL_LWOP_FLAG;

					-- CLEAR THE INPUT IT HAS BEEN SAVED
					LWOP_REC_IN := NULL;

					IF (GV_IN_STAFF_ID IS NOT NULL
					AND GV_IN_STAFF_ID <> '%' )
					THEN
						DBMS_OUTPUT.PUT_LINE('1st rec hold:  '||GV_CALC_STAFF_ID
						|| ' LWOP_REC_HOLD.REC_TYPE: '||NVL(LWOP_REC_HOLD.REC_TYPE,'NULL')
						|| ' LWOP_REC_HOLD.REC_TYPE: '||NVL(LWOP_REC_HOLD.REC_TYPE,'NULL')
						|| ' LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE: '||NVL(LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE,TO_DATE('20991231','YYYYMMDD'))
						);
					END IF;

					CONTINUE;

				END IF;

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') = 'Skipped'
				THEN 
					ACCRUAL_CHECK; 
					LWOP_REC_OUT := LWOP_REC_IN;
					INSERT_SC_AUDIT_LWOP;	
					CONTINUE;
				END IF;	

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') = 'SPPL END'
				THEN 
					ACCRUAL_CHECK;
					LWOP_REC_OUT := LWOP_REC_IN;
					INSERT_SC_AUDIT_LWOP;	
					CONTINUE;
				END IF;	

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') = 'SPPL START'
				THEN 
					ACCRUAL_CHECK;
					LWOP_REC_OUT := LWOP_REC_IN;
					INSERT_SC_AUDIT_LWOP;	
					CONTINUE;
				END IF;	

				IF NVL(LWOP_REC_IN.REC_TYPE,'??') = 'LWOP'
				THEN 
					ACCRUAL_CHECK;
					LWOP_REC_OUT := LWOP_REC_IN;
					INSERT_SC_AUDIT_LWOP;	
					CONTINUE;
				END IF;	

				-- *********************************************
				-- ACCRUALS AND ACCRUAL BREAKES
				-- *********************************************
				IF NVL(LWOP_REC_IN.REC_TYPE,'??') <> 'ACCRUAL'
				THEN
					CONTINUE;
				END IF;	

				-- ONLY ACCRUALS SHOLD BEYOUN HERE

				IF (GV_IN_STAFF_ID IS NOT NULL
				AND GV_IN_STAFF_ID <> '%' )
				THEN
					DBMS_OUTPUT.PUT_LINE('TEST: '||GV_CALC_STAFF_ID
						|| ' REC_TYPE: '||NVL(LWOP_REC_HOLD.REC_TYPE,'NULL')
						|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE
						|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
						|| ' LWOP_REC_IN.LWOP_HOURS '|| LWOP_REC_IN.LWOP_HOURS
						|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
						|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
						|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
						|| ' LWOP_REC_HOLD.DAY_OF_WEEK: '||LWOP_REC_HOLD.DAY_OF_WEEK
						|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
						|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
						|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
						|| ' LWOP_REC_OUT.SPPL_LWOP_FLAG: '||LWOP_REC_OUT.SPPL_LWOP_FLAG
						);
				END IF;

				IF GV_ACCRUAL_COUNT = 1
				THEN
					GV_ACCRUAL_HOURS := LWOP_REC_IN.LWOP_HOURS;
				END IF;

				IF ( NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_IN.STAFF_STAFF_ID = NVL(LWOP_REC_HOLD.STAFF_STAFF_ID,-1)
				AND LWOP_REC_IN.REC_TYPE = NVL(LWOP_REC_HOLD.REC_TYPE,'??')
				AND LWOP_REC_IN.LWOP_INSTANCE_ID = NVL(LWOP_REC_HOLD.LWOP_INSTANCE_ID,-99999)
				AND LWOP_REC_IN.LWOP_HOURS = NVL(GV_ACCRUAL_HOURS,-99999)
				AND GV_SPPL_LWOP_FLAG = GV_SPPL_LWOP_FLAG_HOLD
				)
				THEN -- NO BREAK ACCUMULATE THE RECORD
					-- ACCUMULATE THE HOURS 
					IF (GV_IN_STAFF_ID IS NOT NULL
					AND GV_IN_STAFF_ID <> '%' )
					THEN
						DBMS_OUTPUT.PUT_LINE('NO BREAK: '||GV_CALC_STAFF_ID
							|| ' LWOP_REC_IN.LWOP_OCCURRENCE_DATE: '||LWOP_REC_IN.LWOP_OCCURRENCE_DATE
							|| ' LWOP_REC_IN.LWOP_HOURS: '||LWOP_REC_IN.LWOP_HOURS
							);
					END IF;		

					GV_ACCRUAL_COUNT 		:= GV_ACCRUAL_COUNT+1;
					GV_LAST_OCCURRENCE_DATE := LWOP_REC_IN.LWOP_OCCURRENCE_DATE;
					LWOP_REC_HOLD.LWOP_HOURS := LWOP_REC_HOLD.LWOP_HOURS + LWOP_REC_IN.LWOP_HOURS;
					-- THE RECORD HAS BEEN SAVED CLEAR THE INPUT RECORD
					LWOP_REC_IN := NULL;

					CONTINUE;

				END IF;	

				-- ELSE THERE HAS BEEN A BREAK
				-- IF AN ACCRUAL HAS BEEN ACUMULATED 
				-- WRITE IT OUT
				-- AND SAVE THE RECORD WHICH CAUSED THE BREAK


				IF (GV_IN_STAFF_ID IS NOT NULL
				AND GV_IN_STAFF_ID <> '%' )
				THEN
					DBMS_OUTPUT.PUT_LINE('BREAK: '||GV_CALC_STAFF_ID
						|| ' REC_TYPE: '||NVL(LWOP_REC_HOLD.REC_TYPE,'NULL')
						|| ' LWOP_OCCURRENCE_DATE: '||LWOP_REC_HOLD.LWOP_OCCURRENCE_DATE
						|| ' GV_ACCRUAL_COUNT  '||GV_ACCRUAL_COUNT 
						|| ' LWOP_REC_IN.LWOP_HOURS '|| LWOP_REC_IN.LWOP_HOURS
						|| ' LWOP_REC_HOLD.LWOP_HOURS '|| LWOP_REC_HOLD.LWOP_HOURS
						|| ' GV_ACCRUAL_START_DATE: '||GV_ACCRUAL_START_DATE
						|| ' GV_ACCRUAL_END_DATE: '||GV_ACCRUAL_END_DATE
						|| ' LWOP_REC_HOLD.DAY_OF_WEEK: '||LWOP_REC_HOLD.DAY_OF_WEEK
						|| ' GV_SPPL_LWOP_FLAG: '||GV_SPPL_LWOP_FLAG
						|| ' LWOP_REC_IN.SPPL_LWOP_FLAG: '||LWOP_REC_IN.SPPL_LWOP_FLAG
						|| ' LWOP_REC_HOLD.SPPL_LWOP_FLAG: '||LWOP_REC_HOLD.SPPL_LWOP_FLAG
						|| ' LWOP_REC_OUT.SPPL_LWOP_FLAG: '||LWOP_REC_OUT.SPPL_LWOP_FLAG
					);
				END IF;


				ACCRUAL_CHECK;

				-- THE BREAK MUST HAVE BEEN CAUSED BY AN ACCRUAL
				-- SO THE ACCRUAL NEEDS TO BE SAVED

				IF  NVL(LWOP_REC_IN.REC_TYPE,'??') = 'ACCRUAL'
				AND LWOP_REC_HOLD.STAFF_STAFF_ID IS NULL
				AND LWOP_REC_IN.STAFF_STAFF_ID IS NOT NULL
				THEN 
					dbms_output.put_line(
					'HOLD THE INPUT RECORD '||LWOP_REC_IN.STAFF_STAFF_ID
					||'   '||LWOP_REC_IN.REC_TYPE  
					||'   '||LWOP_REC_IN.lwop_occurrence_date  
					);

					LWOP_REC_HOLD := LWOP_REC_IN;

                    GV_ACCRUAL_COUNT := 1;
					GV_ACCRUAL_HOURS := LWOP_REC_IN.LWOP_HOURS;
					GV_SPPL_LWOP_FLAG_HOLD := GV_SPPL_LWOP_FLAG;
					LWOP_REC_IN := NULL;

					CONTINUE;

				END IF;		


			END LOOP;  -- <<<< ********** END INNER LOOP FOR LWOP DETAIL

			-- FINAL CHECK FOR ACCRUAL ACCUMULATION
			-- IF THERE IS A RECORD IN HOLD, WRITE IT OUT

		ACCRUAL_CHECK;

		COMMIT;

		IF (LWOP_CSR%ISOPEN)
			THEN
				CLOSE LWOP_CSR;
		END IF;

	END LOOP;	-- <<<< **********END OUTER LOOP BY STAFF_STAFF_ID

		-- WRITE THE LAST RECORD
		IF LWOP_REC_HOLD.STAFF_STAFF_ID IS NOT NULL
		THEN
			LWOP_REC_OUT := LWOP_REC_HOLD;
			INSERT_SC_AUDIT_LWOP;	
			LWOP_REC_HOLD := NULL;
		END IF;


	IF STAFF_ID_CSR%ISOPEN
	THEN			
		CLOSE STAFF_ID_CSR;
	END IF;

END; -- UPDATE_SC_AUDIT_SPPL_LWOP;


END CALC_SPPL_LWOP_PKG;


/

SHOW ERRORS

COMMIT;




grant execute, Debug on "DP_SCORECARD"."CALC_SPPL_LWOP_PKG" to MAXDAT;
grant execute,debug on "DP_SCORECARD"."CALC_SPPL_LWOP_PKG" to MAXDAT_REPORTS;
grant execute,debug on "DP_SCORECARD"."CALC_SPPL_LWOP_PKG" to MAXDAT_READ_ONLY;
grant execute,debug on "DP_SCORECARD"."CALC_SPPL_LWOP_PKG" to DP_SCORECARD_READ_ONLY;
GRANT execute,debug ON "DP_SCORECARD"."CALC_SPPL_LWOP_PKG" to DP_SCORECARD_PFP_READ_ONLY;

COMMIT;