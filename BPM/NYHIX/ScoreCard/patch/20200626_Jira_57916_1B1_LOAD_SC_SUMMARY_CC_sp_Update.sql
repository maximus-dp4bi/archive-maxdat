create or replace procedure              LOAD_SC_SUMMARY_CC
( add_mth_start number default 0,
  add_mth_stop  number default 11
 )
AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL: svn://svn-staging.maximus.com/dev1d/maxdat/BPM/NYHIX/ScoreCard/patch/20190805_021_LOAD_SC_SUMMARY_CC.sql $';
  	SVN_REVISION varchar2(20) := '$Revision: 27953 $';
 	SVN_REVISION_DATE varchar2(60) := '$Date: 2019-09-04 13:04:20 -0400 (Wed, 04 Sep 2019) $';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author: wl134672 $';


---------------
	LV_DATES_MONTH_NUM          VARCHAR2(6);
	LV_FIRST_DAY_OF_MONTH		DATE  	:= TRUNC(SYSDATE,'MM');
	LV_LAST_DAY_OF_MONTH		DATE	:= LAST_DAY(SYSDATE);

    LV_STAFF_STAFF_ID                       NUMBER(8) := 0;
	LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM    VARCHAR2(6);
	LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM   VARCHAR2(6);

    SUMMARY_REC   SC_SUMMARY_CC%ROWTYPE;

    LV_THREE_MONTH_CONFORMANCE_MISSED_COUNT     NUMBER(5) := 0;

    CURSOR STAFF_CURSOR IS
    SELECT * INTO SUMMARY_REC
    FROM SC_SUMMARY_CC
    WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM
    FOR UPDATE;


BEGIN

    --    The ADD_MTH_START .. ADD_MTH_STOP parameters are used to drive
    --    a loop which uses ADD_MONTHS(sysdate, "minus" the loop value.
    --    The loop starts with the current month and works "back".
    --    To calulate from the current month and going back 14 months
    --    the parameters would be LOAD_SC_SUMMARY_CC(0,13)
    --    The "zero" would be the current month the "Thirteen" earliest month.

	-- Note in JULY 2109 the 'REVERSE' was added because of the need to
	-- save adherence data from the prior 2 months in the current record


	FOR MTH_LOOP IN ADD_MTH_START .. ADD_MTH_STOP
	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 	-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          -- FIRST_DAY_OF_MONTH,
            LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP)),                             -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), -- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM') -- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			FROM DUAL;


	DELETE FROM DP_SCORECARD.SC_SUMMARY_CC_WRK
	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

    COMMIT;

   INSERT INTO SC_SUMMARY_CC_WRK (STAFF_STAFF_ID, STAFF_NATID,
	STAFF_STAFF_NAME,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	TOT_CALLS_ANSWERED,
	TOT_SHORT_CALLS_ANSWERED,
	TOT_TOT_RETURN_TO_QUEUE,
	TOT_RETURN_TO_QUEUE_TIMEOUT,
	TOT_AVERAGE_HANDLE_TIME,
	TOT_SCHED_PRODUCTIVE_TIME,
	TOT_ACTUAL_PRODUCTIVE_TIME,
	TOT_TALK_TIME,
	TOT_WRAP_UP_TIME,
	TOT_LOGGED_IN_TIME,
	TOT_NOT_READY_TIME,
	TOT_BREAK_TIME,
	TOT_LUNCH_TIME,
	QCS_PERFORMED,
	AVG_QC_SCORE,
	TOT_INCIDENTS_COMPLETED,
	DAYS_INCIDENTS_COMPLETED,
	DAYS_DEF_INC_COMPLETED,
	TOT_DEFECTS_COMPLETED,
	DAYS_DEFECTS_COMPLETED,
	LAG_TIME_TOT_SCHED_PROD_TIME,
	TOT_CALL_RECORDS,
	TOT_CUSTOMER_COUNT,
	TOT_CALL_WRAP_UP_COUNT,
	TOT_WRAP_UP_ERROR,
	DAYS_SHORT_CALLS_GT_10,
	DAYS_CALLS_ANSWERED,
	ADHERENCE,
	CORRECTIVE_ACTION_FLAG,
	ONE_ON_ONE_FLAG,
	OBSERVATION_FLAG,
	RECORDED_CALL_REVIEW_FLAG,
	LIVE_PHONE_OBSERVATION_FLAG,
	--   Mer_Flag,
	----------------
	SUPERVISOR_STAFF_ID,
	SUPERVISOR_NATID,
	BUILDING,
	DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	TOT_HANDLE_TIME,
	TOT_HANDLE_TIME_COUNT,
	TRTQ,
	CALLS_OFFERED,
	SHORT_CALL_AGENT_COUNT,
	AGENT_DISCONNECTED_SHORT_CALLS,
	CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	SUM_QC_SCORE,
	COUNT_QC_SCORE,
	QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly_sv
	AVG_ATTENDANCE_BALANCE,
	AVG_ATTENDANCE_TOTAL_BALANCE,
	STAFF_COUNT,
	ADHERENCE_TOT_LOGGED_IN_TIME,
	ADHERENCE_TOT_NOT_READY_TIME,
   -- From WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	--FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	--FIRST_PRIOR_MONTH_EVENTS_MET,
	--SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	--SECOND_PRIOR_MONTH_EVENTS_MET,
    --FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    --FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    --FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
	)
WITH
----------------------
STAFF_FILTER AS
(
	SELECT SUPERVISOR_STAFF_ID, SUPERVISOR_NATID, STAFF_STAFF_ID, STAFF_NATID, DATES_MONTH_NUM,
    --DATES_MONTH, DATES_YEAR,
        STAFF_STAFF_NAME
	FROM ( SELECT --min(dates_month_num), max(dates_month_num)
				SUPERVISOR_STAFF_ID, SUPERVISOR_NATID, STAFF_STAFF_ID, STAFF_NATID,
                LV_DATES_MONTH_NUM AS DATES_MONTH_NUM, 1  AS STAFF_COUNT,
			--	DATES_MONTH, DATES_YEAR,
                STAFF_STAFF_NAME
			FROM DP_SCORECARD.SCORECARD_HIERARCHY
			WHERE LV_DATES_MONTH_NUM
				BETWEEN TO_CHAR(TRUNC(HIRE_DATE,'MM'),'YYYYMM')
					AND TO_CHAR(TRUNC(NVL(TERMINATION_DATE,SYSDATE),'MM'),'YYYYMM)')
          )
        ),
---------------
TIME_metrics as
 (
   SELECT
		DISTINCT
		TO_CHAR(TRUNC(A11.AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
		TO_CHAR(AGENT_ID) AGENT_ID,
		A_S.STAFF_STAFF_ID,
		NVL(EXCLUSION_FLAG,'N')   AS EXCLUSION_FLAG,
		SUM(CALLS_ANSWERED) TOT_CALLS_ANSWERED,
		SUM(SHORT_CALLS_ANSWERED) TOT_SHORT_CALLS_ANSWERED,
		SUM(TOT_RETURN_TO_QUEUE) TOT_TOT_RETURN_TO_QUEUE,
		SUM(TOT_RETURN_TO_QUEUE_TIMEOUT) TOT_RETURN_TO_QUEUE_TIMEOUT,
		avg(extract( day from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_AVERAGE_HANDLE_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_SCHED_PRODUCTIVE_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_ACTUAL_PRODUCTIVE_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(TALK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(TALK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(TALK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(TALK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_TALK_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(WRAP_UP_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(WRAP_UP_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(WRAP_UP_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(WRAP_UP_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_WRAP_UP_TIME,
		 -- 2017/10/19 TOT_LOGGED_IN_TIME and TOT_NOT_READY_TIME moved to ADHERENCE
		sum(extract( day from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_LOGGED_IN_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_NOT_READY_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(BREAK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(BREAK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(BREAK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(BREAK_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_BREAK_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(LUNCH_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(LUNCH_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(LUNCH_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(LUNCH_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_LUNCH_TIME,
		--------------------------
		sum(extract( day from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) TOT_HANDLE_TIME,
		count(1) as TOT_HANDLE_TIME_COUNT,
		SUM(TOT_RET_TO_QUEUE_TOTAL) TRTQ,
		SUM(CALLS_OFFERED)  CALLS_OFFERED,
		SUM(AGENT_DISCONNECTED_SHORT_CALLS)      AGENT_DISCONNECTED_SHORT_CALL,
		SUM(CONSUMER_DISCONNECTED_SHORT_CALLS)   CONSUMER_DISCONNECTED_SHORT_CALL
		 --------------------------
    FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV A_S
    JOIN DP_SCORECARD.SC_AGENT_STAT_SV A11
		ON A_S.STAFF_NATID =  A11.AGENT_ID
    WHERE NOT EXISTS (SELECT 1
					FROM DP_SCORECARD.SC_EXCLUSION_YES_SV B
					WHERE A11.AGENT_ID = B.AGENT_ID
					AND A11.AS_DATE = B.EXCLUSION_DATE
					)
    AND A11.AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
    GROUP BY TO_CHAR(TRUNC(A11.AS_DATE), 'YYYYMM'), A_S.STAFF_STAFF_ID, AGENT_ID, NVL(EXCLUSION_FLAG,'N')
 ),
  SHORT_CALL_AGENT_COUNT AS
 (
	--Description: Identifies the distinct amount of agents that had a day with over 10 short calls.
	SELECT DISTINCT
		STAFF_STAFF_ID,
		DATES_MONTH_NUM,
		COUNT(DISTINCT AGENT_ID) OVER (PARTITION BY STAFF_STAFF_ID, DATES_MONTH_NUM) AS SHORT_CALL_AGENT_COUNT
	FROM
	(
    SELECT
        H.STAFF_STAFF_ID,
        AGENT_ID,
        TO_CHAR(TRUNC(AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
        TRUNC(AS_DATE),
        SHORT_CALLS_ANSWERED
    FROM DP_SCORECARD.SC_AGENT_STAT S
    JOIN DP_SCORECARD.SCORECARD_HIERARCHY H ON H.STAFF_NATID = S.AGENT_ID
        WHERE AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
        AND SHORT_CALLS_ANSWERED > 10
  )
),
 INCDEFS AS
 (
   SELECT A11.STAFF_ID,
    A11.EVENT_DATE AS_DATE,
       TO_CHAR(A11.EVENT_DATE, 'YYYYMM') AS DATES_MONTH_NUM,
        SUM((CASE WHEN A11.EVENT_ID IN (1374, 1375, 1376, 1377, 1378, 1379) THEN TOTAL_LOGGED ELSE 0 END)) INCIDENTS_COMPLETED,
        SUM((CASE WHEN A11.EVENT_ID IN (1373) THEN TOTAL_LOGGED ELSE 0 END)) DEFECTS_COMPLETED
 	FROM DP_SCORECARD.PP_WFM_DAILY_SUMMARY_WRK A11
   WHERE 1=1
	AND A11.EVENT_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	AND (A11.EVENT_ID IN (1374, 1375, 1376, 1377, 1378, 1379)
         OR A11.EVENT_ID IN (1373))
   GROUP BY A11.STAFF_ID, EVENT_DATE --, BUILDING, DEPARTMENT
 ),
 INC_METRICS AS
 (
 SELECT
   DISTINCT  A11.STAFF_ID AS STAFF_STAFF_ID,
       A11.DATES_MONTH_NUM,
        SUM(A11.INCIDENTS_COMPLETED) OVER (PARTITION BY A11.STAFF_ID, A11.DATES_MONTH_NUM) AS TOT_INCIDENTS_COMPLETED,
        COUNT(A11.INCIDENTS_COMPLETED) OVER (PARTITION BY A11.STAFF_ID, A11.DATES_MONTH_NUM) AS DAYS_INCIDENTS_COMPLETED
   FROM  INCDEFS A11
   WHERE  A11.INCIDENTS_COMPLETED <> 0
 ),
 DEF_METRICS AS
 (
 SELECT
   DISTINCT  A11.STAFF_ID AS STAFF_STAFF_ID,
       A11.DATES_MONTH_NUM,
       SUM(A11.DEFECTS_COMPLETED) OVER (PARTITION BY A11.STAFF_ID, A11.DATES_MONTH_NUM) AS TOT_DEFECTS_COMPLETED,
       COUNT(A11.DEFECTS_COMPLETED) OVER (PARTITION BY A11.STAFF_ID, A11.DATES_MONTH_NUM) AS  DAYS_DEFECTS_COMPLETED
   FROM  INCDEFS A11
   WHERE  A11.DEFECTS_COMPLETED <> 0
 ) ,
 INC_DEF_METRICS AS (
   SELECT STAFF_ID AS STAFF_STAFF_ID,
       DATES_MONTH_NUM,
       COUNT(DISTINCT AS_DATE ) AS  DAYS_DEF_INC_COMPLETED
   FROM  INCDEFS A11
   WHERE  DEFECTS_COMPLETED > 0
   OR INCIDENTS_COMPLETED > 0
   GROUP BY STAFF_ID, DATES_MONTH_NUM
 ),
 LAG_METRICS AS (
   SELECT
       DISTINCT TO_CHAR(TRUNC(A11.LAG_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
        A10.STAFF_STAFF_ID,
        SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
         EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
         EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
         EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) )
        OVER (PARTITION BY A10.STAFF_STAFF_ID, TO_CHAR(TRUNC(A11.LAG_DATE), 'YYYYMM')) AS LAG_TIME_TOT_SCHED_PROD_TIME
       FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV A10
  JOIN DP_SCORECARD.SC_LAG_TIME_SV A11
	ON A10.STAFF_NATID = A11.AGENT_ID
  JOIN (SELECT TRUNC(AS_DATE) AS AS_DATE, AGENT_ID
		FROM DP_SCORECARD.SC_AGENT_STAT_SV
		WHERE AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
		) A12
        ON  A12.AGENT_ID=A10.STAFF_NATID AND A12.AS_DATE= TRUNC(A11.LAG_DATE)
  WHERE NOT EXISTS (SELECT 1 FROM DP_SCORECARD.SC_EXCLUSION_YES_SV B
					WHERE A11.AGENT_ID = B.AGENT_ID
					AND TRUNC(A11.LAG_DATE) = TRUNC(B.EXCLUSION_DATE)
					)
		AND A11.LAG_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
 ),
 CUST_METRICS AS
 (
    SELECT DISTINCT
      TO_CHAR(TRUNC(A11.CALL_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
        A10.STAFF_STAFF_ID,
       COUNT(CALL_RECORD_ID) OVER (PARTITION BY A10.STAFF_STAFF_ID,TO_CHAR(TRUNC(A11.CALL_DATE), 'MONTH YYYY')) AS  TOT_CALL_RECORDS,
       SUM(CUSTOMER_COUNT) OVER (PARTITION BY A10.STAFF_STAFF_ID,TO_CHAR(TRUNC(A11.CALL_DATE), 'MONTH YYYY')) AS TOT_CUSTOMER_COUNT,
       SUM(CALL_WRAP_UP_COUNT) OVER (PARTITION BY A10.STAFF_STAFF_ID,TO_CHAR(TRUNC(A11.CALL_DATE), 'MONTH YYYY')) AS TOT_CALL_WRAP_UP_COUNT
    FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV A10
  JOIN DP_SCORECARD.SC_NON_STD_USE_SV A11 ON TO_CHAR(A10.STAFF_NATID) = A11.EMPLOYEE_ID
  WHERE NOT EXISTS (SELECT 1 FROM DP_SCORECARD.SC_EXCLUSION_YES_SV B
					WHERE A11.EMPLOYEE_ID = B.AGENT_ID
					AND TRUNC(A11.CALL_DATE) = TRUNC(B.EXCLUSION_DATE)
					)
  AND A11.CALL_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
 ),
 WUE_METRICS AS
 (
   SELECT DISTINCT
       TO_CHAR(TRUNC(A11.WUE_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
        A10.STAFF_STAFF_ID,
        SUM(A11.WRAP_UP_ERROR) OVER (PARTITION BY A10.STAFF_STAFF_ID,TO_CHAR(TRUNC(A11.WUE_DATE), 'MONTH YYYY')) AS TOT_WRAP_UP_ERROR
   FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV A10
  JOIN DP_SCORECARD.SC_WRAP_UP_ERROR_SV A11 ON A10.STAFF_NATID = A11.AGENT_ID
  WHERE NOT EXISTS (SELECT 1 FROM DP_SCORECARD.SC_EXCLUSION_YES_SV B
		WHERE A11.AGENT_ID = B.AGENT_ID
		AND TRUNC(A11.WUE_DATE) = TRUNC(B.EXCLUSION_DATE)
		)
		AND A11.WUE_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
 ),
 CALL_metrics AS
 (
  SELECT
        A10.STAFF_STAFF_ID,
		A11.AS_DATE,
        CASE WHEN SUM(A11.SHORT_CALLS_ANSWERED) > 10 THEN 1 ELSE NULL END SHORT_CALLS,
        SUM(A11.CALLS_ANSWERED) TOT_CALLS,
       TO_CHAR(TRUNC(A11.AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM
   FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV a10
   JOIN DP_SCORECARD.SC_AGENT_STAT_SV A11 ON A10.STAFF_NATID = A11.AGENT_ID
   WHERE NOT EXISTS (SELECT 1
					FROM DP_SCORECARD.SC_EXCLUSION_YES_SV B
					WHERE A11.AGENT_ID = B.AGENT_ID
					AND TRUNC(A11.AS_DATE) = TRUNC(B.EXCLUSION_DATE)
					)
 		AND A11.AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
   GROUP BY A10.STAFF_STAFF_ID, A11.AS_DATE
 ),
 CALL_days AS
 (
   SELECT distinct
        staff_staff_id,
        dates_month_num,
        count(short_calls)  over (partition by staff_staff_id,dates_month_num) as Days_Short_Calls_GT_10,
         count(TOT_CALLS)  over (partition by staff_staff_id,dates_month_num) as DAYS_CALLS_ANSWERED
   FROM CALL_metrics
  ),
 Adherence as
 (
	SELECT distinct
		to_char(TRUNC(a11.AS_DATE), 'YYYYMM') as dates_month_num,
		to_char(a11.AGENT_ID) AGENT_ID,
		a_s.staff_staff_id,
		sum(extract( day from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) ADHERENCE_TOT_LOGGED_IN_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) ADHERENCE_TOT_NOT_READY_TIME
    FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV a_s
    join DP_SCORECARD.SC_AGENT_STAT_SV a11
		on a_s.staff_natid =  a11.AGENT_ID
    join (SELECT TRUNC(a111.LAG_DATE) as LAG_DATE, a101.staff_staff_id, a111.agent_id
          FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV a101
          join DP_SCORECARD.SC_LAG_TIME_SV a111
            on a101.staff_natid = a111.agent_id
		  WHERE a111.LAG_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
          ) a12
		  on a11.agent_Id=a12.agent_Id and a11.AS_Date=a12.lag_date
    where not exists ( select 1
					from DP_SCORECARD.SC_EXCLUSION_YES_SV b
					where a11.agent_id = b.agent_id
					and trunc(a11.as_date) = trunc(b.exclusion_date)
					)
	and a11.AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
    group by to_char(TRUNC(a11.AS_DATE), 'YYYYMM'), a11.AGENT_ID, a_s.staff_staff_id
 ),
Adherence_metric as
 (
   SELECT distinct
      a10.dates_month_num,
      a10.staff_staff_id,
      a10.ADHERENCE_TOT_LOGGED_IN_TIME,
      a10.ADHERENCE_TOT_NOT_READY_TIME,
      a11.LAG_TIME_TOT_SCHED_PROD_TIME,
	  case when nvl(a11.LAG_TIME_TOT_SCHED_PROD_TIME,0) >  0
	  then
		((a10.ADHERENCE_TOT_LOGGED_IN_TIME
			- a10.ADHERENCE_TOT_NOT_READY_TIME)
			/a11.LAG_TIME_TOT_SCHED_PROD_TIME)
		else null end as ADHERENCE
      FROM Adherence A10
      join LAG_metrics a11 on a10.staff_staff_id=a11.staff_staff_id
      and a10.dates_month_num=a11.dates_month_num
 ),
  PERMFORM_TKR as
 (
   select distinct staff_staff_id,
                  to_char(TRUNC(pt_entry_date), 'YYYYMM') as dates_month_num,
                  max(case when discussion_topic = 'Corrective Action' then 1 else 0 end )      as corrective_action_flag,
                  max(case when discussion_topic = 'One on One' then 1 else 0 end )             as one_on_one_flag,
                  max(case when discussion_topic = 'Observation' then 1 else 0 end )            as observation_flag,
                  max(case when discussion_topic = 'Recorded Call Review' then 1 else 0 end )   as Recorded_Call_Review_flag,
                  max(case when discussion_topic = 'Live Phone Observation' then 1 else 0 end ) as Live_Phone_Observation_flag
    from DP_SCORECARD.SCORECARD_PERFORM_TRACKER_SV PERF
    where pt_entry_date BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	AND discussion_topic in (
                    'Corrective Action',
                    'One on One',
                    'Observation',
                    'Recorded Call Review',
                    'Live Phone Observation'
                    )
   group by staff_staff_id, to_char(TRUNC(pt_entry_date),'YYYYMM')
  ),
-- MER as
--  (
--    select distinct staff_staff_id,
--                   to_char(TRUNC(pt_entry_date), 'YYYYMM') as dates_month_num,
--    --               to_char(TRUNC(pt_entry_date), 'Month YYYY') as dates_year,
--                   1 as mer_flag
--     from dp_scorecard.scorecard_perform_tracker_sv
--    where DL_ID in (select dl_id
--                      from dp_scorecard.scorecard_discussion_lkup_sv
--                     where discussion_topic = 'MER')
--  ),
 SCORECARD_QUALITY
 AS (
 SELECT V.staff_staff_id,
       to_char(TRUNC(V.EVAL_DATE), 'YYYYMM') as dates_month_num,
       avg(V.SCORE_TOTAL) as avg_qc_score,
       sum(V.SCORE_TOTAL) as sum_qc_score,
       count(*) as count_qc_score,
       count(*) as qcs_performed,
       case
         when count(*)  >= 10 then 0
         else 10 - count(*)
       end as qcs_remaining
  from DP_SCORECARD.SCORECARD_QUALITY_SV V
  join DP_SCORECARD.SCORECARD_HIERARCHY H  --<< added 10/102017
  on v.staff_staff_id = H.staff_staff_id
  WHERE TRUNC(V.EVAL_DATE) BETWEEN H.HIRE_DATE AND NVL(TERMINATION_DATE,SYSDATE) --<< added 10/102017
  AND V.EVAL_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH -- ADDED 21090725 ???
  group by V.staff_staff_id ,
  to_char(TRUNC(V.EVAL_DATE), 'YYYYMM')
),
 ATTENDANCE
AS (
	select distinct a.staff_STAFF_ID,
                DATES_MONTH,
                DATES_MONTH_NUM,
                SUM(BALANCE) over(partition by a.staff_STAFF_ID, dates_month_num) as BALANCE,
                SUM(TOTAL_BALANCE) over(partition by a.staff_STAFF_ID, dates_month_num) as TOTAL_BALANCE,
                --SC_ATTENDANCE_ID,
                COUNT(HSV.staff_staff_id) over(partition by a.staff_STAFF_ID, dates_month_num) as STAFF_COUNT
	from DP_SCORECARD.SCORECARD_ATTENDANCE_MTHLY_SV a
	join DP_SCORECARD.SCORECARD_HIERARCHY_SV HSV
		on a.STAFF_STAFF_ID = HSV.staff_staff_id
	where a.DATES_MONTH_NUM >= to_char(HSV.hire_date,'YYYYMM')
	AND (a.DATES_MONTH_NUM <= to_char(HSV.termination_date,'YYYYMM')
	OR HSV.TERMINATION_DATE IS NULL)
),
WEBCHAT_ACTUALS_GRP AS
(
SELECT WEBCHAT_STAFF_ID,
    TO_CHAR(WEBCHAT_DATE,'yyyymm')  		AS DATES_MONTH_NUM,
    SUM(NVL(ASSIGNED,0))                   	AS WEBCHAT_ASSIGNED,
    SUM(NVL(TRANSFERRED,0))                	AS WEBCHAT_TRANSFERRED,
    SUM(NVL(CONFERENCED,0))               	AS WEBCHAT_CONFERENCED,
    SUM(NVL(TOTAL_NUMBER,0))               	AS WEBCHAT_TOTAL_NUMBER
FROM WEBCHAT_ACTUALS WCA
WHERE WEBCHAT_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH  -- ADDED 21090725 ??
--
    AND NOT EXISTS (SELECT 1
					FROM DP_SCORECARD.SC_EXCLUSION_YES_SV EXCL
					WHERE WCA.WEBCHAT_EID = EXCL.AGENT_ID
					AND WCA.WEBCHAT_DATE = EXCL.EXCLUSION_DATE
					)
--
GROUP BY WEBCHAT_STAFF_ID, TO_CHAR(WEBCHAT_DATE,'yyyymm')
),
STAFF_LOCATION AS
 (
  -- GET THE BUILDING AND DEPARTMENT IF THERE IS
  -- ONLY 1 SET OF BUILDING AND DEPARTMENT FOR THE STAFF_ID
  SELECT STAFF_STAFF_ID, SUPERVISOR_STAFF_ID, SUPERVISOR_NATID, BUILDING, DEPARTMENT
  FROM DP_SCORECARD.SCORECARD_HIERARCHY
  ),
BREAK_CONFORMANCE  AS
( SELECT TO_CHAR(AS_DATE,'YYYYMM') AS DATES_MONTH_NUM,
	AGENT_ID,
	SUM(EVENTS_SCHEDULED) AS CURRENT_MONTH_EVENTS_SCHEDULED,
	SUM(EVENTS_MET)       AS CURRENT_MONTH_EVENTS_MET
	FROM SC_AGENT_BREAK_CONFORMANCE BC
	WHERE AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	--
    AND NOT EXISTS (SELECT 1
					FROM DP_SCORECARD.SC_EXCLUSION_YES_SV EXCL
					WHERE BC.AGENT_ID = EXCL.AGENT_ID
					AND BC.AS_DATE = EXCL.EXCLUSION_DATE
					)
	--
    GROUP BY
    TO_CHAR(AS_DATE,'YYYYMM'),
    AGENT_ID
)
-----------------------------------------
------------------------------------------------
-- NOTE The order of the following fields
-- MUST match the INSERT statement
------------------------------------------------
 SELECT
   distinct all_staff.staff_staff_id, all_staff.staff_natid,
   all_staff.staff_staff_name,
   all_staff.dates_month,
   all_staff.dates_month_num,
   all_staff.dates_year,
   NVL(TIME_metrics.EXCLUSION_FLAG,'N'),
   TIME_metrics.TOT_CALLS_ANSWERED,
   TIME_metrics.TOT_SHORT_CALLS_ANSWERED,
   TIME_metrics.TOT_TOT_RETURN_TO_QUEUE,
   TIME_metrics.TOT_RETURN_TO_QUEUE_TIMEOUT,
   TIME_metrics.TOT_AVERAGE_HANDLE_TIME,
   TIME_metrics.TOT_SCHED_PRODUCTIVE_TIME,
   TIME_metrics.TOT_ACTUAL_PRODUCTIVE_TIME,
   TIME_metrics.TOT_TALK_TIME,
   TIME_metrics.TOT_WRAP_UP_TIME,
   TIME_metrics.TOT_LOGGED_IN_TIME,
   TIME_metrics.TOT_NOT_READY_TIME,
   TIME_metrics.TOT_BREAK_TIME,
   TIME_metrics.TOT_LUNCH_TIME,
   scorecard_quality.qcs_performed,
   scorecard_quality.avg_qc_score,
   INC_metrics.TOT_INCIDENTS_COMPLETED,
   INC_metrics.DAYS_INCIDENTS_COMPLETED,
   INC_def_metrics.DAYS_DEF_INC_COMPLETED,
   DEF_metrics.TOT_DEFECTS_COMPLETED,
   DEF_metrics.DAYS_DEFECTS_COMPLETED,
   LAG_metrics.LAG_TIME_TOT_SCHED_PROD_TIME,
   CUST_metrics.TOT_CALL_RECORDS,
   CUST_metrics.TOT_CUSTOMER_COUNT,
   CUST_metrics.TOT_CALL_WRAP_UP_COUNT,
   WUE_metrics.TOT_WRAP_UP_ERROR,
   CALL_days.Days_Short_Calls_GT_10,
   CALL_days.DAYS_CALLS_ANSWERED,
   Adherence_metric.ADHERENCE,
   PERMFORM_TKR.corrective_action_flag,
   PERMFORM_TKR.one_on_one_flag,
   PERMFORM_TKR.observation_flag,
   Recorded_Call_Review_flag,
   Live_Phone_Observation_flag,
   --mer.mer_flag,
   -------------------------------------
	STAFF_LOCATION.SUPERVISOR_STAFF_ID,
	STAFF_LOCATION.SUPERVISOR_NATID,
	STAFF_LOCATION.BUILDING,
	STAFF_LOCATION.DEPARTMENT,
	------------------------------------
	-- From SC_AGENT_STAT_SV
	TIME_metrics.TOT_HANDLE_TIME,
	TIME_metrics.TOT_HANDLE_TIME_COUNT,
	TIME_metrics.TRTQ,
	TIME_metrics.CALLS_OFFERED,
	SHORT_CALL_AGENT_COUNT.SHORT_CALL_AGENT_COUNT,
	TIME_METRICS.AGENT_DISCONNECTED_SHORT_CALL,
	TIME_METRICS.CONSUMER_DISCONNECTED_SHORT_CALL,
	------------------------------------
	-- FROM SCORECARD_QUALITY_SV
	SCORECARD_QUALITY.SUM_QC_SCORE,
	SCORECARD_QUALITY.COUNT_QC_SCORE,
	SCORECARD_QUALITY.QCS_REMAINING,
	------------------------------------
	-- From Attendance - scorecard_attendance_mthly_sv
	ATTENDANCE.BALANCE,
	ATTENDANCE.TOTAL_BALANCE,
	ATTENDANCE.STAFF_COUNT,
    Adherence_metric.ADHERENCE_TOT_LOGGED_IN_TIME,
    Adherence_metric.ADHERENCE_TOT_NOT_READY_TIME,
	-- from WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET --,
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	--FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	--FIRST_PRIOR_MONTH_EVENTS_MET,
	--SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	--SECOND_PRIOR_MONTH_EVENTS_MET,
	-- FROM PRIOR_MONTHS_ADHERENCE
    --FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    --FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    --FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    --SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
 FROM 	(select distinct staff_staff_id, staff_natid,
			staff_staff_name, LV_DATES_MONTH_NUM AS DATES_MONTH_NUM,
					TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month') 		AS DATES_MONTH,
--					TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM') 		AS DATES_MONTH_NUM,
					TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month YYYY') 	AS DATES_YEAR
         from staff_filter
         WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM
        ) all_staff
--LEFT OUTER JOIN MER
--	on all_staff.staff_staff_id = MER.staff_staff_id
--	and all_staff.dates_month_num=MER.dates_month_num
LEFT OUTER JOIN STAFF_LOCATION
	ON ALL_STAFF.STAFF_STAFF_ID = STAFF_LOCATION.STAFF_STAFF_ID
LEFT OUTER JOIN PERMFORM_TKR ON ALL_STAFF.STAFF_STAFF_ID = PERMFORM_TKR.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=PERMFORM_TKR.DATES_MONTH_NUM
--LEFT OUTER JOIN ONE_ON_ONE
--	ON ALL_STAFF.STAFF_STAFF_ID = ONE_ON_ONE.STAFF_STAFF_ID
--	AND ALL_STAFF.DATES_MONTH_NUM=ONE_ON_ONE.DATES_MONTH_NUM
--LEFT OUTER JOIN CORR_ACTION
--	ON ALL_STAFF.STAFF_STAFF_ID = CORR_ACTION.STAFF_STAFF_ID
--	AND ALL_STAFF.DATES_MONTH_NUM=CORR_ACTION.DATES_MONTH_NUM
LEFT OUTER JOIN ADHERENCE_METRIC
	ON ALL_STAFF.STAFF_STAFF_ID = ADHERENCE_METRIC.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=ADHERENCE_METRIC.DATES_MONTH_NUM
LEFT OUTER JOIN CALL_DAYS
	ON ALL_STAFF.STAFF_STAFF_ID = CALL_DAYS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=CALL_DAYS.DATES_MONTH_NUM
LEFT OUTER JOIN WUE_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = WUE_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=WUE_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN CUST_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = CUST_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=CUST_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN LAG_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = LAG_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=LAG_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN DEF_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = DEF_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=DEF_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN INC_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = INC_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=INC_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN INC_DEF_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = INC_DEF_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=INC_DEF_METRICS.DATES_MONTH_NUM
--LEFT OUTER JOIN QC_metrics
--	on all_staff.staff_staff_id = QC_metrics.staff_staff_id
--	and all_staff.dates_month_num=QC_metrics.dates_month_num
LEFT OUTER JOIN TIME_METRICS
	ON ALL_STAFF.STAFF_STAFF_ID = TIME_METRICS.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=TIME_METRICS.DATES_MONTH_NUM
LEFT OUTER JOIN SCORECARD_QUALITY
	ON ALL_STAFF.STAFF_STAFF_ID = SCORECARD_QUALITY.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=SCORECARD_QUALITY.DATES_MONTH_NUM
LEFT OUTER JOIN ATTENDANCE
	ON ALL_STAFF.STAFF_STAFF_ID = ATTENDANCE.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=ATTENDANCE.DATES_MONTH_NUM
LEFT OUTER JOIN SHORT_CALL_AGENT_COUNT
	ON ALL_STAFF.STAFF_STAFF_ID = SHORT_CALL_AGENT_COUNT.STAFF_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM=SHORT_CALL_AGENT_COUNT.DATES_MONTH_NUM
LEFT OUTER JOIN WEBCHAT_ACTUALS_GRP
	ON ALL_STAFF.STAFF_STAFF_ID = WEBCHAT_ACTUALS_GRP.WEBCHAT_STAFF_ID
	AND ALL_STAFF.DATES_MONTH_NUM = WEBCHAT_ACTUALS_GRP.DATES_MONTH_NUM
LEFT OUTER JOIN BREAK_CONFORMANCE
	ON ALL_STAFF.STAFF_NATID = BREAK_CONFORMANCE.AGENT_ID
	AND ALL_STAFF.DATES_MONTH_NUM = BREAK_CONFORMANCE.DATES_MONTH_NUM
;

    COMMIT;

END LOOP;

COMMIT;



--------------------------------------------------------
-- SECOND LOOP TO POPULATE SC_SUMMARY_CC
--------------------------------------------------------

FOR MTH_LOOP IN ADD_MTH_START .. ADD_MTH_STOP
	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 	-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          -- FIRST_DAY_OF_MONTH,
            LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP)),                             -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), -- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM') -- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			FROM DUAL;

DELETE FROM DP_SCORECARD.SC_SUMMARY_CC
WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

COMMIT;

INSERT INTO DP_SCORECARD.SC_SUMMARY_CC
(
    STAFF_STAFF_ID,
    STAFF_NATID,
	STAFF_STAFF_NAME,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	TOT_CALLS_ANSWERED,
	TOT_SHORT_CALLS_ANSWERED,
	TOT_TOT_RETURN_TO_QUEUE,
	TOT_RETURN_TO_QUEUE_TIMEOUT,
	TOT_AVERAGE_HANDLE_TIME,
	TOT_SCHED_PRODUCTIVE_TIME,
	TOT_ACTUAL_PRODUCTIVE_TIME,
	TOT_TALK_TIME,
	TOT_WRAP_UP_TIME,
	TOT_LOGGED_IN_TIME,
	TOT_NOT_READY_TIME,
	TOT_BREAK_TIME,
	TOT_LUNCH_TIME,
	QCS_PERFORMED,
	AVG_QC_SCORE,
	TOT_INCIDENTS_COMPLETED,
	DAYS_INCIDENTS_COMPLETED,
	DAYS_DEF_INC_COMPLETED,
	TOT_DEFECTS_COMPLETED,
	DAYS_DEFECTS_COMPLETED,
	LAG_TIME_TOT_SCHED_PROD_TIME,
	TOT_CALL_RECORDS,
	TOT_CUSTOMER_COUNT,
	TOT_CALL_WRAP_UP_COUNT,
	TOT_WRAP_UP_ERROR,
	DAYS_SHORT_CALLS_GT_10,
	DAYS_CALLS_ANSWERED,
	ADHERENCE,
	CORRECTIVE_ACTION_FLAG,
	ONE_ON_ONE_FLAG,
	OBSERVATION_FLAG,
	RECORDED_CALL_REVIEW_FLAG,
	LIVE_PHONE_OBSERVATION_FLAG,
	--   Mer_Flag,
	----------------
	SUPERVISOR_STAFF_ID,
	SUPERVISOR_NATID,
	BUILDING,
	DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	TOT_HANDLE_TIME,
	TOT_HANDLE_TIME_COUNT,
	TRTQ,
	CALLS_OFFERED,
	SHORT_CALL_AGENT_COUNT,
	AGENT_DISCONNECTED_SHORT_CALLS,
	CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	SUM_QC_SCORE,
	COUNT_QC_SCORE,
	QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly_sv
	AVG_ATTENDANCE_BALANCE,
	AVG_ATTENDANCE_TOTAL_BALANCE,
	STAFF_COUNT,
	ADHERENCE_TOT_LOGGED_IN_TIME,
	ADHERENCE_TOT_NOT_READY_TIME,
   -- From WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET,
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	FIRST_PRIOR_MONTH_EVENTS_MET,
	SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	SECOND_PRIOR_MONTH_EVENTS_MET,
	-- ADHERRENCE FROM SC_SUMMARY_CC_WRK
    FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	CC_QIP_FLAG
    --Added as part of JIRA57545,48260 under DP1.7
    ,FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
	FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
    SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
    SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
    FIRST_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
    FIRST_PRIOR_MONTH_RTQ_CALLS_OFFERED,
    SECOND_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
    SECOND_PRIOR_MONTH_RTQ_CALLS_OFFERED,
    FIRST_PRIOR_MONTH_SUM_QC_SCORE,
    FIRST_PRIOR_MONTH_COUNT_QC_SCORE,
    SECOND_PRIOR_MONTH_SUM_QC_SCORE,
    SECOND_PRIOR_MONTH_COUNT_QC_SCORE
    --
	)
WITH
-----------------------------------------
PRIOR_MONTHS_ADHERENCE AS
(
SELECT
--	SC_SUMMARY_CC_WRK.DATES_MONTH_NUM                                          	AS DATES_MONTH_NUM,
    SC_SUMMARY_CC_WRK.STAFF_STAFF_ID                                           AS STAFF_STAFF_ID,
	------------------
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_SCHEDULED,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_MET,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_EVENTS_MET,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_SCHEDULED,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_MET,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_EVENTS_MET,
	------------------
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_LOGGED_IN_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_NOT_READY_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.LAG_TIME_TOT_SCHED_PROD_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
			----
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_LOGGED_IN_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_NOT_READY_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.LAG_TIME_TOT_SCHED_PROD_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
--------------------Added as part of JIRA57545 under DP1.7
	,sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.AGENT_DISCONNECTED_SHORT_CALLS,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.TOT_CALLS_ANSWERED,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.AGENT_DISCONNECTED_SHORT_CALLS,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.TOT_CALLS_ANSWERED,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
------------------Added as part of JIRA57545 under DP1.7
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.TOT_TOT_RETURN_TO_QUEUE,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CALLS_OFFERED,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_RTQ_CALLS_OFFERED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.TOT_TOT_RETURN_TO_QUEUE,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CALLS_OFFERED,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_RTQ_CALLS_OFFERED
	------------------Added as part of JIRA48260 under DP1.7
	,sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.SUM_QC_SCORE,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_SUM_QC_SCORE,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.COUNT_QC_SCORE,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_COUNT_QC_SCORE,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.SUM_QC_SCORE,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_SUM_QC_SCORE,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.COUNT_QC_SCORE,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_COUNT_QC_SCORE
	--------------------Added as part of DP1.7
FROM SC_SUMMARY_CC_WRK
    WHERE   SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
        OR  SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
GROUP BY
--	SC_SUMMARY_CC_WRK.DATES_MONTH_NUM,
	SC_SUMMARY_CC_WRK.STAFF_STAFF_ID
)
-----------------------------------
SELECT
	WRK.STAFF_STAFF_ID,
	WRK.STAFF_NATID,
	WRK.STAFF_STAFF_NAME,
	WRK.DATES_MONTH,
	WRK.DATES_MONTH_NUM,
	WRK.DATES_YEAR,
	WRK.EXCLUSION_FLAG,
	WRK.TOT_CALLS_ANSWERED,
	WRK.TOT_SHORT_CALLS_ANSWERED,
	WRK.TOT_TOT_RETURN_TO_QUEUE,
	WRK.TOT_RETURN_TO_QUEUE_TIMEOUT,
	WRK.TOT_AVERAGE_HANDLE_TIME,
	WRK.TOT_SCHED_PRODUCTIVE_TIME,
	WRK.TOT_ACTUAL_PRODUCTIVE_TIME,
	WRK.TOT_TALK_TIME,
	WRK.TOT_WRAP_UP_TIME,
	WRK.TOT_LOGGED_IN_TIME,
	WRK.TOT_NOT_READY_TIME,
	WRK.TOT_BREAK_TIME,
	WRK.TOT_LUNCH_TIME,
	WRK.QCS_PERFORMED,
	WRK.AVG_QC_SCORE,
	WRK.TOT_INCIDENTS_COMPLETED,
	WRK.DAYS_INCIDENTS_COMPLETED,
	WRK.DAYS_DEF_INC_COMPLETED,
	WRK.TOT_DEFECTS_COMPLETED,
	WRK.DAYS_DEFECTS_COMPLETED,
	WRK.LAG_TIME_TOT_SCHED_PROD_TIME,
	WRK.TOT_CALL_RECORDS,
	WRK.TOT_CUSTOMER_COUNT,
	WRK.TOT_CALL_WRAP_UP_COUNT,
	WRK.TOT_WRAP_UP_ERROR,
	WRK.DAYS_SHORT_CALLS_GT_10,
	WRK.DAYS_CALLS_ANSWERED,
	WRK.ADHERENCE,
	WRK.CORRECTIVE_ACTION_FLAG,
	WRK.ONE_ON_ONE_FLAG,
	WRK.OBSERVATION_FLAG,
	WRK.RECORDED_CALL_REVIEW_FLAG,
	WRK.LIVE_PHONE_OBSERVATION_FLAG,
	--   Mer_Flag,
	----------------
	WRK.SUPERVISOR_STAFF_ID,
	WRK.SUPERVISOR_NATID,
	WRK.BUILDING,
	WRK.DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	WRK.TOT_HANDLE_TIME,
	WRK.TOT_HANDLE_TIME_COUNT,
	WRK.TRTQ,
	WRK.CALLS_OFFERED,
	WRK.SHORT_CALL_AGENT_COUNT,
	WRK.AGENT_DISCONNECTED_SHORT_CALLS,
	WRK.CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	WRK.SUM_QC_SCORE,
	WRK.COUNT_QC_SCORE,
	WRK.QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly_sv
	WRK.AVG_ATTENDANCE_BALANCE,
	WRK.AVG_ATTENDANCE_TOTAL_BALANCE,
	WRK.STAFF_COUNT,
	WRK.ADHERENCE_TOT_LOGGED_IN_TIME,
	WRK.ADHERENCE_TOT_NOT_READY_TIME,
    -- From WEBCHAT_ACTUALS
	WRK.WEBCHAT_ASSIGNED,
	WRK.WEBCHAT_TRANSFERRED,
	WRK.WEBCHAT_CONFERENCED,
	WRK.WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	WRK.CURRENT_MONTH_EVENTS_SCHEDULED,
	WRK.CURRENT_MONTH_EVENTS_MET,
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	PMA.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	PMA.FIRST_PRIOR_MONTH_EVENTS_MET,
	PMA.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	PMA.SECOND_PRIOR_MONTH_EVENTS_MET,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	0
    --Added as part of JIRA57545,48260 under DP1.7
    ,PMA.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
	PMA.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
    PMA.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,
    PMA.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,
    PMA.FIRST_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
    PMA.FIRST_PRIOR_MONTH_RTQ_CALLS_OFFERED,
    PMA.SECOND_PRIOR_MONTH_RTQ_TOT_TOT_RETURN_TO_QUEUE,
    PMA.SECOND_PRIOR_MONTH_RTQ_CALLS_OFFERED,
    PMA.FIRST_PRIOR_MONTH_SUM_QC_SCORE,
    PMA.FIRST_PRIOR_MONTH_COUNT_QC_SCORE,
    PMA.SECOND_PRIOR_MONTH_SUM_QC_SCORE,
    PMA.SECOND_PRIOR_MONTH_COUNT_QC_SCORE
FROM DP_SCORECARD.SC_SUMMARY_CC_WRK  WRK
	LEFT OUTER JOIN PRIOR_MONTHS_ADHERENCE PMA
	--ON WRK.DATES_MONTH_NUM = PMA.DATES_MONTH_NUM
	ON WRK.STAFF_STAFF_ID = PMA.STAFF_STAFF_ID
    WHERE WRK.DATES_MONTH_NUM = LV_DATES_MONTH_NUM
    AND WRK.EXCLUSION_FLAG <> 'Y';


END LOOP;

  COMMIT;

--------------------------------------------------------
-- THIRD LOOP TO UPDATE SC_SUMMARY_CC FLAGS
--------------------------------------------------------


FOR MTH_LOOP IN ADD_MTH_START .. ADD_MTH_STOP

	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 	-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          -- FIRST_DAY_OF_MONTH,
            LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP)),                             -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), -- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM') -- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			FROM DUAL;

            --BEGIN

            IF STAFF_CURSOR%ISOPEN
            THEN
                CLOSE STAFF_CURSOR;
            END IF;

            OPEN STAFF_CURSOR;

            LOOP

                FETCH STAFF_CURSOR INTO SUMMARY_REC;

                EXIT WHEN STAFF_CURSOR%NOTFOUND;


    ------------------------------------------------------------------
    -- THREE_MONTH_CONFORMANCE_MISSED_COUNT
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT :=
			(
            --
            case
            when
                case
                when nvl(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            );

            -------------------------------------------------------
			-- MONTHLY_CONFORMANCE_FLAG
            -------------------------------------------------------
            SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG :=
				CASE
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) = 0
						THEN 0
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0
					AND
					(SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
					> .945
						THEN 1 -- 'MET'
					ELSE 2 -- 'MISSED'
				END;
            --

 ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_MISSED_COUNT --Created as part of JIRA57545, 57503 under DP1.7
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT :=
			(
            --
            case
            when
                case
                when NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
                else 0 end < .965
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
                else 0 end < .965
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
                else 0 end < .965
            then 1 else 0
            end
            --
            );



 ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_MET_COUNT --Created as part of JIRA57545, 57503 under DP1.7
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT :=
			(
            --
            case
            when
                case
                when NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
                else 0 end >= .965
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
                else 0 end >= .965
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
                then (
                (NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
                else 0 end >= .965
            then 1 else 0
            end
            --
            );


------------------------------------------------------------------
    -- THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT --Created as part of JIRA57545 under DP1.7
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT :=
			(
            --
            case
            when
                case
                when NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) > 0
                then (
                NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0)
                    )
                else 1 end >= .015
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 1 end >= .015
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 1 end >= .015
            then 1 else 0
            end
            --
            );


------------------------------------------------------------------
    -- THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT --Created as part of JIRA57545 under DP1.7
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT :=
			(
            --
            case
            when
                (case
                when NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) > 0
                then (
                NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0)
                    )
                else 1 end < .015
                AND
                case
                when NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) > 0
                then (
                NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0)
                    )
                else 0 end >= .005
                )
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                (case
                when NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 1 end < .015
                AND
                case
                when NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 0 end >= .005
                )
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                (case
                when NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 1 end < .015
                AND
                case
                when NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) > 0
                then (
                 NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
                else 0 end >= .005
                )
            then 1 else 0
            end
            --
            );



            -------------------------------------------------------
			-- MONTHLY_SHORT_CALLS_FLAG --Created as part of JIRA 56972 under DP1.7
            -------------------------------------------------------
            SUMMARY_REC.MONTHLY_SHORT_CALLS_FLAG :=
				CASE
					WHEN NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) = 0
						THEN 0
					WHEN NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) > 0
					AND
					(NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0))
					< .015
						THEN 1 -- 'MET'
					ELSE 2 -- 'MISSED'
				END;
            --

    ------------------------------------------------------------------
    -- THREE_MONTH_AVG_ADHERENCE
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE :=
			CASE WHEN
                (NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
				> 0
				THEN
					(( NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					)
					-
					(NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)) /
					(
					NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					)
					ELSE 0 END;


    ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_FLAG
	-- Created as part of JIRA57545, 57503 under DP1.7
	--
	-- 1-Unacceptable
	-- Schedule Conformance 'Missed'
	-- for 2 or more months in the Reporting period.
	-- 2 or more Months Missed
	-- Result = 1
	--
	-- 2 - Below Expectations
	-- Adherence less then 97%
	-- OR schedule Conformance 'Missed'
	-- for 1 month in the Reporting period.
	-- 1 Month Missed
	-- Result = 2
	--
	-- 3 - Meets Expectations
	-- Adherence equal to 97%
	-- OR  less then 98%
	-- AND schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 3
	--
	-- 4 - Above Expectations
	-- Adherence = 99% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 4
	--
	-- 5 - Superior
	-- Adherence = 100% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 5
    ------------------------------------------------------------------

			SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG :=
				CASE
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) = 0
                OR (NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                ) = 0
				THEN 0
				----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,0) > 1
					THEN 1
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,0) = 1
				OR NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT,0) < 3
					THEN 2
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .965
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .985
                AND NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT,0) = 3
				AND (NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                	THEN 3
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .985
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .995
				AND NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT,0) = 3
				AND (NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                	THEN 4
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .995
				AND NVL(SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT,0) = 3
				AND (NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                AND (NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0) - NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) >= .965
                	THEN 5
				-----
				ELSE 0 END;

 ------------------------------------------------------------------
    -- THREE_MONTH_SHORT_CALLS_FLAG
	-- Created as part of JIRA57545, 57503 under DP1.7
	--
	-- 1-Unacceptable
	-- If SC >= 2% for 2 or more months 
    -- with remaining month either 0% or 1%,
    -- result should be 'Unacceptable'
	-- Result = 1
	--
	-- 2 - Below Expectations
	-- If SC >= 2% for 1 month 
    -- with remaining months either 0% or 1%, 
    -- result should be 'Below Expectations'.
	-- 1 Month Missed
	-- Result = 2
	--
	-- 3 - Meets Expectations
	-- If SC = 1% in each reporting months, 
    -- result should be 'Meets Expectations'
	-- Result = 3
	--
	-- 4 - Above Expectations
	-- If SC = 1% for alteast 
    -- 1 month (1 or 2 months) 
    -- with remaining months 0%, 
    -- result should be 'Above Expectations'
	-- Result = 4
	--
	-- 5 - Superior
	-- If SC = 0% in each reporting months, 
    -- result should be 'Superior'
	-- Result = 5
    ------------------------------------------------------------------

			SUMMARY_REC.THREE_MONTH_SHORT_CALLS_FLAG :=
				CASE
				WHEN (NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0)
				+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
				+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0)
                )
				= 0
					THEN 0
				-----
                WHEN NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,0) > 1
                	THEN 1
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,0) = 1
                	THEN 2
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) >= .005
                AND NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) >= .005
                AND NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) >= .005
                AND NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT,0) = 3
					THEN 3
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) < .015
                AND NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT,0) < 3
				AND NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT,0) > 0
					THEN 4
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.TOT_CALLS_ANSWERED,0) <= .00499
                AND NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) <= .00499
                AND NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_AGENT_DISCONNECTED_SHORT_CALLS,0) / NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_SC_TOT_CALLS_ANSWERED,0) <= .00499
                AND NVL(SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT,0) = 0
					THEN 5
				-----
				ELSE 0 END;




    ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_CONFORMANCE_FLAG --Renamed as part of JIRA57545, 57503 under DP1.7
	-- Specifications REVISED: 8/29/19 per M Brom
	--
	-- 1-Unacceptable
	-- Schedule Conformance 'Missed'
	-- for 2 or more months in the Reporting period.
	-- 2 or more Months Missed
	-- Result = 1
	--
	-- 2 - Below Expectations
	-- Adherence less then 97%
	-- OR schedule Conformance 'Missed'
	-- for 1 month in the Reporting period.
	-- 1 Month Missed
	-- Result = 2
	--
	-- 3 - Meets Expectations
	-- Adherence equal to 97%
	-- OR  less then 98%
	-- AND schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 3
	--
	-- 4 - Above Expectations
	-- Adherence = 99% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 4
	--
	-- 5 - Superior
	-- Adherence = 100% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 5
    ------------------------------------------------------------------

			SUMMARY_REC.THREE_MONTH_ADHERENCE_CONFORMANCE_FLAG :=
				CASE
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) = 0
				THEN 0
				----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) > 1
					THEN 1
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .965
				OR NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 1
					THEN 2
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .965
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .985
					THEN 3
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .985
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .995
					THEN 4
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .995
					THEN 5
				-----
				ELSE 0 END;

				UPDATE SC_SUMMARY_CC
				SET
					THREE_MONTH_CONFORMANCE_MISSED_COUNT    =  	SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,
					THREE_MONTH_AVG_ADHERENCE               =  	SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,
					THREE_MONTH_ADHERENCE_CONFORMANCE_FLAG 	=	SUMMARY_REC.THREE_MONTH_ADHERENCE_CONFORMANCE_FLAG,
					MONTHLY_CONFORMANCE_FLAG 				= 	SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG
                 --Added as part of JIRA57545 under DP1.7
                  ,THREE_MONTH_ADHERENCE_MISSED_COUNT     =   SUMMARY_REC.THREE_MONTH_ADHERENCE_MISSED_COUNT,
                  THREE_MONTH_ADHERENCE_MET_COUNT     =   SUMMARY_REC.THREE_MONTH_ADHERENCE_MET_COUNT,
                  THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT =  SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MISSED_COUNT,
                  THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT =  SUMMARY_REC.THREE_MONTH_SHORT_CALLS_REQ_MET_COUNT,
                  THREE_MONTH_ADHERENCE_FLAG              =   SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG,
                  THREE_MONTH_SHORT_CALLS_FLAG            =   SUMMARY_REC.THREE_MONTH_SHORT_CALLS_FLAG,
                  MONTHLY_SHORT_CALLS_FLAG                =   SUMMARY_REC.MONTHLY_SHORT_CALLS_FLAG
                  --Added as part of JIRA57545 under DP1.7
				WHERE CURRENT OF STAFF_CURSOR;

			END LOOP;

			COMMIT;

			IF STAFF_CURSOR%ISOPEN
			THEN
				CLOSE STAFF_CURSOR;
			END IF;


END LOOP;

COMMIT;

	---------------------------------------------------------
	-- FINAL UPDATE TO SET THE CC_QIP_FLAG
	-- SET THE FLAG TO 1 IF CONFORMANCE MET FOR ALL 3 MONTH OF THE QUARTER
	-- AND ADHERENCE MET FOR ALL THREE MONTHA OF THE QUARTER
	---------------------------------------------------------

	UPDATE DP_SCORECARD.SC_SUMMARY_CC
	SET CC_QIP_FLAG = 1
	WHERE ( STAFF_STAFF_ID, DATES_MONTH_NUM )
	IN (
	WITH CHECK_VALUES AS
	( SELECT CC.STAFF_STAFF_ID, CC.DATES_MONTH_NUM,
		--H.HIRE_DATE,
		--NVL(H.TERMINATION_DATE,TRUNC(SYSDATE)) TERMINATION_DATE,
		BD.FIRST_MONTH_OF_QTR,
		BD.LAST_MONTH_OF_QTR,
		CC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,
		----------------------------------
		CASE
			WHEN DATES_MONTH_NUM = LAST_MONTH_OF_QTR
		--	AND CC.THREE_MONTH_CONFORMANCE_MISSED_COUNT = 0 /*Commenting out for JIRA 56934 under DP1.7*/
			AND (
				CASE
					WHEN NVL(CC.LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN
					(
                    (	NVL(CC.ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
                END
				) >= .97--> .965 --AS CURRENT_MONTH_ADHERENCE,
				-------------------------
			AND (
				CASE
					WHEN NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN (
					( 	NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
					END
				) >= .97--> .965 --	AS FIRST_PRIOR_MONTH_ADHERENCE,
				-------------------------
			AND (
				CASE
					WHEN NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN (
					( 	NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
					END
				) >= .97--> .965 --AS SECOND_PRIOR_MONTH_ADHERENCE,
				-------------------------
        THEN 1 ELSE 0 END AS CC_FLAG,
		-------------------------------
		BD.first_bus_day_of_qtr,
		BD.LAST_BUS_DAY_OF_QTR
	FROM SC_SUMMARY_CC  CC
	--JOIN DP_SCORECARD.SCORECARD_HIERARCHY H
	--	ON H.STAFF_STAFF_ID = CC.STAFF_STAFF_ID
	JOIN SCORECARD_QUARTERLY_BUSINESS_DAYS_SV  BD
	--	ON CC.DATES_MONTH_NUM BETWEEN BD.FIRST_MONTH_OF_QTR AND BD.LAST_MONTH_OF_QTR
		ON CC.DATES_MONTH_NUM = BD.LAST_MONTH_OF_QTR
	WHERE 1=1
	--AND H.HIRE_DATE <= FIRST_BUS_DAY_OF_QTR -- TEST REMOVED PER MATTHEW B.  8/28/2019
	--AND NVL(H.TERMINATION_DATE,TRUNC(SYSDATE)) >= BD.LAST_BUS_DAY_OF_QTR -- TEST REMOVED PER MATTHEW B.  8/28/2019
	)
	SELECT STAFF_STAFF_ID, DATES_MONTH_NUM
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	UNION
	SELECT STAFF_STAFF_ID, TO_CHAR(TO_NUMBER(DATES_MONTH_NUM)-1)
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	UNION
	SELECT STAFF_STAFF_ID, TO_CHAR(TO_NUMBER(DATES_MONTH_NUM)-2)
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	);

COMMIT;

END LOAD_SC_SUMMARY_CC;


/
SHOW ERRORS

COMMIT;

grant execute, debug on "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to MAXDAT;
grant execute, debug on "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to MAXDAT_REPORTS;
grant execute, debug on "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to MAXDAT_READ_ONLY;
grant execute on "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to DP_SCORECARD_READ_ONLY;
GRANT execute ON "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to MAXDAT_MSTR_TRX_RPT;
GRANT EXECUTE ON "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to DP_SCORECARD_PFP_E;
GRANT DEBUG ON "DP_SCORECARD"."LOAD_SC_SUMMARY_CC" to DP_SCORECARD_PFP_READ_ONLY;


COMMIT;