CREATE OR REPLACE procedure DP_SCORECARD.UPDATE_SC_ATTENDANCE_MTHLY
(in_staff_id IN NUMBER default NULL )
AS

	LV_IN_STAFF_ID                 VARCHAR2(10) := '%';
	LV_CALC_STAFF_ID               NUMBER := 0;
	LV_RUN_DATE                     DATE := SYSDATE;
	
	-- THIS PROCEDURE IS CALLED FROM THE INSERT_ATTENDANCE PROCEDURE OR
	-- THE UPDATE_ATTENDANCE PROCEDURE OR THE ELT TO LOAD THE HIERARCHY.
	-- INSERT_ATTENDANCE AND UPDATE_ATTENDANCE PROCEDURES WILL PROVIDE A SPECIFIC STAFF_ID
	
	-- EACH TIME THE SCORCARD RUNS THIS PROCEDURE IS CALLED WITH A NULL STAFF_ID
	-- FOR THE FIRST EXECUTION WITHIN A MONTH IT WILL RUN ALL THE STAFF_IDs
	-- SUBSEQUENT EXECUTIONS WOULD BE FOR A SINGLE STAFF_ID;
	
	-- THIS CURSOR IDENTIFIES ANY STAFF_ID WHICH DO NOT HAVE ENTRIES IN THE CURRENT MONTH
	
	CURSOR STAFF_ATTENDANCE_CSR(LV_IN_STAFF_ID IN VARCHAR) IS
		SELECT staff_staff_id, MAX(TO_DATE(DATES_MONTH_NUM,'YYYYMM')) AS RUN_DATE 
		FROM (
            WITH 
            ---------------------------------------------
            -- The first part of the cursor is used to --
            -- DETERMINE A DATE RANGE FOR THE STAFF_ID --	
            ---------------------------------------------	
        HIRE AS 
            ( SELECT STAFF_STAFF_ID, MAX(HIRE_DATE)                 AS MAX_HIRE_DATE
                FROM DP_SCORECARD.SCORECARD_HIERARCHY
                WHERE STAFF_STAFF_ID like LV_IN_STAFF_ID
                GROUP BY STAFF_STAFF_ID
            ),
        TERM AS
            ( SELECT STAFF_STAFF_ID,  MAX(NVL(TERMINATION_DATE,SYSDATE))  AS MAX_TERM_DATE
                FROM DP_SCORECARD.SCORECARD_HIERARCHY
                WHERE STAFF_STAFF_ID like LV_IN_STAFF_ID
                GROUP BY STAFF_STAFF_ID
            ),
        ATND AS	-- GET THE FIRST SC_ATTENDANCE_RECORD	
            ( SELECT STAFF_ID, MIN(ENTRY_DATE)                AS MIN_ENTRY_DATE
				FROM DP_SCORECARD.SC_ATTENDANCE
                WHERE STAFF_ID like LV_IN_STAFF_ID
                GROUP BY STAFF_ID	
            ),
        INIT AS	-- GET THE FIRST INITIALIZATION RECORD	
            ( SELECT STAFF_ID, MIN(START_DATE)                AS MIN_START_DATE
                FROM DP_SCORECARD.SC_ATTENDANCE_INITIAL_SCORE
                WHERE STAFF_ID like LV_IN_STAFF_ID
                GROUP BY STAFF_ID
            ),
        STAFF_START_STOP AS
            ( SELECT HIRE.STAFF_STAFF_ID,
                    TO_CHAR(GREATEST(MAX_HIRE_DATE, 
                    NVL(MIN_ENTRY_DATE,MAX_HIRE_DATE), 
                    NVL(MIN_START_DATE,MAX_HIRE_DATE)),'YYYYMM')    AS START_MONTH_NUM, 
                    TO_CHAR(MAX_TERM_DATE,'YYYYMM')                             AS TERM_MONTH_NUM
                FROM HIRE		
                LEFT OUTER JOIN TERM ON TERM.STAFF_STAFF_ID = HIRE.STAFF_STAFF_ID
                LEFT OUTER JOIN ATND ON ATND.STAFF_ID = HIRE.STAFF_STAFF_ID
                LEFT OUTER JOIN INIT ON INIT.STAFF_ID = HIRE.STAFF_STAFF_ID 		
            ),
        ALL_MONTHS AS
            ( SELECT STAFF_START_STOP.STAFF_STAFF_ID, D.DATES_MONTH_NUM 
                FROM  STAFF_START_STOP
                JOIN
                ( SELECT 
                    TO_CHAR(ADD_MONTHS (TRUNC (TO_DATE('01/01/2012','MM/DD/YYYY'), 'MM'), 1*LEVEL -1), 'YYYYMM') AS DATES_MONTH_NUM
                    FROM DUAL 
                    CONNECT BY LEVEL <= MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE('01/01/2012','MM/DD/YYYY')) + 1
                ) D
                ON 1=1
                WHERE D.DATES_MONTH_NUM BETWEEN START_MONTH_NUM AND TERM_MONTH_NUM  
            ),
        STAFF_MONTHS AS
            ( SELECT STAFF_STAFF_ID AS STAFF_STAFF_ID, 
                    ALL_MONTHS.DATES_MONTH_NUM,
                    TO_DATE(ALL_MONTHS.DATES_MONTH_NUM,'YYYYMM') AS DATES
                FROM ALL_MONTHS
		--WHERE ALL_MONTHS.DATES_MONTH_NUM
		--BETWEEN STAFF_START_STOP.ATTND_DATES_MONTH_NUM AND STAFF_START_STOP.TERM_MONTH_NUM
            )
    SELECT STAFF_STAFF_ID, DATES_MONTH_NUM 
    FROM ALL_MONTHS	
    WHERE STAFF_STAFF_ID like LV_IN_STAFF_ID
    MINUS
    SELECT STAFF_STAFF_ID, DATES_MONTH_NUM 
    FROM DP_SCORECARD.SCORECARD_ATTENDANCE_MTHLY
    WHERE STAFF_STAFF_ID like LV_IN_STAFF_ID
	)
	GROUP BY STAFF_STAFF_ID;


BEGIN

	IF IN_STAFF_ID IS NULL
	THEN LV_IN_STAFF_ID := '%';
	ELSE LV_IN_STAFF_ID := IN_STAFF_ID;
	END IF;
	
	IF (staff_attendance_csr%ISOPEN) 
	THEN
		CLOSE staff_attendance_csr;
	END IF;	

	OPEN staff_attendance_csr(LV_IN_STAFF_ID); 
	
	LOOP

	FETCH staff_attendance_csr INTO LV_CALC_STAFF_ID, LV_RUN_DATE;
	EXIT WHEN staff_attendance_csr%NOTFOUND;

		--call procedure to recalculate running totals for this staff id
		
		DBMS_OUTPUT.PUT_LINE('CALLING CALC FOR: '||LV_CALC_STAFF_ID);
		
        DP_SCORECARD.Calc_Attendance_Score_PKG.CALC_ATTENDANCE_SCORE(LV_CALC_STAFF_ID,LV_RUN_DATE );
	   
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE('DELETING ROWS FOR: '||LV_IN_STAFF_ID);
	
    COMMIT;
    
end update_sc_attendance_mthly;
/
