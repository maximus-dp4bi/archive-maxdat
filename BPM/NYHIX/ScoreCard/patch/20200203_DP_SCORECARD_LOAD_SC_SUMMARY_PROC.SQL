create or replace procedure              LOAD_SC_SUMMARY_CC
( add_mth_start number default 0,
  add_mth_stop  number default 11
 )
AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL: svn://svn-staging.maximus.com/dev1d/maxdat/BPM/NYHIX/ScoreCard/patch/20190805_021_LOAD_SC_SUMMARY_CC.sql $';
  	SVN_REVISION varchar2(20) := '$Revision: 27953 $';
 	SVN_REVISION_DATE varchar2(60) := '$Date: 2019-09-04 13:04:20 -0400 (Wed, 04 Sep 2019) $';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author: wl134672 $';


---------------
	LV_DATES_MONTH_NUM          VARCHAR2(6);
	LV_FIRST_DAY_OF_MONTH		DATE  	:= TRUNC(SYSDATE,'MM');
	LV_LAST_DAY_OF_MONTH		DATE	:= LAST_DAY(SYSDATE);
    LV_DATES_MONTH              VARCHAR2(30) := NULL;
    LV_DATES_YEAR               VARCHAR2(30) := NULL;

    LV_STAFF_STAFF_ID                       NUMBER(8) := 0;
	LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM    VARCHAR2(6);
	LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM   VARCHAR2(6);

    SUMMARY_REC   SC_SUMMARY_CC%ROWTYPE;

    LV_THREE_MONTH_CONFORMANCE_MISSED_COUNT     NUMBER(5) := 0;

    CURSOR STAFF_CURSOR IS
    SELECT * INTO SUMMARY_REC
    FROM SC_SUMMARY_CC
    WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM
    FOR UPDATE;


BEGIN

    --    The ADD_MTH_START .. ADD_MTH_STOP parameters are used to drive
    --    a loop which uses ADD_MONTHS(sysdate, "minus" the loop value.
    --    The loop starts with the oldest month and forward.
    --    To calulate from the current month and going back 14 months
    --    the parameters would be LOAD_SC_SUMMARY_CC(0,13)
    --    The "zero" would be the current month the "Thirteen" earliest month.

	-- Note in JULY 2109 the 'REVERSE' was added because of the need to
	-- save adherence data from the prior 2 months in the current record


	FOR MTH_LOOP IN reverse ADD_MTH_START .. ADD_MTH_STOP
	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 		-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          	-- FIRST_DAY_OF_MONTH,
            TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP))+1)-(1/(24*60*60)),        -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), 	-- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM'), 	-- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month'), 			-- DATES_MONTH,
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month YYYY') 		-- DATES_YEAR,
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM,
				LV_DATES_MONTH,
				LV_DATES_YEAR
			FROM DUAL;


	DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||'  MTH_LOOP='||MTH_LOOP
	||' DATES_MTH_NUM='||LV_DATES_MONTH_NUM
	||' FIRST_DAY_OF_MONTH='||TO_CHAR(LV_FIRST_DAY_OF_MONTH,'YYYYMMDD HH24:MI:SS')
	||' LAST_DAY_OF_MONTH='||TO_CHAR(LV_LAST_DAY_OF_MONTH,'YYYYMMDD HH24:MI:SS')
	||' FIRST_PRIOR_MONTH='||LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
	||' SECOND_PRIOR_MONTH='||LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM);


	-- **************************************
	-- SC_STAFF_FILTER_WRK
	-- **************************************

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_STAFF_FILTER_WRK';

	COMMIT;

	INSERT INTO SC_STAFF_FILTER_WRK
		( STAFF_STAFF_ID, STAFF_NATID, DATES_MONTH_NUM, STAFF_COUNT,
		STAFF_STAFF_NAME, SUPERVISOR_STAFF_ID, SUPERVISOR_NATID,
		HIRE_DATE, ADJUSTED_TERMINATION_DATE, BUILDING, DEPARTMENT
		)
	SELECT STAFF_STAFF_ID, STAFF_NATID, DATES_MONTH_NUM, STAFF_COUNT,
		STAFF_STAFF_NAME, SUPERVISOR_STAFF_ID, SUPERVISOR_NATID,
        HIRE_DATE, ADJUSTED_TERMINATION_DATE, BUILDING, DEPARTMENT
	FROM ( SELECT
				SUPERVISOR_STAFF_ID,
				SUPERVISOR_NATID,
				STAFF_STAFF_ID,
				STAFF_NATID,
                LV_DATES_MONTH_NUM      AS DATES_MONTH_NUM,
                1  						AS STAFF_COUNT,
				HIRE_DATE,
				NVL(TERMINATION_DATE,TRUNC(SYSDATE+1)-(1/(60*60*24))) AS ADJUSTED_TERMINATION_DATE,
				STAFF_STAFF_NAME,
                BUILDING, DEPARTMENT
			FROM DP_SCORECARD.SCORECARD_HIERARCHY
			WHERE TO_CHAR(TRUNC(HIRE_DATE,'MM'),'YYYYMM') <= LV_DATES_MONTH_NUM
			AND TO_CHAR(TRUNC(NVL(TERMINATION_DATE,SYSDATE),'MM'),'YYYYMM') >= LV_DATES_MONTH_NUM
          );

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_STAFF_FILTER_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));


	-- **************************************
	-- SC_EXCLUSIONS_WRK
	-- **************************************

--	DELETE FROM DP_SCORECARD.SC_EXCLUSIONS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_EXCLUSIONS_WRK';

	COMMIT;

	INSERT INTO DP_SCORECARD.SC_EXCLUSIONS_WRK
	(
		EXCLUSION_ID,
		AGENT_ID,
		STAFF_ID,
		EXCLUSION_DATE,
		DATES_MONTH_NUM
	)
	SELECT
		EXCLUSION_ID,
		AGENT_ID,
		STAFF_ID,
		EXCLUSION_DATE,
		TO_CHAR(EXCLUSION_DATE,'YYYYMM')
	FROM SC_EXCLUSION EX1
	WHERE EXCLUSION_FLAG = 'Y'
	AND EXCLUSION_ID = (SELECT MAX(EXCLUSION_ID)
						FROM SC_EXCLUSION EX2
						WHERE EX2.AGENT_ID = EX1.AGENT_ID
						AND EX2.EXCLUSION_DATE = EX1.EXCLUSION_DATE
						AND EX2.EXCLUSION_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
						)
	AND EXCLUSION_DATE 	BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_EXCLUSIONS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));


	-- **************************************
	-- SC_ENGAGE_DAILY_WRK
	-- **************************************

--	DELETE FROM DP_SCORECARD.SC_ENGAGE_DAILY_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_ENGAGE_DAILY_WRK';

	INSERT INTO SC_ENGAGE_DAILY_WRK
	(
		AGENT_ID,
		EVAL_DATE,
		DATES_MONTH_NUM,
		AVG_QC_SCORE,
		SUM_QC_SCORE,
		COUNT_QC_SCORE,
		QCS_PERFORMED,
		QCS_REMAINING
	)
	SELECT  QC.AGENT_ID,
   	   EVAL_DATE,
       LV_DATES_MONTH_NUM 	AS DATES_MONTH_NUM,
       AVG(SCORE_TOTAL) 	AS AVG_QC_SCORE,
       SUM(SCORE_TOTAL) 	AS SUM_QC_SCORE,
       COUNT(*) 			AS COUNT_QC_SCORE,
       COUNT(*) 	AS QCS_PERFORMED,
       CASE
         WHEN COUNT(*) >= 10
		 THEN 0
         ELSE 10 - COUNT(*)
       END 					AS QCS_REMAINING
	FROM (
            SELECT EA.AGENT_ID, EA.EVALUATOR_ID, EA.SCORE_TOTAL, EA.EVALUATION_DATE_TIME,
           CASE WHEN (   EA.CALL_DATE IS NULL
                         OR EA.CALL_DATE = TO_DATE ('1/1/1753', 'MM/DD/YYYY'))
                THEN EA.EVALUATION_DATE_TIME
                ELSE EA.CALL_DATE
            END AS EVAL_DATE
            FROM DP_SCORECARD.ENGAGE_ACTUALS EA
            JOIN DP_SCORECARD.ENGAGE_FORM_TYPE F
            ON EA.EVALUATION_FORM = F.EVALUATION_FORM
            WHERE 1=1
            AND F.SCORECARD_SCORE_TYPE = 'QC'
            AND NVL(EA.DELETED_FLAG,'N') <> 'Y'
            AND (EA.CALL_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
                OR
                EA.EVALUATION_DATE_TIME BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
                )
        ) QC
    WHERE EVAL_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH    -- CORRECT NEW VERSION
    GROUP BY AGENT_ID, EVAL_DATE;


	COMMIT;


	DBMS_OUTPUT.PUT_LINE('SC_ENGAGE_DAILY_WRK COMPLETED'||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));


	-- **************************************
	-- SC_SCORECARD_QUALITY_WRK
	-- **************************************

--	DELETE FROM DP_SCORECARD.SC_SCORECARD_QUALITY_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_SCORECARD_QUALITY_WRK';

	INSERT INTO SC_SCORECARD_QUALITY_WRK
	(
		AGENT_ID,
		DATES_MONTH_NUM,
		AVG_QC_SCORE,
		SUM_QC_SCORE,
		COUNT_QC_SCORE,
		QCS_PERFORMED,
		QCS_REMAINING
	)
	SELECT  AGENT_ID,
       LV_DATES_MONTH_NUM 	AS DATES_MONTH_NUM,
       SUM(SUM_QC_SCORE)/SUM(COUNT_QC_SCORE) 	AS AVG_QC_SCORE,
       SUM(SUM_QC_SCORE) 	AS SUM_QC_SCORE,
       SUM(COUNT_QC_SCORE) 	AS COUNT_QC_SCORE,
       SUM(QCS_PERFORMED) 	AS QCS_PERFORMED,
       CASE
         WHEN SUM(COUNT_QC_SCORE) >= 10
		 THEN 0
         ELSE 10 - SUM(COUNT_QC_SCORE)
       END 					AS QCS_REMAINING
	FROM SC_ENGAGE_DAILY_WRK E
	JOIN SC_STAFF_FILTER_WRK S
		ON E.AGENT_ID = S.STAFF_NATID
		AND EVAL_DATE >= S.HIRE_DATE
		AND EVAL_DATE <= ADJUSTED_TERMINATION_DATE
    GROUP BY AGENT_ID;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_SCORECARD_QUALITY_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));


	-- **************************************
	-- SC_LAG_TIME_WRK
	-- **************************************

--	DELETE FROM DP_SCORECARD.SC_LAG_TIME_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_LAG_TIME_WRK';

	INSERT INTO DP_SCORECARD.SC_LAG_TIME_WRK
		(STAFF_STAFF_ID, AGENT_ID, LAG_DATE, DATES_MONTH_NUM,
			TOT_SCHED_PRODUCTIVE_TIME, ADHERENCE_FLAG)
	SELECT H.STAFF_STAFF_ID, LT.AGENT_ID,
		LT.LAG_DATE,
		TO_CHAR(LT.LAG_DATE,'YYYYMM') AS DATES_MONTH_NUM,
		LT.TOT_SCHED_PRODUCTIVE_TIME,
		LT.ADHERENCE_FLAG
	FROM SC_LAG_TIME LT
	JOIN SCORECARD_HIERARCHY H
		ON H.STAFF_NATID = LT.AGENT_ID
	LEFT OUTER JOIN DP_SCORECARD.SC_EXCLUSIONS_WRK EX
        ON EX.AGENT_ID = LT.AGENT_ID
		AND EX.EXCLUSION_DATE = LT.LAG_DATE
	WHERE EX.EXCLUSION_ID IS NULL
	AND LT.LAG_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	AND (LT.AGENT_ID, LT.LAG_DATE, LT.CREATE_DATE)
		IN ( SELECT AGENT_ID, LAG_DATE, MAX(CREATE_DATE) -- USE THE LATEST UPDATE
				FROM SC_LAG_TIME B
				WHERE LAG_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
				GROUP BY AGENT_ID, LAG_DATE
			);

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_LAG_TIME_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_AGENT_STAT_WRK
	-- **************************************

--	DELETE FROM SC_AGENT_STAT_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--  COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_AGENT_STAT_WRK';

	INSERT INTO DP_SCORECARD.SC_AGENT_STAT_WRK
	(
		AS_DATE,
		AGENT_ID,
		DATES_MONTH_NUM,
		CALLS_ANSWERED,
		SHORT_CALLS_ANSWERED,
		AVERAGE_HANDLE_TIME,
		TOT_RETURN_TO_QUEUE,
		TOT_RETURN_TO_QUEUE_TIMEOUT,
		TOT_RET_TO_QUEUE_TOTAL,
		TOT_SCHED_PRODUCTIVE_TIME,
		ACTUAL_PRODUCTIVE_TIME,
		TALK_TIME,
		WRAP_UP_TIME,
		LOGGED_IN_TIME,
		NOT_READY_TIME,
		BREAK_TIME,
		LUNCH_TIME,
		CALLS_OFFERED,
		EXCLUSION_FLAG,
		AGENT_DISCONNECTED_SHORT_CALLS,
		CONSUMER_DISCONNECTED_SHORT_CALLS
		)
  SELECT
		A_STAT.AS_DATE,
		A_STAT.AGENT_ID,
		TO_CHAR(AS_DATE,'YYYYMM') AS DATES_MONTH_NUM,
		A_STAT.CALLS_ANSWERED,
		A_STAT.SHORT_CALLS_ANSWERED,
		A_STAT.AVERAGE_HANDLE_TIME,
		(A_STAT.TOT_RETURN_TO_QUEUE + A_STAT.TOT_RETURN_TO_QUEUE_TIMEOUT) AS TOT_RETURN_TO_QUEUE,
		A_STAT.TOT_RETURN_TO_QUEUE_TIMEOUT,
		(A_STAT.TOT_RETURN_TO_QUEUE + A_STAT.TOT_RETURN_TO_QUEUE_TIMEOUT) AS TOT_RET_TO_QUEUE_TOTAL,
		A_STAT.TOT_SCHED_PRODUCTIVE_TIME,
		A_STAT.ACTUAL_PRODUCTIVE_TIME,
		A_STAT.TALK_TIME,
		A_STAT.WRAP_UP_TIME,
		A_STAT.LOGGED_IN_TIME,
		A_STAT.NOT_READY_TIME,
		A_STAT.BREAK_TIME,
		A_STAT.LUNCH_TIME,
		A_STAT.CALLS_OFFERED,
		A_STAT.EXCLUSION_FLAG,
		A_STAT.AGENT_DISCONNECTED_SHORT_CALLS,
		A_STAT.CONSUMER_DISCONNECTED_SHORT_CALLS
	FROM SC_AGENT_STAT A_STAT
	LEFT OUTER JOIN SC_EXCLUSIONS_WRK EX
		ON A_STAT.AGENT_ID = EX.AGENT_ID
		AND A_STAT.AS_DATE = EX.EXCLUSION_DATE
	WHERE EX.EXCLUSION_ID IS NULL
	AND A_STAT.AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_AGENT_STAT_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_NON_STD_USE_WRK
	-- **************************************

--	DELETE FROM SC_NON_STD_USE_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_NON_STD_USE_WRK';

	INSERT INTO SC_NON_STD_USE_WRK
	( DATES_MONTH_NUM,
		EMPLOYEE_ID,
		TOT_CALL_RECORDS,
		TOT_CUSTOMER_COUNT,
		TOT_CALL_WRAP_UP_COUNT
	)
	SELECT
		TO_CHAR(NSU.CALL_DATE,'YYYYMM') AS DATES_MONTH_NUM,
		EMPLOYEE_ID,
		COUNT(CALL_RECORD_ID)		AS  TOT_CALL_RECORDS,
		SUM(CUSTOMER_COUNT)			AS TOT_CUSTOMER_COUNT,
		SUM(CALL_WRAP_UP_COUNT)		AS TOT_CALL_WRAP_UP_COUNT
	FROM SC_NON_STD_USE NSU
	LEFT OUTER JOIN SC_EXCLUSIONS_WRK EX
		ON EX.AGENT_ID = NSU.EMPLOYEE_ID
		AND EX.EXCLUSION_DATE = NSU.CALL_DATE
	WHERE EX.EXCLUSION_ID IS NULL
	AND NSU.CALL_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	GROUP BY TO_CHAR(NSU.CALL_DATE,'YYYYMM') , EMPLOYEE_ID;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_NON_STD_USE_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_WUE_METRICS_WRK
	-- **************************************

--	DELETE FROM SC_WUE_METRICS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_WUE_METRICS_WRK';

	INSERT INTO SC_WUE_METRICS_WRK
	( DATES_MONTH_NUM, AGENT_ID, TOT_WRAP_UP_ERROR )
	SELECT TO_CHAR(WUE_DATE,'YYYYMM') AS DATES_MONTH_NUM,
		AGENT_ID,
		SUM(WRAP_UP_ERROR) AS TOT_WRAP_UP_ERROR
	FROM	(
			SELECT
			WUE.WUE_DATE, WUE.AGENT_ID, WUE.WRAP_UP_ERROR
			FROM DP_SCORECARD.SC_WRAP_UP_ERROR WUE
			LEFT OUTER JOIN SC_EXCLUSIONS_WRK EX
				ON EX.AGENT_ID = WUE.AGENT_ID
				AND EX.EXCLUSION_DATE = WUE.WUE_DATE
			WHERE EX.EXCLUSION_ID IS NULL
			AND WUE.WUE_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
   )
    GROUP BY TO_CHAR(WUE_DATE,'YYYYMM'),AGENT_ID;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_WUE_METRICS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));


	-- **************************************
	-- SC_ATTENDANCE_MTHLY_WRK
	-- **************************************

--	DELETE FROM SC_ATTENDANCE_MTHLY_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_ATTENDANCE_MTHLY_WRK';


	INSERT INTO SC_ATTENDANCE_MTHLY_WRK
	(	MANAGER_STAFF_ID,
        STAFF_STAFF_ID,
        DATES_MONTH,
        DATES_MONTH_NUM,
        DATES_YEAR,
        BALANCE,
        TOTAL_BALANCE,
        SC_ATTENDANCE_ID
	)
	SELECT A11.MANAGER_STAFF_ID,
        A11.STAFF_STAFF_ID,
        A11.DATES_MONTH,
        A11.DATES_MONTH_NUM,
        A11.DATES_YEAR,
        A11.BALANCE,
        A11.TOTAL_BALANCE,
        A11.SC_ATTENDANCE_ID
	FROM DP_SCORECARD.SCORECARD_ATTENDANCE_MTHLY A11
	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_ATTENDANCE_MTHLY_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_PERMFORMANCE_TKR_WRK
	-- **************************************

--	DELETE FROM SC_PERMFORMANCE_TKR_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_PERMFORMANCE_TKR_WRK';

	INSERT INTO SC_PERMFORMANCE_TKR_WRK
	(	STAFF_STAFF_ID,
        DATES_MONTH_NUM,
        CORRECTIVE_ACTION_FLAG,
        ONE_ON_ONE_FLAG,
        OBSERVATION_FLAG,
        RECORDED_CALL_REVIEW_FLAG,
        LIVE_PHONE_OBSERVATION_FLAG
	)
    SELECT DISTINCT PT.STAFF_ID AS STAFF_STAFF_ID,
                  TO_CHAR(TRUNC(PT_ENTRY_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
                  MAX(CASE WHEN DISCUSSION_TOPIC = 'Corrective Action' then 1 else 0 end )      AS CORRECTIVE_ACTION_FLAG,
                  MAX(CASE WHEN DISCUSSION_TOPIC = 'One on One' then 1 else 0 end )             AS ONE_ON_ONE_FLAG,
                  MAX(CASE WHEN DISCUSSION_TOPIC = 'Observation' then 1 else 0 end )            AS OBSERVATION_FLAG,
                  MAX(CASE WHEN DISCUSSION_TOPIC = 'Recorded Call Review' then 1 else 0 end )   AS RECORDED_CALL_REVIEW_FLAG,
                  MAX(CASE WHEN DISCUSSION_TOPIC = 'Live Phone Observation' then 1 else 0 end ) AS LIVE_PHONE_OBSERVATION_FLAG
    FROM DP_SCORECARD.SC_PERFORMANCE_TRACKER  PT
    JOIN DP_SCORECARD.SC_DISCUSSION_LKUP DL ON PT.DL_ID = DL.DL_ID
    WHERE PT_ENTRY_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	AND DISCUSSION_TOPIC IN (
                    'Corrective Action',
                    'One on One',
                    'Observation',
                    'Recorded Call Review',
                    'Live Phone Observation'
                    )
	GROUP BY STAFF_ID, TO_CHAR(TRUNC(PT_ENTRY_DATE),'YYYYMM');

	COMMIT;


	DBMS_OUTPUT.PUT_LINE('SC_PERMFORMANCE_TKR_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_SHORT_CALL_AGENT_COUNT_WRK
	-- **************************************

--	DELETE FROM SC_SHORT_CALL_AGENT_COUNT_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_SHORT_CALL_AGENT_COUNT_WRK';

	INSERT INTO SC_SHORT_CALL_AGENT_COUNT_WRK
	(
		STAFF_STAFF_ID,
		DATES_MONTH_NUM,
		SHORT_CALL_AGENT_COUNT
		)
	SELECT
		STAFF_STAFF_ID,
		DATES_MONTH_NUM,
		COUNT(DISTINCT AGENT_ID) AS SHORT_CALL_AGENT_COUNT
	FROM
		( SELECT
			H.STAFF_STAFF_ID,
			AGENT_ID,
			TO_CHAR(TRUNC(AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
			TRUNC(AS_DATE),
			SHORT_CALLS_ANSWERED
			FROM SC_AGENT_STAT_WRK S
			JOIN DP_SCORECARD.SCORECARD_HIERARCHY H ON H.STAFF_NATID = S.AGENT_ID
			WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM
			AND SHORT_CALLS_ANSWERED > 10
		)
	GROUP BY STAFF_STAFF_ID, DATES_MONTH_NUM;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_SHORT_CALL_AGENT_COUNT_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_INCDEFS_WRK
	-- **************************************

--	DELETE FROM SC_INCDEFS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_INCDEFS_WRK';

	INSERT INTO SC_INCDEFS_WRK
	(
    STAFF_ID,
    DATES_MONTH_NUM,
    DAYS_INCDEF_COMPLETED,
    INCIDENTS_COMPLETED,
	DAYS_INCIDENTS_COMPLETED,
    DEFECTS_COMPLETED,
	DAYS_DEFECTS_COMPLETED
	)
	SELECT STAFF_ID, TO_CHAR(EVENT_DATE,'YYYYMM') AS DATE_MONT_NUM,
        SUM(DAYS_DEF_INC_COMPLETED) AS DAYS_DEF_INC_COMPLETED,
        SUM(INCIDENTS_COMPLETED) AS INCIDENTS_COMPLETED,
        SUM(case when nvl(DAY_INCIDENTS_COMPLETED,0) = 0 then 0 else 1 end) AS DAYS_INCIDENTS_COMPLETED,
        SUM(DEFECTS_COMPLETED) AS DEFECTS_COMPLETED,
        SUM(case when nvl(DAY_DEFECT_COMPLETED,0) = 0 then 0 else 1 end) AS DAYS_DEFECT_COMPLETED
	FROM (
		SELECT  A11.STAFF_ID,
			A11.EVENT_DATE,
			COUNT(DISTINCT A11.EVENT_DATE) AS DAYS_DEF_INC_COMPLETED,
			SUM((CASE WHEN A11.EVENT_ID IN (1374, 1375, 1376, 1377, 1378, 1379) THEN TOTAL_LOGGED ELSE 0 END)) INCIDENTS_COMPLETED,
			SUM((CASE WHEN A11.EVENT_ID IN (1374, 1375, 1376, 1377, 1378, 1379) THEN 1 ELSE 0 END)) DAY_INCIDENTS_COMPLETED,
			SUM((CASE WHEN A11.EVENT_ID IN (1373) THEN TOTAL_LOGGED ELSE 0 END)) DEFECTS_COMPLETED,
			SUM( CASE WHEN A11.EVENT_ID IN (1373) THEN 1 ELSE 0 END ) AS DAY_DEFECT_COMPLETED
		FROM DP_SCORECARD.PP_WFM_DAILY_SUMMARY_WRK A11
		WHERE 1=1
		AND A11.EVENT_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
		AND (A11.EVENT_ID IN (1374, 1375, 1376, 1377, 1378, 1379)
			OR A11.EVENT_ID IN (1373)
			)
		GROUP BY A11.STAFF_ID, A11.EVENT_DATE
		)
	GROUP BY STAFF_ID, TO_CHAR(EVENT_DATE,'YYYYMM');

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_INCDEFS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_CALL_DAYS_WRK
	-- **************************************

--	DELETE FROM SC_CALL_DAYS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_CALL_DAYS_WRK';

	INSERT INTO SC_CALL_DAYS_WRK
	( AGENT_ID,
      DATES_MONTH_NUM,
      DAYS_SHORT_CALLS_GT_10,
      DAYS_CALLS_ANSWERED
	)
	SELECT
        AGENT_ID,
        DATES_MONTH_NUM,
        COUNT(SHORT_CALLS) AS DAYS_SHORT_CALLS_GT_10,
        COUNT(TOT_CALLS)  AS DAYS_CALLS_ANSWERED
	FROM (
		SELECT AGENT_ID,
			AS_DATE,
			CASE WHEN SUM(SHORT_CALLS_ANSWERED) > 10 THEN 1 ELSE NULL END SHORT_CALLS,
			SUM(CALLS_ANSWERED) TOT_CALLS,
		TO_CHAR(TRUNC(AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM
		FROM SC_AGENT_STAT_WRK
		GROUP BY AGENT_ID, AS_DATE
        )
	GROUP BY AGENT_ID, DATES_MONTH_NUM;

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_CALL_DAYS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_TIME_METRICS_WRK
	-- **************************************

--	DELETE FROM SC_TIME_METRICS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_TIME_METRICS_WRK';

	INSERT INTO SC_TIME_METRICS_WRK
	(
		DATES_MONTH_NUM,
		AGENT_ID,
		STAFF_STAFF_ID,
		EXCLUSION_FLAG,
		TOT_CALLS_ANSWERED,
		TOT_SHORT_CALLS_ANSWERED,
		TOT_TOT_RETURN_TO_QUEUE,
		TOT_RETURN_TO_QUEUE_TIMEOUT,
		TOT_AVERAGE_HANDLE_TIME,
		TOT_SCHED_PRODUCTIVE_TIME,
		TOT_ACTUAL_PRODUCTIVE_TIME,
		TOT_TALK_TIME,
		TOT_WRAP_UP_TIME,
		TOT_LOGGED_IN_TIME,
		TOT_NOT_READY_TIME,
		TOT_BREAK_TIME,
		TOT_LUNCH_TIME,
		TOT_HANDLE_TIME,
		TOT_HANDLE_TIME_COUNT,
		TRTQ,
		CALLS_OFFERED,
		AGENT_DISCONNECTED_SHORT_CALL,
		CONSUMER_DISCONNECTED_SHORT_CALL
	)
   SELECT
		TO_CHAR(TRUNC(A11.AS_DATE), 'YYYYMM') AS DATES_MONTH_NUM,
		TO_CHAR(A11.AGENT_ID) AGENT_ID,
		H.STAFF_STAFF_ID,
		NVL(A11.EXCLUSION_FLAG,'N')   AS EXCLUSION_FLAG,
		SUM(CALLS_ANSWERED) TOT_CALLS_ANSWERED,
		SUM(SHORT_CALLS_ANSWERED) TOT_SHORT_CALLS_ANSWERED,
		SUM(TOT_RETURN_TO_QUEUE) TOT_TOT_RETURN_TO_QUEUE,
		SUM(TOT_RETURN_TO_QUEUE_TIMEOUT) TOT_RETURN_TO_QUEUE_TIMEOUT,
		AVG(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_AVERAGE_HANDLE_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_SCHED_PRODUCTIVE_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(ACTUAL_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_ACTUAL_PRODUCTIVE_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(TALK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(TALK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(TALK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(TALK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_TALK_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(WRAP_UP_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(WRAP_UP_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(WRAP_UP_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(WRAP_UP_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_WRAP_UP_TIME,
		 -- 2017/10/19 TOT_LOGGED_IN_TIME AND TOT_NOT_READY_TIME MOVED TO ADHERENCE
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(LOGGED_IN_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(LOGGED_IN_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(LOGGED_IN_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(LOGGED_IN_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_LOGGED_IN_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(NOT_READY_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(NOT_READY_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(NOT_READY_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(NOT_READY_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_NOT_READY_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(BREAK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(BREAK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(BREAK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(BREAK_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_BREAK_TIME,
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(LUNCH_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(LUNCH_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(LUNCH_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(LUNCH_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_LUNCH_TIME,
		--------------------------
		SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
			EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
			EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
			EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(AVERAGE_HANDLE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND')) ) TOT_HANDLE_TIME,
		COUNT(1) AS TOT_HANDLE_TIME_COUNT,
		SUM(TOT_RET_TO_QUEUE_TOTAL) TRTQ,
		SUM(CALLS_OFFERED)  CALLS_OFFERED,
		SUM(AGENT_DISCONNECTED_SHORT_CALLS)      AGENT_DISCONNECTED_SHORT_CALL,
		SUM(CONSUMER_DISCONNECTED_SHORT_CALLS)   CONSUMER_DISCONNECTED_SHORT_CALL
		 --------------------------
    FROM DP_SCORECARD.SCORECARD_HIERARCHY H
    JOIN SC_AGENT_STAT_WRK A11
		ON H.STAFF_NATID =  A11.AGENT_ID
    GROUP BY TO_CHAR(TRUNC(A11.AS_DATE), 'YYYYMM'), H.STAFF_STAFF_ID, A11.AGENT_ID, NVL(A11.EXCLUSION_FLAG,'N');

 	DBMS_OUTPUT.PUT_LINE('SC_TIME_METRICS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));

	-- **************************************
	-- SC_LAG_METRICS_WRK
	-- **************************************

--	DELETE FROM SC_LAG_METRICS_WRK
--	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

--	COMMIT;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE DP_SCORECARD.SC_LAG_METRICS_WRK';

	INSERT INTO SC_LAG_METRICS_WRK
	( 	DATES_MONTH_NUM,
		AGENT_ID,
		LAG_TIME_TOT_SCHED_PROD_TIME
	 )
	SELECT
		TO_CHAR(LT.LAG_DATE, 'YYYYMM') AS DATES_MONTH_NUM,
        LT.AGENT_ID,
        SUM(EXTRACT( DAY FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*24*60*60 +
         EXTRACT( HOUR FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60*60 +
         EXTRACT( MINUTE FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))*60 +
         EXTRACT( SECOND FROM NUMTODSINTERVAL (((TO_DATE(TOT_SCHED_PRODUCTIVE_TIME,'HH24:MI:SS') - TO_DATE('00:00:00','HH24:MI:SS')) * 86400), 'SECOND'))
         ) AS LAG_TIME_TOT_SCHED_PROD_TIME
	FROM SC_LAG_TIME_WRK 	LT
	WHERE (AGENT_ID, LAG_DATE)
    IN ( SELECT -- ONLY INCLUDE LAG_TIME IF THERE IS AGENT_STAT DATA
				AGENT_ID, AS_DATE
		 FROM SC_AGENT_STAT_WRK
		)
	GROUP BY LT.AGENT_ID, TO_CHAR(LT.LAG_DATE, 'YYYYMM');

	COMMIT;

	DBMS_OUTPUT.PUT_LINE('SC_LAG_METRICS_WRK CREATED '||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));



--*************************************************************
--*************************************************************
--*************************************************************
	DELETE FROM DP_SCORECARD.SC_SUMMARY_CC_WRK
	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

    COMMIT;

   INSERT INTO SC_SUMMARY_CC_WRK (STAFF_STAFF_ID, STAFF_NATID,
   CALC_DATE_TM,
	STAFF_STAFF_NAME,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	TOT_CALLS_ANSWERED,
	TOT_SHORT_CALLS_ANSWERED,
	TOT_TOT_RETURN_TO_QUEUE,
	TOT_RETURN_TO_QUEUE_TIMEOUT,
	TOT_AVERAGE_HANDLE_TIME,
	TOT_SCHED_PRODUCTIVE_TIME,
	TOT_ACTUAL_PRODUCTIVE_TIME,
	TOT_TALK_TIME,
	TOT_WRAP_UP_TIME,
	TOT_LOGGED_IN_TIME,
	TOT_NOT_READY_TIME,
	TOT_BREAK_TIME,
	TOT_LUNCH_TIME,
	QCS_PERFORMED,
	AVG_QC_SCORE,
	TOT_INCIDENTS_COMPLETED,
	DAYS_INCIDENTS_COMPLETED,
	DAYS_DEF_INC_COMPLETED,
	TOT_DEFECTS_COMPLETED,
	DAYS_DEFECTS_COMPLETED,
	LAG_TIME_TOT_SCHED_PROD_TIME,
	TOT_CALL_RECORDS,
	TOT_CUSTOMER_COUNT,
	TOT_CALL_WRAP_UP_COUNT,
	TOT_WRAP_UP_ERROR,
	DAYS_SHORT_CALLS_GT_10,
	DAYS_CALLS_ANSWERED,
	ADHERENCE,
	CORRECTIVE_ACTION_FLAG,
	ONE_ON_ONE_FLAG,
	OBSERVATION_FLAG,
	RECORDED_CALL_REVIEW_FLAG,
	LIVE_PHONE_OBSERVATION_FLAG,
	----------------
	SUPERVISOR_STAFF_ID,
	SUPERVISOR_NATID,
	BUILDING,
	DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	TOT_HANDLE_TIME,
	TOT_HANDLE_TIME_COUNT,
	TRTQ,
	CALLS_OFFERED,
	SHORT_CALL_AGENT_COUNT,
	AGENT_DISCONNECTED_SHORT_CALLS,
	CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	SUM_QC_SCORE,
	COUNT_QC_SCORE,
	QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly
	AVG_ATTENDANCE_BALANCE,
	AVG_ATTENDANCE_TOTAL_BALANCE,
	STAFF_COUNT,
	ADHERENCE_TOT_LOGGED_IN_TIME,
	ADHERENCE_TOT_NOT_READY_TIME,
   -- From WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET
	)
WITH
----------------------
STAFF_FILTER AS
	(
	SELECT SUPERVISOR_STAFF_ID, SUPERVISOR_NATID, STAFF_STAFF_ID, STAFF_NATID, DATES_MONTH_NUM,
        STAFF_STAFF_NAME, STAFF_COUNT, BUILDING, DEPARTMENT
	FROM sc_staff_filter_wrk
	),
 INC_DEF_METRICS AS (
	SELECT STAFF_ID, DATES_MONTH_NUM,
        DAYS_INCDEF_COMPLETED  AS DAYS_INC_DEF_COMPLETED,
        INCIDENTS_COMPLETED      AS TOT_INCIDENTS_COMPLETED,
        DAYS_INCIDENTS_COMPLETED,
        DEFECTS_COMPLETED        AS TOT_DEFECTS_COMPLETED,
        DAYS_DEFECTS_COMPLETED
	FROM SC_INCDEFS_WRK
 ),
 CUST_METRICS AS
 (
    SELECT DISTINCT
      A11.DATES_MONTH_NUM,
--      A10.STAFF_STAFF_ID,
      A11.EMPLOYEE_ID,
      A11.TOT_CALL_RECORDS,
      A11.TOT_CUSTOMER_COUNT,
      A11.TOT_CALL_WRAP_UP_COUNT
--    FROM DP_SCORECARD.SCORECARD_HIERARCHY A10
	FROM SC_NON_STD_USE_WRK A11
--		ON TO_CHAR(A10.STAFF_NATID) = A11.EMPLOYEE_ID
 ),
 Adherence as
 (
	SELECT distinct
		to_char(TRUNC(AS_DATE), 'YYYYMM') as dates_month_num,
		to_char(AGENT_ID) AGENT_ID,
	--	a_s.staff_staff_id,
		sum(extract( day from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(LOGGED_IN_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) ADHERENCE_TOT_LOGGED_IN_TIME,
		sum(extract( day from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*24*60*60 +
			extract( hour from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60*60 +
			extract( minute from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second'))*60 +
			extract( second from NUMTODSINTERVAL (((to_date(NOT_READY_TIME,'HH24:MI:SS') - to_date('00:00:00','HH24:MI:SS')) * 86400), 'second')) ) ADHERENCE_TOT_NOT_READY_TIME
    FROM SC_AGENT_STAT_WRK
          where (agent_id, trunc(as_date))
            in ( select agent_id, trunc(lag_date)
            from SC_LAG_TIME_WRK)
    group by to_char(TRUNC(AS_DATE), 'YYYYMM'), AGENT_ID
 ),
Adherence_metric as
 (
   SELECT distinct
      ADH.dates_month_num,
      ADH.AGENT_ID,
 --     ADH.staff_staff_id,
      ADH.ADHERENCE_TOT_LOGGED_IN_TIME,
      ADH.ADHERENCE_TOT_NOT_READY_TIME,
      LM.LAG_TIME_TOT_SCHED_PROD_TIME,
	  case when nvl(LM.LAG_TIME_TOT_SCHED_PROD_TIME,0) >  0
	  then
		((ADH.ADHERENCE_TOT_LOGGED_IN_TIME
			- ADH.ADHERENCE_TOT_NOT_READY_TIME)
			/LM.LAG_TIME_TOT_SCHED_PROD_TIME)
		else null end as ADHERENCE
      FROM Adherence ADH
      join SC_LAG_metrics_WRK LM on ADH.AGENT_ID=LM.AGENT_id
      and ADH.dates_month_num=LM.dates_month_num
 ),
 SCORECARD_QUALITY
 AS (
 SELECT AGENT_Id,
       DATES_MONTH_NUM, --to_char(TRUNC(V.EVAL_DATE), 'YYYYMM') as dates_month_num,
       avg_qc_score,
       sum_qc_score,
       count_qc_score,
       qcs_performed,
       qcs_remaining
  from dp_scorecard.SC_SCORECARD_QUALITY_WRK V
),
WEBCHAT_ACTUALS_GRP AS
(
SELECT WEBCHAT_STAFF_ID,
    TO_CHAR(WEBCHAT_DATE,'yyyymm')  		AS DATES_MONTH_NUM,
    SUM(NVL(ASSIGNED,0))                   	AS WEBCHAT_ASSIGNED,
    SUM(NVL(TRANSFERRED,0))                	AS WEBCHAT_TRANSFERRED,
    SUM(NVL(CONFERENCED,0))               	AS WEBCHAT_CONFERENCED,
    SUM(NVL(TOTAL_NUMBER,0))               	AS WEBCHAT_TOTAL_NUMBER
FROM WEBCHAT_ACTUALS WCA
left outer join SC_exclusions_WRK EX on ex.agent_id = wca.WEBCHAT_EID
	and ex.exclusion_date = wca.WEBCHAT_DATE
WHERE WEBCHAT_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH  -- ADDED 20190725
and ex.exclusion_id is null
GROUP BY WEBCHAT_STAFF_ID, TO_CHAR(WEBCHAT_DATE,'yyyymm')
),
--STAFF_LOCATION AS
-- (
--  -- GET THE BUILDING AND DEPARTMENT IF THERE IS
--  -- ONLY 1 SET OF BUILDING AND DEPARTMENT FOR THE STAFF_ID
--  SELECT STAFF_STAFF_ID, SUPERVISOR_STAFF_ID, SUPERVISOR_NATID, BUILDING, DEPARTMENT
--  FROM DP_SCORECARD.SCORECARD_HIERARCHY
--  ),
BREAK_CONFORMANCE  AS
( SELECT TO_CHAR(AS_DATE,'YYYYMM') AS DATES_MONTH_NUM,
	bc.AGENT_ID,
	SUM(EVENTS_SCHEDULED) AS CURRENT_MONTH_EVENTS_SCHEDULED,
	SUM(EVENTS_MET)       AS CURRENT_MONTH_EVENTS_MET
	FROM SC_AGENT_BREAK_CONFORMANCE BC
	left outer join SC_exclusions_WRK EX
        on ex.agent_id = BC.AGENT_ID
	and ex.exclusion_date = BC.AS_DATE
	WHERE AS_DATE BETWEEN LV_FIRST_DAY_OF_MONTH AND LV_LAST_DAY_OF_MONTH
	and ex.exclusion_id is null
    GROUP BY TO_CHAR(bc.AS_DATE,'YYYYMM'), bc.AGENT_ID
)
-----------------------------------------
------------------------------------------------
-- NOTE The order of the following fields
-- MUST match the INSERT statement
------------------------------------------------
 SELECT
    STAFF_FILTER.staff_staff_id,
		STAFF_FILTER.staff_natid,
		SYSDATE,  -- CALC_DATE_TM
		STAFF_FILTER.staff_staff_name,
   LV_DATES_MONTH,
   LV_DATES_MONTH_NUM,
   LV_DATES_YEAR,
   NVL(SC_TIME_metrics_WRK.EXCLUSION_FLAG,'N'),
   SC_TIME_metrics_WRK.TOT_CALLS_ANSWERED,
   SC_TIME_metrics_WRK.TOT_SHORT_CALLS_ANSWERED,
   SC_TIME_metrics_WRK.TOT_TOT_RETURN_TO_QUEUE,
   SC_TIME_metrics_WRK.TOT_RETURN_TO_QUEUE_TIMEOUT,
   SC_TIME_metrics_WRK.TOT_AVERAGE_HANDLE_TIME,
   SC_TIME_metrics_WRK.TOT_SCHED_PRODUCTIVE_TIME,
   SC_TIME_metrics_WRK.TOT_ACTUAL_PRODUCTIVE_TIME,
   SC_TIME_metrics_WRK.TOT_TALK_TIME,
   SC_TIME_metrics_WRK.TOT_WRAP_UP_TIME,
   SC_TIME_metrics_WRK.TOT_LOGGED_IN_TIME,
   SC_TIME_metrics_WRK.TOT_NOT_READY_TIME,
   SC_TIME_metrics_WRK.TOT_BREAK_TIME,
   SC_TIME_metrics_WRK.TOT_LUNCH_TIME,
   scorecard_quality.qcs_performed,
   scorecard_quality.avg_qc_score,
   INC_DEF_metrics.TOT_INCIDENTS_COMPLETED,
   INC_DEF_metrics.DAYS_INCIDENTS_COMPLETED,
   INC_DEF_METRICS.DAYS_INC_DEF_COMPLETED,
   INC_DEF_metrics.TOT_DEFECTS_COMPLETED,
   INC_DEF_metrics.DAYS_DEFECTS_COMPLETED,
   SC_LAG_metrics_WRK.LAG_TIME_TOT_SCHED_PROD_TIME,
   CUST_metrics.TOT_CALL_RECORDS,
   CUST_metrics.TOT_CUSTOMER_COUNT,
   CUST_metrics.TOT_CALL_WRAP_UP_COUNT,
   SC_WUE_metrics_WRK.TOT_WRAP_UP_ERROR,
   SC_CALL_days_WRK.Days_Short_Calls_GT_10,
   SC_CALL_days_WRK.DAYS_CALLS_ANSWERED,
   Adherence_metric.ADHERENCE,
   SC_PERMFORMANCE_TKR_WRK.corrective_action_flag,
   SC_PERMFORMANCE_TKR_WRK.one_on_one_flag,
   SC_PERMFORMANCE_TKR_WRK.observation_flag,
   SC_PERMFORMANCE_TKR_WRK.Recorded_Call_Review_flag,
   SC_PERMFORMANCE_TKR_WRK.Live_Phone_Observation_flag,
   --mer.mer_flag,
   -------------------------------------
	STAFF_FILTER.SUPERVISOR_STAFF_ID,
	STAFF_FILTER.SUPERVISOR_NATID,
	STAFF_FILTER.BUILDING,
	STAFF_FILTER.DEPARTMENT,
	------------------------------------
	-- From SC_AGENT_STAT_SV
	SC_TIME_METRICS_WRK.TOT_HANDLE_TIME,
	SC_TIME_METRICS_WRK.TOT_HANDLE_TIME_COUNT,
	SC_TIME_METRICS_WRK.TRTQ,
	SC_TIME_METRICS_WRK.CALLS_OFFERED,
	SC_SHORT_CALL_AGENT_COUNT_WRK.SHORT_CALL_AGENT_COUNT,
	SC_TIME_METRICS_WRK.AGENT_DISCONNECTED_SHORT_CALL,
	SC_TIME_METRICS_WRK.CONSUMER_DISCONNECTED_SHORT_CALL,
	------------------------------------
	-- FROM SCORECARD_QUALITY_SV
	SCORECARD_QUALITY.SUM_QC_SCORE,
	SCORECARD_QUALITY.COUNT_QC_SCORE,
	SCORECARD_QUALITY.QCS_REMAINING,
	------------------------------------
	-- From Attendance - scorecard_attendance_mthly
	SC_ATTENDANCE_MTHLY_WRK.BALANCE,
	SC_ATTENDANCE_MTHLY_WRK.TOTAL_BALANCE,
	STAFF_FILTER.STAFF_COUNT,
    Adherence_metric.ADHERENCE_TOT_LOGGED_IN_TIME,
    Adherence_metric.ADHERENCE_TOT_NOT_READY_TIME,
	-- from WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET --,
FROM 	STAFF_FILTER
--LEFT OUTER JOIN INC_METRICS ON INC_METRICS.STAFF_STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
--LEFT OUTER JOIN DEF_METRICS ON DEF_METRICS.STAFF_ID	= STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN INC_DEF_METRICS ON INC_DEF_METRICS.STAFF_ID	= STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN CUST_METRICS ON CUST_METRICS.EMPLOYEE_ID	= STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN ADHERENCE ON ADHERENCE.AGENT_ID	= STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN ADHERENCE_METRIC ON ADHERENCE_METRIC.AGENT_ID	= STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN SCORECARD_QUALITY ON SCORECARD_QUALITY.AGENT_ID	= STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN WEBCHAT_ACTUALS_GRP ON WEBCHAT_ACTUALS_GRP.WEBCHAT_STAFF_ID	= STAFF_FILTER.STAFF_STAFF_ID
--LEFT OUTER JOIN STAFF_LOCATION ON STAFF_LOCATION.STAFF_STAFF_ID	=  STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN SC_ATTENDANCE_MTHLY_WRK ON SC_ATTENDANCE_MTHLY_WRK.STAFF_STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN BREAK_CONFORMANCE  ON BREAK_CONFORMANCE.AGENT_ID	= STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN SC_TIME_METRICS_WRK ON SC_TIME_METRICS_WRK.STAFF_STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN SC_SHORT_CALL_AGENT_COUNT_WRK ON SC_SHORT_CALL_AGENT_COUNT_WRK.STAFF_STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN SC_PERMFORMANCE_TKR_WRK ON SC_PERMFORMANCE_TKR_WRK.STAFF_STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
LEFT OUTER JOIN SC_CALL_DAYS_WRK ON SC_CALL_DAYS_WRK.AGENT_ID = STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN SC_WUE_METRICS_WRK ON SC_WUE_METRICS_WRK.AGENT_ID = STAFF_FILTER.STAFF_NATID
LEFT OUTER JOIN SC_LAG_METRICS_WRK ON SC_LAG_METRICS_WRK.AGENT_ID = STAFF_FILTER.STAFF_NATID
--LEFT OUTER JOIN SC_INCDEFS_WRK ON SC_INCDEFS_WRK.STAFF_ID = STAFF_FILTER.STAFF_STAFF_ID
;

    COMMIT;

END LOOP;

COMMIT;

--------------------------------------------------------
-- SECOND LOOP TO POPULATE SC_SUMMARY_CC
--------------------------------------------------------
DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||' START of Second Loop' );

FOR MTH_LOOP IN reverse ADD_MTH_START .. ADD_MTH_STOP
	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 		-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          	-- FIRST_DAY_OF_MONTH,
            TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP))+1)-(1/(24*60*60)),        -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), 	-- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM'), 	-- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month'), 			-- DATES_MONTH,
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month YYYY') 		-- DATES_YEAR,
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM,
				LV_DATES_MONTH,
				LV_DATES_YEAR
			FROM DUAL;


	DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||'  MTH_LOOP='||MTH_LOOP
	||' DATES_MTH_NUM='||LV_DATES_MONTH_NUM
	||' FIRST_DAY_OF_MONTH='||LV_FIRST_DAY_OF_MONTH
	||' LAST_DAY_OF_MONTH='||LV_LAST_DAY_OF_MONTH
	||' FIRST_PRIOR_MONTH='||LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
	||' SECOND_PRIOR_MONTH='||LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM);



DELETE FROM DP_SCORECARD.SC_SUMMARY_CC
WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

COMMIT;

INSERT INTO DP_SCORECARD.SC_SUMMARY_CC
(
    STAFF_STAFF_ID,
    STAFF_NATID,
	STAFF_STAFF_NAME,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	TOT_CALLS_ANSWERED,
	TOT_SHORT_CALLS_ANSWERED,
	TOT_TOT_RETURN_TO_QUEUE,
	TOT_RETURN_TO_QUEUE_TIMEOUT,
	TOT_AVERAGE_HANDLE_TIME,
	TOT_SCHED_PRODUCTIVE_TIME,
	TOT_ACTUAL_PRODUCTIVE_TIME,
	TOT_TALK_TIME,
	TOT_WRAP_UP_TIME,
	TOT_LOGGED_IN_TIME,
	TOT_NOT_READY_TIME,
	TOT_BREAK_TIME,
	TOT_LUNCH_TIME,
	QCS_PERFORMED,
	AVG_QC_SCORE,
	TOT_INCIDENTS_COMPLETED,
	DAYS_INCIDENTS_COMPLETED,
	DAYS_DEF_INC_COMPLETED,
	TOT_DEFECTS_COMPLETED,
	DAYS_DEFECTS_COMPLETED,
	LAG_TIME_TOT_SCHED_PROD_TIME,
	TOT_CALL_RECORDS,
	TOT_CUSTOMER_COUNT,
	TOT_CALL_WRAP_UP_COUNT,
	TOT_WRAP_UP_ERROR,
	DAYS_SHORT_CALLS_GT_10,
	DAYS_CALLS_ANSWERED,
	ADHERENCE,
	CORRECTIVE_ACTION_FLAG,
	ONE_ON_ONE_FLAG,
	OBSERVATION_FLAG,
	RECORDED_CALL_REVIEW_FLAG,
	LIVE_PHONE_OBSERVATION_FLAG,
	--   Mer_Flag,
	----------------
	SUPERVISOR_STAFF_ID,
	SUPERVISOR_NATID,
	BUILDING,
	DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	TOT_HANDLE_TIME,
	TOT_HANDLE_TIME_COUNT,
	TRTQ,
	CALLS_OFFERED,
	SHORT_CALL_AGENT_COUNT,
	AGENT_DISCONNECTED_SHORT_CALLS,
	CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	SUM_QC_SCORE,
	COUNT_QC_SCORE,
	QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly
	AVG_ATTENDANCE_BALANCE,
	AVG_ATTENDANCE_TOTAL_BALANCE,
	STAFF_COUNT,
	ADHERENCE_TOT_LOGGED_IN_TIME,
	ADHERENCE_TOT_NOT_READY_TIME,
   -- From WEBCHAT_ACTUALS
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	CURRENT_MONTH_EVENTS_SCHEDULED,
	CURRENT_MONTH_EVENTS_MET,
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	FIRST_PRIOR_MONTH_EVENTS_MET,
	SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	SECOND_PRIOR_MONTH_EVENTS_MET,
	-- ADHERRENCE FROM SC_SUMMARY_CC_WRK
    FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	CC_QIP_FLAG
	)
WITH
-----------------------------------------
PRIOR_MONTHS_ADHERENCE AS
(
SELECT
--	SC_SUMMARY_CC_WRK.DATES_MONTH_NUM                                          	AS DATES_MONTH_NUM,
    SC_SUMMARY_CC_WRK.STAFF_STAFF_ID                                           AS STAFF_STAFF_ID,
	------------------
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_SCHEDULED,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_MET,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_EVENTS_MET,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_SCHEDULED,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.CURRENT_MONTH_EVENTS_MET,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_EVENTS_MET,
	------------------
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_LOGGED_IN_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_NOT_READY_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.LAG_TIME_TOT_SCHED_PROD_TIME,0)
			ELSE 0 END)                                                     AS FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
			----
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_LOGGED_IN_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.ADHERENCE_TOT_NOT_READY_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
	sum(CASE WHEN SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
		THEN NVL(SC_SUMMARY_CC_WRK.LAG_TIME_TOT_SCHED_PROD_TIME,0)
			ELSE 0 END)                                                     AS SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
FROM SC_SUMMARY_CC_WRK
    WHERE   SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
        OR  SC_SUMMARY_CC_WRK.DATES_MONTH_NUM = LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
GROUP BY
--	SC_SUMMARY_CC_WRK.DATES_MONTH_NUM,
	SC_SUMMARY_CC_WRK.STAFF_STAFF_ID
)
-----------------------------------
SELECT
	WRK.STAFF_STAFF_ID,
	WRK.STAFF_NATID,
	WRK.STAFF_STAFF_NAME,
	LV_DATES_MONTH,
	WRK.DATES_MONTH_NUM,
	LV_DATES_YEAR,
	WRK.EXCLUSION_FLAG,
	WRK.TOT_CALLS_ANSWERED,
	WRK.TOT_SHORT_CALLS_ANSWERED,
	WRK.TOT_TOT_RETURN_TO_QUEUE,
	WRK.TOT_RETURN_TO_QUEUE_TIMEOUT,
	WRK.TOT_AVERAGE_HANDLE_TIME,
	WRK.TOT_SCHED_PRODUCTIVE_TIME,
	WRK.TOT_ACTUAL_PRODUCTIVE_TIME,
	WRK.TOT_TALK_TIME,
	WRK.TOT_WRAP_UP_TIME,
	WRK.TOT_LOGGED_IN_TIME,
	WRK.TOT_NOT_READY_TIME,
	WRK.TOT_BREAK_TIME,
	WRK.TOT_LUNCH_TIME,
	WRK.QCS_PERFORMED,
	WRK.AVG_QC_SCORE,
	WRK.TOT_INCIDENTS_COMPLETED,
	WRK.DAYS_INCIDENTS_COMPLETED,
	WRK.DAYS_DEF_INC_COMPLETED,
	WRK.TOT_DEFECTS_COMPLETED,
	WRK.DAYS_DEFECTS_COMPLETED,
	WRK.LAG_TIME_TOT_SCHED_PROD_TIME,
	WRK.TOT_CALL_RECORDS,
	WRK.TOT_CUSTOMER_COUNT,
	WRK.TOT_CALL_WRAP_UP_COUNT,
	WRK.TOT_WRAP_UP_ERROR,
	WRK.DAYS_SHORT_CALLS_GT_10,
	WRK.DAYS_CALLS_ANSWERED,
	WRK.ADHERENCE,
	WRK.CORRECTIVE_ACTION_FLAG,
	WRK.ONE_ON_ONE_FLAG,
	WRK.OBSERVATION_FLAG,
	WRK.RECORDED_CALL_REVIEW_FLAG,
	WRK.LIVE_PHONE_OBSERVATION_FLAG,
	--   Mer_Flag,
	----------------
	WRK.SUPERVISOR_STAFF_ID,
	WRK.SUPERVISOR_NATID,
	WRK.BUILDING,
	WRK.DEPARTMENT,
	------------------
	-- From SC_AGENT_STAT_SV
	WRK.TOT_HANDLE_TIME,
	WRK.TOT_HANDLE_TIME_COUNT,
	WRK.TRTQ,
	WRK.CALLS_OFFERED,
	WRK.SHORT_CALL_AGENT_COUNT,
	WRK.AGENT_DISCONNECTED_SHORT_CALLS,
	WRK.CONSUMER_DISCONNECTED_SHORT_CALLS,
	-- FROM SCORECARD_QUALITY_SV
	WRK.SUM_QC_SCORE,
	WRK.COUNT_QC_SCORE,
	WRK.QCS_REMAINING,
	-- From Attendance - scorecard_attendance_mthly
	WRK.AVG_ATTENDANCE_BALANCE,
	WRK.AVG_ATTENDANCE_TOTAL_BALANCE,
	WRK.STAFF_COUNT,
	WRK.ADHERENCE_TOT_LOGGED_IN_TIME,
	WRK.ADHERENCE_TOT_NOT_READY_TIME,
    -- From WEBCHAT_ACTUALS
	WRK.WEBCHAT_ASSIGNED,
	WRK.WEBCHAT_TRANSFERRED,
	WRK.WEBCHAT_CONFERENCED,
	WRK.WEBCHAT_TOTAL_NUMBER,
	-- from SC_AGENT_BREAK_CONFORMANCE
	WRK.CURRENT_MONTH_EVENTS_SCHEDULED,
	WRK.CURRENT_MONTH_EVENTS_MET,
	-- from SC_AGENT_BREAK_CONFORMANCE for 3 months
	PMA.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,
	PMA.FIRST_PRIOR_MONTH_EVENTS_MET,
	PMA.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,
	PMA.SECOND_PRIOR_MONTH_EVENTS_MET,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    PMA.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,
    PMA.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	0
FROM DP_SCORECARD.SC_SUMMARY_CC_WRK  WRK
	LEFT OUTER JOIN PRIOR_MONTHS_ADHERENCE PMA
	--ON WRK.DATES_MONTH_NUM = PMA.DATES_MONTH_NUM
	ON WRK.STAFF_STAFF_ID = PMA.STAFF_STAFF_ID
    WHERE WRK.DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

	commit;

END LOOP;

  COMMIT;

--------------------------------------------------------
-- THIRD LOOP TO UPDATE SC_SUMMARY_CC FLAGS
--------------------------------------------------------
DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||' START of THIRD Loop' );


FOR MTH_LOOP IN reverse ADD_MTH_START .. ADD_MTH_STOP

	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 		-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          	-- FIRST_DAY_OF_MONTH,
            TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP))+1)-(1/(24*60*60)),        -- LAST_DAY_OF_MONTH
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), 	-- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM'), 	-- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month'), 			-- DATES_MONTH,
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'Month YYYY') 		-- DATES_YEAR,
			INTO
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM,
				LV_DATES_MONTH,
				LV_DATES_YEAR
			FROM DUAL;


            --BEGIN
	DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||'  MTH_LOOP='||MTH_LOOP
	||' DATES_MTH_NUM='||LV_DATES_MONTH_NUM
	||' FIRST_DAY_OF_MONTH='||LV_FIRST_DAY_OF_MONTH
	||' LAST_DAY_OF_MONTH='||LV_LAST_DAY_OF_MONTH
	||' FIRST_PRIOR_MONTH='||LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM
	||' SECOND_PRIOR_MONTH='||LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM);


            IF STAFF_CURSOR%ISOPEN
            THEN
                CLOSE STAFF_CURSOR;
            END IF;

            OPEN STAFF_CURSOR;

            LOOP

                FETCH STAFF_CURSOR INTO SUMMARY_REC;

                EXIT WHEN STAFF_CURSOR%NOTFOUND;


    ------------------------------------------------------------------
    -- THREE_MONTH_CONFORMANCE_MISSED_COUNT
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT :=
			(
            --
            case
            when
                case
                when nvl(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            )
            +
            (
            --
            case
            when
                case
                when nvl(SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0
                then (SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0
            end
            --
            );

            -------------------------------------------------------
			-- MONTHLY_CONFORMANCE_FLAG
            -------------------------------------------------------
            SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG :=
				CASE
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) = 0
						THEN 0
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0
					AND
					(SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
					> .945
						THEN 1 -- 'MET'
					ELSE 2 -- 'MISSED'
				END;
            --

    ------------------------------------------------------------------
    -- THREE_MONTH_AVG_ADHERENCE
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE :=
			CASE WHEN
                (NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
				> 0
				THEN
					(( NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					)
					-
					(NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)) /
					(
					NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					)
					ELSE 0 END;

    ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_FLAG
	-- Specifications REVISED: 8/29/19 per M Brom
	--
	-- 1-Unacceptable
	-- Schedule Conformance 'Missed'
	-- for 2 or more months in the Reporting period.
	-- 2 or more Months Missed
	-- Result = 1
	--
	-- 2 - Below Expectations
	-- Adherence less then 97%
	-- OR schedule Conformance 'Missed'
	-- for 1 month in the Reporting period.
	-- 1 Month Missed
	-- Result = 2
	--
	-- 3 - Meets Expectations
	-- Adherence equal to 97%
	-- OR  less then 98%
	-- AND schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 3
	--
	-- 4 - Above Expectations
	-- Adherence = 99% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 4
	--
	-- 5 - Superior
	-- Adherence = 100% and schedule Conformance was 'Met'
	-- for each reporting month in the reporting period.
	-- ???Met (=0 Missed)???
	-- Result = 5
    ------------------------------------------------------------------

			SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG :=
				CASE
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) = 0
				THEN 0
				----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) > 1
					THEN 1
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .965
				OR NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 1
					THEN 2
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .965
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .985
					THEN 3
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .985
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .995
					THEN 4
				-----
				WHEN NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
				AND NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .995
					THEN 5
				-----
				ELSE 0 END;

				UPDATE SC_SUMMARY_CC
				SET
					THREE_MONTH_CONFORMANCE_MISSED_COUNT    =  	SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,
					THREE_MONTH_AVG_ADHERENCE               =  	SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,
					THREE_MONTH_ADHERENCE_FLAG 				=	SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG,
					MONTHLY_CONFORMANCE_FLAG 				= 	SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG
				WHERE CURRENT OF STAFF_CURSOR;

			END LOOP;

			COMMIT;

			IF STAFF_CURSOR%ISOPEN
			THEN
				CLOSE STAFF_CURSOR;
			END IF;

		commit;

END LOOP;

COMMIT;

	---------------------------------------------------------
	-- FINAL UPDATE TO SET THE CC_QIP_FLAG
	-- SET THE FLAG TO 1 IF CONFORMANCE MET FOR ALL 3 MONTH OF THE QUARTER
	-- AND ADHERENCE MET FOR ALL THREE MONTHA OF THE QUARTER
	---------------------------------------------------------
DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||' START FINAL UPDATE' );


	UPDATE DP_SCORECARD.SC_SUMMARY_CC
	SET CC_QIP_FLAG = 1
	WHERE ( STAFF_STAFF_ID, DATES_MONTH_NUM )
	IN (
	WITH CHECK_VALUES AS
	( SELECT CC.STAFF_STAFF_ID, CC.DATES_MONTH_NUM,
		--H.HIRE_DATE,
		--NVL(H.TERMINATION_DATE,TRUNC(SYSDATE)) TERMINATION_DATE,
		BD.FIRST_MONTH_OF_QTR,
		BD.LAST_MONTH_OF_QTR,
		CC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,
		----------------------------------
		CASE
			WHEN DATES_MONTH_NUM = LAST_MONTH_OF_QTR
			AND CC.THREE_MONTH_CONFORMANCE_MISSED_COUNT = 0
			AND (
				CASE
					WHEN NVL(CC.LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN
					(
                    (	NVL(CC.ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
                END
				) > .965 --AS CURRENT_MONTH_ADHERENCE,
				-------------------------
			AND (
				CASE
					WHEN NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN (
					( 	NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
					END
				) > .965 --	AS FIRST_PRIOR_MONTH_ADHERENCE,
				-------------------------
			AND (
				CASE
					WHEN NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0) > 0
					THEN (
					( 	NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
						-
						NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)
					/ NVL(CC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                    )
					ELSE 0
					END
				) > .965 --AS SECOND_PRIOR_MONTH_ADHERENCE,
				-------------------------
        THEN 1 ELSE 0 END AS CC_FLAG,
		-------------------------------
		BD.first_bus_day_of_qtr,
		BD.LAST_BUS_DAY_OF_QTR
	FROM SC_SUMMARY_CC  CC
	--JOIN DP_SCORECARD.SCORECARD_HIERARCHY H
	--	ON H.STAFF_STAFF_ID = CC.STAFF_STAFF_ID
	JOIN SCORECARD_QUARTERLY_BUSINESS_DAYS_SV  BD
	--	ON CC.DATES_MONTH_NUM BETWEEN BD.FIRST_MONTH_OF_QTR AND BD.LAST_MONTH_OF_QTR
		ON CC.DATES_MONTH_NUM = BD.LAST_MONTH_OF_QTR
	WHERE 1=1
	--AND H.HIRE_DATE <= FIRST_BUS_DAY_OF_QTR -- TEST REMOVED PER MATTHEW B.  8/28/2019
	--AND NVL(H.TERMINATION_DATE,TRUNC(SYSDATE)) >= BD.LAST_BUS_DAY_OF_QTR -- TEST REMOVED PER MATTHEW B.  8/28/2019
	)
	SELECT STAFF_STAFF_ID, DATES_MONTH_NUM
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	UNION
	SELECT STAFF_STAFF_ID, TO_CHAR(TO_NUMBER(DATES_MONTH_NUM)-1)
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	UNION
	SELECT STAFF_STAFF_ID, TO_CHAR(TO_NUMBER(DATES_MONTH_NUM)-2)
	FROM CHECK_VALUES --order by staff_staff_id, dates_month_num desc
	WHERE NVL(CC_FLAG,0) = 1
	);

COMMIT;

DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS')||' ***** END ******' );



--END LOOP;  --<<< FOR TESTING

COMMIT;

END LOAD_SC_SUMMARY_CC;
/

show errors