create or replace PROCEDURE              INSERT_SC_AUDIT_LWOP
   ( IN_STAFF_ID IN NUMBER
   , IN_HOURS IN NUMBER
   , IN_DATE IN DATE
   , IN_NATIONAL_ID IN VARCHAR )

AS

    LV_MANAGER_COUNT         NUMBER(5) := 0;
    LV_SUPERVISOR_COUNT      NUMBER(5) := 0;

    LV_NEGATIVE_BALANCE_FOUND  NUMBER(5) := 0;

    LV_HOURS                NUMBER(3,1)  := 0;

    LV_HIRE_DATE            DATE := SYSDATE;

    LV_ERR_CODE             VARCHAR2(50) := NULL;
    LV_ERR_MSG              VARCHAR2(300) := NULL;


BEGIN

    LV_ERR_MSG             := NULL;

    -- first check the input pararmeters

    IF  IN_STAFF_ID IS NULL
    OR IN_HOURS IS NULL OR IN_HOURS < 0
    OR IN_DATE IS NULL
    OR IN_NATIONAL_ID IS NULL
        THEN
        LV_ERR_MSG := 'Input Parameter Error ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        RETURN;
    END IF;

    -- DETERMINEIF THE USER MAKING THE CHANGE IS A MANAGER OR ABOVE
    -- OR A SUPERVISOR

    -- note because terminated staff records are frozen a current
    -- manager could still have a national id in the supervisor column

    SELECT COUNT(*) INTO LV_MANAGER_COUNT FROM
        (
        SELECT 'ADMIN' AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE ADMIN_ID=IN_NATIONAL_ID
        UNION
        SELECT SR_DIRECTOR_NAME AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE SR_DIRECTOR_NATID=IN_NATIONAL_ID
        AND TERMINATION_DATE IS NULL
        UNION
        SELECT DIRECTOR_NAME AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE DIRECTOR_NATID=IN_NATIONAL_ID
        AND TERMINATION_DATE IS NULL
        UNION
        SELECT SR_MANAGER_NAME AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE SR_MANAGER_NATID=IN_NATIONAL_ID
        AND TERMINATION_DATE IS NULL
        UNION
        SELECT MANAGER_NAME AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE MANAGER_NATID=IN_NATIONAL_ID
        AND TERMINATION_DATE IS NULL
        );

    SELECT COUNT(*) INTO LV_SUPERVISOR_COUNT FROM
        (
        SELECT SUPERVISOR_NAME AS NAME FROM DP_SCORECARD.SCORECARD_HIERARCHY WHERE SUPERVISOR_NATID=IN_NATIONAL_ID
        AND TERMINATION_DATE IS NULL
        );

    IF NVL(LV_MANAGER_COUNT,0) = 0
    AND NVL(LV_SUPERVISOR_COUNT,0) = 0
    THEN -- THE STAFF IS NOT AUTHORIZED
        LV_ERR_MSG := LV_ERR_MSG ||' ERROR '||IN_NATIONAL_ID||' IS NOT AUTHORIZED ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        --DON'T RETURN CHECK FOR ADDITIONAL ERRORS
    END IF;

    LV_HIRE_DATE := NULL;

    BEGIN

        SELECT TRUNC(NVL(SENIORITY_EFFECTIVE_DATE,HIRE_DATE))
            INTO LV_HIRE_DATE
        FROM SC_HIERARCHY_STAFF
        WHERE STAFF_ID = IN_STAFF_ID;

    EXCEPTION

        WHEN OTHERS
        THEN
            LV_ERR_MSG := LV_ERR_MSG ||' ERROR HIRE_DATE could not be determined ' ;
            DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
            RETURN;

    END;

    IF TRUNC(LV_HIRE_DATE) = TO_DATE('12/31/9999','MM/DD/YYYY')
    THEN    -- This is a temp employee
            -- do not allow LWOP entries
        LV_ERR_MSG := LV_ERR_MSG ||' TEMP Employee Entry not allowed ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        RETURN; --<< don't CHECK FOR ADDITIONAL ERRORS
    END IF;

    IF LV_HIRE_DATE IS NULL
    OR LV_HIRE_DATE < TO_DATE('04/01/2017','mm/dd/yyyy')
    THEN -- THE HIRE DATE IS BEFORE '04/01/2017'
    -- DO NOTHING
        LV_ERR_MSG := LV_ERR_MSG ||' ERROR HIRE_DATE PRIOR TO 04/01/2017 ' ;
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        --DON'T RETURN CHECK FOR ADDITIONAL ERRORS
    END IF;

    IF IN_DATE < TRUNC(LV_HIRE_DATE)
    THEN    -- The lWOP_OCCURRENCE_DATE IS PRIOR TO THE HIRE DATE
            -- the dates in the past
        LV_ERR_MSG := LV_ERR_MSG ||' ERROR DATE IS PRIOR TO HIRE_DATE ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        --DON'T RETURN CHECK FOR ADDITIONAL ERRORS
    END IF;

    IF IN_DATE < TRUNC(SYSDATE-7)
    AND NVL(LV_MANAGER_COUNT,0) = 0
    THEN    -- The user is NOT A MANAGER
            -- the dates in the past
        LV_ERR_MSG := LV_ERR_MSG ||' ERROR DATE IS PRIOR TO '||TRUNC(SYSDATE-7)||' ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        --DON'T RETURN CHECK FOR ADDITIONAL ERRORS
    END IF;

    -- check the format for the hours
    LV_HOURS := IN_HOURS;

    IF LV_HOURS <> IN_HOURS
    OR LV_HOURS < 0
    OR LV_HOURS > 99.9
        THEN LV_HOURS := NULL;
        LV_ERR_MSG := LV_ERR_MSG ||' ERROR HOUR FORMAT ERROR ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        --DON'T RETURN CHECK FOR ADDITIONAL ERRORS
    END IF;


    IF  LV_ERR_MSG IS NULL
    THEN -- No errors detected
        INSERT INTO DP_SCORECARD.SC_AUDIT_LWOP
        (STAFF_STAFF_ID,
          LWOP_OCCURRENCE_DATE,
          LWOP_HOURS,
          LWOP_CREATE_USER,
          LWOP_CREATE_DATE,
          LWOP_UPDATE_USER,
          LWOP_UPDATE_DATE
		)
        VALUES
        (IN_STAFF_ID,
         TRUNC(IN_DATE),
         LV_HOURS,
         IN_NATIONAL_ID,
         SYSDATE,
         IN_NATIONAL_ID,
         SYSDATE);
    ELSE
        LV_ERR_MSG := 'No update ERRORS found: '||LV_ERR_MSG;
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);
        RETURN;
    END IF;

    -- DO NOT COMMIT UNTILL YOU CHECK FOR
    -- A NEGATIVE BALANCE

    LV_NEGATIVE_BALANCE_FOUND := 0;

    SELECT COUNT(*) INTO LV_NEGATIVE_BALANCE_FOUND
    FROM DP_SCORECARD.SC_AUDIT_LWOP_SV
    WHERE STAFF_STAFF_ID = IN_STAFF_ID
    AND LWOP_BALANCE < 0;

    IF LV_NEGATIVE_BALANCE_FOUND = 0
    THEN  -- THE CHANGES CAN BE COMMITTED
        COMMIT;
    ELSE -- ROLLBACK THE CHANGE
        -- AND INSERT A ROW WITH ZERO HOURS

        ROLLBACK;

        INSERT INTO DP_SCORECARD.SC_AUDIT_LWOP
            (STAFF_STAFF_ID,
            LWOP_OCCURRENCE_DATE,
            LWOP_HOURS,
            LWOP_CREATE_USER,
            LWOP_CREATE_DATE,
            LWOP_UPDATE_USER,
            LWOP_UPDATE_DATE
            )
            VALUES
            (IN_STAFF_ID,
            TRUNC(IN_DATE),
            0, --in_hours,
            IN_NATIONAL_ID,
            SYSDATE,
            IN_NATIONAL_ID,
            SYSDATE);

        LV_ERR_MSG := LV_ERR_MSG ||' Negative Balance update rolled back ';
        DBMS_OUTPUT.PUT_LINE(LV_ERR_MSG);

    END IF;

    COMMIT;

EXCEPTION

    -- PER SPCIFICATIONS DO NOT RAISE AN ERROR
    -- BECAUSE MICRO STARTEGY WILL CRASH

    WHEN OTHERS THEN

        LV_ERR_CODE   := SQLCODE;
        LV_ERR_MSG    := SUBSTR(SQLERRM,1,300);

        DBMS_OUTPUT.PUT_LINE('Error code ' || LV_ERR_CODE || ': ' || LV_ERR_MSG);

END;
/

SHOW ERRORS

COMMIT;