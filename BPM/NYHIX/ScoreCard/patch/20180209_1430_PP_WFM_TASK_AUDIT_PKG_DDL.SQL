--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
(
  TASK_YYYYMM      VARCHAR2(6 BYTE),
  STAFF_ID         NUMBER(38),
  WFM_TASK_YYYYMM  VARCHAR2(6 BYTE),
  WFM_STAFF_ID     NUMBER(38),
  WFM_TASK_COUNT   NUMBER,
  WFM_TASK_SUM     NUMBER,
  SC_TASK_YYYYMM   VARCHAR2(6 BYTE),
  SC_STAFF_ID      NUMBER(38),
  SC_TASK_COUNT    NUMBER,
  SC_TASK_SUM      NUMBER
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS TO MAXDAT_READ_ONLY;

--------------------------------------------------------------------------------------

--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_PPK CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_PPK
(
  TASK_YYYYMM  VARCHAR2(6 BYTE),
  STAFF_ID     NUMBER(38)                       NOT NULL,
  TASK_COUNT   NUMBER,
  TASK_SUM     NUMBER,
  RUN_DATE     DATE
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_PPK TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_PPK TO MAXDAT_READ_ONLY;

--------------------------------------------------------------------------------------

--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC
(
  TASK_YYYYMM  VARCHAR2(6 BYTE),
  STAFF_ID     NUMBER(38)                       NOT NULL,
  TASK_COUNT   NUMBER,
  TASK_SUM     NUMBER,
  RUN_DATE     DATE
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC TO MAXDAT_READ_ONLY;
--------------------------------------------------------------------------------------
--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
(
  TASK_ID         NUMBER(38)                    NOT NULL,
  STAFF_ID        NUMBER(38)                    NOT NULL,
  TASK_START      DATE                          NOT NULL,
  TASK_END        DATE                          NOT NULL,
  EXTRACT_DT      DATE                          NOT NULL,
  LAST_UPDATE_DT  DATE                          NOT NULL,
  TASK_YYYYMM     VARCHAR2(6 BYTE),
  MIN_EXT_DT      DATE,
  BO_ROW_ID       ROWID
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST TO MAXDAT_READ_ONLY;

--------------------------------------------------------------------------------------

--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST
(
  TASK_ID      NUMBER(38)                       NOT NULL,
  STAFF_ID     NUMBER(38)                       NOT NULL,
  EXTRACT_DT   DATE                             NOT NULL,
  TASK_YYYYMM  NUMBER                           NOT NULL
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST TO MAXDAT_READ_ONLY;
--------------------------------------------------------------------------------------
--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
(
  STAFF_ID        NUMBER(38)                    NOT NULL,
  TASK_YYYYMM     NUMBER                        NOT NULL,
  TASK_ID         NUMBER(38)                    NOT NULL,
  MAKE_DATE_TIME  DATE,
  EXTRACT_DT      DATE
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_IDX2 ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
(STAFF_ID)
LOGGING
TABLESPACE MAXDAT_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID TO MAXDAT_READ_ONLY;

--------------------------------------------------------------------------------------
--DROP TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_TASK_BO_WRK CASCADE CONSTRAINTS;

CREATE TABLE DP_SCORECARD.PP_WFM_TASK_AUDIT_TASK_BO_WRK
(
  STAFF_ID                       NUMBER(38),
  TASK_START                     DATE,
  TASK_END                       DATE,
  TASK_CATEGORY_ID               NUMBER(38),
  DURATION                       NUMBER(38),
  EVENT_ID                       NUMBER(38),
  SUPERVISOR                     NUMBER(38),
  TASK_MODIFICATION_REQUEST_REF  NUMBER(38),
  TASK_ID                        NUMBER(38),
  SCENARIO_GROUP_ID              NUMBER(38),
  SCHEDULE_INSTANCE_ID           NUMBER(38),
  TASK_EDIT_ID                   NUMBER(38),
  EDIT_STATE                     NUMBER(38),
  ALT_TASK_EDIT_ID               NUMBER(38),
  NATIONAL_ID                    VARCHAR2(250 BYTE),
  MAKE_DATE_TIME                 DATE,
  EXTRACT_DT                     DATE,
  LAST_UPDATE_DT                 DATE,
  LAST_UPDATED_BY                VARCHAR2(30 BYTE),
  DELETE_FLAG                    VARCHAR2(1 BYTE),
  DELETE_DETECTED_DATE           DATE,
  BO_TASK_ID                     NUMBER(38),
  BO_ROW_ID                      ROWID,
  WRK_ROW_ID                     ROWID
)
TABLESPACE MAXDAT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_TASK_BO_WRK TO DP_SCORECARD_READ_ONLY;

GRANT SELECT ON DP_SCORECARD.PP_WFM_TASK_AUDIT_TASK_BO_WRK TO MAXDAT_READ_ONLY;

--------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG AS
 PROCEDURE CREATE_TASK_AUDIT_SC_CNTRL(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_TASK_AUDIT_CNTRL_DIFFS(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE DELETE_TASK_AUDIT_PPK_TASK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_SC_DELETE_FLAG_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE CREATE_SC_INSERT_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE TRUNCATE_TASK_Audit_PPK_ID(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE UPDATE_PP_WFM_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE TRUNCATE_PP_WFM_TASK_BO_WRK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
 PROCEDURE MERGE_PP_WFM_TASK_BO_WRK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
-- PROCEDURE PP_WFM_TASK_BO_W30_TRUNCATE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
-- PROCEDURE PP_WFM_TASK_BO_W30_MERGE(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL);
END  PP_WFM_TASK_AUDIT_PKG;
/
show errors


--------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_TASK_AUDIT_PKG AS

---------------------------------------------------------------------------------------
-- THE PROCEDURES IN THIS PACKAGE ARE USED TO AUDIT AND SYNCRONIZE THE TASKS BETWEEN
-- PIPKINS.TASK AND DP_SCORECARD.PP_WFM_TASK_BO.  THIS SYNCORONIZATION IS NEEDED
-- BECAUSE PIPKINS CAN PHYSICALLY 'DELETE' TASKS AND THERE IS NO RECORD OF THE
-- DELETTION IN PIPKINS
---------------------------------------------------------------------------------------

 PROCEDURE CREATE_TASK_AUDIT_SC_CNTRL(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
  IS

    -- THIS PROCEDURE TRUNCATES AND RE-LOADS THE SCORECARD CONTROL COUNTS
    -- BASED ON DP_SCORECARD.PP_WFM_TASK_BO

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;


 BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('LOAD_TASK_AUDIT_CNTRL_SC START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

	EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC';

    --DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC
    --WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

    INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_SC
    (
    TASK_YYYYMM,
    STAFF_ID,
    TASK_COUNT,
    TASK_SUM,
    RUN_DATE
    )
    SELECT TO_CHAR(TASK_START,'YYYYMM') AS TASK_YYYYMM,
    STAFF_ID,
    COUNT(TASK_ID) AS TASK_COUNT,
    SUM(TASK_ID) AS TASK_SUM,
    SYSDATE AS RUN_DATE
    FROM DP_SCORECARD.PP_WFM_TASK_BO
    WHERE NVL(DELETE_FLAG,'N') = 'N'
    AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    AND TRUNC(TASK_START) < TRUNC(SYSDATE-30)
    AND DELETE_DETECTED_DATE IS NULL
    GROUP BY TO_CHAR(TASK_START,'YYYYMM'), STAFF_ID
    ORDER BY TO_CHAR(TASK_START,'YYYYMM'), STAFF_ID;

    COMMIT;

 END;

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
 PROCEDURE CREATE_TASK_AUDIT_CNTRL_DIFFS(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
 IS

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

 BEGIN

     -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('LOAD_TASK_CONTROL_DIFFS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

	EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS';

    --DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    --WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

    INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
    (
        TASK_YYYYMM, STAFF_ID, WFM_TASK_YYYYMM,
        WFM_STAFF_ID, WFM_TASK_COUNT, WFM_TASK_SUM,
        SC_TASK_YYYYMM, SC_STAFF_ID, SC_TASK_COUNT,
        SC_TASK_SUM
    )
    WITH ALL_STAFF_YYYYMM AS
    (
    SELECT TASK_YYYYMM, STAFF_ID FROM PP_WFM_TASK_AUDIT_CNTRL_SC
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    UNION
    SELECT TASK_YYYYMM, STAFF_ID FROM PP_WFM_TASK_AUDIT_CNTRL_PPK
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    ),
    MATCHING_STAFF_YYYYMM AS
    (
    SELECT TASK_YYYYMM, STAFF_ID, TASK_COUNT,
        TASK_SUM, RUN_DATE
    FROM PP_WFM_TASK_AUDIT_CNTRL_SC
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    INTERSECT
    SELECT TASK_YYYYMM, STAFF_ID, TASK_COUNT,
        TASK_SUM, RUN_DATE
    FROM PP_WFM_TASK_AUDIT_CNTRL_PPK
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
    ),
    STAFF_DIFFS_YYYYMM AS
    (
    SELECT TASK_YYYYMM, STAFF_ID FROM ALL_STAFF_YYYYMM
    MINUS
    SELECT TASK_YYYYMM, STAFF_ID FROM MATCHING_STAFF_YYYYMM
    ),
    DIFF_DETAIL AS
    (
    SELECT DIFFS.TASK_YYYYMM,
        DIFFS.STAFF_ID,
        PIPKINS.TASK_YYYYMM AS WFM_TASK_YYYYMM,
        PIPKINS.STAFF_ID    AS WFM_STAFF_ID,
        PIPKINS.TASK_COUNT  AS WFM_TASK_COUNT,
        PIPKINS.TASK_SUM    AS WFM_TASK_SUM,
        SCORECARD.TASK_YYYYMM   AS SC_TASK_YYYYMM,
        SCORECARD.STAFF_ID      AS SC_STAFF_ID,
        SCORECARD.TASK_COUNT    AS SC_TASK_COUNT,
        SCORECARD.TASK_SUM      AS SC_TASK_SUM
    FROM STAFF_DIFFS_YYYYMM DIFFS
    LEFT OUTER JOIN PP_WFM_TASK_AUDIT_CNTRL_PPK PIPKINS
        ON PIPKINS.TASK_YYYYMM = DIFFS.TASK_YYYYMM
        AND PIPKINS.STAFF_ID = DIFFS.STAFF_ID
    LEFT OUTER JOIN  PP_WFM_TASK_AUDIT_CNTRL_SC SCORECARD
        ON SCORECARD.TASK_YYYYMM = DIFFS.TASK_YYYYMM
        AND SCORECARD.STAFF_ID = DIFFS.STAFF_ID
    WHERE 1=1
    AND ( NVL(PIPKINS.TASK_COUNT,0) <> NVL(SCORECARD.TASK_COUNT,0)
    OR NVL(PIPKINS.TASK_SUM,0) <> NVL(SCORECARD.TASK_SUM,0)
        )
    )
    SELECT
        TASK_YYYYMM, STAFF_ID, WFM_TASK_YYYYMM,
        WFM_STAFF_ID, WFM_TASK_COUNT, WFM_TASK_SUM,
        SC_TASK_YYYYMM, SC_STAFF_ID, SC_TASK_COUNT,
        SC_TASK_SUM
    FROM DIFF_DETAIL
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

 END;

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

 PROCEDURE DELETE_TASK_AUDIT_PPK_TASK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)

 IS
    -- THIS PROCEDURE DELETES FROM THE PP_WFM_TASK_AUDIT_PPK_TASK_ID TABLE
    -- BASED ON THE VALUES IN PP_WFM_TASK_AUDIT_CNTRL_DIFFS

    -- THE PARAMETERS P_START_YYYYMM AND P_END_YYYYM ARE USED TO
    -- CONTROL THE MONTHS BEING PROCESSED.

    -- THE DEFAULT FOR P_START_YYYYMM IS ADD_MONTHS -11 ( 1 YEAR BACK )
    -- THE DEFAULT FOR P_END_YYYYMM IS TO_CHAR(SYSDATE('YYYYMM') ( CURRENT MONTH )

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;


    BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('DELETE_TASK_AUDIT_PPK_TASK START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);


    DELETE FROM PP_WFM_TASK_AUDIT_PPK_TASK_ID
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

 END;

 -- ***********************************************************
 -- ***********************************************************
 -------------------------------------------------------------
 -- NOTE THE NEXT STEP IS TO RUN THE KETTLE JOB TO EXTRACT
 -- TASK_IDs BASED ON THE staff_id AND task_yyyymm
 -- IN PP_WFM_TASK_AUDIT_CNTRL_DIFFS
 -----------------------------------------------------------
 -- ***********************************************************
 -- ***********************************************************
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

PROCEDURE CREATE_SC_DELETE_FLAG_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

-- THIS PROCEDURE POPULATES PP_WFM_TASK_AUDIT_SC_DELETES
-- NOTE BECAUSE OF POSSIBLE TIMING DIFFERENCES THE EXTRACT DATE
-- IS USED TO PREVENT SELECTING ANY RECIENT TASKS IN PP_WFM_TASK_BO
-- WHICH MAY HAVE BEEN CREATED AFTER THE EXTACT FROM PIPKINS.TASK

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;


BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('CREATE_SC_DELETES START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
(
    TASK_ID, STAFF_ID, TASK_START,
    TASK_END, EXTRACT_DT, LAST_UPDATE_DT,
    TASK_YYYYMM,
    BO_ROW_ID
)
SELECT
	bo.TASK_ID, bo.STAFF_ID, bo.TASK_START,
    bo.TASK_END, bo.EXTRACT_DT, bo.LAST_UPDATE_DT,
    to_char(task_start,'YYYYMM'), --EXT_DT.MIN_EXT_DT,
    BO.ROWID
FROM ( SELECT * FROM DP_SCORECARD.PP_WFM_TASK_BO
        WHERE 1=1
        AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
        AND TRUNC(TASK_START) < TRUNC(SYSDATE-30)
        AND NVL(DELETE_FLAG,'N') = 'N'
     ) BO
JOIN ( SELECT SC_STAFF_ID, SC_TASK_YYYYMM
     FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_CNTRL_DIFFS
     WHERE SC_STAFF_ID IS NOT NULL
     AND SC_TASK_YYYYMM IS NOT NULL
     ) CTRL
     ON BO.STAFF_ID = CTRL.SC_STAFF_ID
     AND TO_CHAR(BO.TASK_START,'YYYYMM') = SC_TASK_YYYYMM
LEFT OUTER JOIN  DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID PPK
ON PPK.TASK_ID = BO.TASK_ID
WHERE PPK.TASK_ID IS NULL;

COMMIT;

END;

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

PROCEDURE UPDATE_PP_WFM_TASK_BO(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

    -- Note the LV_DELETE_DETECTED_DATE is
    -- set at the start so all records updated in this cycle
    -- have the same date

    LV_DELETE_DETECTED_DATE   DATE := SYSDATE;

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

    BEGIN

        LV_DELETE_DETECTED_DATE := SYSDATE;

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('UPDATE_PP_WFM_TASK_BO START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

        UPDATE DP_SCORECARD.PP_WFM_TASK_BO
        SET DELETE_FLAG = 'Y', DELETE_DETECTED_DATE = LV_DELETE_DETECTED_DATE
        WHERE NVL(DELETE_FLAG,'N') = 'N'
        AND DELETE_DETECTED_DATE IS NULL
        -- AND SCENARIO_GROUP_ID = 1
		-- AND TASK_EDIT_ID = 0
        AND TO_CHAR(TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
        AND (STAFF_ID, TASK_ID, TO_CHAR(TASK_START,'YYYYMM') )
        IN ( SELECT STAFF_ID, TASK_ID, TASK_YYYYMM
             FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_DLT_FLG_LST
             WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
           );

       COMMIT;

    END;

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

PROCEDURE CREATE_SC_INSERT_LIST(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

    -- THIS PROCEDURE DETECTS TASKS WHICH MAY HAVE BEEN ADDED OR UPDATED BY PIPKINS
    -- IT IS BASED ON THE PP_WFM_TASK_AUDIT_PPK_TASK MINUS PP_WFM_TASK_BO

    LV_START_YYYYMM VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM VARCHAR(6) := P_END_YYYYMM;

BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('CREATE_SC_INSERTS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

    DELETE FROM DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM;

    COMMIT;

INSERT INTO DP_SCORECARD.PP_WFM_TASK_AUDIT_INSERT_LST
(
    TASK_ID,
    STAFF_ID,
    EXTRACT_DT,
    TASK_YYYYMM
)
SELECT DISTINCT
	ppk.TASK_ID,
	ppk.STAFF_ID,
    sysdate,
    ppk.TASK_YYYYMM
FROM ( select task_id, staff_id, task_yyyymm
        from DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID
    WHERE TASK_YYYYMM BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
 )  ppk
 left outer join ( SELECT TASK_ID
 FROM DP_SCORECARD.PP_WFM_TASK_BO
 WHERE NVL(DELETE_FLAG,'N') = 'N'
 ) bo
 on bo.task_id = ppk.task_id
 where bo.task_id is null;

COMMIT;


END;

-------------------------------------------------------------------------
-------------------------------------------------------------------------

PROCEDURE TRUNCATE_PP_WFM_TASK_BO_WRK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)

IS
        LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
        LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;

    BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

        DBMS_OUTPUT.PUT_LINE('LOAD_TASK_AUDIT_CNTRL_SC START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);


   		EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_AUDIT_TASK_BO_WRK';

END;

-------------------------------------------------------------------------
-------------------------------------------------------------------------

PROCEDURE TRUNCATE_TASK_Audit_PPK_ID(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)

IS
        LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
        LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;

    BEGIN

    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

        DBMS_OUTPUT.PUT_LINE('LOAD_TASK_AUDIT_CNTRL_SC START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);


   		EXECUTE IMMEDIATE 'truncate table DP_SCORECARD.PP_WFM_TASK_AUDIT_PPK_TASK_ID';

END;

-------------------------------------------------------------------------
-------------------------------------------------------------------------

PROCEDURE MERGE_PP_WFM_TASK_BO_WRK(P_START_YYYYMM VARCHAR default NULL, P_END_YYYYMM VARCHAR default NULL)
IS

    LV_START_YYYYMM         VARCHAR(6) := P_START_YYYYMM;
    LV_END_YYYYMM           VARCHAR(6) := P_END_YYYYMM;

    LV_TEST_TASK_ID              NUMBER(38) := 0;
    LV_FOUND_TASK_ID            NUMBER(38) := 0;

    LV_WRK_TASK_ID NUMBER(38) := 0;
    LV_WRK_ROW_ID  ROWID    := NULL;
    LV_BO_TASK_ID NUMBER(38) := 0;
    LV_BO_ROW_ID  ROWID    := NULL;

    CURSOR TASK_MERGE_CSR IS
    SELECT
        WRK.STAFF_ID, WRK.TASK_START, WRK.TASK_END,
        WRK.TASK_CATEGORY_ID, WRK.DURATION, WRK.EVENT_ID,
        WRK.SUPERVISOR, WRK.TASK_MODIFICATION_REQUEST_REF, WRK.TASK_ID,
        WRK.SCENARIO_GROUP_ID, WRK.SCHEDULE_INSTANCE_ID, WRK.TASK_EDIT_ID,
        WRK.EDIT_STATE, WRK.ALT_TASK_EDIT_ID, WRK.NATIONAL_ID,
        WRK.MAKE_DATE_TIME, WRK.EXTRACT_DT, WRK.LAST_UPDATE_DT,
        WRK.LAST_UPDATED_BY, WRK.DELETE_FLAG, WRK.DELETE_DETECTED_DATE,
		WRK.BO_TASK_ID,
        BO.ROWID, WRK.ROWID
    FROM PP_WFM_TASK_AUDIT_TASK_BO_WRK WRK
    LEFT OUTER JOIN ( SELECT TASK_ID, ROWID AS BO_ROW_ID FROM PP_WFM_TASK_BO ) BO
    ON BO.TASK_ID = WRK.TASK_ID
    WHERE TO_CHAR(WRK.TASK_START,'YYYYMM') BETWEEN LV_START_YYYYMM AND LV_END_YYYYMM
	and trunc(task_start) < trunc(sysdate-30);

    LV_TASK_BO_WRK_REC PP_WFM_TASK_AUDIT_TASK_BO_WRK%ROWTYPE;

BEGIN

    -- THE PROCEDURE INSERT_PP_WFM_TASK_BO USES PP_WFM_TASK_AUDIT_TASK_BO_WRK
    -- WHICH WAS CREATED BY A KETTLE TRANSFORM USING PP_WFM_TASK_AUDIT_INSERT_LST
    -- TO ADD OR UPDATE TASKS WHICH MAY HAVE BEEN MISSED BY THE DAILY KETTLE PROCESSING
    -- ( TASKS COULD HAVE BEEN ADDED OUTSIDE THE 30 DAY WINDOW FOR NORMAL PROCESSING
    -- OR TASKS COULD HAVE BEEN UPDATED TO SCENARIO_GROUP_ID = 1 AND TASK_EDIT_ID = 0
    -- OUTSIDE OF THE WINDOW )
    -- THE PROCEDURE will 'merge' the contens of PP_WFM_TASK_AUDIT_TASK_BO_WRK
    -- into PP_WFM_TASK_BO.
    -- Table PP_WFM_TASK_AUDIT_TASK_BO_WRK contains data extracted from PIPKINS
    -- for the period specified by the Start and End parameters.
	-- It skips data which is less than SYSDATE-30 which was handled by a
	-- the 30 Day Sync Process


    -- NOTE because the 'VALUE' in MAXDAT.CORP_ETL_CONTROL cannot be NULL
    -- the valuse of '190000'  will be used to set the START and END dats to
    -- ADD_MONTHS(SYSDATE-23) and SYSDATE-30

    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYYMM')
        ELSE VALUE END INTO LV_START_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_START_YYYYMM';


    SELECT CASE WHEN VALUE = '190000' THEN TO_CHAR(SYSDATE-30,'YYYYMM')
        ELSE VALUE END INTO LV_END_YYYYMM
    FROM MAXDAT.CORP_ETL_CONTROL
    WHERE NAME = 'PP_WFM_TASK_AUDIT_TASK_END_YYYYMM';

    DBMS_OUTPUT.PUT_LINE('CREATE_SC_INSERTS START= '||LV_START_YYYYMM||' END = '||LV_END_YYYYMM);

	IF (TASK_MERGE_CSR%ISOPEN)
		THEN
			CLOSE TASK_MERGE_CSR;
	END IF;

	OPEN TASK_MERGE_CSR();

	LOOP

		FETCH TASK_MERGE_CSR
		INTO LV_TASK_BO_WRK_REC;

		EXIT WHEN TASK_MERGE_CSR%NOTFOUND;

        BEGIN

			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- SKIP THIS RECORD
				CONTINUE;
			END IF;

			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NULL
			THEN -- THIS IS A PHYSICAL DELETE

				UPDATE PP_WFM_TASK_BO
				SET DELETE_FLAG = 'Y',
					LAST_UPDATE_DT = SYSDATE,
					DELETE_DETECTED_DATE = CASE WHEN LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE IS NULL
											THEN
												SYSDATE
											ELSE
                                                LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE
											END,
					LAST_UPDATED_BY = 'TASK AUDIT'
				WHERE TASK_ID = LV_TASK_BO_WRK_REC.BO_TASK_ID
				AND NVL(DELETE_FLAG,'N') = 'N';

				CONTINUE;

			END IF;

			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NULL
			-- THIS IS A "1 AND 0" RECORD.
			-- IT COULD BE EITHER AN INSERT OR UPDATE
				THEN
					LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
					LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
			END IF;

			IF LV_TASK_BO_WRK_REC.BO_TASK_ID IS NOT NULL
			AND LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL
			-- THIS WILL BE AN UPDATE
			-- IT COUNT BE A "1 AND 0" OR NOT
			THEN
				IF LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID = 1
				AND LV_TASK_BO_WRK_REC.TASK_EDIT_ID = 0
					THEN
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'N';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := NULL;
				ELSE
						LV_TASK_BO_WRK_REC.DELETE_FLAG := 'Y';
						LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE := SYSDATE;
				END IF;
			END IF;


            IF LV_TASK_BO_WRK_REC.WRK_ROW_ID IS NOT NULL
            AND LV_TASK_BO_WRK_REC.BO_ROW_ID IS NOT NULL
            THEN -- UPDATE pp_wfm_task_bo

                UPDATE PP_WFM_TASK_BO SET
                STAFF_ID 						= LV_TASK_BO_WRK_REC.STAFF_ID,
                TASK_START 						= LV_TASK_BO_WRK_REC.TASK_START,
                TASK_END 						= LV_TASK_BO_WRK_REC.TASK_END,
                TASK_CATEGORY_ID 				= LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID,
                DURATION 						= LV_TASK_BO_WRK_REC.DURATION,
                EVENT_ID 						= LV_TASK_BO_WRK_REC.EVENT_ID,
                SUPERVISOR 						= LV_TASK_BO_WRK_REC.SUPERVISOR,
                TASK_MODIFICATION_REQUEST_REF 	= LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF,
                TASK_ID 						= LV_TASK_BO_WRK_REC.TASK_ID,
                SCENARIO_GROUP_ID 				= LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID,
                SCHEDULE_INSTANCE_ID 			= LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID,
                TASK_EDIT_ID 					= LV_TASK_BO_WRK_REC.TASK_EDIT_ID,
                EDIT_STATE 						= LV_TASK_BO_WRK_REC.EDIT_STATE,
                ALT_TASK_EDIT_ID 				= LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID,
                NATIONAL_ID 					= LV_TASK_BO_WRK_REC.NATIONAL_ID,
                MAKE_DATE_TIME 					= LV_TASK_BO_WRK_REC.MAKE_DATE_TIME,
                -- DO NOT ALTER THE EXTRACT_DT
                -- EXTRACT_DT 						= LV_TASK_BO_WRK_REC.EXTRACT_DT,
                LAST_UPDATE_DT 					= SYSDATE,
                LAST_UPDATED_BY 				= 'TASK AUDIT',
                DELETE_FLAG 					= LV_TASK_BO_WRK_REC.DELETE_FLAG,
                DELETE_DETECTED_DATE 			= LV_TASK_BO_WRK_REC.DELETE_DETECTED_DATE
                WHERE ROWID = LV_TASK_BO_WRK_REC.BO_ROW_ID;
            ELSIF
				LV_TASK_BO_WRK_REC.BO_ROW_ID IS NULL
				and LV_TASK_BO_WRK_REC.TASK_ID IS NOT NULL
				THEN

                INSERT INTO DP_SCORECARD.PP_WFM_TASK_BO
                (
                STAFF_ID, TASK_START,
                TASK_END, TASK_CATEGORY_ID, DURATION,
                EVENT_ID, SUPERVISOR, TASK_MODIFICATION_REQUEST_REF,
                TASK_ID, SCENARIO_GROUP_ID, SCHEDULE_INSTANCE_ID,
                TASK_EDIT_ID, EDIT_STATE, ALT_TASK_EDIT_ID,
                NATIONAL_ID, MAKE_DATE_TIME, EXTRACT_DT,
                LAST_UPDATE_DT, LAST_UPDATED_BY, DELETE_FLAG,
                DELETE_DETECTED_DATE
                )
                VALUES(
                LV_TASK_BO_WRK_REC.STAFF_ID,
                LV_TASK_BO_WRK_REC.TASK_START,
                LV_TASK_BO_WRK_REC.TASK_END,
                LV_TASK_BO_WRK_REC.TASK_CATEGORY_ID,
                LV_TASK_BO_WRK_REC.DURATION,
                LV_TASK_BO_WRK_REC.EVENT_ID,
                LV_TASK_BO_WRK_REC.SUPERVISOR,
                LV_TASK_BO_WRK_REC.TASK_MODIFICATION_REQUEST_REF,
                LV_TASK_BO_WRK_REC.TASK_ID,
                LV_TASK_BO_WRK_REC.SCENARIO_GROUP_ID,
                LV_TASK_BO_WRK_REC.SCHEDULE_INSTANCE_ID,
                LV_TASK_BO_WRK_REC.TASK_EDIT_ID,
                LV_TASK_BO_WRK_REC.EDIT_STATE,
                LV_TASK_BO_WRK_REC.ALT_TASK_EDIT_ID,
                LV_TASK_BO_WRK_REC.NATIONAL_ID,
                LV_TASK_BO_WRK_REC.MAKE_DATE_TIME,
                SYSDATE, --AS EXTRACT_DT,
                SYSDATE, --AS LAST_UPDATE_DT,
                'TASK AUDIT', --AS LAST_UPDATED_BY,
                'N', -- AS DELETE_FLAG,
                NULL --AS DELETE_DETECTED_DATE
                );
                ELSE
                    NULL;

            END IF;

        END;


    END LOOP;
    END;


 END PP_WFM_TASK_AUDIT_PKG;
/

show errors

grant execute on PP_WFM_TASK_AUDIT_PKG to maxdat;

grant execute on PP_WFM_TASK_AUDIT_PKG to maxdat_reports;

grant execute on PP_WFM_TASK_AUDIT_PKG to maxdat_read_only;

grant execute on PP_WFM_TASK_AUDIT_PKG to dp_scorecard_read_only;

----

grant debug on PP_WFM_TASK_AUDIT_PKG to maxdat;

grant debug on PP_WFM_TASK_AUDIT_PKG to maxdat_reports;

grant debug on PP_WFM_TASK_AUDIT_PKG to maxdat_read_only;

grant debug on PP_WFM_TASK_AUDIT_PKG to dp_scorecard_read_only;

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------