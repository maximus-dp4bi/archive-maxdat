create or replace PROCEDURE              LOAD_SC_SUMMARY_CC_ROLLUP
( add_mth_start number default 0,
  add_mth_stop  number default 11
 )
AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL$';
  	SVN_REVISION varchar2(20) := '$Revision$';
 	SVN_REVISION_DATE varchar2(60) := '$Date$';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author$';

	LV_DATES_MONTH_NUM          VARCHAR2(6) := '199901';
	LV_FIRST_DAY_OF_MONTH		DATE  	:= TRUNC(SYSDATE,'MM');
	LV_LAST_DAY_OF_MONTH		DATE	:= LAST_DAY(SYSDATE);		

    LV_STAFF_STAFF_ID                       NUMBER(8) := 0;
	LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM    VARCHAR2(6);
	LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM   VARCHAR2(6);

    SUMMARY_REC   SC_SUMMARY_CC_ROLLUP%ROWTYPE;

    LV_THREE_MONTH_CONFORMANCE_MISSED_COUNT     NUMBER(5) := 0;

    CURSOR STAFF_CURSOR IS
    SELECT * INTO SUMMARY_REC
    FROM SC_SUMMARY_CC_ROLLUP 
    WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM 
    FOR UPDATE;

BEGIN

	FOR MTH_LOOP IN ADD_MTH_START .. ADD_MTH_STOP
	LOOP

    LV_DATES_MONTH_NUM := TO_CHAR(ADD_MONTHS(SYSDATE,-MTH_LOOP),'YYYYMM');

	DELETE FROM DP_SCORECARD.SC_SUMMARY_CC_ROLLUP
	WHERE DATES_MONTH_NUM = LV_DATES_MONTH_NUM;

    COMMIT;

INSERT INTO DP_SCORECARD.SC_SUMMARY_CC_ROLLUP
	( SUPERVISOR_STAFF_ID, DATES_MONTH, DATES_MONTH_NUM,
	DATES_YEAR, EXCLUSION_FLAG,
   	BUILDING,
	DEPARTMENT,
	TOT_CALLS_ANSWERED,
	TOT_SHORT_CALLS_ANSWERED, TOT_TOT_RETURN_TO_QUEUE, TOT_AVERAGE_HANDLE_TIME,
	TOT_SCHED_PRODUCTIVE_TIME, TOT_ACTUAL_PRODUCTIVE_TIME, TOT_TALK_TIME,
	TOT_WRAP_UP_TIME, TOT_LOGGED_IN_TIME, TOT_NOT_READY_TIME,
	TOT_BREAK_TIME, TOT_LUNCH_TIME, QCS_PERFORMED,
	AVG_QC_SCORE, TOT_INCIDENTS_COMPLETED, DAYS_INCIDENTS_COMPLETED,
	TOT_DEFECTS_COMPLETED, DAYS_DEFECTS_COMPLETED, LAG_TIME_TOT_SCHED_PROD_TIME,
	TOT_CALL_RECORDS, TOT_CUSTOMER_COUNT, TOT_CALL_WRAP_UP_COUNT,
	TOT_WRAP_UP_ERROR, DAYS_SHORT_CALLS_GT_10, DAYS_CALLS_ANSWERED,
	ADHERENCE, TOT_RETURN_TO_QUEUE_TIMEOUT, AVG_ATTENDANCE_BALANCE,
	AVG_ATTENDANCE_TOTAL_BALANCE, STAFF_COUNT, SUM_QC_SCORE,
	COUNT_QC_SCORE, QCS_REMAINING, TOT_HANDLE_TIME,
	TOT_HANDLE_TIME_COUNT, STAFF_TRTQ_COUNT, SHORT_CALL_AGENT_COUNT,
	ADHERENCE_TOT_LOGGED_IN_TIME,
	ADHERENCE_TOT_NOT_READY_TIME, CALLS_OFFERED,
	WEBCHAT_ASSIGNED,
	WEBCHAT_TRANSFERRED,
	WEBCHAT_CONFERENCED,
	WEBCHAT_TOTAL_NUMBER,
	--
	AGENT_DISCONNECTED_SHORT_CALLS,   						
	CONSUMER_DISCONNECTED_SHORT_CALLS,  						
	CURRENT_MONTH_EVENTS_SCHEDULED,       					
	CURRENT_MONTH_EVENTS_MET,             					
	FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	FIRST_PRIOR_MONTH_EVENTS_MET,             				
	SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	SECOND_PRIOR_MONTH_EVENTS_MET,             				
	FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
	--
	--THREE_MONTH_CONFORMANCE_MISSED_COUNT,  
	--THREE_MONTH_AVG_ADHERENCE,				
	--THREE_MONTH_ADHERENCE_FLAG,				
	--MONTHLY_CONFORMANCE_FLAG  		
	--	
   )
-----
WITH CC_SUMMARY AS
(SELECT
	SUPERVISOR_STAFF_ID,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	BUILDING,
	DEPARTMENT,
	SUM(NVL(TOT_CALLS_ANSWERED,0)) 							AS 	TOT_CALLS_ANSWERED,
	SUM(NVL(TOT_SHORT_CALLS_ANSWERED,0)) 					AS 	TOT_SHORT_CALLS_ANSWERED,
	SUM(NVL(TOT_TOT_RETURN_TO_QUEUE,0)) 					AS 	TOT_TOT_RETURN_TO_QUEUE,
	SUM(NVL(TOT_AVERAGE_HANDLE_TIME,0)) 					AS 	TOT_AVERAGE_HANDLE_TIME,
	SUM(NVL(TOT_SCHED_PRODUCTIVE_TIME,0)) 					AS 	TOT_SCHED_PRODUCTIVE_TIME,
	SUM(NVL(TOT_ACTUAL_PRODUCTIVE_TIME,0)) 					AS 	TOT_ACTUAL_PRODUCTIVE_TIME,
	SUM(NVL(TOT_TALK_TIME,0)) 								AS 	TOT_TALK_TIME,
	SUM(NVL(TOT_WRAP_UP_TIME,0)) 							AS 	TOT_WRAP_UP_TIME,
	SUM(NVL(TOT_LOGGED_IN_TIME,0)) 							AS 	TOT_LOGGED_IN_TIME,
	SUM(NVL(TOT_NOT_READY_TIME,0)) 							AS 	TOT_NOT_READY_TIME,
	SUM(NVL(TOT_BREAK_TIME,0)) 								AS 	TOT_BREAK_TIME,
	SUM(NVL(TOT_LUNCH_TIME,0)) 								AS 	TOT_LUNCH_TIME,
	SUM(NVL(QCS_PERFORMED,0)) 								AS 	QCS_PERFORMED,
	CASE WHEN SUM(NVL(QCS_PERFORMED,0)) <> 0
		THEN
			ROUND(SUM(NVL(AVG_QC_SCORE,0))/SUM(NVL(QCS_PERFORMED,0)),0)
		ELSE 0 END 											AS 	AVG_QC_SCORE,
	SUM(NVL(TOT_INCIDENTS_COMPLETED,0)) 					AS 	TOT_INCIDENTS_COMPLETED,
	SUM(NVL(DAYS_INCIDENTS_COMPLETED,0)) 					AS 	DAYS_INCIDENTS_COMPLETED,
	SUM(NVL(TOT_DEFECTS_COMPLETED,0)) 						AS 	TOT_DEFECTS_COMPLETED,
	SUM(NVL(DAYS_DEFECTS_COMPLETED,0)) 						AS 	DAYS_DEFECTS_COMPLETED,
	SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0))				AS 	LAG_TIME_TOT_SCHED_PROD_TIME,
	SUM(NVL(TOT_CALL_RECORDS,0)) 							AS 	TOT_CALL_RECORDS,
	SUM(NVL(TOT_CUSTOMER_COUNT,0)) 							AS 	TOT_CUSTOMER_COUNT,
	SUM(NVL(TOT_CALL_WRAP_UP_COUNT,0)) 						AS 	TOT_CALL_WRAP_UP_COUNT,
	SUM(NVL(TOT_WRAP_UP_ERROR,0)) 							AS 	TOT_WRAP_UP_ERROR,
	SUM(NVL(DAYS_SHORT_CALLS_GT_10,0)) 						AS 	DAYS_SHORT_CALLS_GT_10,
	SUM(NVL(DAYS_CALLS_ANSWERED,0)) 						AS 	DAYS_CALLS_ANSWERED,
    CASE WHEN SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0)) = 0
        THEN 0
        ELSE SUM(NVL(ADHERENCE_TOT_LOGGED_IN_TIME,0)
        - NVL(ADHERENCE_TOT_NOT_READY_TIME,0))
            /SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0)) END   AS ADHERENCE,
    SUM(NVL(TOT_RETURN_TO_QUEUE_TIMEOUT,0)) 				AS 	TOT_RETURN_TO_QUEUE_TIMEOUT,
	SUM(NVL(AVG_ATTENDANCE_BALANCE,0)) 						AS 	AVG_ATTENDANCE_BALANCE,
	SUM(NVL(AVG_ATTENDANCE_TOTAL_BALANCE,0))				AS 	AVG_ATTENDANCE_TOTAL_BALANCE,
	SUM(NVL(STAFF_COUNT,0)) 								AS 	STAFF_COUNT,
	SUM(NVL(SUM_QC_SCORE,0)) 								AS 	SUM_QC_SCORE,
	SUM(NVL(COUNT_QC_SCORE,0)) 								AS 	COUNT_QC_SCORE,
	SUM(nvl(qcs_remaining,0)) 								AS 	QCS_REMAINING,
	SUM(NVL(TOT_HANDLE_TIME,0)) 							AS 	TOT_HANDLE_TIME,
	SUM(NVL(TOT_HANDLE_TIME_COUNT,0)) 						AS 	TOT_HANDLE_TIME_COUNT,
	SUM( CASE WHEN TOT_TOT_RETURN_TO_QUEUE > 50
		THEN 1 ELSE 0 END ) 								AS STAFF_TRTQ_COUNT,
	SUM(NVL(SHORT_CALL_AGENT_COUNT,0))						AS 	SHORT_CALL_AGENT_COUNT,
	SUM(NVL(ADHERENCE_TOT_LOGGED_IN_TIME,0))				AS 	ADHERENCE_TOT_LOGGED_IN_TIME,
	SUM(NVL(ADHERENCE_TOT_NOT_READY_TIME,0)) 				AS 	ADHERENCE_TOT_NOT_READY_TIME,
	SUM(NVL(CALLS_OFFERED,0))								AS 	CALLS_OFFERED,
	SUM(NVL(WEBCHAT_ASSIGNED,0))							AS WEBCHAT_ASSIGNED	,
	SUM(NVL(WEBCHAT_TRANSFERRED,0))							AS WEBCHAT_TRANSFERRED	,
	SUM(NVL(WEBCHAT_CONFERENCED,0))							AS WEBCHAT_CONFERENCED	,
	SUM(NVL(WEBCHAT_TOTAL_NUMBER,0))						AS WEBCHAT_TOTAL_NUMBER,
	--
    SUM(AGENT_DISCONNECTED_SHORT_CALLS)   								AS AGENT_DISCONNECTED_SHORT_CALLS,   						
    SUM(CONSUMER_DISCONNECTED_SHORT_CALLS)  							AS CONSUMER_DISCONNECTED_SHORT_CALLS,  						
	SUM(CURRENT_MONTH_EVENTS_SCHEDULED)       							AS CURRENT_MONTH_EVENTS_SCHEDULED,       					
	SUM(CURRENT_MONTH_EVENTS_MET)             							AS CURRENT_MONTH_EVENTS_MET,             					
	SUM(FIRST_PRIOR_MONTH_EVENTS_SCHEDULED)       						AS FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	SUM(FIRST_PRIOR_MONTH_EVENTS_MET)             						AS FIRST_PRIOR_MONTH_EVENTS_MET,             				
	SUM(SECOND_PRIOR_MONTH_EVENTS_SCHEDULED)       						AS SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	SUM(SECOND_PRIOR_MONTH_EVENTS_MET)             						AS SECOND_PRIOR_MONTH_EVENTS_MET,             				
	SUM(FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME)					AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	SUM(FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME)					AS FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	SUM(FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME)		AS FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	SUM(SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME)				AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	SUM(SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME)				AS SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	SUM(SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME)		AS SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
	--
FROM DP_SCORECARD.SC_SUMMARY_CC
where DATES_MONTH_NUM = lv_dateS_month_num
GROUP BY
	SUPERVISOR_STAFF_ID,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	BUILDING,
	DEPARTMENT
),
INCDEFS AS
 (
   SELECT a11.supervisor_staff_id, building, department,
   trunc(a11.event_date) task_DATE,
       to_char(TRUNC(a11.event_date), 'YYYYMM') as dates_month_num,
       to_char(TRUNC(a11.event_date), 'Month YYYY') as dates_year,
        count((Case when a11.EVENT_ID in (1374, 1375, 1376, 1377, 1378, 1379) then 1 else null end)) INCIDENTS_COMPLETED,
        count((Case when a11.EVENT_ID in (1373) then 1 else null end)) DEFECTS_COMPLETED
   FROM DP_SCORECARD.PP_WFM_DAILY_SUMMARY_WRK a11
   WHERE 1=1
   AND TO_CHAR(EVENT_DATE,'yyyymm') = lv_dateS_month_num
  and (a11.EVENT_ID in (1374, 1375, 1376, 1377, 1378, 1379)
         or a11.EVENT_ID in (1373))
   group by a11.supervisor_staff_id, a11.staff_id, trunc(event_date), building, department
 ),
 INC_metrics AS
 (
 select
   distinct  a11.supervisor_staff_id, building, department,
          a11.dates_month_num,
       count(distinct a11.task_date) DAYS_incidents_COMPLETED
   from  INCDEFS a11
   where  a11.INCIDENTS_COMPLETED <> 0
   group by a11.supervisor_staff_id, a11.dates_month_num, building, department
 ),
 DEF_metrics AS
 (
 select
   distinct  a11.supervisor_staff_id, building, department,
       a11.dates_month_num,
       count(distinct a11.task_date) as DAYS_DEFECTS_COMPLETED
   from  INCDEFS a11
   where  a11.DEFECTS_COMPLETED <> 0
   group by a11.supervisor_staff_id, a11.dates_month_num, building, department
 ),
CALL_DAYS AS
(
SELECT SUPERVISOR_STAFF_ID, BUILDING, DEPARTMENT,
    TO_CHAR(AS_DATE,'YYYYMM') AS DATES_MONTH_NUM,
    COUNT(DISTINCT AS_DATE) AS DAYS_CALLS_ANSWERED,
    SUM(DAYS_SHORT_CALLS_GT_10) AS DAYS_SHORT_CALLS_GT_10
 FROM   (
        SELECT
            H.SUPERVISOR_STAFF_ID,
            H.STAFF_STAFF_ID, H.BUILDING, H.DEPARTMENT,
            TRUNC(STAT.AS_DATE)  AS_DATE,
            CASE WHEN SUM(STAT.SHORT_CALLS_ANSWERED) > 10 THEN 1 ELSE NULL END AS DAYS_SHORT_CALLS_GT_10
        FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV H
        JOIN DP_SCORECARD.SC_AGENT_STAT_SV STAT
            ON H.STAFF_NATID = STAT.AGENT_ID
        WHERE 1=1
        AND TO_CHAR(STAT.AS_DATE,'YYYYMM') = TO_CHAR(ADD_MONTHS(SYSDATE, -mth_loop),'YYYYMM')
        AND TRUNC(STAT.AS_DATE) BETWEEN TRUNC(H.HIRE_DATE) AND TRUNC(NVL(H.TERMINATION_DATE,SYSDATE))
        GROUP BY H.SUPERVISOR_STAFF_ID, H.STAFF_STAFF_ID, H.BUIlding, h.department, TRUNC(STAT.AS_DATE)
        )
GROUP BY SUPERVISOR_STAFF_ID, building, department, TO_CHAR(AS_DATE,'YYYYMM')
)
---------------
SELECT
	CC_SUMMARY.SUPERVISOR_STAFF_ID,
	CC_SUMMARY.DATES_MONTH,
	CC_SUMMARY.DATES_MONTH_NUM,
	CC_SUMMARY.DATES_YEAR,
	CC_SUMMARY.EXCLUSION_FLAG,
	CC_SUMMARY.BUILDING,
	CC_SUMMARY.DEPARTMENT,
	CC_SUMMARY.TOT_CALLS_ANSWERED,
	CC_SUMMARY.TOT_SHORT_CALLS_ANSWERED,
	CC_SUMMARY.TOT_TOT_RETURN_TO_QUEUE,
	CC_SUMMARY.TOT_AVERAGE_HANDLE_TIME,
	CC_SUMMARY.TOT_SCHED_PRODUCTIVE_TIME,
	CC_SUMMARY.TOT_ACTUAL_PRODUCTIVE_TIME,
	CC_SUMMARY.TOT_TALK_TIME,
	CC_SUMMARY.TOT_WRAP_UP_TIME,
	CC_SUMMARY.TOT_LOGGED_IN_TIME,
	CC_SUMMARY.TOT_NOT_READY_TIME,
	CC_SUMMARY.TOT_BREAK_TIME,
	CC_SUMMARY.TOT_LUNCH_TIME,
	CC_SUMMARY.QCS_PERFORMED,
	CC_SUMMARY.AVG_QC_SCORE,
	CC_SUMMARY.TOT_INCIDENTS_COMPLETED,
	INC_METRICS.DAYS_INCIDENTS_COMPLETED,
	CC_SUMMARY.TOT_DEFECTS_COMPLETED,
	DEF_METRICS.DAYS_DEFECTS_COMPLETED,
	CC_SUMMARY.LAG_TIME_TOT_SCHED_PROD_TIME,
	CC_SUMMARY.TOT_CALL_RECORDS,
	CC_SUMMARY.TOT_CUSTOMER_COUNT,
	CC_SUMMARY.TOT_CALL_WRAP_UP_COUNT,
	CC_SUMMARY.TOT_WRAP_UP_ERROR,
--	CC_SUMMARY.DAYS_SHORT_CALLS_GT_10,
    CALL_DAYS.DAYS_SHORT_CALLS_GT_10,
--  CC_SUMMARY.DAYS_CALLS_ANSWERED,
    CALL_DAYS.DAYS_CALLS_ANSWERED,
    CC_SUMMARY.ADHERENCE,
    CC_SUMMARY.TOT_RETURN_TO_QUEUE_TIMEOUT,
	CC_SUMMARY.AVG_ATTENDANCE_BALANCE,
	CC_SUMMARY.AVG_ATTENDANCE_TOTAL_BALANCE,
	CC_SUMMARY.STAFF_COUNT,
	CC_SUMMARY.SUM_QC_SCORE,
	CC_SUMMARY.COUNT_QC_SCORE,
	CC_SUMMARY.QCS_REMAINING,
	CC_SUMMARY.TOT_HANDLE_TIME,
	CC_SUMMARY.TOT_HANDLE_TIME_COUNT,
	CC_SUMMARY.STAFF_TRTQ_COUNT ,
	CC_SUMMARY.SHORT_CALL_AGENT_COUNT,
	CC_SUMMARY.ADHERENCE_TOT_LOGGED_IN_TIME,
	CC_SUMMARY.ADHERENCE_TOT_NOT_READY_TIME,
	CC_SUMMARY.CALLS_OFFERED,
	CC_SUMMARY.WEBCHAT_ASSIGNED,
	CC_SUMMARY.WEBCHAT_TRANSFERRED,
	CC_SUMMARY.WEBCHAT_CONFERENCED,
	CC_SUMMARY.WEBCHAT_TOTAL_NUMBER,
	--
    CC_SUMMARY.AGENT_DISCONNECTED_SHORT_CALLS,   						
    CC_SUMMARY.CONSUMER_DISCONNECTED_SHORT_CALLS,  						
	CC_SUMMARY.CURRENT_MONTH_EVENTS_SCHEDULED,       					
	CC_SUMMARY.CURRENT_MONTH_EVENTS_MET,             					
	CC_SUMMARY.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	CC_SUMMARY.FIRST_PRIOR_MONTH_EVENTS_MET,             				
	CC_SUMMARY.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,       				
	CC_SUMMARY.SECOND_PRIOR_MONTH_EVENTS_MET,             				
	CC_SUMMARY.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	CC_SUMMARY.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	CC_SUMMARY.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,
	CC_SUMMARY.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,			
	CC_SUMMARY.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,			
	CC_SUMMARY.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME
FROM CC_SUMMARY
LEFT OUTER JOIN INC_METRICS ON INC_METRICS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND INC_METRICS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND INC_METRICS.BUILDING = CC_SUMMARY.BUILDING
    AND INC_METRICS.DEPARTMENT = CC_SUMMARY.DEPARTMENT
LEFT OUTER JOIN DEF_METRICS ON DEF_METRICS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND DEF_METRICS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND DEF_METRICS.BUILDING = CC_SUMMARY.BUILDING
    AND DEF_METRICS.DEPARTMENT = CC_SUMMARY.DEPARTMENT
LEFT OUTER JOIN CALL_DAYS ON CALL_DAYS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND CALL_DAYS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND CALL_DAYS.BUILDING = CC_SUMMARY.BUILDING
    AND CALL_DAYS.DEPARTMENT = CC_SUMMARY.DEPARTMENT;

    COMMIT;

END LOOP;  -- end for loop

    COMMIT;

--------------------------------------------------------
-- LOOP TO UPDATE SC_SUMMARY_CC_ROLLUP FLAGS
--------------------------------------------------------

FOR MTH_LOOP IN ADD_MTH_START .. ADD_MTH_STOP

	LOOP

		SELECT
			TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -MTH_LOOP), 'MM'), 'YYYYMM'), 	-- DATES_MONTH_NUM,
            TRUNC(ADD_MONTHS(SYSDATE,-MTH_LOOP),'MM'),                          -- FIRST_DAY_OF_MONTH,
            LAST_DAY(ADD_MONTHS(SYSDATE,-MTH_LOOP)),                             -- LAST_DAY_OF_MONTH	
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+1)), 'MM'), 'YYYYMM'), -- FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
            TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, -ABS(MTH_LOOP+2)), 'MM'), 'YYYYMM') -- SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			INTO 
				LV_DATES_MONTH_NUM,
				LV_FIRST_DAY_OF_MONTH,
				LV_LAST_DAY_OF_MONTH,
                LV_FIRST_PRIOR_MONTH_DATES_MONTH_NUM,
                LV_SECOND_PRIOR_MONTH_DATES_MONTH_NUM
			FROM DUAL;		

            --BEGIN

            IF STAFF_CURSOR%ISOPEN
            THEN
                CLOSE STAFF_CURSOR;
            END IF;    

            OPEN STAFF_CURSOR;

            LOOP

                FETCH STAFF_CURSOR INTO SUMMARY_REC;

                EXIT WHEN STAFF_CURSOR%NOTFOUND;


    ------------------------------------------------------------------
    -- THREE_MONTH_CONFORMANCE_MISSED_COUNT
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT :=
			( 
            --
            case
            when
                case 
                when nvl(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0    
                then (SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0 
            end
            --    
            )
            +
            ( 
            --
            case
            when
                case 
                when nvl(SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0    
                then (SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.FIRST_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0 
            end
            --    
            )            
            +
            ( 
            --
            case
            when
                case 
                when nvl(SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED,0) > 0    
                then (SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_MET / SUMMARY_REC.SECOND_PRIOR_MONTH_EVENTS_SCHEDULED)
                else 100 end < .945
            then 1 else 0 
            end
            --    
            );


    ------------------------------------------------------------------
    -- THREE_MONTH_AVG_ADHERENCE
    ------------------------------------------------------------------
    SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE :=
			CASE WHEN 
                (NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
				+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
                )
				> 0
				THEN 
					(( NVL(SUMMARY_REC.ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_LOGGED_IN_TIME,0)
					)
					-
					(NVL(SUMMARY_REC.ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_TOT_NOT_READY_TIME,0)
					)) / 
					(
					NVL(SUMMARY_REC.LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.FIRST_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					+NVL(SUMMARY_REC.SECOND_PRIOR_MONTH_ADHERENCE_LAG_TIME_TOT_SCHED_PROD_TIME,0)
					)
					ELSE 0 END;

    ------------------------------------------------------------------
    -- THREE_MONTH_ADHERENCE_FLAG 
    --5		Reps with Adherence Greater than 99.5% AND have ZERO missed conformance months will be set to Superior(5)
    --4  	Reps with Adherence Greater than 98.5%(and Less than 99.5 ) AND have ZERO missed conformance months will be set to Above Expectation(4)
    --3  	Reps with Adherence Greater than 96.5%(and Less than 98.5 ) AND have ZERO missed conformance months will be set to Meets Expectation(3)
    --2  	Reps with Adherence Less than 96.5% OR have 1 missed conformance months will be set to Below Expectation(2)
    --1  	Reps with Adherence Less than 96.5% OR have 2 or more missed conformance months will be set to Unacceptable(1)
    --0  	Reps with No Adherence details for all three months will be set to Null(0)
    ------------------------------------------------------------------
			SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG :=
				CASE 
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) = 0
				THEN 0
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .995
				AND NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
					THEN 5
				-----				
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .985
				AND NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
					THEN 4
				-----	
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .965
				AND NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 0
					THEN 3
				-----	
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) < .965
				OR NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) = 1
					THEN 2
				-----	
				WHEN NVL(SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,0) >= .965
				OR NVL(SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,0) > 1
					THEN 1
				-----	
				ELSE 0 END;

            -------------------------------------------------------
			-- MONTHLY_CONFORMANCE_FLAG
            -------------------------------------------------------
            SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG :=
				CASE
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) = 0
						THEN 0
					WHEN NVL(SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED,0) > 0    
					AND 
					(SUMMARY_REC.CURRENT_MONTH_EVENTS_MET / SUMMARY_REC.CURRENT_MONTH_EVENTS_SCHEDULED)
					< .945
						THEN 1 -- 'MET'
					ELSE 2 -- 'MISSED' 
				END;
            --    

				UPDATE SC_SUMMARY_CC_ROLLUP
				SET 
					THREE_MONTH_CONFORMANCE_MISSED_COUNT    =  	SUMMARY_REC.THREE_MONTH_CONFORMANCE_MISSED_COUNT,
					THREE_MONTH_AVG_ADHERENCE               =  	SUMMARY_REC.THREE_MONTH_AVG_ADHERENCE,
					THREE_MONTH_ADHERENCE_FLAG 				=	SUMMARY_REC.THREE_MONTH_ADHERENCE_FLAG,
					MONTHLY_CONFORMANCE_FLAG 				= 	SUMMARY_REC.MONTHLY_CONFORMANCE_FLAG
				WHERE CURRENT OF STAFF_CURSOR;

			END LOOP;      

			COMMIT;

			IF STAFF_CURSOR%ISOPEN
			THEN	
				CLOSE STAFF_CURSOR;
			END IF;	



END LOOP;

COMMIT;  

END LOAD_SC_SUMMARY_CC_ROLLUP;
/

SHOW ERRORS