CREATE OR REPLACE Package DP_SCORECARD.PP_WFM_AGENT_CLOCKING_PKG AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL$'; 
  	SVN_REVISION varchar2(20) := '$Revision$'; 
 	SVN_REVISION_DATE varchar2(60) := '$Date$'; 
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author$';


    Procedure Insert_PP_WFM_AGENT_CLOCKING;
    Procedure Update_PP_WFM_AGENT_CLOCKING;
    Procedure Delete_PP_WFM_AGENT_CLOCKING;
	Procedure MERGE_PP_WFM_AGENT_CLOCKING_WORK_DATE;
	Procedure MERGE_PP_WFM_AGENT_CLOCKING;

--	PP_WFM_AGENT_CLOCKING_STAGE
	
END PP_WFM_AGENT_CLOCKING_PKG;
/
show errors
CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_AGENT_CLOCKING_PKG AS

    CURSOR STAGE_WORK_DATE_CSR IS
        SELECT distinct TRUNC(TASK_START) AS WORK_DATE
        FROM PP_WFM_AGENT_CLOCKING_STAGE
 --       GROUP BY TRUNC(TASK_START)
        ORDER BY TRUNC(TASK_START) DESC;

    STAGE_WORK_DATE_REC		STAGE_WORK_DATE_CSR%ROWTYPE;


	CURSOR JOIN_STAGE_CSR IS
		SELECT
			STAGE.ROWID								AS 	STAGE_ROW_ID,
			TARGET.ROWID							AS 	TARGET_ROW_ID,
			-------------------------------------------------
			STAGE.EXTRACT_TIMESTAMP                  AS STAGE_EXTRACT_TIMESTAMP,
			STAGE.SRC                                AS STAGE_SRC,
			STAGE.SRC_TIMESTAMP_GMT                  AS STAGE_SRC_TIMESTAMP_GMT,
			STAGE.STAFF_ID                           AS STAGE_STAFF_ID,
			STAGE.SRC_TYPE                           AS STAGE_SRC_TYPE,
			STAGE.EVENT_ID                           AS STAGE_EVENT_ID,
	--		STAGE.TASK_ID                           AS STAGE_TASK_ID,
			STAGE.TASK_START                         AS STAGE_TASK_START,
			STAGE.TASK_END                           AS STAGE_TASK_END,
			stage.duration_sec                           as stage_duration_sec,
			TARGET.EXTRACT_TIMESTAMP                 AS TARGET_EXTRACT_TIMESTAMP,
			TARGET.SRC                               AS TARGET_SRC,
			TARGET.SRC_TIMESTAMP_GMT                 AS TARGET_SRC_TIMESTAMP_GMT,
			TARGET.STAFF_ID                          AS TARGET_STAFF_ID,
			TARGET.SRC_TYPE                 AS TARGET_SRC_TYPE,
			TARGET.EVENT_ID                          AS TARGET_EVENT_ID,
--			TARGET.TASK_ID                           AS TARGET_TASK_ID,
			TARGET.TASK_START                        AS TARGET_TASK_START,
			TARGET.TASK_END                          AS TARGET_TASK_END,
			target.duration_sec                           as target_duration_sec
		FROM ( SELECT *
                FROM DP_SCORECARD.PP_WFM_AGENT_CLOCKING_STAGE
                WHERE TRUNC(TASK_START) = STAGE_WORK_DATE_REC.WORK_DATE
              ) STAGE
		FULL OUTER JOIN
		( SELECT *
            FROM DP_SCORECARD.PP_WFM_AGENT_CLOCKING
            WHERE TRUNC(TASK_START) = STAGE_WORK_DATE_REC.WORK_DATE
            and delete_detected_date is null
        ) TARGET
		ON STAGE.SRC 							= TARGET.SRC
		AND STAGE.STAFF_ID                      = TARGET.STAFF_ID
		AND STAGE.SRC_TYPE             = TARGET.SRC_TYPE
		AND STAGE.EVENT_ID                      = TARGET.EVENT_ID
		AND STAGE.TASK_START                    = TARGET.TASK_START;

--	AND nvl(stage.task_end,sysdate)         = nvl(target.task_end,sysdate)
--  WHERE TRUNC(STAGE.TASK_START) = STAGE_WORK_DATE_REC.WORK_DATE;
--   AND TRUNC(TARGET.TASK_START) = STAGE_WORK_DATE_REC.WORK_DATE;


	JOIN_STAGE_REC   JOIN_STAGE_CSR%ROWTYPE;

-----------------------------------------------------
Procedure MERGE_PP_WFM_AGENT_CLOCKING IS
-----------------------------------------------------
BEGIN

		IF (STAGE_WORK_DATE_CSR%ISOPEN)
		THEN
			CLOSE STAGE_WORK_DATE_CSR;
		END IF;

		OPEN STAGE_WORK_DATE_CSR;

		LOOP

			FETCH STAGE_WORK_DATE_CSR INTO STAGE_WORK_DATE_REC;

			EXIT WHEN STAGE_WORK_DATE_CSR%NOTFOUND;

			DBMS_OUTPUT.PUT_LINE('STARTING '||STAGE_WORK_DATE_REC.WORK_DATE);

			MERGE_PP_WFM_AGENT_CLOCKING_WORK_DATE;

        END LOOP;

		IF (STAGE_WORK_DATE_CSR%ISOPEN)
		THEN
			CLOSE STAGE_WORK_DATE_CSR;
		END IF;

        COMMIT;


    EXCEPTION

        WHEN NO_DATA_FOUND
            THEN NULL;

        WHEN OTHERS THEN 
        ROLLBACK;
        RAISE;

    END MERGE_PP_WFM_AGENT_CLOCKING;

-----------------------------------------------------
-----------------------------------------------------
PROCEDURE MERGE_PP_WFM_AGENT_CLOCKING_WORK_DATE IS
-----------------------------------------------------
    LV_TASK_TIMESTAMP_GMT           TIMESTAMP := SYSDATE - 999;
    LV_RT_TASK_TIMESTAMP_GMT        TIMESTAMP := SYSDATE - 999;
    LV_RT_ACTUALS_TIMESTAMP_GMT     TIMESTAMP := SYSDATE - 999;

	BEGIN



		IF (JOIN_STAGE_CSR%ISOPEN)
		THEN
			CLOSE JOIN_STAGE_CSR;
		END IF;

		OPEN JOIN_STAGE_CSR;

		LOOP

			FETCH JOIN_STAGE_CSR INTO JOIN_STAGE_REC;

			EXIT WHEN JOIN_STAGE_CSR%NOTFOUND;

			IF JOIN_STAGE_REC.STAGE_ROW_ID IS NOT NULL
			AND JOIN_STAGE_REC.TARGET_ROW_ID IS NOT NULL
                --then null;
				THEN UPDATE_PP_WFM_AGENT_CLOCKING;
			ELSIF JOIN_STAGE_REC.STAGE_ROW_ID IS NOT NULL
			AND JOIN_STAGE_REC.TARGET_ROW_ID IS NULL
                --then null;
				THEN INSERT_PP_WFM_AGENT_CLOCKING;
			ELSIF JOIN_STAGE_REC.STAGE_ROW_ID IS NULL
			AND JOIN_STAGE_REC.TARGET_ROW_ID IS NOT NULL
                --then null;
				THEN DELETE_PP_WFM_AGENT_CLOCKING;
			ELSE
				NULL;
			END IF;

		END LOOP;

		COMMIT;

		IF (JOIN_STAGE_CSR%ISOPEN)
		THEN
			CLOSE JOIN_STAGE_CSR;
		END IF;


    EXCEPTION

        WHEN NO_DATA_FOUND
        THEN NULL;

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('cursor fail'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_ROW_ID);

        RAISE;

    END MERGE_PP_WFM_AGENT_CLOCKING_WORK_DATE;
-----------------------------------------------------
PROCEDURE UPDATE_PP_WFM_AGENT_CLOCKING IS
-----------------------------------------------------

	BEGIN

		IF NVL(JOIN_STAGE_REC.TARGET_EXTRACT_TIMESTAMP,SYSDATE - 93333)	  <>  	NVL(JOIN_STAGE_REC.STAGE_EXTRACT_TIMESTAMP,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_SRC_TIMESTAMP_GMT,SYSDATE - 93333)	  <>  	NVL(JOIN_STAGE_REC.STAGE_SRC_TIMESTAMP_GMT,SYSDATE - 93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_TASK_START,SYSDATE - 93333)	  <>  	NVL(JOIN_STAGE_REC.STAGE_TASK_START,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_TASK_END,SYSDATE - 93333)	  <>  	NVL(JOIN_STAGE_REC.STAGE_TASK_END,SYSDATE - 93333)
		or nvl(JOIN_STAGE_REC.target_duration_sec,-999999)            <>  nvl(JOIN_STAGE_REC.stage_duration_sec,-999999)
	THEN
	UPDATE DP_SCORECARD.PP_WFM_AGENT_CLOCKING
		SET
			EXTRACT_TIMESTAMP                         =  JOIN_STAGE_REC.STAGE_EXTRACT_TIMESTAMP,
			SRC_TIMESTAMP_GMT                         =  JOIN_STAGE_REC.STAGE_SRC_TIMESTAMP_GMT,
			TASK_START                                =  JOIN_STAGE_REC.STAGE_TASK_START,
			TASK_END                                  =  JOIN_STAGE_REC.STAGE_TASK_END,
			DURATION_sec                                  =  JOIN_STAGE_REC.STAGE_duration_sec
	WHERE ROWID = JOIN_STAGE_REC.TARGET_ROW_ID;

	ELSE
		NULL;
	END IF;

	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('update fail'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_ROW_ID);

        ROLLBACK;
        
        RAISE;


END UPDATE_PP_WFM_AGENT_CLOCKING;


-----------------------------------------------------
PROCEDURE INSERT_PP_WFM_AGENT_CLOCKING IS
-----------------------------------------------------

	BEGIN

		INSERT INTO DP_SCORECARD.PP_WFM_AGENT_CLOCKING
		(
			EXTRACT_TIMESTAMP,
			SRC,
			SRC_TIMESTAMP_GMT,
			STAFF_ID,
			SRC_TYPE,
			EVENT_ID,
--			TASK_ID,
			TASK_START,
			TASK_END,
			duration_sec
		)
		VALUES (
				JOIN_STAGE_REC.STAGE_EXTRACT_TIMESTAMP,
				JOIN_STAGE_REC.STAGE_SRC,
				JOIN_STAGE_REC.STAGE_SRC_TIMESTAMP_GMT,
				JOIN_STAGE_REC.STAGE_STAFF_ID,
				JOIN_STAGE_REC.STAGE_SRC_TYPE,
				JOIN_STAGE_REC.STAGE_EVENT_ID,
--				JOIN_STAGE_REC.STAGE_TASK_ID,
				JOIN_STAGE_REC.STAGE_TASK_START,
				JOIN_STAGE_REC.STAGE_TASK_END,
				JOIN_STAGE_REC.STAGE_duration_sec
				);


	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('insert fail'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_ROW_ID);

        ROLLBACK;
        
        RAISE;


END INSERT_PP_WFM_AGENT_CLOCKING;

-----------------------------------------------------
PROCEDURE DELETE_PP_WFM_AGENT_CLOCKING IS
-----------------------------------------------------

	BEGIN

        update DP_SCORECARD.PP_WFM_AGENT_CLOCKING
        set delete_detected_date = SYSDATE
        where rowid = JOIN_STAGE_REC.target_row_id;
        

	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('delete fail'||' '
             ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_ROW_ID);

        ROLLBACK;
        
        RAISE;


END DELETE_PP_WFM_AGENT_CLOCKING;


-----------------------------------------------------
-----------------------------------------------------

END PP_WFM_AGENT_CLOCKING_PKG;
/

show errors

CREATE OR REPLACE Package DP_SCORECARD.PP_WFM_AGENT_CLOCKING_HISTORY_PKG AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL$'; 
  	SVN_REVISION varchar2(20) := '$Revision$'; 
 	SVN_REVISION_DATE varchar2(60) := '$Date$'; 
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author$';


    PROCEDURE INSERT_PP_WFM_AGENT_CLOCKING_HISTORY;
    PROCEDURE UPDATE_PP_WFM_AGENT_CLOCKING_HISTORY;
    PROCEDURE DELETE_PP_WFM_AGENT_CLOCKING_HISTORY;
	PROCEDURE MERGE_PP_WFM_AGENT_CLOCKING_HISTORY_WORK_DATE;
	PROCEDURE MERGE_PP_WFM_AGENT_CLOCKING_HISTORY;

END PP_WFM_AGENT_CLOCKING_HISTORY_PKG;
/

show errors

CREATE OR REPLACE PACKAGE BODY DP_SCORECARD.PP_WFM_AGENT_CLOCKING_HISTORY_PKG AS

    CURSOR STAGE_WORK_DATE_CSR IS
        SELECT distinct TRUNC(TASK_START) AS WORK_DATE
        FROM PP_WFM_AGENT_CLOCKING_STAGE
        WHERE TRUNC(TASK_START) <= TRUNC(SYSDATE)
     --   GROUP BY TRUNC(TASK_START)
        ORDER BY TRUNC(TASK_START);

    STAGE_WORK_DATE_REC		STAGE_WORK_DATE_CSR%ROWTYPE;
    
    -- NOTE: To run 'back dates' you can force a run by 
    -- doing this:
    
    --insert into pp_wfm_agent_clocking_stage(task_start)
    --select distinct trunc(task_start)
    --from pp_wfm_agent_clocking

    ---------------------------------------------------------------
    
	CURSOR JOIN_STAGE_CSR IS
	SELECT
	--	STAGE.ROWID							 AS STAGE_ROW_ID,
		TARGET.ROWID							 AS TARGET_ROW_ID,
		-----------------------------------------------------------
		STAGE.STAFF_ID                           AS STAGE_STAFF_ID,
		STAGE.WORK_DAY                           AS STAGE_WORK_DAY,
		STAGE.SCHEDULED_START                    AS STAGE_SCHEDULED_START,
		STAGE.SCHEDULED_END                      AS STAGE_SCHEDULED_END,
		STAGE.TOTAL_SCHEDULED_MINUTES            AS STAGE_TOTAL_SCHEDULED_MINUTES,
		STAGE.LOG_START                          AS STAGE_LOG_START,
		STAGE.LOG_END                            AS STAGE_LOG_END,
		STAGE.LOG_DURATION_sec                       AS STAGE_LOG_DURATION_sec,
--		STAGE.ACTUALS_START                      AS STAGE_ACTUALS_START,
--		STAGE.ACTUALS_END                        AS STAGE_ACTUALS_END,
--		STAGE.ACTUALS_TOTAL_sec                      AS STAGE_ACTUALS_TOTAL_sec,
--		STAGE.ACTUALS_BREAK_DURATION_sec             AS STAGE_ACTUALS_BREAK_DURATION_sec,
--		STAGE.ACTUALS_LUNCH_DURATION_sec             AS STAGE_ACTUALS_LUNCH_DURATION_sec,
		TARGET.STAFF_ID                          AS TARGET_STAFF_ID,
		TARGET.WORK_DAY                          AS TARGET_WORK_DAY,
		TARGET.SCHEDULED_START                   AS TARGET_SCHEDULED_START,
		TARGET.SCHEDULED_END                     AS TARGET_SCHEDULED_END,
		TARGET.TOTAL_SCHEDULED_MINUTES           AS TARGET_TOTAL_SCHEDULED_MINUTES,
		TARGET.LOG_START                         AS TARGET_LOG_START,
		TARGET.LOG_END                           AS TARGET_LOG_END,
		TARGET.LOG_DURATION_sec                      AS TARGET_LOG_DURATION_sec,
		TARGET.ACTUALS_START                     AS TARGET_ACTUALS_START,
		TARGET.ACTUALS_END                       AS TARGET_ACTUALS_END,
		TARGET.ACTUALS_TOTAL_sec                    AS TARGET_ACTUALS_TOTAL_sec,
		TARGET.ACTUALS_BREAK_DURATION_sec           AS TARGET_ACTUALS_BREAK_DURATION_sec,
		TARGET.ACTUALS_LUNCH_DURATION_sec           AS TARGET_ACTUALS_LUNCH_DURATION_sec
	-------------------------------------------------------
	FROM ( SELECT * FROM PP_WFM_AGENT_CLOCKING_STAGE_2_HIST_V
           WHERE TRUNC(WORK_DAY) = STAGE_WORK_DATE_REC.WORK_DATE
           ) STAGE
	FULL OUTER JOIN
        ( SELECT * FROM PP_WFM_AGENT_CLOCKING_HISTORY
          WHERE TRUNC(WORK_DAY) = STAGE_WORK_DATE_REC.WORK_DATE
          and delete_detected_date is null
          )TARGET
	ON STAGE.STAFF_ID = TARGET.STAFF_ID
        AND STAGE.WORK_DAY = TARGET.WORK_DAY
        AND TARGET.DELETE_DETECTED_DATE IS NULL;
--    WHERE TRUNC(STAGE.WORK_DAY) = STAGE_WORK_DATE_REC.WORK_DATE
--    AND TRUNC(TARGET.WORK_DAY) = STAGE_WORK_DATE_REC.WORK_DATE;


	JOIN_STAGE_REC   JOIN_STAGE_CSR%ROWTYPE;

-----------------------------------------------------
-------------------------------------------------

PROCEDURE MERGE_PP_WFM_AGENT_CLOCKING_HISTORY IS

    BEGIN

		IF (STAGE_WORK_DATE_CSR%ISOPEN)
		THEN
			CLOSE STAGE_WORK_DATE_CSR;
		END IF;

		OPEN STAGE_WORK_DATE_CSR;

		LOOP

			FETCH STAGE_WORK_DATE_CSR INTO STAGE_WORK_DATE_REC;

			EXIT WHEN STAGE_WORK_DATE_CSR%NOTFOUND;

			DBMS_OUTPUT.PUT_LINE('STARTING '||STAGE_WORK_DATE_REC.WORK_DATE);

			MERGE_PP_WFM_AGENT_CLOCKING_HISTORY_WORK_DATE;

        END LOOP;

		IF (STAGE_WORK_DATE_CSR%ISOPEN)
		THEN
			CLOSE STAGE_WORK_DATE_CSR;
		END IF;


        COMMIT;


    EXCEPTION

        WHEN NO_DATA_FOUND
            THEN NULL;

        WHEN OTHERS THEN 
        ROLLBACK;
        RAISE;

    END MERGE_PP_WFM_AGENT_CLOCKING_HISTORY;
-----------------------------------------------------
-----------------------------------------------------

PROCEDURE MERGE_PP_WFM_AGENT_CLOCKING_HISTORY_WORK_DATE IS
-----------------------------------------------------
    LV_WORK_DAY   VARCHAR2(20) := NULL;
    LV_ROW_COUNT NUMBER(10)     := 0;
	BEGIN

        LV_ROW_COUNT := 0;

   		IF (JOIN_STAGE_CSR%ISOPEN)
		THEN
			CLOSE JOIN_STAGE_CSR;
		END IF;

		OPEN JOIN_STAGE_CSR;

		LOOP

			FETCH JOIN_STAGE_CSR INTO JOIN_STAGE_REC;

			EXIT WHEN JOIN_STAGE_CSR%NOTFOUND;

            LV_ROW_COUNT := LV_ROW_COUNT+1;

			IF JOIN_STAGE_REC.STAGE_STAFF_ID IS NOT NULL
			AND JOIN_STAGE_REC.TARGET_STAFF_ID IS NOT NULL
				THEN Update_PP_WFM_AGENT_CLOCKING_HISTORY;
			ELSIF JOIN_STAGE_REC.STAGE_STAFF_ID IS NOT NULL
			AND JOIN_STAGE_REC.TARGET_STAFF_ID IS NULL
				THEN INSERT_PP_WFM_AGENT_CLOCKING_HISTORY;
			ELSIF JOIN_STAGE_REC.STAGE_STAFF_ID IS NULL
			AND JOIN_STAGE_REC.TARGET_STAFF_ID IS NOT NULL
				THEN DELETE_PP_WFM_AGENT_CLOCKING_HISTORY;
			ELSE
				NULL;
			END IF;

		END LOOP;

		COMMIT;


        DBMS_OUTPUT.PUT_LINE('WORK_DAY = '||STAGE_WORK_DATE_REC.WORK_DATE||' ROWS = '||LV_ROW_COUNT);


        IF STAGE_WORK_DATE_REC.WORK_DATE IS NOT NULL
        THEN

            UPDATE MAXDAT.CORP_ETL_CONTROL
            SET VALUE = to_char(LEAST(STAGE_WORK_DATE_REC.WORK_DATE,TRUNC(SYSDATE)),'YYYY/MM/DD')
            WHERE NAME = 'PP_WFM_AGENT_CLOCKING_WORK_DAY';
        ELSE
            NULL;
        END IF;

        COMMIT;

		IF (JOIN_STAGE_CSR%ISOPEN)
		THEN
			CLOSE JOIN_STAGE_CSR;
		END IF;



	EXCEPTION

	    WHEN NO_DATA_FOUND
        THEN NULL;

        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('CURSOR FAIL'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_WORK_DAY);
            
            ROLLBACK;
            
            RAISE;

END MERGE_PP_WFM_AGENT_CLOCKING_HISTORY_WORK_DATE;

-----------------------------------------------------
PROCEDURE UPDATE_PP_WFM_AGENT_CLOCKING_HISTORY IS
-----------------------------------------------------

	BEGIN

	--  JOIN ON
	--	TARGET_STAFF_ID
	--	TARGET_WORK_DAY

		IF NVL(JOIN_STAGE_REC.TARGET_SCHEDULED_START,SYSDATE - 93333)	<> NVL(JOIN_STAGE_REC.STAGE_SCHEDULED_START,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_SCHEDULED_END,SYSDATE - 93333)	 	<> NVL(JOIN_STAGE_REC.STAGE_SCHEDULED_END,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_TOTAL_SCHEDULED_MINUTES, -93333)	<> NVL(JOIN_STAGE_REC.STAGE_TOTAL_SCHEDULED_MINUTES, -93333)
		OR NVL(JOIN_STAGE_REC.TARGET_LOG_START,SYSDATE - 93333)	  		<> NVL(JOIN_STAGE_REC.STAGE_LOG_START,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_LOG_END,SYSDATE - 93333)	  		<> NVL(JOIN_STAGE_REC.STAGE_LOG_END,SYSDATE - 93333)
		OR NVL(JOIN_STAGE_REC.TARGET_LOG_DURATION_sec, -93333)	  		<> NVL(JOIN_STAGE_REC.STAGE_LOG_DURATION_sec, -93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_ACTUALS_START,SYSDATE - 93333)	 	<> NVL(JOIN_STAGE_REC.STAGE_ACTUALS_START,SYSDATE - 93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_ACTUALS_END,SYSDATE - 93333)	 	<> NVL(JOIN_STAGE_REC.STAGE_ACTUALS_END,SYSDATE - 93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_ACTUALS_TOTAL_sec, -93333)	  			<> NVL(JOIN_STAGE_REC.STAGE_ACTUALS_TOTAL_sec, -93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_ACTUALS_BREAK_DURATION_sec, -93333)  	<> NVL(JOIN_STAGE_REC.STAGE_ACTUALS_BREAK_DURATION_sec, -93333)
--		OR NVL(JOIN_STAGE_REC.TARGET_ACTUALS_LUNCH_DURATION_sec, -93333)	<> NVL(JOIN_STAGE_REC.STAGE_ACTUALS_LUNCH_DURATION_sec, -93333)
	THEN
	UPDATE DP_SCORECARD.PP_WFM_AGENT_CLOCKING_HISTORY
		SET
			SCHEDULED_START                           =  JOIN_STAGE_REC.STAGE_SCHEDULED_START,
			SCHEDULED_END                             =  JOIN_STAGE_REC.STAGE_SCHEDULED_END,
			TOTAL_SCHEDULED_MINUTES                   =  JOIN_STAGE_REC.STAGE_TOTAL_SCHEDULED_MINUTES,
			LOG_START                                 =  JOIN_STAGE_REC.STAGE_LOG_START,
			LOG_END                                   =  JOIN_STAGE_REC.STAGE_LOG_END,
			LOG_DURATION_sec                              =  JOIN_STAGE_REC.STAGE_LOG_DURATION_sec,
--			ACTUALS_START                             =  JOIN_STAGE_REC.STAGE_ACTUALS_START,
--			ACTUALS_END                               =  JOIN_STAGE_REC.STAGE_ACTUALS_END,
--			ACTUALS_TOTAL_sec                             =  JOIN_STAGE_REC.STAGE_ACTUALS_TOTAL_sec,
--			ACTUALS_BREAK_DURATION_sec                    =  JOIN_STAGE_REC.STAGE_ACTUALS_BREAK_DURATION_sec,
--			ACTUALS_LUNCH_DURATION_sec                   =  JOIN_STAGE_REC.STAGE_ACTUALS_LUNCH_DURATION_sec,
			last_updated_date                           = sysdate
	WHERE ROWID = JOIN_STAGE_REC.TARGET_ROW_ID;

	ELSE
		NULL;
	END IF;

	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('UPDATE FAIL'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_WORK_DAY);

        ROLLBACK;
            
        RAISE;


END UPDATE_PP_WFM_AGENT_CLOCKING_HISTORY;


-----------------------------------------------------
PROCEDURE INSERT_PP_WFM_AGENT_CLOCKING_HISTORY IS
-----------------------------------------------------

	BEGIN

		INSERT INTO DP_SCORECARD.PP_WFM_AGENT_CLOCKING_HISTORY
		(
			STAFF_ID,
			WORK_DAY,
			SCHEDULED_START,
			SCHEDULED_END,
			TOTAL_SCHEDULED_MINUTES,
			LOG_START,
			LOG_END,
			LOG_DURATION_sec,
--			ACTUALS_START,
--			ACTUALS_END,
--			ACTUALS_TOTAL_sec,
--			ACTUALS_BREAK_DURATION_sec,
--			ACTUALS_LUNCH_DURATION_sec,
			created_date
		)
		VALUES (
				JOIN_STAGE_REC.STAGE_STAFF_ID,
				JOIN_STAGE_REC.STAGE_WORK_DAY,
				JOIN_STAGE_REC.STAGE_SCHEDULED_START,
				JOIN_STAGE_REC.STAGE_SCHEDULED_END,
				JOIN_STAGE_REC.STAGE_TOTAL_SCHEDULED_MINUTES,
				JOIN_STAGE_REC.STAGE_LOG_START,
				JOIN_STAGE_REC.STAGE_LOG_END,
				JOIN_STAGE_REC.STAGE_LOG_DURATION_sec,
--				JOIN_STAGE_REC.STAGE_ACTUALS_START,
--				JOIN_STAGE_REC.STAGE_ACTUALS_END,
--				JOIN_STAGE_REC.STAGE_ACTUALS_TOTAL_sec,
--				JOIN_STAGE_REC.STAGE_ACTUALS_BREAK_DURATION_sec,
--				JOIN_STAGE_REC.STAGE_ACTUALS_LUNCH_DURATION_sec,
				sysdate
				);


	EXCEPTION

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INSERT FAIL'||' '
            ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_WORK_DAY);

        ROLLBACK;

        RAISE;


END INSERT_PP_WFM_AGENT_CLOCKING_HISTORY;

-----------------------------------------------------
PROCEDURE DELETE_PP_WFM_AGENT_CLOCKING_HISTORY IS
-----------------------------------------------------

	BEGIN

		UPDATE DP_SCORECARD.PP_WFM_AGENT_CLOCKING_HISTORY
		SET DELETE_DETECTED_DATE = SYSDATE
		WHERE ROWID = JOIN_STAGE_REC.TARGET_ROW_ID;

	exception

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('DELETE FAIL'||' '
             ||JOIN_STAGE_REC.STAGE_STAFF_ID||' '
            ||JOIN_STAGE_REC.STAGE_WORK_DAY);

        ROLLBACK;
            
        RAISE;


END DELETE_PP_WFM_AGENT_CLOCKING_HISTORY;


-----------------------------------------------------
-----------------------------------------------------

END PP_WFM_AGENT_CLOCKING_HISTORY_PKG;
/

show errors