CREATE OR REPLACE PROCEDURE DP_SCORECARD.LOAD_SC_SUMMARY_CC_ROLLUP
( add_mth_start number default 0,
  add_mth_stop  number default 11
 )
AS
-- Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.
 	SVN_FILE_URL varchar2(200) := '$URL: svn://rcmxapp1d.maximus.com/maxdat/BPM/NYHIX/ScoreCard/patch/20171020_1305_LOAD_SC_SUMMARY_CC_PROCS.SQL $';
  	SVN_REVISION varchar2(20) := '$Revision: 21542 $';
 	SVN_REVISION_DATE varchar2(60) := '$Date: 2017-10-20 10:41:03 -0400 (Fri, 20 Oct 2017) $';
  	SVN_REVISION_AUTHOR varchar2(20) := '$Author: wl134672 $';


    lv_date_month_num   varchar2(6)  := '199901';

begin

	For mth_loop in ADD_MTH_START .. ADD_MTH_STOP
	LOOP

--  execute immediate 'TRUNCATE TABLE DP_SCORECARD.SC_SUMMARY_CC_ROLLUP';

    lv_date_month_num := to_char(add_months(sysdate,-mth_loop),'YYYYMM');

	Delete from DP_SCORECARD.SC_SUMMARY_CC_ROLLUP
	where dates_month_num = lv_date_month_num;

    commit;

INSERT INTO DP_SCORECARD.SC_SUMMARY_CC_ROLLUP
	( SUPERVISOR_STAFF_ID, DATES_MONTH, DATES_MONTH_NUM,
	DATES_YEAR, EXCLUSION_FLAG,
   	BUILDING,
	DEPARTMENT,
	TOT_CALLS_ANSWERED,
   TOT_SHORT_CALLS_ANSWERED, TOT_TOT_RETURN_TO_QUEUE, TOT_AVERAGE_HANDLE_TIME,
   TOT_SCHED_PRODUCTIVE_TIME, TOT_ACTUAL_PRODUCTIVE_TIME, TOT_TALK_TIME,
   TOT_WRAP_UP_TIME, TOT_LOGGED_IN_TIME, TOT_NOT_READY_TIME,
   TOT_BREAK_TIME, TOT_LUNCH_TIME, QCS_PERFORMED,
   AVG_QC_SCORE, TOT_INCIDENTS_COMPLETED, DAYS_INCIDENTS_COMPLETED,
   TOT_DEFECTS_COMPLETED, DAYS_DEFECTS_COMPLETED, LAG_TIME_TOT_SCHED_PROD_TIME,
   TOT_CALL_RECORDS, TOT_CUSTOMER_COUNT, TOT_CALL_WRAP_UP_COUNT,
   TOT_WRAP_UP_ERROR, DAYS_SHORT_CALLS_GT_10, DAYS_CALLS_ANSWERED,
   ADHERENCE, TOT_RETURN_TO_QUEUE_TIMEOUT, AVG_ATTENDANCE_BALANCE,
   AVG_ATTENDANCE_TOTAL_BALANCE, STAFF_COUNT, SUM_QC_SCORE,
   COUNT_QC_SCORE, QCS_REMAINING, TOT_HANDLE_TIME,
   TOT_HANDLE_TIME_COUNT, STAFF_TRTQ_COUNT, SHORT_CALL_AGENT_COUNT,
   ADHERENCE_TOT_LOGGED_IN_TIME,
   ADHERENCE_TOT_NOT_READY_TIME
   )
-----
WITH CC_SUMMARY AS
(SELECT
	SUPERVISOR_STAFF_ID,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	BUILDING,
	DEPARTMENT,
	SUM(NVL(TOT_CALLS_ANSWERED,0)) 							AS 	TOT_CALLS_ANSWERED,
	SUM(NVL(TOT_SHORT_CALLS_ANSWERED,0)) 					AS 	TOT_SHORT_CALLS_ANSWERED,
	SUM(NVL(TOT_TOT_RETURN_TO_QUEUE,0)) 					AS 	TOT_TOT_RETURN_TO_QUEUE,
	SUM(NVL(TOT_AVERAGE_HANDLE_TIME,0)) 					AS 	TOT_AVERAGE_HANDLE_TIME,
	SUM(NVL(TOT_SCHED_PRODUCTIVE_TIME,0)) 					AS 	TOT_SCHED_PRODUCTIVE_TIME,
	SUM(NVL(TOT_ACTUAL_PRODUCTIVE_TIME,0)) 					AS 	TOT_ACTUAL_PRODUCTIVE_TIME,
	SUM(NVL(TOT_TALK_TIME,0)) 								AS 	TOT_TALK_TIME,
	SUM(NVL(TOT_WRAP_UP_TIME,0)) 							AS 	TOT_WRAP_UP_TIME,
	SUM(NVL(TOT_LOGGED_IN_TIME,0)) 							AS 	TOT_LOGGED_IN_TIME,
	SUM(NVL(TOT_NOT_READY_TIME,0)) 							AS 	TOT_NOT_READY_TIME,
	SUM(NVL(TOT_BREAK_TIME,0)) 								AS 	TOT_BREAK_TIME,
	SUM(NVL(TOT_LUNCH_TIME,0)) 								AS 	TOT_LUNCH_TIME,
	SUM(NVL(QCS_PERFORMED,0)) 								AS 	QCS_PERFORMED,
	CASE WHEN SUM(NVL(QCS_PERFORMED,0)) <> 0
		THEN
			ROUND(SUM(NVL(AVG_QC_SCORE,0))/SUM(NVL(QCS_PERFORMED,0)),0)
		ELSE 0 END 											AS 	AVG_QC_SCORE,
	SUM(NVL(TOT_INCIDENTS_COMPLETED,0)) 					AS 	TOT_INCIDENTS_COMPLETED,
	SUM(NVL(DAYS_INCIDENTS_COMPLETED,0)) 					AS 	DAYS_INCIDENTS_COMPLETED,
	SUM(NVL(TOT_DEFECTS_COMPLETED,0)) 						AS 	TOT_DEFECTS_COMPLETED,
	SUM(NVL(DAYS_DEFECTS_COMPLETED,0)) 						AS 	DAYS_DEFECTS_COMPLETED,
	SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0))				AS 	LAG_TIME_TOT_SCHED_PROD_TIME,
	SUM(NVL(TOT_CALL_RECORDS,0)) 							AS 	TOT_CALL_RECORDS,
	SUM(NVL(TOT_CUSTOMER_COUNT,0)) 							AS 	TOT_CUSTOMER_COUNT,
	SUM(NVL(TOT_CALL_WRAP_UP_COUNT,0)) 						AS 	TOT_CALL_WRAP_UP_COUNT,
	SUM(NVL(TOT_WRAP_UP_ERROR,0)) 							AS 	TOT_WRAP_UP_ERROR,
	SUM(NVL(DAYS_SHORT_CALLS_GT_10,0)) 						AS 	DAYS_SHORT_CALLS_GT_10,
	SUM(NVL(DAYS_CALLS_ANSWERED,0)) 						AS 	DAYS_CALLS_ANSWERED,
    CASE WHEN SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0)) = 0
        THEN 0
        ELSE SUM(NVL(ADHERENCE_TOT_LOGGED_IN_TIME,0)
        - NVL(ADHERENCE_TOT_NOT_READY_TIME,0))
            /SUM(NVL(LAG_TIME_TOT_SCHED_PROD_TIME,0)) END   AS ADHERENCE,
    SUM(NVL(TOT_RETURN_TO_QUEUE_TIMEOUT,0)) 				AS 	TOT_RETURN_TO_QUEUE_TIMEOUT,
	SUM(NVL(AVG_ATTENDANCE_BALANCE,0)) 						AS 	AVG_ATTENDANCE_BALANCE,
	SUM(NVL(AVG_ATTENDANCE_TOTAL_BALANCE,0))				AS 	AVG_ATTENDANCE_TOTAL_BALANCE,
	SUM(NVL(STAFF_COUNT,0)) 								AS 	STAFF_COUNT,
	SUM(NVL(SUM_QC_SCORE,0)) 								AS 	SUM_QC_SCORE,
	SUM(NVL(COUNT_QC_SCORE,0)) 								AS 	COUNT_QC_SCORE,
	SUM(nvl(qcs_remaining,0)) 								AS 	QCS_REMAINING,
	SUM(NVL(TOT_HANDLE_TIME,0)) 							AS 	TOT_HANDLE_TIME,
	SUM(NVL(TOT_HANDLE_TIME_COUNT,0)) 						AS 	TOT_HANDLE_TIME_COUNT,
	SUM( CASE WHEN TOT_TOT_RETURN_TO_QUEUE > 50
		THEN 1 ELSE 0 END ) 								AS STAFF_TRTQ_COUNT,
	SUM(NVL(SHORT_CALL_AGENT_COUNT,0))						AS 	SHORT_CALL_AGENT_COUNT,
	SUM(NVL(ADHERENCE_TOT_LOGGED_IN_TIME,0))				AS 	ADHERENCE_TOT_LOGGED_IN_TIME,
	SUM(NVL(ADHERENCE_TOT_NOT_READY_TIME,0)) 				AS 	ADHERENCE_TOT_NOT_READY_TIME
FROM DP_SCORECARD.SC_SUMMARY_CC
where DATES_MONTH_NUM = lv_date_month_num
GROUP BY
	SUPERVISOR_STAFF_ID,
	DATES_MONTH,
	DATES_MONTH_NUM,
	DATES_YEAR,
	EXCLUSION_FLAG,
	BUILDING,
	DEPARTMENT
),
INCDEFS AS
 (
   SELECT a11.supervisor_staff_id, building, department,
   trunc(a11.event_date) task_DATE,
       to_char(TRUNC(a11.event_date), 'YYYYMM') as dates_month_num,
       to_char(TRUNC(a11.event_date), 'Month YYYY') as dates_year,
        count((Case when a11.EVENT_ID in (1374, 1375, 1376, 1377, 1378, 1379) then 1 else null end)) INCIDENTS_COMPLETED,
        count((Case when a11.EVENT_ID in (1373) then 1 else null end)) DEFECTS_COMPLETED
   FROM DP_SCORECARD.PP_WFM_DAILY_SUMMARY_WRK a11
   WHERE 1=1
   AND TO_CHAR(EVENT_DATE,'yyyymm') = lv_date_month_num
  and (a11.EVENT_ID in (1374, 1375, 1376, 1377, 1378, 1379)
         or a11.EVENT_ID in (1373))
   group by a11.supervisor_staff_id, a11.staff_id, trunc(event_date), building, department
 ),
 INC_metrics AS
 (
 select
   distinct  a11.supervisor_staff_id, building, department,
          a11.dates_month_num,
--       a11.dates_year,
       count(distinct a11.task_date) DAYS_incidents_COMPLETED
   from  INCDEFS a11
   where  a11.INCIDENTS_COMPLETED <> 0
   group by a11.supervisor_staff_id, a11.dates_month_num, building, department
 ),
 DEF_metrics AS
 (
 select
   distinct  a11.supervisor_staff_id, building, department,
       a11.dates_month_num,
--      a11.dates_year,
       count(distinct a11.task_date) as DAYS_DEFECTS_COMPLETED
   from  INCDEFS a11
   where  a11.DEFECTS_COMPLETED <> 0
   group by a11.supervisor_staff_id, a11.dates_month_num, building, department
 ),
CALL_DAYS AS
(
SELECT SUPERVISOR_STAFF_ID, BUILDING, DEPARTMENT,
    TO_CHAR(AS_DATE,'YYYYMM') AS DATES_MONTH_NUM,
    COUNT(DISTINCT AS_DATE) AS DAYS_CALLS_ANSWERED,
    SUM(DAYS_SHORT_CALLS_GT_10) AS DAYS_SHORT_CALLS_GT_10
 FROM   (
        SELECT
            H.SUPERVISOR_STAFF_ID,
            H.STAFF_STAFF_ID, H.BUILDING, H.DEPARTMENT,
            TRUNC(STAT.AS_DATE)  AS_DATE,
            CASE WHEN SUM(STAT.SHORT_CALLS_ANSWERED) > 10 THEN 1 ELSE NULL END AS DAYS_SHORT_CALLS_GT_10
        FROM DP_SCORECARD.SCORECARD_HIERARCHY_SV H
        JOIN DP_SCORECARD.SC_AGENT_STAT_SV STAT
            ON H.STAFF_NATID = STAT.AGENT_ID
        WHERE 1=1
        AND TO_CHAR(STAT.AS_DATE,'YYYYMM') = TO_CHAR(ADD_MONTHS(SYSDATE, -mth_loop),'YYYYMM')
        AND TRUNC(STAT.AS_DATE) BETWEEN TRUNC(H.HIRE_DATE) AND TRUNC(NVL(H.TERMINATION_DATE,SYSDATE))
        GROUP BY H.SUPERVISOR_STAFF_ID, H.STAFF_STAFF_ID, H.BUIlding, h.department, TRUNC(STAT.AS_DATE)
        )
GROUP BY SUPERVISOR_STAFF_ID, building, department, TO_CHAR(AS_DATE,'YYYYMM')
)
---------------
SELECT
	CC_SUMMARY.SUPERVISOR_STAFF_ID,
	CC_SUMMARY.DATES_MONTH,
	CC_SUMMARY.DATES_MONTH_NUM,
	CC_SUMMARY.DATES_YEAR,
	CC_SUMMARY.EXCLUSION_FLAG,
	CC_SUMMARY.BUILDING,
	CC_SUMMARY.DEPARTMENT,
	CC_SUMMARY.TOT_CALLS_ANSWERED,
	CC_SUMMARY.TOT_SHORT_CALLS_ANSWERED,
	CC_SUMMARY.TOT_TOT_RETURN_TO_QUEUE,
	CC_SUMMARY.TOT_AVERAGE_HANDLE_TIME,
	CC_SUMMARY.TOT_SCHED_PRODUCTIVE_TIME,
	CC_SUMMARY.TOT_ACTUAL_PRODUCTIVE_TIME,
	CC_SUMMARY.TOT_TALK_TIME,
	CC_SUMMARY.TOT_WRAP_UP_TIME,
	CC_SUMMARY.TOT_LOGGED_IN_TIME,
	CC_SUMMARY.TOT_NOT_READY_TIME,
	CC_SUMMARY.TOT_BREAK_TIME,
	CC_SUMMARY.TOT_LUNCH_TIME,
	CC_SUMMARY.QCS_PERFORMED,
	CC_SUMMARY.AVG_QC_SCORE,
	CC_SUMMARY.TOT_INCIDENTS_COMPLETED,
	INC_METRICS.DAYS_INCIDENTS_COMPLETED,
	CC_SUMMARY.TOT_DEFECTS_COMPLETED,
	DEF_METRICS.DAYS_DEFECTS_COMPLETED,
	CC_SUMMARY.LAG_TIME_TOT_SCHED_PROD_TIME,
	CC_SUMMARY.TOT_CALL_RECORDS,
	CC_SUMMARY.TOT_CUSTOMER_COUNT,
	CC_SUMMARY.TOT_CALL_WRAP_UP_COUNT,
	CC_SUMMARY.TOT_WRAP_UP_ERROR,
--	CC_SUMMARY.DAYS_SHORT_CALLS_GT_10,
    CALL_DAYS.DAYS_SHORT_CALLS_GT_10,
--  CC_SUMMARY.DAYS_CALLS_ANSWERED,
    CALL_DAYS.DAYS_CALLS_ANSWERED,
    CC_SUMMARY.ADHERENCE,
    CC_SUMMARY.TOT_RETURN_TO_QUEUE_TIMEOUT,
	CC_SUMMARY.AVG_ATTENDANCE_BALANCE,
	CC_SUMMARY.AVG_ATTENDANCE_TOTAL_BALANCE,
	CC_SUMMARY.STAFF_COUNT,
	CC_SUMMARY.SUM_QC_SCORE,
	CC_SUMMARY.COUNT_QC_SCORE,
	CC_SUMMARY.QCS_REMAINING,
	CC_SUMMARY.TOT_HANDLE_TIME,
	CC_SUMMARY.TOT_HANDLE_TIME_COUNT,
	CC_SUMMARY.STAFF_TRTQ_COUNT ,
	CC_SUMMARY.SHORT_CALL_AGENT_COUNT,
	CC_SUMMARY.ADHERENCE_TOT_LOGGED_IN_TIME,
	CC_SUMMARY.ADHERENCE_TOT_NOT_READY_TIME
FROM CC_SUMMARY
LEFT OUTER JOIN INC_METRICS ON INC_METRICS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND INC_METRICS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND INC_METRICS.BUILDING = CC_SUMMARY.BUILDING
    AND INC_METRICS.DEPARTMENT = CC_SUMMARY.DEPARTMENT
LEFT OUTER JOIN DEF_METRICS ON DEF_METRICS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND DEF_METRICS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND DEF_METRICS.BUILDING = CC_SUMMARY.BUILDING
    AND DEF_METRICS.DEPARTMENT = CC_SUMMARY.DEPARTMENT
LEFT OUTER JOIN CALL_DAYS ON CALL_DAYS.SUPERVISOR_STAFF_ID = CC_SUMMARY.SUPERVISOR_STAFF_ID
    AND CALL_DAYS.DATES_MONTH_NUM = CC_SUMMARY.DATES_MONTH_NUM
    AND CALL_DAYS.BUILDING = CC_SUMMARY.BUILDING
    AND CALL_DAYS.DEPARTMENT = CC_SUMMARY.DEPARTMENT;

    COMMIT;

END LOOP;  -- end for loop

    COMMIT;


END LOAD_SC_SUMMARY_CC_ROLLUP;
/
SHOW ERRORS