alter session set plsql_code_type = native;

create or replace trigger TRG_BIU_NYHIX_ETL_OLTP_DN
before insert or update on NYHIX_ETL_DOC_NOTIF_OLTP
for each row 

begin 
  if INSERTING then 
    if :new.EDNDB_ID is null then :new.EDNDB_ID := SEQ_EDNDB_ID.NEXTVAL;
    end if;
    if :new.STG_EXTRACT_DATE is null then :new.STG_EXTRACT_DATE  := sysdate;
    end if;
  end if;

 :new.STG_LAST_UPDATE_DATE := sysdate;
end;
/

create or replace trigger TRG_BIU_NYHIX_ETL_DN
before insert or update on NYHIX_ETL_DOC_NOTIFICATIONS
for each row 

declare
  V_INSTANCE_START_DATE date := null;
  V_INSTANCE_END_DATE date := null;

begin 
  V_INSTANCE_START_DATE := :new.CREATE_DT;
   
   if :new.COMPLETE_DT is not null and :new.COMPLETE_DT >= V_INSTANCE_START_DATE then
    V_INSTANCE_END_DATE := :new.COMPLETE_DT;
  ELSIF :new.CANCEL_DT is not null and :new.CANCEL_DT >= V_INSTANCE_START_DATE then
    V_INSTANCE_END_DATE := :new.CANCEL_DT;
  else
    V_INSTANCE_END_DATE := null;
  end if;

  :new.INSTANCE_START_DATE := V_INSTANCE_START_DATE;
  :new.INSTANCE_END_DATE := V_INSTANCE_END_DATE;
end;
/

create or replace trigger TRG_AI_NYHIX_ETL_DN_Q
after insert on NYHIX_ETL_DOC_NOTIFICATIONS
for each row

declare

  V_BSL_ID number := 30; -- 'NYHIX_ETL_DOC_NOTIFICATIONS'  
  V_BIL_ID number := 22; -- 'Document ID' 
  V_DATA_VERSION number := 1; -- CDATA for varchar2 
  
  V_EVENT_DATE date := null;
  V_IDENTIFIER varchar2(100) := null;
  
  V_XML_STRING_NEW clob := null;
  
  V_SQL_CODE number := null;
  V_LOG_MESSAGE clob := null;

begin

  V_EVENT_DATE := :new.STG_LAST_UPDATE_DATE;
  V_IDENTIFIER := :new.DOC_NOTIFICATION_ID;

  V_XML_STRING_NEW := 
    '<?xml version="1.0"?>
    <ROWSET>  
    <ROW>
    
<ACCOUNT_ID>'||:new.ACCOUNT_ID||'</ACCOUNT_ID>	 	
<ASED_PROCESS_DN>'|| to_char(:new.ASED_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASED_PROCESS_DN>
<ASF_VERIFY_DN><![CDATA[' ||:new.ASF_VERIFY_DN|| ']]></ASF_VERIFY_DN>	 
<ASSD_PROCESS_DN>'|| to_char(:new.ASSD_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASSD_PROCESS_DN>
<CANCEL_BY><![CDATA[' ||:new.CANCEL_BY|| ']]></CANCEL_BY>
<CANCEL_BY_ID><![CDATA[' ||:new.CANCEL_BY_ID|| ']]></CANCEL_BY_ID>
<CANCEL_DT>'|| to_char(:new.CANCEL_DT,BPM_COMMON.GET_DATE_FMT) || '</CANCEL_DT>
<CANCEL_METHOD><![CDATA[' ||:new.CANCEL_METHOD|| ']]></CANCEL_METHOD>	 
<CANCEL_REASON><![CDATA[' ||:new.CANCEL_REASON|| ']]></CANCEL_REASON>	
<CHANNEL><![CDATA[' ||:new.CHANNEL|| ']]></CHANNEL>	
<COMPLETE_DT>'|| to_char(:new.COMPLETE_DT,BPM_COMMON.GET_DATE_FMT) || '</COMPLETE_DT>
<CREATED_BY><![CDATA[' ||:new.CREATED_BY|| ']]></CREATED_BY>
<CREATED_BY_ID><![CDATA[' ||:new.CREATED_BY_ID|| ']]></CREATED_BY_ID>
<CREATE_DT>'|| to_char(:new.CREATE_DT,BPM_COMMON.GET_DATE_FMT) || '</CREATE_DT>
<DESCRIPTION><![CDATA[' ||:new.DESCRIPTION|| ']]></DESCRIPTION>
<DOC_NOTIFICATION_ID>'||:new.DOC_NOTIFICATION_ID||'</DOC_NOTIFICATION_ID>
<EDNDB_ID>'||:new.EDNDB_ID||'</EDNDB_ID>
<ERROR_CD><![CDATA[' ||:new.ERROR_CD|| ']]></ERROR_CD>
<HXID><![CDATA[' ||:new.HXID|| ']]></HXID>
<HX_ACCOUNT_ID><![CDATA[' ||:new.HX_ACCOUNT_ID|| ']]></HX_ACCOUNT_ID>
<INSTANCE_END_DATE>'|| to_char(:new.INSTANCE_END_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_END_DATE>
<INSTANCE_START_DATE>'|| to_char(:new.INSTANCE_START_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_START_DATE>
<INSTANCE_STATUS><![CDATA[' ||:new.INSTANCE_STATUS|| ']]></INSTANCE_STATUS>	
<KOFAX_DCN><![CDATA[' ||:new.KOFAX_DCN|| ']]></KOFAX_DCN>
<LAST_EVENT_DATE>'||to_char(:new.LAST_EVENT_DATE,BPM_COMMON.GET_DATE_FMT)||'</LAST_EVENT_DATE>
<NOTIFICATION_DT><![CDATA[' ||:new.NOTIFICATION_DT|| ']]></NOTIFICATION_DT>
<PROCESSED_IND><![CDATA[' ||:new.PROCESSED_IND|| ']]></PROCESSED_IND>
<PROCESS_INSTANCE_ID><![CDATA[' ||:new.PROCESS_INSTANCE_ID|| ']]></PROCESS_INSTANCE_ID>
<STAGE_DONE_DATE>'|| to_char(:new.STAGE_DONE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STAGE_DONE_DATE>
<STATUS><![CDATA[' ||:new.STATUS|| ']]></STATUS>
<STATUS_CD><![CDATA[' ||:new.STATUS_CD|| ']]></STATUS_CD>
<STG_EXTRACT_DATE>'|| to_char(:new.STG_EXTRACT_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_EXTRACT_DATE>
<STG_LAST_UPDATE_DATE>'|| to_char(:new.STG_LAST_UPDATE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_LAST_UPDATE_DATE>
<UPDATED_BY><![CDATA[' ||:new.UPDATED_BY|| ']]></UPDATED_BY>	 
<UPDATED_BY_ID><![CDATA[' ||:new.UPDATED_BY_ID|| ']]></UPDATED_BY_ID>
<UPDATE_DT>'|| to_char(:new.UPDATE_DT,BPM_COMMON.GET_DATE_FMT) || '</UPDATE_DT>

    
	</ROW>
    </ROWSET>
    ';
  
  insert into BPM_UPDATE_EVENT_QUEUE (BUEQ_ID,BSL_ID,BIL_ID,identifier,EVENT_DATE,QUEUE_DATE,DATA_VERSION,OLD_DATA,NEW_DATA)
  values (SEQ_BUEQ_ID.NEXTVAL,V_BSL_ID,V_BIL_ID,V_IDENTIFIER,V_EVENT_DATE,sysdate,V_DATA_VERSION,null,xmltype(V_XML_STRING_NEW));
    
EXCEPTION
     
  when OTHERS then
    V_SQL_CODE := SQLCODE;
    V_LOG_MESSAGE := SQLERRM || '
      XML: 
      ' || V_XML_STRING_NEW;
    BPM_COMMON.LOGGER(BPM_COMMON.LOG_LEVEL_SEVERE,null,$$PLSQL_UNIT,V_BSL_ID,V_BIL_ID,V_IDENTIFIER,null,V_LOG_MESSAGE,V_SQL_CODE); 
    RAISE;
  
end;
/


create or replace 
trigger TRG_AU_NYHIX_ETL_DN_Q
after update on NYHIX_ETL_DOC_NOTIFICATIONS
for each row

declare

  V_BSL_ID number := 30; -- 'NYHIX_ETL_MFD_NOTIFICATIONS'  
  V_BIL_ID number := 22; -- 'Document ID'
  V_DATA_VERSION number := 1; -- CDATA for varchar2 
  
  V_EVENT_DATE date := null;
  V_IDENTIFIER varchar2(100) := null;
    
  V_XML_STRING_OLD clob := null;
  V_XML_STRING_NEW clob := null;
   
  V_SQL_CODE number := null;
  V_LOG_MESSAGE clob := null;
  
begin

  V_EVENT_DATE := :new.STG_LAST_UPDATE_DATE;
  V_IDENTIFIER := :new.DOC_NOTIFICATION_ID;

  V_XML_STRING_OLD := 
    '<?xml version="1.0"?>
    <ROWSET>  
    <ROW>
	
<ACCOUNT_ID>'||:old.ACCOUNT_ID||'</ACCOUNT_ID>	 	
<ASED_PROCESS_DN>'|| to_char(:old.ASED_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASED_PROCESS_DN>
<ASF_VERIFY_DN><![CDATA[' ||:old.ASF_VERIFY_DN|| ']]></ASF_VERIFY_DN>	 
<ASSD_PROCESS_DN>'|| to_char(:old.ASSD_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASSD_PROCESS_DN>
<CANCEL_BY><![CDATA[' ||:old.CANCEL_BY|| ']]></CANCEL_BY>
<CANCEL_BY_ID><![CDATA[' ||:old.CANCEL_BY_ID|| ']]></CANCEL_BY_ID>
<CANCEL_DT>'|| to_char(:old.CANCEL_DT,BPM_COMMON.GET_DATE_FMT) || '</CANCEL_DT>
<CANCEL_METHOD><![CDATA[' ||:old.CANCEL_METHOD|| ']]></CANCEL_METHOD>	 
<CANCEL_REASON><![CDATA[' ||:old.CANCEL_REASON|| ']]></CANCEL_REASON>	
<CHANNEL><![CDATA[' ||:old.CHANNEL|| ']]></CHANNEL>	
<COMPLETE_DT>'|| to_char(:old.COMPLETE_DT,BPM_COMMON.GET_DATE_FMT) || '</COMPLETE_DT>
<CREATED_BY><![CDATA[' ||:old.CREATED_BY|| ']]></CREATED_BY>
<CREATED_BY_ID><![CDATA[' ||:old.CREATED_BY_ID|| ']]></CREATED_BY_ID>
<CREATE_DT>'|| to_char(:old.CREATE_DT,BPM_COMMON.GET_DATE_FMT) || '</CREATE_DT>
<DESCRIPTION><![CDATA[' ||:old.DESCRIPTION|| ']]></DESCRIPTION>
<DOC_NOTIFICATION_ID>'||:old.DOC_NOTIFICATION_ID||'</DOC_NOTIFICATION_ID>
<EDNDB_ID>'||:old.EDNDB_ID||'</EDNDB_ID>
<ERROR_CD><![CDATA[' ||:old.ERROR_CD|| ']]></ERROR_CD>
<HXID><![CDATA[' ||:old.HXID|| ']]></HXID>
<HX_ACCOUNT_ID><![CDATA[' ||:old.HX_ACCOUNT_ID|| ']]></HX_ACCOUNT_ID>
<INSTANCE_END_DATE>'|| to_char(:old.INSTANCE_END_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_END_DATE>
<INSTANCE_START_DATE>'|| to_char(:old.INSTANCE_START_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_START_DATE>
<INSTANCE_STATUS><![CDATA[' ||:old.INSTANCE_STATUS|| ']]></INSTANCE_STATUS>	
<KOFAX_DCN><![CDATA[' ||:old.KOFAX_DCN|| ']]></KOFAX_DCN>
<LAST_EVENT_DATE>'||to_char(:old.LAST_EVENT_DATE,BPM_COMMON.GET_DATE_FMT)||'</LAST_EVENT_DATE>
<NOTIFICATION_DT><![CDATA[' ||:old.NOTIFICATION_DT|| ']]></NOTIFICATION_DT>
<PROCESSED_IND><![CDATA[' ||:old.PROCESSED_IND|| ']]></PROCESSED_IND>
<PROCESS_INSTANCE_ID><![CDATA[' ||:old.PROCESS_INSTANCE_ID|| ']]></PROCESS_INSTANCE_ID>
<STAGE_DONE_DATE>'|| to_char(:old.STAGE_DONE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STAGE_DONE_DATE>
<STATUS><![CDATA[' ||:old.STATUS|| ']]></STATUS>
<STATUS_CD><![CDATA[' ||:old.STATUS_CD|| ']]></STATUS_CD>
<STG_EXTRACT_DATE>'|| to_char(:old.STG_EXTRACT_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_EXTRACT_DATE>
<STG_LAST_UPDATE_DATE>'|| to_char(:old.STG_LAST_UPDATE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_LAST_UPDATE_DATE>
<UPDATED_BY><![CDATA[' ||:old.UPDATED_BY|| ']]></UPDATED_BY>	 
<UPDATED_BY_ID><![CDATA[' ||:old.UPDATED_BY_ID|| ']]></UPDATED_BY_ID>
<UPDATE_DT>'|| to_char(:old.UPDATE_DT,BPM_COMMON.GET_DATE_FMT) || '</UPDATE_DT>

    
	</ROW>
    </ROWSET>
    ';
  

  V_XML_STRING_NEW := 
    '<?xml version="1.0"?>
    <ROWSET>  
    <ROW>
	
<ACCOUNT_ID>'||:new.ACCOUNT_ID||'</ACCOUNT_ID>	 	
<ASED_PROCESS_DN>'|| to_char(:new.ASED_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASED_PROCESS_DN>
<ASF_VERIFY_DN><![CDATA[' ||:new.ASF_VERIFY_DN|| ']]></ASF_VERIFY_DN>	 
<ASSD_PROCESS_DN>'|| to_char(:new.ASSD_PROCESS_DN,BPM_COMMON.GET_DATE_FMT) || '</ASSD_PROCESS_DN>
<CANCEL_BY><![CDATA[' ||:new.CANCEL_BY|| ']]></CANCEL_BY>
<CANCEL_BY_ID><![CDATA[' ||:new.CANCEL_BY_ID|| ']]></CANCEL_BY_ID>
<CANCEL_DT>'|| to_char(:new.CANCEL_DT,BPM_COMMON.GET_DATE_FMT) || '</CANCEL_DT>
<CANCEL_METHOD><![CDATA[' ||:new.CANCEL_METHOD|| ']]></CANCEL_METHOD>	 
<CANCEL_REASON><![CDATA[' ||:new.CANCEL_REASON|| ']]></CANCEL_REASON>	
<CHANNEL><![CDATA[' ||:new.CHANNEL|| ']]></CHANNEL>	
<COMPLETE_DT>'|| to_char(:new.COMPLETE_DT,BPM_COMMON.GET_DATE_FMT) || '</COMPLETE_DT>
<CREATED_BY><![CDATA[' ||:new.CREATED_BY|| ']]></CREATED_BY>
<CREATED_BY_ID><![CDATA[' ||:new.CREATED_BY_ID|| ']]></CREATED_BY_ID>
<CREATE_DT>'|| to_char(:new.CREATE_DT,BPM_COMMON.GET_DATE_FMT) || '</CREATE_DT>
<DESCRIPTION><![CDATA[' ||:new.DESCRIPTION|| ']]></DESCRIPTION>
<DOC_NOTIFICATION_ID>'||:new.DOC_NOTIFICATION_ID||'</DOC_NOTIFICATION_ID>
<EDNDB_ID>'||:new.EDNDB_ID||'</EDNDB_ID>
<ERROR_CD><![CDATA[' ||:new.ERROR_CD|| ']]></ERROR_CD>
<HXID><![CDATA[' ||:new.HXID|| ']]></HXID>
<HX_ACCOUNT_ID><![CDATA[' ||:new.HX_ACCOUNT_ID|| ']]></HX_ACCOUNT_ID>
<INSTANCE_END_DATE>'|| to_char(:new.INSTANCE_END_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_END_DATE>
<INSTANCE_START_DATE>'|| to_char(:new.INSTANCE_START_DATE,BPM_COMMON.GET_DATE_FMT) || '</INSTANCE_START_DATE>
<INSTANCE_STATUS><![CDATA[' ||:new.INSTANCE_STATUS|| ']]></INSTANCE_STATUS>	
<KOFAX_DCN><![CDATA[' ||:new.KOFAX_DCN|| ']]></KOFAX_DCN>
<LAST_EVENT_DATE>'||to_char(:new.LAST_EVENT_DATE,BPM_COMMON.GET_DATE_FMT)||'</LAST_EVENT_DATE>
<NOTIFICATION_DT><![CDATA[' ||:new.NOTIFICATION_DT|| ']]></NOTIFICATION_DT>
<PROCESSED_IND><![CDATA[' ||:new.PROCESSED_IND|| ']]></PROCESSED_IND>
<PROCESS_INSTANCE_ID><![CDATA[' ||:new.PROCESS_INSTANCE_ID|| ']]></PROCESS_INSTANCE_ID>
<STAGE_DONE_DATE>'|| to_char(:new.STAGE_DONE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STAGE_DONE_DATE>
<STATUS><![CDATA[' ||:new.STATUS|| ']]></STATUS>
<STATUS_CD><![CDATA[' ||:new.STATUS_CD|| ']]></STATUS_CD>
<STG_EXTRACT_DATE>'|| to_char(:new.STG_EXTRACT_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_EXTRACT_DATE>
<STG_LAST_UPDATE_DATE>'|| to_char(:new.STG_LAST_UPDATE_DATE,BPM_COMMON.GET_DATE_FMT) || '</STG_LAST_UPDATE_DATE>
<UPDATED_BY><![CDATA[' ||:new.UPDATED_BY|| ']]></UPDATED_BY>	 
<UPDATED_BY_ID><![CDATA[' ||:new.UPDATED_BY_ID|| ']]></UPDATED_BY_ID>
<UPDATE_DT>'|| to_char(:new.UPDATE_DT,BPM_COMMON.GET_DATE_FMT) || '</UPDATE_DT>

    
	</ROW>
    </ROWSET>
    ';

    insert into BPM_UPDATE_EVENT_QUEUE (BUEQ_ID,BSL_ID,BIL_ID,identifier,EVENT_DATE,QUEUE_DATE,DATA_VERSION,OLD_DATA,NEW_DATA)
    values (SEQ_BUEQ_ID.NEXTVAL,V_BSL_ID,V_BIL_ID,V_IDENTIFIER,V_EVENT_DATE,sysdate,V_DATA_VERSION,xmltype(V_XML_STRING_OLD),xmltype(V_XML_STRING_NEW));

EXCEPTION
   
  when OTHERS then
  
    V_SQL_CODE := SQLCODE;
    V_LOG_MESSAGE := SQLERRM || ' 
      XML (old): 
      ' || V_XML_STRING_OLD || ' 
      XML (new): 
      ' || V_XML_STRING_NEW;
    BPM_COMMON.LOGGER(BPM_COMMON.LOG_LEVEL_SEVERE,null,$$PLSQL_UNIT,V_BSL_ID,V_BIL_ID,V_IDENTIFIER,null,V_LOG_MESSAGE,V_SQL_CODE);
    RAISE;
    
end;
/

alter session set plsql_code_type = interpreted;

