CREATE OR REPLACE VIEW MAXDAT_SUPPORT.F_PL_BY_DATE_DI_ME_LE_TY_SV
AS
SELECT
	D_DATE, 
	DISTRIBUTION_METHOD,
	LETTER_TYPE,
	SUM(REQUEST_COUNT) AS REQUEST_COUNT,
 	SUM(CREATE_COUNT) AS CREATE_COUNT,
 	SUM(COMPLETE_COUNT) AS COMPLETE_COUNT, 	
	SUM(SENT_COUNT) AS SENT_COUNT,
	SUM(AGE_IN_BUS_DAYS_CUMULATIVE) AS AGE_IN_BUS_DAYS_CUMULATIVE, 
	SUM(AGE_IN_CAL_DAYS_CUMULATIVE) AS AGE_IN_CAL_DAYS_CUMULATIVE, 
	SUM(OUTCOME_SUCCESSFUL_COUNT) AS OUTCOME_SUCCESSFUL_COUNT, 
	SUM(OUTCOME_UNSUCCESSFUL_COUNT) AS OUTCOME_UNSUCCESSFUL_COUNT, 
	SUM(SENT_SUCCESSFUL_COUNT) AS SENT_SUCCESSFUL_COUNT, 
	SUM(SENT_UNSUCCESSFUL_COUNT) AS SENT_UNSUCCESSFUL_COUNT,
	SUM(PROCESSED_TIMELY_COUNT)  AS PROCESSED_TIMELY_COUNT, 
	SUM(PROCESSED_UNTIMELY_COUNT)  AS PROCESSED_UNTIMELY_COUNT, 
	SUM(FILE_DELIVERY_COUNT) AS FILE_DELIVERY_COUNT, 
	SUM(LETTER_DELIVERY_COUNT) AS LETTER_DELIVERY_COUNT
--The above code creates an aggregate record at the AGGREGATE DATE, DISTRIBUTION_METHOD, LETTER_TYPE level
FROM
--Four subqueries are used to create an aggregate record 
--Each subquery is filtered based on REQUET_DATE, CREATE_DATE, COMPLETE_DATE, or SENT_DATE not being not null
--Each of the subqueries also calculates metrics that pertain to the particular date filter
--A UNION ALL is used to put all of these records from the subqueries together
--Then an aggregate of the unioned records is done to create the final aggregated record
--REQUEST_DATE subquery
(SELECT 
	TRUNC(REQUEST_DATE) AS D_DATE, 
	DISTRIBUTION_METHOD,
	LETTER_TYPE,
 	SUM(1) AS REQUEST_COUNT,
 	0 AS CREATE_COUNT,
 	0 AS COMPLETE_COUNT, 	
	0 AS SENT_COUNT,
	0 AS AGE_IN_BUS_DAYS_CUMULATIVE, 
	0 AS AGE_IN_CAL_DAYS_CUMULATIVE,
	sum(case when DOCUMENT_OUTCOME_FLAG='S' then 1 else 0 END) AS OUTCOME_SUCCESSFUL_COUNT, 
	sum(case when DOCUMENT_OUTCOME_FLAG='F' then 1 else 0 END) AS OUTCOME_UNSUCCESSFUL_COUNT,
	0 AS SENT_SUCCESSFUL_COUNT, 
	0 AS SENT_UNSUCCESSFUL_COUNT,
	0 AS PROCESSED_TIMELY_COUNT, 
	0 AS PROCESSED_UNTIMELY_COUNT, 
	0 AS FILE_DELIVERY_COUNT, 
	0 AS LETTER_DELIVERY_COUNT
 FROM D_PL_CURRENT_SV
	GROUP BY TRUNC(REQUEST_DATE), DISTRIBUTION_METHOD, LETTER_TYPE
UNION ALL
--CREATE_DATE subquery
SELECT 
	TRUNC(CREATE_DATE) AS D_DATE, 
	DISTRIBUTION_METHOD,
	LETTER_TYPE,
	0 AS REQUEST_COUNT,
 	SUM(1) AS CREATE_COUNT,
 	0 AS COMPLETE_COUNT, 	
	0 AS SENT_COUNT,
	0 AS AGE_IN_BUS_DAYS_CUMULATIVE, 
	0 AS AGE_IN_CAL_DAYS_CUMULATIVE, 
	0 AS OUTCOME_SUCCESSFUL_COUNT, 
	0 AS OUTCOME_UNSUCCESSFUL_COUNT,
	0 AS SENT_SUCCESSFUL_COUNT, 
	0 AS SENT_UNSUCCESSFUL_COUNT, 
	0 AS PROCESSED_TIMELY_COUNT, 
	0 AS PROCESSED_UNTIMELY_COUNT, 
	0 AS FILE_DELIVERY_COUNT, 
	0 AS LETTER_DELIVERY_COUNT
 FROM D_PL_CURRENT_SV
  	WHERE CREATE_DATE IS NOT NULL
	GROUP BY TRUNC(CREATE_DATE), DISTRIBUTION_METHOD, LETTER_TYPE
UNION ALL
--COMPLETE_DATE subquery
SELECT 
 	TRUNC(COMPLETE_DATE) AS D_DATE, 
 	DISTRIBUTION_METHOD,
	LETTER_TYPE,
	0 AS REQUEST_COUNT,
 	0 AS CREATE_COUNT,
	SUM(1) AS COMPLETE_COUNT, 
	0 AS SENT_COUNT,
	0 AS AGE_IN_BUS_DAYS_CUMULATIVE, 
	0 AS AGE_IN_CAL_DAYS_CUMULATIVE, 
    0 AS OUTCOME_SUCCESSFUL_COUNT, 
	0 AS OUTCOME_UNSUCCESSFUL_COUNT,
	0 AS SENT_SUCCESSFUL_COUNT, 
	0 AS SENT_UNSUCCESSFUL_COUNT,  
	0 AS PROCESSED_TIMELY_COUNT, 
	0 AS PROCESSED_UNTIMELY_COUNT, 
	0 AS FILE_DELIVERY_COUNT, 
	0 AS LETTER_DELIVERY_COUNT
FROM D_PL_CURRENT_SV 
 	WHERE COMPLETE_DATE IS NOT NULL
  	GROUP BY TRUNC(COMPLETE_DATE), DISTRIBUTION_METHOD, LETTER_TYPE
UNION ALL
--SENT_DATE subquery
SELECT 
 	TRUNC(SENT_DATE) AS D_DATE, 
 	DISTRIBUTION_METHOD,
	LETTER_TYPE,
	0 AS REQUEST_COUNT,
 	0 AS CREATE_COUNT, 
 	0 AS COMPLETE_COUNT, 
	SUM(1) AS SENT_COUNT,
	sum(AGE_IN_BUS_DAYS_CUMULATIVE) AS AGE_IN_BUS_DAYS_CUMULATIVE, 
	sum(AGE_IN_CAL_DAYS_CUMULATIVE) AS AGE_IN_CAL_DAYS_CUMULATIVE,
	0 AS OUTCOME_SUCCESSFUL_COUNT, 
	0 AS OUTCOME_UNSUCCESSFUL_COUNT,
	sum(case when DOCUMENT_OUTCOME_FLAG='S' then 1 else 0 END) AS SENT_SUCCESSFUL_COUNT, 
	sum(case when DOCUMENT_OUTCOME_FLAG='F' then 1 else 0 END) AS SENT_UNSUCCESSFUL_COUNT,
	sum(case when (TRUNC(SENT_DATE) - TRUNC(REQUEST_DATE)) <=3 then 1 else 0 end) AS PROCESSED_TIMELY_COUNT,
	sum(case when (TRUNC(SENT_DATE) - TRUNC(REQUEST_DATE)) >3 then 1 else 0 end) AS PROCESSED_UNTIMELY_COUNT, 
	SUM(CASE WHEN FILE_DELIVERY_FLAG = 'Y' THEN 1 ELSE 0 end) AS FILE_DELIVERY_COUNT, 
	SUM(CASE WHEN LETTER_DELIVERY_FLAG = 'Y' THEN 1 ELSE 0 end) AS LETTER_DELIVERY_COUNT	
FROM D_PL_CURRENT_SV 
  	WHERE SENT_DATE IS NOT NULL
 	GROUP BY TRUNC(SENT_DATE), DISTRIBUTION_METHOD, LETTER_TYPE)
  	GROUP BY D_DATE, DISTRIBUTION_METHOD, LETTER_TYPE;

GRANT SELECT ON MAXDAT_SUPPORT.F_PL_BY_DATE_DI_ME_LE_TY_SV TO MAXDAT_REPORTS;
GRANT SELECT ON MAXDAT_SUPPORT.F_PL_BY_DATE_DI_ME_LE_TY_SV TO MAXDAT_SUPPORT_READ_ONLY;