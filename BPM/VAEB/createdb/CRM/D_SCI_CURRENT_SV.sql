CREATE OR REPLACE VIEW D_SCI_CURRENT_SV
AS
    SELECT cr.CALL_RECORD_ID AS CONTACT_RECORD_ID,
  cr.CALL_TYPE_CD AS SUPP_CONTACT_TYPE_CD,
  clt.REPORT_LABEL AS CONTACT_TYPE,
  cr.PARENT_CALL_RECORD_ID AS PARENT_RECORD_ID,
  cr.CALL_TRACKING_NUMBER AS TRACKING_NUMBER,
  cr.WORKER_ID AS SUPP_WORKER_ID,
  sw.FIRST_NAME || ' ' || sw.LAST_NAME AS SUPP_WORKER_NAME,
  cr.CREATED_BY AS SUPP_CREATED_BY,
  cb.FIRST_NAME || ' ' || cb.LAST_NAME AS CREATED_BY ,
  NULL AS CREATED_BY_UNIT, 
  NULL AS CREATED_BY_ROLE,  
  cr.CREATE_TS AS CREATE_DT,
  cr.CALL_END_TS AS COMPLETE_DT,
  cr.CALL_START_TS AS CONTACT_START_DT ,
  cr.CALL_END_TS AS CONTACT_END_DT ,
  ROUND((cr.CALL_END_TS-cr.CALL_START_TS)*24*60*60) AS HANDLE_TIME,
  cr.CALLER_TYPE_CD AS SUPP_CONTACT_GROUP_CD,
  ct.DESCRIPTION AS CONTACT_GROUP,
  cr.LANGUAGE_CD AS LANGUAGE_CD, 
  l.DESCRIPTION as LANGUAGE,
  CASE WHEN c.TRANSLATION_REQ > 0 THEN 'Y' WHEN c.TRANSLATION_REQ = 0 THEN 'N' ELSE NULL END AS TRANSLATION_REQ,
  cr.CALLER_PHONE AS CONTACT_PHONE, --check to see if this is anywhere
  cr.EXT_TELEPHONY_REF AS EXT_TELEPHONY_REF,
  CASE WHEN c.TRANSLATION_REQ IS NOT NULL THEN 'Participant' ELSE 'Non-Participant' END AS PARTICIPANT_STATUS,
  n.NOTE_ID AS NOTE_ID,
  n.CATEGORY_CD AS NOTE_CATEGORY_CD,
  n.NOTE_TYPE_CD AS NOTE_TYPE_CD,
  n.SOURCE AS NOTE_SOURCE,
  CASE WHEN n.NOTE_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS NOTE_PRESENT,
  COALESCE(st.report_label, 'Not Defined') AS CONTACT_RECORD_FIELD1,
  cr.CALL_RECORD_FIELD2 AS CONTACT_RECORD_FIELD2,
  cr.CALL_RECORD_FIELD3 AS CONTACT_RECORD_FIELD3,
  cr.CALL_RECORD_FIELD4 AS CONTACT_RECORD_FIELD4,
  cr.CALL_RECORD_FIELD5 AS CONTACT_RECORD_FIELD5,
  cr.CALL_START_TS AS ASSD_HANDLE_CONTACT,
  cr.CALL_END_TS AS ASED_HANDLE_CONTACT,
  CASE WHEN cr.CALL_END_TS IS NOT NULL THEN sw.FIRST_NAME || ' ' || sw.LAST_NAME ELSE NULL END AS ASPB_HANDLE_CONTACT,	
  CASE WHEN ev.LAST_EVENT_CREATE_TS IS NOT NULL THEN cr.CALL_END_TS ELSE NULL END AS ASSD_CREATE_ROUTE_WORK,
  CASE WHEN ev.LAST_EVENT_CREATE_TS IS NOT NULL THEN cr.CALL_END_TS ELSE NULL END AS ASED_CREATE_ROUTE_WORK,
  CASE WHEN cr.CALL_END_TS IS NOT NULL THEN 'Y' ELSE 'N' END AS ASF_HANDLE_CONTACT,
  CASE WHEN ev.LAST_EVENT_CREATE_TS IS NOT NULL THEN 'Y' ELSE 'N' END AS ASF_CREATE_ROUTE_WORK, 
  NULL AS ASF_CANCEL_CONTACT,
  CASE WHEN ev.LAST_EVENT_CREATE_TS IS NOT NULL THEN 'Y' ELSE 'N' END AS GWF_WORK_IDENTIFIED,
  CASE WHEN cr.CALL_END_TS IS NOT NULL AND TRUNC(SYSDATE) - TRUNC(cr.CALL_END_TS) > 3 THEN 'Complete' ELSE 'Active' END AS INSTANCE_STATUS,
  NULL AS CANCEL_DT,
  cr.UPDATED_BY AS SUPP_UPDATE_BY,
  ub.FIRST_NAME || ' ' || ub.LAST_NAME AS LAST_UPDATE_BY_NAME,
  cr.UPDATE_TS AS LAST_UPDATE_DATE,  trunc(sysdate) AS STG_LAST_UPDATE_DATE,
  trunc(sysdate) AS STG_EXTRACT_DATE,
  trunc(sysdate) AS STAGE_DONE_DATE,
  NULL AS CANCEL_METHOD,
  NULL AS CANCEL_REASON,
  NULL AS CANCEL_BY,
  n.note_text  
FROM eb.call_record cr
LEFT JOIN eb.staff sw ON (cr.worker_id = sw.staff_id)
LEFT JOIN eb.staff cb ON (cr.created_by = cb.staff_id)
LEFT JOIN eb.staff ub ON (cr.updated_by = ub.staff_id)
LEFT JOIN eb.enum_language l ON (l.value = cr.language_cd)
LEFT JOIN eb.enum_caller_type ct ON (ct.value = cr.caller_type_cd)
LEFT JOIN eb.enum_call_type clt ON (clt.value = cr.call_type_cd)
LEFT JOIN ENUM_SUBPROGRAM_TYPE st ON (cr.call_record_field1 = st.value)
LEFT JOIN (SELECT e.CALL_RECORD_ID, max(e.CREATE_TS) AS LAST_EVENT_CREATE_TS
            FROM EB.EVENT e
            WHERE e.EVENT_TYPE_CD = 'MANUAL_TASK_CREATED'
            GROUP BY e.call_record_id) ev ON (cr.CALL_RECORD_ID = ev.CALL_RECORD_ID)
LEFT JOIN (SELECT REF_ID1, NOTE_ID, CATEGORY_CD, NOTE_TYPE_CD, SOURCE, NOTE_TEXT,RANK() OVER(PARTITION BY REF_ID1 ORDER BY NOTE_ID DESC) AS RNK
            FROM EB.NOTE
            WHERE REF_TYPE1 = 'CALL_RECORD') n ON (n.RNK = 1 and n.REF_ID1 = cr.CALL_RECORD_ID)
LEFT JOIN (SELECT crl.CALL_RECORD_ID,sum(case when cs.CASE_NEED_TRANSLATOR_IND = 'Y' then 1 else 0 end) as TRANSLATION_REQ
            FROM EB.CALL_RECORD_LINK crl 
            JOIN EB.CASES cs ON (crl.CASE_ID = cs.CASE_ID)            
            GROUP BY crl.CALL_RECORD_ID) c ON (cr.CALL_RECORD_ID = c.CALL_RECORD_ID);
  
  GRANT SELECT ON maxdat_support.D_SCI_CURRENT_SV TO MAXDAT_REPORTS;  