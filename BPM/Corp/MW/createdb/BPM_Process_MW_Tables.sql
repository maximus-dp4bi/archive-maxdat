
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_ENTITY';
   if c = 1 then
      execute immediate 'drop table D_BPM_ENTITY cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_ENTITY_INSTANCE';
   if c = 1 then
      execute immediate 'drop table D_BPM_ENTITY_INSTANCE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_ENTITY_TYPE';
   if c = 1 then
      execute immediate 'drop table D_BPM_ENTITY_TYPE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_FLOW';
   if c = 1 then
      execute immediate 'drop table D_BPM_FLOW cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_FLOW_INSTANCE';
   if c = 1 then
      execute immediate 'drop table D_BPM_FLOW_INSTANCE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_PROCESS';
   if c = 1 then
      execute immediate 'drop table D_BPM_PROCESS cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_PROCESS_INSTANCE';
   if c = 1 then
      execute immediate 'drop table D_BPM_PROCESS_INSTANCE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='F_BPM_PROCESS_BY_DATE';
   if c = 1 then
      execute immediate 'drop table F_BPM_PROCESS_BY_DATE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_PROCESS_SEGMENT';
   if c = 1 then
      execute immediate 'drop table D_BPM_PROCESS_SEGMENT cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_PROCESS_SEGMENT_INSTANCE';
   if c = 1 then
      execute immediate 'drop table D_BPM_PROCESS_SEGMENT_INSTANCE cascade constraints';
   end if;
end;
/
declare  c int;
begin
   select count(*) into c from user_tables where table_name ='D_BPM_TASK_TYPE_ENTITY';
   if c = 1 then
      execute immediate 'drop table D_BPM_TASK_TYPE_ENTITY cascade constraints';
   end if;
end;
/

CREATE TABLE D_BPM_ENTITY
    (
      ENTITY_ID            NUMBER (18) NOT NULL
    , ENTITY_TYPE_ID       NUMBER (18)
    , PROCESS_ID           NUMBER (18)
    , ENTITY_NAME          VARCHAR2 (80)
    , ENTITY_DESCRIPTION   VARCHAR2 (240)
    , SOURCE_REFERENCE_TYPE VARCHAR2 (30)
    , TIMELINESS_THRESHOLD NUMBER (2)
    , TIMELINESS_DAYS_TYPE VARCHAR2 (1)
    , IS_STARTING_ENTITY   VARCHAR2 (1)
    , IS_TERMINATING_ENTITY VARCHAR2 (1)
    ,
    CONSTRAINT PK_D_BPM_ENTITY PRIMARY KEY (ENTITY_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_ENTITY_TYPE_ID
    ON D_BPM_ENTITY (ENTITY_TYPE_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_PROCESS_ID
    ON D_BPM_ENTITY (PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_ENTITY TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_ENTITY_INSTANCE
    (
      ENTITY_INSTANCE_ID   NUMBER (18) NOT NULL
    , ENTITY_ID            NUMBER (18)
    , ENTITY_TYPE_ID       NUMBER (18)
    , PROCESS_INSTANCE_ID  NUMBER (18)
    , ENTITY_NAME          VARCHAR2 (80)
    , ENTITY_DESCRIPTION   VARCHAR2 (240)
    , START_DATE           DATE
    , COMPLETE_DATE        DATE
    , TIMELINESS_STATUS    VARCHAR2 (25)
    , IS_ACTIVE            VARCHAR2 (1)
    , IS_STARTING_ENTITY   VARCHAR2 (1)
    , IS_TERMINATING_ENTITY VARCHAR2 (1)
    ,
    CONSTRAINT PK_D_BPM_ENTITY_INSTANCE PRIMARY KEY (ENTITY_INSTANCE_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_INST_ENTITY_ID
    ON D_BPM_ENTITY_INSTANCE (ENTITY_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_INST_ENTITY_TYPE_ID
    ON D_BPM_ENTITY_INSTANCE (ENTITY_TYPE_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_INST_PROCESS_INST_ID
    ON D_BPM_ENTITY_INSTANCE (PROCESS_INSTANCE_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_ENTITY_INSTANCE TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_ENTITY_TYPE
    (
      ENTITY_TYPE_ID       NUMBER (18) NOT NULL
    , ENTITY_ID            NUMBER (18)
    , ENTITY_TYPE_NAME     VARCHAR2 (80)
    , ENTITY_TYPE_DESCRIPTION VARCHAR2 (240)
    ,
    CONSTRAINT PK_D_BPM_ENTITY_TYPE PRIMARY KEY (ENTITY_TYPE_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_TYPE_ENTITY_ID
    ON D_BPM_ENTITY_TYPE (ENTITY_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_ENTITY_TYPE TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_FLOW
    (
      FLOW_ID              NUMBER (18) NOT NULL
    , PROCESS_ID           NUMBER (18)
    , FLOW_NAME            VARCHAR2 (80)
    , FLOW_DESCRIPTION     VARCHAR2 (240)
    , FLOW_SOURCE_ENTITY_ID NUMBER (18)
    , FLOW_DESTINATION_ENTITY_ID NUMBER (18)
    ,
    CONSTRAINT PK_D_BPM_FLOW PRIMARY KEY (FLOW_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_FLOW_PROCESS_ID
    ON D_BPM_FLOW (PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_FLOW TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_FLOW_INSTANCE
    (
      FLOW_INSTANCE_ID     NUMBER (18) NOT NULL
    , FLOW_ID              NUMBER (18)
    , PROCESS_INSTANCE_ID  NUMBER (18)
    , FLOW_NAME            VARCHAR2 (80)
    , FLOW_DESCRIPTION     VARCHAR2 (240)
    , FLOW_SOURCE_ENTITY_INSTANCE_ID NUMBER (18)
    , FLOW_DEST_ENTITY_INST_ID  NUMBER (18)
    , CREATED_DATE          DATE
    ,
    CONSTRAINT PK_D_BPM_FLOW_INSTANCE PRIMARY KEY (FLOW_INSTANCE_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_FLOW_INST_FLOW_ID
    ON D_BPM_FLOW_INSTANCE (FLOW_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_FLOW_INST_PROCESS_INST_ID
    ON D_BPM_FLOW_INSTANCE (PROCESS_INSTANCE_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_FLOW_INSTANCE TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_PROCESS
    (
      PROCESS_ID           NUMBER (18) NOT NULL
    , PROCESS_NAME         VARCHAR2 (80)
    , PROCESS_DESCRIPTION  VARCHAR2 (240)
    , SOURCE_REFERENCE_TYPE VARCHAR2 (30)
    , PARENT_PROCESS_ID    NUMBER (18)
    , PROCESS_TIMELINESS_THRESHOLD  NUMBER (2)
    , PROCESS_TIMELINESS_DAYS_TYPE VARCHAR2(1)
    ,
    CONSTRAINT PK_D_BPM_PROCESS PRIMARY KEY (PROCESS_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_PARENT_PROCESS_ID
    ON D_BPM_PROCESS (PARENT_PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_PROCESS TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_PROCESS_INSTANCE
    (
      PROCESS_INSTANCE_ID  NUMBER (18) NOT NULL
    , PROCESS_ID           NUMBER (18)
    , PROCESS_NAME         VARCHAR2 (80)
    , PROCESS_DESCRIPTION  VARCHAR2 (240)
    , PARENT_PROCESS_ID    NUMBER (18)
    , PROCESS_START_DATE   DATE
    , PROCESS_COMPLETE_DATE DATE
    , TIMELINESS_STATUS    VARCHAR2 (25)
    ,
    CONSTRAINT PK_D_BPM_PROCESS_INSTANCE PRIMARY KEY (PROCESS_INSTANCE_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_PROCESS_INST_PROCESS_ID
    ON D_BPM_PROCESS_INSTANCE (PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_PROCS_INST_PARNT_PRCS_ID
    ON D_BPM_PROCESS_INSTANCE (PARENT_PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_PROCESS_INSTANCE TO MAXDAT_READ_ONLY;


CREATE TABLE F_BPM_PROCESS_BY_DATE
    (
      PROCESS_ID           NUMBER (18) NOT NULL 
    , D_DATE			   DATE NOT NULL
    , PROCESS_NAME         VARCHAR2 (80)
    , COMPLETE_PROCESS_COUNT NUMBER (18)
    , ACTIVE_PROCESS_COUNT NUMBER (18)
    , AVG_PROCESS_AGE      NUMBER (18,2)
    , MIN_PROCESS_AGE      NUMBER (18,2)
    , MAX_PROCESS_AGE      NUMBER (18,2)
    , AVG_PROCESS_COMPLETE_TIME NUMBER (18,2)
    , MIN_PROCESS_COMPLETE_TIME NUMBER (18,2)
    , MAX_PROCESS_COMPLETE_TIME NUMBER (18,2)
    , TIMELY_PROCESS_COUNT NUMBER (18)
    , UNTIMELY_PROCESS_COUNT NUMBER (18)
    ,
    CONSTRAINT PK_F_BPM_PROCESS_BY_DATE PRIMARY KEY (PROCESS_ID, d_date)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

GRANT SELECT ON F_BPM_PROCESS_BY_DATE TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_PROCESS_SEGMENT
    (
      PROCESS_SEGMENT_ID   NUMBER (18) NOT NULL
    , PROCESS_ID           NUMBER (18)
    , PROCESS_SEGMENT_NAME VARCHAR2 (80)
    , PROCESS_SEGMENT_DESCRIPTION VARCHAR2 (240)
    , PROCESS_TIMELINESS_THRESHOLD  NUMBER (2)
    , PROCESS_TIMELINESS_DAYS_TYPE VARCHAR2(1)
    , SEGMENT_START_ENTITY_ID NUMBER (18)
    , SEGMENT_FINISH_ENTITY_ID NUMBER (18)
    ,
    CONSTRAINT PK_D_BPM_PROCESS_SEGMENT PRIMARY KEY (PROCESS_SEGMENT_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_PROCESS_SEG_PROCESS_ID
    ON D_BPM_PROCESS_SEGMENT (PROCESS_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_PROCESS_SEGMENT TO MAXDAT_READ_ONLY;


CREATE TABLE D_BPM_PROCESS_SEGMENT_INSTANCE
    (
      PROCESS_SEGMENT_INSTANCE_ID   NUMBER (18) NOT NULL
    , PROCESS_SEGMENT_ID   NUMBER (18)
    , PROCESS_INSTANCE_ID  NUMBER (18)
    , PROCESS_SEGMENT_NAME VARCHAR2 (80)
    , PROCESS_SEGMENT_DESCRIPTION VARCHAR2 (240)
    , SEGMENT_START_ENTITY_INST_ID NUMBER (18)
    , SEGMENT_END_ENTITY_INST_ID NUMBER (18)
    , PROCESS_SEGMENT_START_DATE DATE
    , PROCESS_SEGMENT_COMPLETE_DATE DATE
    , TIMELINESS_STATUS    VARCHAR2 (25)
    ,
    CONSTRAINT PK_D_BPM_PROCESS_SEGMENT_INST PRIMARY KEY (PROCESS_SEGMENT_INSTANCE_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

CREATE INDEX IDX_PROC_SEG_PROC_SEG_ID
    ON D_BPM_PROCESS_SEGMENT_INSTANCE (PROCESS_SEGMENT_ID)
    TABLESPACE MAXDAT_INDX;

CREATE INDEX IDX_PROC_SEG_INST_PROC_INST_ID
    ON D_BPM_PROCESS_SEGMENT_INSTANCE (PROCESS_INSTANCE_ID)
    TABLESPACE MAXDAT_INDX;

GRANT SELECT ON D_BPM_PROCESS_SEGMENT_INSTANCE TO MAXDAT_READ_ONLY;

CREATE TABLE D_BPM_TASK_TYPE_ENTITY
    (
      TASK_TYPE_ID NUMBER (18) NOT NULL
    , ENTITY_ID    NUMBER (18) NOT NULL,
    CONSTRAINT PK_D_BPM_TASK_TYPE_ENTITY PRIMARY KEY (TASK_TYPE_ID, ENTITY_ID)
    )
    TABLESPACE MAXDAT_DATA
    STORAGE (BUFFER_POOL DEFAULT);

GRANT select ON D_BPM_TASK_TYPE_ENTITY TO MAXDAT_READ_ONLY;

ALTER TABLE D_BPM_ENTITY MODIFY ( ENTITY_TYPE_ID NOT NULL ) ;

ALTER TABLE D_BPM_ENTITY_INSTANCE MODIFY ( ENTITY_ID NOT NULL ) ;

ALTER TABLE D_BPM_ENTITY_INSTANCE MODIFY ( ENTITY_TYPE_ID NOT NULL ) ;

ALTER TABLE D_BPM_ENTITY_INSTANCE MODIFY ( PROCESS_INSTANCE_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW MODIFY ( PROCESS_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW MODIFY ( FLOW_SOURCE_ENTITY_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW MODIFY ( FLOW_DESTINATION_ENTITY_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW_INSTANCE MODIFY ( FLOW_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW_INSTANCE MODIFY ( PROCESS_INSTANCE_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW_INSTANCE MODIFY ( FLOW_SOURCE_ENTITY_INSTANCE_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW_INSTANCE MODIFY ( FLOW_DEST_ENTITY_INST_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_INSTANCE MODIFY ( PROCESS_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT MODIFY ( PROCESS_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT MODIFY ( SEGMENT_START_ENTITY_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT MODIFY ( SEGMENT_FINISH_ENTITY_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE MODIFY ( PROCESS_SEGMENT_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE MODIFY ( PROCESS_INSTANCE_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE MODIFY ( SEGMENT_START_ENTITY_INST_ID NOT NULL ) ;

ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE MODIFY ( SEGMENT_END_ENTITY_INST_ID NOT NULL ) ;

ALTER TABLE D_BPM_FLOW ADD CONSTRAINT D_BPM_FLOW_D_BPM_PROCESS_FK FOREIGN KEY ( PROCESS_ID ) REFERENCES D_BPM_PROCESS ( PROCESS_ID ) NOT DEFERRABLE ;

ALTER TABLE D_BPM_FLOW ADD CONSTRAINT D_BPM_FLOW_D_BPM_ENTITY_FK FOREIGN KEY ( FLOW_SOURCE_ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE ;

ALTER TABLE D_BPM_FLOW ADD CONSTRAINT D_BPM_FLOW_D_BPM_ENTITY_FKv1 FOREIGN KEY ( FLOW_DESTINATION_ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE ;

ALTER TABLE D_BPM_ENTITY ADD CONSTRAINT D_BPM_ENTITY_FK1 FOREIGN KEY ( ENTITY_TYPE_ID ) REFERENCES D_BPM_ENTITY_TYPE ( ENTITY_TYPE_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_ENTITY ADD CONSTRAINT D_BPM_ENTITY_FK2 FOREIGN KEY ( PROCESS_ID ) REFERENCES D_BPM_PROCESS ( PROCESS_ID ) NOT DEFERRABLE ;
                                        
ALTER TABLE D_BPM_ENTITY_INSTANCE ADD CONSTRAINT D_BPM_ENTITY_INSTANCE_FK1 FOREIGN KEY ( ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_ENTITY_INSTANCE ADD CONSTRAINT D_BPM_ENTITY_INSTANCE_FK2 FOREIGN KEY ( ENTITY_TYPE_ID ) REFERENCES D_BPM_ENTITY_TYPE ( ENTITY_TYPE_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_ENTITY_INSTANCE ADD CONSTRAINT D_BPM_ENTITY_INSTANCE_FK3 FOREIGN KEY ( PROCESS_INSTANCE_ID ) REFERENCES D_BPM_PROCESS_INSTANCE ( PROCESS_INSTANCE_ID ) NOT DEFERRABLE; 
                                                 
ALTER TABLE D_BPM_FLOW_INSTANCE ADD CONSTRAINT D_BPM_FLOW_INSTANCE_FK1 FOREIGN KEY ( FLOW_ID ) REFERENCES D_BPM_FLOW ( FLOW_ID ) NOT DEFERRABLE;                                               
ALTER TABLE D_BPM_FLOW_INSTANCE ADD CONSTRAINT D_BPM_FLOW_INSTANCE_FK2 FOREIGN KEY ( PROCESS_INSTANCE_ID ) REFERENCES D_BPM_PROCESS_INSTANCE ( PROCESS_INSTANCE_ID ) NOT DEFERRABLE;                                               
ALTER TABLE D_BPM_FLOW_INSTANCE ADD CONSTRAINT D_BPM_FLOW_INSTANCE_FK3 FOREIGN KEY ( FLOW_SOURCE_ENTITY_INSTANCE_ID ) REFERENCES D_BPM_ENTITY_INSTANCE ( ENTITY_INSTANCE_ID ) NOT DEFERRABLE;                                               
ALTER TABLE D_BPM_FLOW_INSTANCE ADD CONSTRAINT D_BPM_FLOW_INSTANCE_FK4 FOREIGN KEY ( FLOW_DEST_ENTITY_INST_ID ) REFERENCES D_BPM_ENTITY_INSTANCE ( ENTITY_INSTANCE_ID ) NOT DEFERRABLE;
                                               
ALTER TABLE D_BPM_PROCESS_INSTANCE ADD CONSTRAINT D_BPM_PROCESS_INSTANCE_FK1 FOREIGN KEY ( PROCESS_ID ) REFERENCES D_BPM_PROCESS ( PROCESS_ID ) NOT DEFERRABLE;

ALTER TABLE D_BPM_PROCESS_SEGMENT ADD CONSTRAINT D_BPM_PROCESS_SEG_FK1 FOREIGN KEY ( PROCESS_ID ) REFERENCES D_BPM_PROCESS ( PROCESS_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_PROCESS_SEGMENT ADD CONSTRAINT D_BPM_PROCESS_SEG_FK2 FOREIGN KEY ( SEGMENT_START_ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE;                                                 
ALTER TABLE D_BPM_PROCESS_SEGMENT ADD CONSTRAINT D_BPM_PROCESS_SEG_FK3 FOREIGN KEY ( SEGMENT_FINISH_ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE;
                                                 
ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE ADD CONSTRAINT D_BPM_PROCESS_SEG_INST_FK1 FOREIGN KEY ( PROCESS_SEGMENT_ID ) REFERENCES D_BPM_PROCESS_SEGMENT ( PROCESS_SEGMENT_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE ADD CONSTRAINT D_BPM_PROCESS_SEG_INST_FK2 FOREIGN KEY ( PROCESS_INSTANCE_ID ) REFERENCES D_BPM_PROCESS_INSTANCE ( PROCESS_INSTANCE_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE ADD CONSTRAINT D_BPM_PROCESS_SEG_INST_FK3 FOREIGN KEY ( SEGMENT_START_ENTITY_INST_ID ) REFERENCES D_BPM_ENTITY_INSTANCE ( ENTITY_INSTANCE_ID ) NOT DEFERRABLE;                                                          
ALTER TABLE D_BPM_PROCESS_SEGMENT_INSTANCE ADD CONSTRAINT D_BPM_PROCESS_SEG_INST_FK4 FOREIGN KEY ( SEGMENT_END_ENTITY_INST_ID ) REFERENCES D_BPM_ENTITY_INSTANCE ( ENTITY_INSTANCE_ID ) NOT DEFERRABLE;

ALTER TABLE D_BPM_TASK_TYPE_ENTITY ADD CONSTRAINT D_BPM_TASK_TYPE_ENTITY_FK1 FOREIGN KEY ( TASK_TYPE_ID ) REFERENCES D_TASK_TYPES ( TASK_TYPE_ID ) NOT DEFERRABLE;
ALTER TABLE D_BPM_TASK_TYPE_ENTITY ADD CONSTRAINT D_BPM_TASK_TYPE_ENTITY_FK2 FOREIGN KEY ( ENTITY_ID ) REFERENCES D_BPM_ENTITY ( ENTITY_ID ) NOT DEFERRABLE;

ALTER TABLE D_MW_TASK_INSTANCE ADD CONSTRAINT D_MW_TASK_INSTANCE_FK1 FOREIGN KEY ( TASK_TYPE_ID ) REFERENCES D_TASK_TYPES ( TASK_TYPE_ID ) NOT DEFERRABLE;

ALTER TABLE F_BPM_PROCESS_BY_DATE ADD CONSTRAINT F_BPM_PROCESS_BY_DATE_FK1 FOREIGN KEY ( PROCESS_ID ) REFERENCES D_BPM_PROCESS ( PROCESS_ID ) NOT DEFERRABLE;

ALTER TABLE F_STAFF_BY_DATE ADD CONSTRAINT F_STAFF_BY_DATE_FK1 FOREIGN KEY ( STAFF_ID ) REFERENCES D_STAFF ( STAFF_ID ) NOT DEFERRABLE;


--Replace fact view 
CREATE OR REPLACE VIEW F_MW_TASK_INSTANCE_BY_DATE_SV
AS
WITH tasks AS (
SELECT a.task_type_id, a.MW_BI_ID, a.task_id, b.entity_id FROM D_MW_TASK_INSTANCE a JOIN d_bpm_task_type_entity b ON a.TASK_TYPE_ID = b.TASK_TYPE_ID
), processes AS (
SELECT e.process_instance_id,t.mw_bi_id FROM D_BPM_ENTITY_INSTANCE e JOIN tasks t ON t.task_id = e.entity_instance_id
)
SELECT        d.MW_BI_ID,
              bdd.D_DATE,
              p.Process_instance_id,
              CASE WHEN bdd.D_DATE = TRUNC(d.CREATE_DATE) THEN 1 ELSE 0 END AS CREATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 0 ELSE 1 END AS INVENTORY_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN 1 ELSE 0 END AS COMPLETION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE) THEN 1 ELSE 0 END AS CANCELLATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 1 ELSE 0 END AS TERMINATION_COUNT, 
              Bus_days_between(TRUNC(d.CREATE_DATE), bdd.d_date) AGE_IN_BUS_DAYS             
  FROM D_DATES bdd 
  JOIN D_MW_TASK_INSTANCE d ON (bdd.D_DATE >= TRUNC(d.INSTANCE_START_DATE) AND (bdd.D_DATE <= d.INSTANCE_END_DATE OR d.INSTANCE_END_DATE IS NULL))
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_START_DATE)
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_END_DATE)
  LEFT JOIN processes p
      ON d.MW_BI_ID = p.mw_bi_id;
/

GRANT SELECT ON F_MW_TASK_INSTANCE_BY_DATE_SV TO MAXDAT_READ_ONLY;

