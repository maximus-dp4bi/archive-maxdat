CREATE TABLE D_CEE_CURRENT (
CEEBI_ID 	 NUMBER NOT NULL ENABLE,
EVENT_ID	 NUMBER(38,0) NOT NULL ENABLE,
EVENT_CD	 VARCHAR2(100 BYTE),
SYS_TRA_ID	 NUMBER(38,0),
TRAN_TYPE	 VARCHAR2(30 BYTE),
JOB_ID		 NUMBER(38,0)NOT NULL ENABLE,
CASE_ID		 NUMBER(38,0),
CASE_CIN	 VARCHAR2(30 BYTE),
CLIENT_ID	 NUMBER(38,0),
CLIENT_MED_ID	 VARCHAR2(30 BYTE),
SEGMENT_START_DATE DATE,
SEGMENT_END_DATE DATE,
SEGMENT_ID	 NUMBER(38,0),
ERROR_INDICATOR	 VARCHAR2(1 BYTE),
CREATE_DATE	 DATE NOT NULL ENABLE,
CREATED_BY_NAME	 VARCHAR2(100 BYTE) NOT NULL ENABLE,
UPDATE_DATE	 DATE ,
UPDATE_BY_NAME	 VARCHAR2(100 BYTE) ,
TIERS_SEND_DATE	 DATE,
PROCESS_DATE	 DATE,
LETTER_TYPE	 VARCHAR2(10),
LETTER_REQUEST_ID	NUMBER(18,0),
PROGRAM		 VARCHAR2(30 BYTE)NOT NULL ENABLE,
PERI_DENTAL_SEGMENT	NUMBER(18,0),
CURR_ENROLL_STAT_DENTAL	VARCHAR2(64 BYTE),
CURR_ENROLL_STAT_MED	 VARCHAR2(64 BYTE),
CURR_CASE_STATUS	 VARCHAR2(2 BYTE),
ENROLL_TRAN_TYPE VARCHAR2(30 BYTE),
ENR_SYS_TRA_ID	 NUMBER(38,0),
EDG_SYS_TRA_ID	 NUMBER(38,0),
INSTANCE_STATUS	 VARCHAR2(32 BYTE) DEFAULT 'Active' NOT NULL ENABLE, 
CANCEL_DATE	 DATE,
CANCEL_BY	 VARCHAR2(80 BYTE),
CANCEL_REASON	 VARCHAR2(40 BYTE),
CANCEL_METHOD	 VARCHAR2(40 BYTE),
COMPLETE_DATE	 DATE,
PROCESS_ELIG_EVENT_START_DATE	DATE NOT NULL ENABLE,
PROCESS_ELIG_EVENT_END_DATE	DATE,
PROCESS_ELIG_EVENT_FLAG	VARCHAR2(1 BYTE),	
PROCESS_ELIG_EVENT_BY	VARCHAR2(100),	
PRIOR_ENR_TRANS_SENT VARCHAR2(1),
INSTANCE_START_DATE  DATE,
INSTANCE_END_DATE    DATE,
LAST_EVENT_DATE DATE,
STG_LAST_UPDATE_DATE DATE,
AGE_IN_BUSINESS_DAYS NUMBER(18,0),
AGE_IN_CALENDAR_DAYS NUMBER(18,0),
STATUS_AGE_IN_BUSINESS_DAYS NUMBER(18,0),
STATUS_AGE_IN_CALENDAR_DAYS NUMBER(18,0),
TIMELINESS_STATUS    VARCHAR2(256 BYTE) DEFAULT 'Not Complete',
SLA_DAYS 	     NUMBER(18,0),
SLA_DAYS_TYPE 	     VARCHAR2(1 BYTE),
TIMELINESS_DATE      DATE,
JEOPARDY_FLAG 	     VARCHAR2(3 BYTE) DEFAULT 'N',
JEOPARDY_DATE 	     DATE,
SLA_JEOPARDY_DAYS    NUMBER(18,0),
SLA_JEOPARDY_DAYS_TYPE VARCHAR2(1 BYTE),
SYS_TRAN_STAGE_ID NUMBER(38,0),
SYS_TRAN_STAGE_NAME VARCHAR2(50),
FEE_STATUS	    VARCHAR2(10)
)TABLESPACE MAXDAT_DATA parallel;

ALTER TABLE D_CEE_CURRENT ADD CONSTRAINT CMCUR_PK PRIMARY KEY (CEEBI_ID) USING INDEX TABLESPACE MAXDAT_INDX;

create unique index d_cee_current_ix1 on D_CEE_CURRENT(EVENT_ID) tablespace MAXDAT_INDX;
create index d_cee_current_ix2 on D_CEE_CURRENT (EVENT_CD) TABLESPACE MAXDAT_INDX;
create index d_cee_current_ix3 on D_CEE_CURRENT (INSTANCE_STATUS) TABLESPACE MAXDAT_INDX;
create index d_cee_current_ix4 on D_CEE_CURRENT (CREATE_DATE) TABLESPACE MAXDAT_INDX;
create index d_cee_current_ix5 on D_CEE_CURRENT (COMPLETE_DATE) TABLESPACE MAXDAT_INDX;
 create index d_cee_current_ix6 on D_CEE_CURRENT (CASE_ID) TABLESPACE MAXDAT_INDX;
 create index d_cee_current_ix7 on D_CEE_CURRENT (SEGMENT_ID) TABLESPACE MAXDAT_INDX;


grant select on D_CEE_CURRENT to MAXDAT_READ_ONLY;

CREATE OR REPLACE VIEW D_CEE_CURRENT_SV AS
SELECT * FROM D_CEE_CURRENT
WITH read only;

grant select on D_CEE_CURRENT_SV to MAXDAT_READ_ONLY;

create table D_CEE_HISTORY
(DCEEBD_ID           NUMBER NOT NULL,
BUCKET_START_DATE    DATE NOT NULL,
BUCKET_END_DATE      DATE NOT NULL,
CEEBI_ID             NUMBER NOT NULL,
ENROLL_STAT_DENTAL   VARCHAR2(64 BYTE), 
ENROLL_STAT_MED      VARCHAR2(64 BYTE), 
CASE_STATUS          VARCHAR2(64 BYTE), 
LAST_EVENT_DATE      DATE NOT NULL,
FEE_STATUS 	     VARCHAR2(10)
)
partition by range (BUCKET_START_DATE)
interval (NUMTODSINTERVAL(1,'day'))
(partition PT_BUCKET_START_DATE_LT_2013 values less than (TO_DATE('20130101','YYYYMMDD')))
tablespace MAXDAT_DATA parallel;

alter table D_CEE_HISTORY add constraint DCEEBD_ID_PK primary key (DCEEBD_ID) using index tablespace MAXDAT_INDX;
alter table D_CEE_HISTORY add constraint DCMBD_DCM_BI_ID_FK foreign key (CEEBI_ID) references D_CEE_CURRENT(CEEBI_ID);

create unique index DCEEBD_UIX2 on D_CEE_HISTORY (CEEBI_ID, BUCKET_START_DATE) online tablespace MAXDAT_INDX parallel compute statistics;
create index DCEEBD_IX2 on D_CEE_HISTORY (BUCKET_START_DATE,BUCKET_END_DATE) local online tablespace MAXDAT_INDX parallel compute statistics;
create index DCEEBD_IX3 on D_CEE_HISTORY (CEEBI_ID,BUCKET_START_DATE,BUCKET_END_DATE) local online tablespace MAXDAT_INDX parallel compute statistics;

create sequence SEQ_DCEEBD_ID
minvalue 1
maxvalue 999999999999999999999999999
start with 265
increment by 1
cache 20;

grant select on D_CEE_HISTORY to MAXDAT_READ_ONLY;

CREATE OR REPLACE view D_CEE_HISTORY_SV 
AS
SELECT h.DCEEBD_ID,
  h.BUCKET_START_DATE,
  h.BUCKET_END_DATE,
  h.CEEBI_ID,
  h.ENROLL_STAT_DENTAL,
  h.ENROLL_STAT_MED, 
  h.CASE_STATUS , 
  h.LAST_EVENT_DATE,
  h.FEE_STATUS
FROM D_CEE_HISTORY h join BPM_D_DATES bdd ON (bdd.D_DATE >= h.BUCKET_START_DATE AND bdd.D_DATE <= h.BUCKET_END_DATE);


grant select on D_CEE_HISTORY_SV to MAXDAT_READ_ONLY;

--Replace fact view 
CREATE OR REPLACE VIEW F_CEE_BY_DATE_SV AS 
SELECT        d.CEEBI_ID,
              bdd.D_DATE,
              CASE WHEN bdd.D_DATE = TRUNC(d.CREATE_DATE) THEN 1 else 0 END AS CREATION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN 0 ELSE 1 END AS INVENTORY_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_DATE)) THEN 1 else 0 END AS COMPLETION_COUNT
  FROM D_DATES bdd 
  JOIN D_CEE_CURRENT d ON (bdd.D_DATE >= TRUNC(d.INSTANCE_START_DATE) AND (bdd.D_DATE <= d.INSTANCE_END_DATE OR d.INSTANCE_END_DATE IS NULL))
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_START_DATE)
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_END_DATE);


grant select on F_CEE_BY_DATE_SV to MAXDAT_READ_ONLY;


CREATE OR REPLACE VIEW D_CEE_COSTSHARE_SV AS  
SELECT cc.*, s.cs_details_id, s.payment_limit,s.cap_amount, s.cap_met_date,s.cap_met_amount,s.enrollment_start_date,s.enrollment_end_date,s.total_expense_amount,
       s.fpil,s.net_amount,s.fee_exempt,s.enrollment_fee,s.fee_status_date,s.fee_status,s.lpd_date,s.cs_period_start_date,s.cs_period_end_date
FROM d_cee_current cc
  INNER JOIN (SELECT * FROM cost_share_details_stg s
              WHERE s.cost_share_updates_id = (SELECT MAX(cost_share_updates_id)
              FROM cost_share_details_stg s1
              WHERE s.cs_details_id = s1.cs_details_id)) s
  ON cc.case_id = s.case_id
  AND cc.segment_id = s.cs_details_id
WHERE event_cd != 'ADDR_UPDATED';


grant select on D_CEE_COSTSHARE_SV to MAXDAT_READ_ONLY;