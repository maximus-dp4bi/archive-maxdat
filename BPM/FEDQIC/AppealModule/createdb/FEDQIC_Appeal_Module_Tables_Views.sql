

--changes to task instance table
alter table D_MW_TASK_INSTANCE add (appeal_stage NUMBER(10, 0));
alter table D_MW_TASK_INSTANCE add (task_claimed_time NUMBER);
alter table D_MW_TASK_INSTANCE add (task_unclaimed_time NUMBER);
alter table D_MW_TASK_INSTANCE add (previous_task_type_id NUMBER);
alter table D_MW_TASK_INSTANCE add (non_standard_work_flag varchar(1));
alter table D_MW_TASK_INSTANCE add (handle_time NUMBER);

create index DMWTI_HNDLT on D_MW_TASK_INSTANCE ("HANDLE_TIME") online tablespace MAXDAT_INDX parallel compute statistics;

--fedqic_maxdat_stg
alter table fedqic_maxdat_stg add (appeal_stage NUMBER(10, 0));
--alter table fedqic_maxdat_stg add (previous_task_type_id NUMBER);
--alter table fedqic_maxdat_stg add (non_standard_work_flag varchar(1));
--alter table fedqic_maxdat_stg add (handle_time NUMBER);


--corp_etl_mw
alter table corp_etl_mw add (appeal_stage NUMBER(10, 0));
alter table corp_etl_mw add (previous_task_type_id NUMBER);
alter table corp_etl_mw add (non_standard_work_flag varchar(1));
alter table corp_etl_mw add (handle_time NUMBER);

--corp_etl_mw_wip
alter table corp_etl_mw_wip add (appeal_stage NUMBER(10, 0));
alter table corp_etl_mw_wip add (previous_task_type_id NUMBER);
alter table corp_etl_mw_wip add (non_standard_work_flag varchar(1));
alter table corp_etl_mw_wip add (handle_time NUMBER);

--NOTE: make same changes to task instance view

CREATE OR REPLACE VIEW D_MW_TASK_INSTANCE_SV
AS SELECT
  MW_BI_ID,
  AGE_IN_BUSINESS_DAYS,
  AGE_IN_CALENDAR_DAYS,
  CANCELLED_BY_STAFF_ID,
  CANCEL_METHOD,
  CANCEL_REASON,
  CANCEL_WORK_DATE,
  CASE_ID,
  CLIENT_ID,
  COMPLETE_DATE,
  CREATE_DATE,
  CURR_CREATED_BY_STAFF_ID,
  ESCALATED_FLAG,
  CURR_ESCALATED_TO_STAFF_ID,
  CURR_FORWARDED_BY_STAFF_ID,
  FORWARDED_FLAG,
  CURR_BUSINESS_UNIT_ID,
  INSTANCE_START_DATE,
  INSTANCE_END_DATE,
  JEOPARDY_FLAG,
  CURR_LAST_UPD_BY_STAFF_ID,
  CURR_LAST_UPDATE_DATE,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN CURR_OWNER_STAFF_ID
       WHEN curr_task_status != 'CLAIMED' THEN 0
  ELSE CURR_OWNER_STAFF_ID END CURR_OWNER_STAFF_ID,
  PARENT_TASK_ID,
  SOURCE_REFERENCE_ID,
  SOURCE_REFERENCE_TYPE,
  CURR_STATUS_DATE,
  STATUS_AGE_IN_BUS_DAYS,
  STATUS_AGE_IN_CAL_DAYS,
  STG_EXTRACT_DATE,
  STG_LAST_UPDATE_DATE,
  STAGE_DONE_DATE,
  TASK_ID,
  TASK_PRIORITY,
  CURR_TASK_STATUS,
  TASK_TYPE_ID,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN CURR_TEAM_ID
  WHEN curr_task_status != 'CLAIMED' THEN 0
  ELSE CURR_TEAM_ID END CURR_TEAM_ID,
  TIMELINESS_STATUS,
  UNIT_OF_WORK,
  CURR_WORK_RECEIPT_DATE,
  SOURCE_PROCESS_ID,
  SOURCE_PROCESS_INSTANCE_ID,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN curr_claim_date
       WHEN curr_task_status != 'CLAIMED' THEN NULL
       WHEN curr_task_status = 'CLAIMED' THEN curr_last_update_date
  ELSE NULL END curr_claim_date,
  appeal_stage,
  round(task_claimed_time,6) as task_claimed_time,
  round(task_unclaimed_time,6) as task_unclaimed_time,
  previous_task_type_id,
  non_standard_work_flag,
  round(handle_time,6) as handle_time,
  c.SLA_DAYS,
  d.sla_jeopardy_days,
  e.sla_days_type
from D_MW_TASK_INSTANCE a
LEFT JOIN (SELECT out_var SLA_DAYS, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Days') c
ON a.TASK_TYPE_ID = c.ref_id
LEFT JOIN (SELECT out_var sla_jeopardy_days, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Jeopardy_Days') d
ON a.TASK_TYPE_ID = d.ref_id
LEFT JOIN (SELECT out_var sla_days_type, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Days_Type') e
ON a.TASK_TYPE_ID = e.ref_id WITH READ ONLY;

GRANT SELECT ON D_MW_TASK_INSTANCE_SV TO MAXDAT_READ_ONLY;

--changes to task history table/view
alter table D_MW_TASK_HISTORY add (appeal_stage NUMBER(10, 0));
CREATE OR REPLACE VIEW D_MW_TASK_HISTORY_SV
AS SELECT
  h.DMWBD_ID,
  bdd.D_DATE,
  h.MW_BI_ID,
  h.TASK_STATUS,
  h.BUSINESS_UNIT_ID,
  h.TEAM_ID,
  h.LAST_UPDATE_DATE,
  h.STATUS_DATE,
  h.WORK_RECEIPT_DATE,
  h.CLAIM_DATE,
  h.APPEAL_STAGE
FROM D_MW_TASK_HISTORY h JOIN BPM_D_DATES bdd on (bdd.D_DATE >= h.BUCKET_START_DATE AND bdd.D_DATE <= h.BUCKET_END_DATE);

GRANT SELECT ON D_MW_TASK_HISTORY_SV TO MAXDAT_READ_ONLY;
-------------------------------------------------------------------------------------------------------
--happy path config table
--appeals timeliness config table
  CREATE TABLE C_MW_STANDARD_WORK 
   (
        C_MW_SW_ID NUMBER NOT NULL,
        APPEAL_PART_ID NUMBER(10, 0),
        CURRENT_TASK_TYPE_ID NUMBER,
        PREVIOUS_TASK_TYPE_ID NUMBER
    )   tablespace MAXDAT_DATA ;

  alter table C_MW_STANDARD_WORK add constraint CMWSW_PK primary key (C_MW_SW_ID)
  using index tablespace MAXDAT_INDX;

Grant select on C_MW_STANDARD_WORK to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_CMW_SW_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------------------------------------------------------


--appeal instance stage table
drop table FEDQIC_APPEAL_STG;
CREATE TABLE FEDQIC_APPEAL_STG 
   (	"ID" NUMBER(19,0) NOT NULL ENABLE, 
	"CREATE_DATE" TIMESTAMP (6), 
	"COMPLETE_DATE" TIMESTAMP (6), 
	"CANCELLED_DATE" TIMESTAMP (6), 
	"C_ADJUDICATOR" NUMBER(10,0), 
	"C_APPEAL_DEADLINE_DATE" TIMESTAMP (6), 
	"C_APPEAL_ISSUE" NUMBER(10,0), 
	"C_ITEM_SERVICE" NUMBER(10,0), 
	"C_APPEAL_NUMBER" VARCHAR2(20 CHAR), 
	"C_APPEAL_PRIORITY" NUMBER(10,0), 
	"C_APPEAL_REQUEST_RECEIVED_DATE" TIMESTAMP (6), 
	"C_APPEAL_STAGE" NUMBER(10,0), 
	"C_APPEAL_STATUS" NUMBER(10,0), 
	"C_APPEAL_TYPE" NUMBER(10,0), 
	"C_APPELLANT_DISMISSAL" NUMBER(10,0), 
	"C_APPELLANT_DISMISSAL_REASON" NUMBER(10,0), 
	"C_AUTO_FORWARD" NUMBER(10,0), 
	"C_CASE_FILE_REQUEST_DATE" TIMESTAMP (6), 
	"C_DATE_ACKNOWLEDGEMENT_LETTER_" TIMESTAMP (6), 
	"C_DECISION_LETTER_MAILED_DATE" TIMESTAMP (6), 
	"C_DECISION_SENT_TO_PLAN_DATE" TIMESTAMP (6), 
	"C_MEDICAL_REVIEW_CHECK" NUMBER(1,0), 
	"C_PART" NUMBER(10,0), 
	"C_APPEAL_REASON" NUMBER(10,0), 
	"C_TOLLING_DATE" TIMESTAMP (6), 
	"C_VERBAL_NOTICE" TIMESTAMP (6), 
	"C_CASE_FILE_RECEIVED_DATE" TIMESTAMP (6), 
	"C_CLAIMED_DATE" TIMESTAMP (6), 
	"C_DECISION" NUMBER(10,0), 
	"C_DECISION_NOTIFICATION_METHOD" NUMBER(10,0), 
	"C_HPMS" NUMBER(10,0), 
	"C_HPMS_REQUESTED_DATE" TIMESTAMP (6), 
	"C_IS_REQUEST_FOR_INFORMATION_P" NUMBER(1,0), 
	"C_MAC" NUMBER(10,0), 
	"C_MEDICARE_TYPE" NUMBER(10,0), 
	"C_MSP" NUMBER(10,0), 
	"C_NEW_DOCUMENTATION_REVIEWED" NUMBER(1,0), 
	"C_PHYSICIAN_SPECIALTY" VARCHAR2(100 CHAR), 
	"C_PRECHECK_COMPLETED" NUMBER(1,0), 
	"C_WITHDRAWAL" NUMBER(1,0), 
	"C_WITHDRAWAL_REQUEST_SUBMITTED" NUMBER(10,0), 
	"C_NON_ENGLISH" NUMBER(10,0), 
	"C_NON_ENGLISH_OTHER" VARCHAR2(250 CHAR), 
	"C_DISPOSITION" NUMBER(10,0), 
	"C_DISPOSITION_EXPLANATION" NUMBER(10,0), 
	"C_PROCEDURAL_DECISION_REASON" NUMBER(10,0), 
	"C_SUBSTANTIVE_REASON" NUMBER(10,0), 
	"C_FIRST_REVIEW_CASE_ATTESTATIO" TIMESTAMP (6), 
	"C_FIRST_MEDICAL_REVIEW_DECISIO" NUMBER(10,0), 
	"C_FIRST_REVIEWER" NUMBER(10,0), 
	"C_THIRD_MEDICAL_REVIEW_DECISIO" NUMBER(10,0), 
	"C_THIRD_REVIEW_CASE_ATTESTATIO" TIMESTAMP (6), 
	"C_THIRD_REVIEWER" NUMBER(10,0), 
	"C_EXPERT_REVIEW_CASE_ATTESTATI" TIMESTAMP (6), 
	"C_EXPERT_REVIEWER_MD_ID" NUMBER(10,0), 
	"T_MAXDAT_CLOSED_DATE" TIMESTAMP (6), 
	"C_REASON_FOR_APPEAL" VARCHAR2(4000 BYTE), 
	"C_EXPERT_REVIEW_CITATION" VARCHAR2(4000 BYTE), 
	"CLOSED_DATE" TIMESTAMP (6), 
	"WITHDRAWN_DATE" TIMESTAMP (6), 
	"C_DEMO_REOPENING_TYPE" NUMBER(10,0), 
	"C_OTHER_REOPENING_TYPE" VARCHAR2(50 CHAR), 
	"C_CASE_CURRENTLY_WITH_ALJ" NUMBER(1,0), 
	"C_DATE_OF_REQUEST_TO_ALJ" DATE, 
	"C_DEMO_REOPENING_DUE_DATE" DATE, 
	"C_DEMO_REO_SENT_TO_OMHA_DATE" DATE, 
	"C_OMHA_RESPONSE_RECEIVED" DATE, 
	"C_RESPONSE_FROM_OMHA" NUMBER(10,0), 
	"C_ADDITIONAL_INFO_REQUESTED" DATE, 
	"C_REQUESTED_INFORMATION_DUE" DATE, 
	"C_DEMO_REOPEN_FOLLOW_UP" DATE, 
	"C_ADDITIONAL_INFO_RECEIVED" DATE, 
	"C_REOPENING_DECISION_RESULTS" NUMBER(10,0), 
	"C_NOT_REOPENED_REASON" NUMBER(10,0), 
	"C_OMHA_REMAND_REQUEST" DATE, 
	"C_REMAND_ELIGIBILITY_RESPONSE" DATE, 
	"C_REMAND_RECEIVED_DATE" DATE, 
	"C_OMHA_REMAND_REQUEST_RESPONSE" NUMBER(10,0), 
	"C_OMHA_WITHDRAW_FORM_SENT" DATE, 
	"C_OMHA_WITHDRAW_FORM_RETURNED" DATE, 
	"C_OMHA_NOTIFIED_OF_WITHDRAWL" DATE, 
	"C_ALJ_WITHDRAWAL" DATE, 
	"C_DEMO_REOPENING_APPEAL_NUMBER" VARCHAR2(20 CHAR), 
	"C_REOPENING_ANALYSIS_COMPLETED" DATE, 
	"C_REOPENING_ANALYSIS_OUTCOME" NUMBER(10,0), 
	"C_NOT_PURSUED_BY_CONTR_REASON" NUMBER(10,0), 
	"C_ACK_LETTER_MAILED" DATE, 
	"C_REO_DECISION_LETTER_MAILED" DATE, 
	"C_REOPENING_OUTCOME" NUMBER(10,0), 
	"C_DECLINE_TO_REOPEN_DECISION" DATE, 
	"C_APPEAL_ATTESTATION_DATE" DATE, 
	"C_APPEAL_ATTESTATION" NUMBER(1,0), 
	"C_DEMO_SCHEDULED" TIMESTAMP (6), 
	"C_DEMO_NOTIFICATION_LETTER_SENT" DATE, 
	"C_RESPONSE_DUE" DATE, 
	"C_RESPONSE_RECEIVED" DATE, 
	"C_DEMO_ACCEPTANCE_STATUS" NUMBER(10,0), 
	"C_TELE_DEMO_FOLLOW_UP" DATE, 
	"C_DEMO_NOTIFICATION_LTR_RESENT" DATE, 
	"C_RESCHEDULED_RESPONSE_DUE" DATE, 
	"C_RESCHEDULE_RESPONSE_RECEIVED" DATE, 
	"C_VERBAL_CONFIRMATION" DATE, 
	"C_RESCHEDULED_DEMO_STATUS" NUMBER(10,0), 
	"C_PROVIDER_OR_SUPPLIER_NAME" VARCHAR2(100 CHAR), 
	"C_DEMO_CONFERENCE_STATUS" NUMBER(10,0), 
	"C_REVIEW_TYPE" NUMBER(10,0), 
	"C_EXPERT_REVIEW_DECISION" NUMBER(10,0), 
	"C_REVIEW_NUMBER" NUMBER(10,0)
)   tablespace MAXDAT_DATA ; 

  alter table FEDQIC_APPEAL_STG add constraint APP_STG_PK primary key (ID)
  using index tablespace MAXDAT_INDX;


Grant select on FEDQIC_APPEAL_STG to MAXDAT_READ_ONLY;

---------------------------------------------------------------------------
--corp_etl_appeal
drop table corp_etl_appeal;
CREATE TABLE CORP_ETL_APPEAL 
(
  CEAP_ID NUMBER NOT NULL 
, APPEAL_ID NUMBER(19, 0) NOT NULL 
, CREATE_DATE TIMESTAMP(6) 
, COMPLETE_DATE TIMESTAMP(6) 
, CANCELLED_DATE TIMESTAMP(6) 
, ADJUDICATOR NUMBER(10, 0) 
, DEADLINE_DATE TIMESTAMP(6) 
, APPEAL_ISSUE NUMBER(10, 0) 
, APPEAL_ITEM NUMBER(10, 0) 
, APPEAL_NUMBER VARCHAR2(20 CHAR) 
, APPEAL_PRIORITY_ID NUMBER(10, 0) 
, REQUEST_RECEIVED TIMESTAMP(6) 
, APPEAL_STAGE NUMBER(10, 0) 
, APPEAL_STATUS NUMBER(10, 0) 
, APPEAL_TYPE NUMBER(10, 0) 
, APPEAL_DISMISSAL NUMBER(10, 0) 
, APPEAL_DISMISSAL_REASON NUMBER(10, 0) 
, AUTO_FORWARD NUMBER(10, 0) 
, CASE_FILE_REQUEST_DATE TIMESTAMP(6) 
, ACKNOWLEDGEMENT_LETTER_DATE TIMESTAMP(6) 
, DECISION_MAILED_DATE TIMESTAMP(6) 
, DECISION_SENT_PLAN_DATE TIMESTAMP(6) 
, MEDICAL_REVIEW_CHECK NUMBER(1, 0) 
, APPEAL_PART_ID NUMBER(10, 0) 
, APPEAL_REASON NUMBER(10, 0) 
, APPEAL_TOLLING_DATE TIMESTAMP(6) 
, APPEAL_NOTICE_DATE TIMESTAMP(6) 
, CASE_FILE_RECEIVED_DATE TIMESTAMP(6) 
, CLAIMED_DATE TIMESTAMP(6) 
, DECISION NUMBER(10, 0) 
, DECISION_NOTIFICATION_METHOD NUMBER(10, 0) 
, HPMS NUMBER(10, 0) 
, HPMS_REQUESTED_DATE TIMESTAMP(6) 
, IS_REQUEST_FOR_INFORMATION_P NUMBER(1, 0) 
, MAC NUMBER(10, 0) 
, MEDICARE_TYPE NUMBER(10, 0) 
, MSP NUMBER(10, 0) 
, NEW_DOCUMENTATION_REVIEWED NUMBER(1, 0) 
, PHYSICIAN_SPECIALTY VARCHAR2(100 CHAR) 
, PRECHECK_COMPLETED NUMBER(1, 0) 
, WITHDRAWAL NUMBER(1, 0) 
, WITHDRAWAL_REQUEST_SUBMITTED NUMBER(10, 0) 
, NON_ENGLISH NUMBER(10, 0) 
, NON_ENGLISH_OTHER VARCHAR2(250 CHAR) 
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0) 
, SUBSTANTIVE_REASON NUMBER(10, 0) 
, FIRST_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, FIRST_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, FIRST_REVIEWER NUMBER(10, 0) 
, THIRD_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, THIRD_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, THIRD_REVIEWER NUMBER(10, 0) 
, EXPERT_REVIEW_CASE_ATTESTATI TIMESTAMP(6) 
, EXPERT_REVIEWER_MD_ID NUMBER(10, 0) 
, STG_EXTRACT_DATE DATE 
, STG_LAST_UPDATE_DATE DATE 
, REASON_FOR_APPEAL VARCHAR2(4000 BYTE) 
, EXPERT_REVIEW_CITATION VARCHAR2(4000 BYTE) 
, CLOSED_DATE TIMESTAMP(6) 
, WITHDRAWN_DATE TIMESTAMP(6) 
, DEMO_REOPENING_TYPE NUMBER(10, 0) 
, OTHER_REOPENING_TYPE VARCHAR2(50 CHAR) 
, CASE_CURRENTLY_WITH_ALJ NUMBER(1, 0) 
, DATE_OF_REQUEST_TO_ALJ DATE 
, DEMO_REOPENING_DUE_DATE DATE 
, DEMO_REO_SENT_TO_OMHA_DATE DATE 
, OMHA_RESPONSE_RECEIVED DATE 
, RESPONSE_FROM_OMHA NUMBER(10, 0) 
, ADDITIONAL_INFO_REQUESTED DATE 
, REQUESTED_INFORMATION_DUE DATE 
, DEMO_REOPEN_FOLLOW_UP DATE 
, ADDITIONAL_INFO_RECEIVED DATE 
, REOPENING_DECISION_RESULTS NUMBER(10, 0) 
, NOT_REOPENED_REASON NUMBER(10, 0) 
, OMHA_REMAND_REQUEST DATE 
, REMAND_ELIGIBILITY_RESPONSE DATE 
, REMAND_RECEIVED_DATE DATE 
, OMHA_REMAND_REQUEST_RESPONSE NUMBER(10, 0) 
, OMHA_WITHDRAW_FORM_SENT DATE 
, OMHA_WITHDRAW_FORM_RETURNED DATE 
, OMHA_NOTIFIED_OF_WITHDRAWL DATE 
, ALJ_WITHDRAWAL DATE 
, DEMO_REOPENING_APPEAL_NUMBER VARCHAR2(20 CHAR) 
, REOPENING_ANALYSIS_COMPLETED DATE 
, REOPENING_ANALYSIS_OUTCOME NUMBER(10, 0) 
, NOT_PURSUED_BY_CONTR_REASON NUMBER(10, 0) 
, ACK_LETTER_MAILED DATE 
, REO_DECISION_LETTER_MAILED DATE 
, REOPENING_OUTCOME NUMBER(10, 0) 
, DECLINE_TO_REOPEN_DECISION DATE 
, APPEAL_ATTESTATION_DATE DATE 
, APPEAL_ATTESTATION NUMBER(1, 0) 
, DEMO_SCHEDULED TIMESTAMP(6) 
, DEMO_NOTIFICATION_LETTER_SENT DATE 
, RESPONSE_DUE DATE 
, RESPONSE_RECEIVED DATE 
, DEMO_ACCEPTANCE_STATUS NUMBER(10, 0) 
, TELE_DEMO_FOLLOW_UP DATE 
, DEMO_NOTIFICATION_LTR_RESENT DATE 
, RESCHEDULED_RESPONSE_DUE DATE 
, RESCHEDULE_RESPONSE_RECEIVED DATE 
, VERBAL_CONFIRMATION DATE 
, RESCHEDULED_DEMO_STATUS NUMBER(10, 0) 
, PROVIDER_OR_SUPPLIER_NAME VARCHAR2(100 CHAR) 
, DEMO_CONFERENCE_STATUS NUMBER(10, 0) 
, REVIEW_TYPE NUMBER(10, 0) 
, EXPERT_REVIEW_DECISION NUMBER(10, 0) 
, REVIEW_NUMBER NUMBER(10, 0)  
)   tablespace MAXDAT_DATA ; 

  alter table CORP_ETL_APPEAL add constraint CORP_ETL_APP_PK primary key (CEAP_ID)
  using index tablespace MAXDAT_INDX;

create unique index CEAP_UIX1 on CORP_ETL_APPEAL ("APPEAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;

   CREATE SEQUENCE  SEQ_CEAP_ID  
   MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

Grant select on CORP_ETL_APPEAL to MAXDAT_READ_ONLY;

---------------------------------------------------------------------------------------
--corp_etl_appeal_wip
--corp_etl_appeal
drop table corp_etl_appeal_wip;
CREATE TABLE CORP_ETL_APPEAL_WIP 
(
  CEAP_ID NUMBER 
, APPEAL_ID NUMBER(19, 0) NOT NULL 
, CREATE_DATE TIMESTAMP(6) 
, COMPLETE_DATE TIMESTAMP(6) 
, CANCELLED_DATE TIMESTAMP(6) 
, ADJUDICATOR NUMBER(10, 0) 
, DEADLINE_DATE TIMESTAMP(6) 
, APPEAL_ISSUE NUMBER(10, 0) 
, APPEAL_ITEM NUMBER(10, 0) 
, APPEAL_NUMBER VARCHAR2(20 CHAR) 
, APPEAL_PRIORITY_ID NUMBER(10, 0) 
, REQUEST_RECEIVED TIMESTAMP(6) 
, APPEAL_STAGE NUMBER(10, 0) 
, APPEAL_STATUS NUMBER(10, 0) 
, APPEAL_TYPE NUMBER(10, 0) 
, APPEAL_DISMISSAL NUMBER(10, 0) 
, APPEAL_DISMISSAL_REASON NUMBER(10, 0) 
, AUTO_FORWARD NUMBER(10, 0) 
, CASE_FILE_REQUEST_DATE TIMESTAMP(6) 
, ACKNOWLEDGEMENT_LETTER_DATE TIMESTAMP(6) 
, DECISION_MAILED_DATE TIMESTAMP(6) 
, DECISION_SENT_PLAN_DATE TIMESTAMP(6) 
, MEDICAL_REVIEW_CHECK NUMBER(1, 0) 
, APPEAL_PART_ID NUMBER(10, 0) 
, APPEAL_REASON NUMBER(10, 0) 
, APPEAL_TOLLING_DATE TIMESTAMP(6) 
, APPEAL_NOTICE_DATE TIMESTAMP(6) 
, CASE_FILE_RECEIVED_DATE TIMESTAMP(6) 
, CLAIMED_DATE TIMESTAMP(6) 
, DECISION NUMBER(10, 0) 
, DECISION_NOTIFICATION_METHOD NUMBER(10, 0) 
, HPMS NUMBER(10, 0) 
, HPMS_REQUESTED_DATE TIMESTAMP(6) 
, IS_REQUEST_FOR_INFORMATION_P NUMBER(1, 0) 
, MAC NUMBER(10, 0) 
, MEDICARE_TYPE NUMBER(10, 0) 
, MSP NUMBER(10, 0) 
, NEW_DOCUMENTATION_REVIEWED NUMBER(1, 0) 
, PHYSICIAN_SPECIALTY VARCHAR2(100 CHAR) 
, PRECHECK_COMPLETED NUMBER(1, 0) 
, WITHDRAWAL NUMBER(1, 0) 
, WITHDRAWAL_REQUEST_SUBMITTED NUMBER(10, 0) 
, NON_ENGLISH NUMBER(10, 0) 
, NON_ENGLISH_OTHER VARCHAR2(250 CHAR) 
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0) 
, SUBSTANTIVE_REASON NUMBER(10, 0) 
, FIRST_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, FIRST_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, FIRST_REVIEWER NUMBER(10, 0) 
, THIRD_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, THIRD_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, THIRD_REVIEWER NUMBER(10, 0) 
, EXPERT_REVIEW_CASE_ATTESTATI TIMESTAMP(6) 
, EXPERT_REVIEWER_MD_ID NUMBER(10, 0) 
, STG_EXTRACT_DATE DATE 
, STG_LAST_UPDATE_DATE DATE 
, CHANGE_FLAG VARCHAR2(1 BYTE) 
, REASON_FOR_APPEAL VARCHAR2(4000 BYTE) 
, EXPERT_REVIEW_CITATION VARCHAR2(4000 BYTE) 
, CLOSED_DATE TIMESTAMP(6) 
, WITHDRAWN_DATE TIMESTAMP(6) 
, DEMO_REOPENING_TYPE NUMBER(10, 0) 
, OTHER_REOPENING_TYPE VARCHAR2(50 CHAR) 
, CASE_CURRENTLY_WITH_ALJ NUMBER(1, 0) 
, DATE_OF_REQUEST_TO_ALJ DATE 
, DEMO_REOPENING_DUE_DATE DATE 
, DEMO_REO_SENT_TO_OMHA_DATE DATE 
, OMHA_RESPONSE_RECEIVED DATE 
, RESPONSE_FROM_OMHA NUMBER(10, 0) 
, ADDITIONAL_INFO_REQUESTED DATE 
, REQUESTED_INFORMATION_DUE DATE 
, DEMO_REOPEN_FOLLOW_UP DATE 
, ADDITIONAL_INFO_RECEIVED DATE 
, REOPENING_DECISION_RESULTS NUMBER(10, 0) 
, NOT_REOPENED_REASON NUMBER(10, 0) 
, OMHA_REMAND_REQUEST DATE 
, REMAND_ELIGIBILITY_RESPONSE DATE 
, REMAND_RECEIVED_DATE DATE 
, OMHA_REMAND_REQUEST_RESPONSE NUMBER(10, 0) 
, OMHA_WITHDRAW_FORM_SENT DATE 
, OMHA_WITHDRAW_FORM_RETURNED DATE 
, OMHA_NOTIFIED_OF_WITHDRAWL DATE 
, ALJ_WITHDRAWAL DATE 
, DEMO_REOPENING_APPEAL_NUMBER VARCHAR2(20 CHAR) 
, REOPENING_ANALYSIS_COMPLETED DATE 
, REOPENING_ANALYSIS_OUTCOME NUMBER(10, 0) 
, NOT_PURSUED_BY_CONTR_REASON NUMBER(10, 0) 
, ACK_LETTER_MAILED DATE 
, REO_DECISION_LETTER_MAILED DATE 
, REOPENING_OUTCOME NUMBER(10, 0) 
, DECLINE_TO_REOPEN_DECISION DATE 
, APPEAL_ATTESTATION_DATE DATE 
, APPEAL_ATTESTATION NUMBER(1, 0) 
, DEMO_SCHEDULED TIMESTAMP(6) 
, DEMO_NOTIFICATION_LETTER_SENT DATE 
, RESPONSE_DUE DATE 
, RESPONSE_RECEIVED DATE 
, DEMO_ACCEPTANCE_STATUS NUMBER(10, 0) 
, TELE_DEMO_FOLLOW_UP DATE 
, DEMO_NOTIFICATION_LTR_RESENT DATE 
, RESCHEDULED_RESPONSE_DUE DATE 
, RESCHEDULE_RESPONSE_RECEIVED DATE 
, VERBAL_CONFIRMATION DATE 
, RESCHEDULED_DEMO_STATUS NUMBER(10, 0) 
, PROVIDER_OR_SUPPLIER_NAME VARCHAR2(100 CHAR) 
, DEMO_CONFERENCE_STATUS NUMBER(10, 0) 
, REVIEW_TYPE NUMBER(10, 0) 
, EXPERT_REVIEW_DECISION NUMBER(10, 0) 
, REVIEW_NUMBER NUMBER(10, 0) 
)   tablespace MAXDAT_DATA ; 


create unique index CEAPWP_UIX1 on CORP_ETL_APPEAL_WIP ("APPEAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create unique index CEAPWP_UIX2 on CORP_ETL_APPEAL_WIP ("CEAP_ID") online tablespace MAXDAT_INDX parallel compute statistics;


Grant select on CORP_ETL_APPEAL_WIP to MAXDAT_READ_ONLY;

---------------------------------------------------------------------------
--appeal instance table
drop table d_mw_appeal_instance;
CREATE TABLE D_MW_APPEAL_INSTANCE 
(
  AP_BI_ID NUMBER NOT NULL 
, APPEAL_ID NUMBER(19, 0) NOT NULL 
, CREATE_DATE TIMESTAMP(6) 
, COMPLETE_DATE TIMESTAMP(6) 
, CANCELLED_DATE TIMESTAMP(6) 
, ADJUDICATOR NUMBER(10, 0) 
, DEADLINE_DATE TIMESTAMP(6) 
, APPEAL_ISSUE NUMBER(10, 0) 
, APPEAL_ITEM NUMBER(10, 0) 
, APPEAL_NUMBER VARCHAR2(20 CHAR) 
, APPEAL_PRIORITY_ID NUMBER(10, 0) 
, REQUEST_RECEIVED TIMESTAMP(6) 
, APPEAL_STAGE NUMBER(10, 0) 
, APPEAL_STATUS NUMBER(10, 0) 
, APPEAL_TYPE NUMBER(10, 0) 
, APPEAL_DISMISSAL NUMBER(10, 0) 
, APPEAL_DISMISSAL_REASON NUMBER(10, 0) 
, AUTO_FORWARD NUMBER(10, 0) 
, CASE_FILE_REQUEST_DATE TIMESTAMP(6) 
, ACKNOWLEDGEMENT_LETTER_DATE TIMESTAMP(6) 
, DECISION_MAILED_DATE TIMESTAMP(6) 
, DECISION_SENT_PLAN_DATE TIMESTAMP(6) 
, MEDICAL_REVIEW_CHECK NUMBER(1, 0) 
, APPEAL_PART_ID NUMBER(10, 0) 
, APPEAL_REASON NUMBER(10, 0) 
, APPEAL_TOLLING_DATE TIMESTAMP(6) 
, APPEAL_NOTICE_DATE TIMESTAMP(6) 
, CASE_FILE_RECEIVED_DATE TIMESTAMP(6) 
, ACKNOWLEDGEMENT_LETTER_AGE_IN_BUS_DAYS NUMBER 
, ACKNOWLEDGEMENT_LETTER_AGE_IN_CAL_DAYS NUMBER 
, ACKNOWLEDGEMENT_LETTER_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, ACKNOWLEDGEMENT_LETTER_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, CASE_FILE_AGE_IN_BUS_DAYS NUMBER 
, CASE_FILE_AGE_IN_CAL_DAYS NUMBER 
, CASE_FILE_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, CASE_FILE_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, APPEAL_AGE_IN_BUS_DAYS NUMBER 
, APPEAL_AGE_IN_CAL_DAYS NUMBER 
, APPEAL_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, APPEAL_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, CASE_FILE_ENTRY_AGE_IN_BUS_DAYS NUMBER 
, CASE_FILE_ENTRY_AGE_IN_CAL_DAYS NUMBER 
, CASE_FILE_ENTRY_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, CASE_FILE_ENTRY_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, DECISION_LETTER_AGE_IN_BUS_DAYS NUMBER 
, DECISION_LETTER_AGE_IN_CAL_DAYS NUMBER 
, DECISION_LETTER_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, DECISION_LETTER_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, REQUEST_HPMS_AGE_IN_BUS_DAYS NUMBER 
, REQUEST_HPMS_AGE_IN_CAL_DAYS NUMBER 
, REQUEST_HPMS_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, REQUEST_HPMS_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, ADJUDICATOR_PROCESS_AGE_IN_BUS_DAYS NUMBER 
, ADJUDICATOR_PROCESS_AGE_IN_CAL_DAYS NUMBER 
, ADJUDICATOR_PROCESS_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, ADJUDICATOR_PROCESS_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, CASE_FILE_REQUEST_AGE_IN_BUS_DAYS NUMBER 
, CASE_FILE_REQUEST_AGE_IN_CAL_DAYS NUMBER 
, CASE_FILE_REQUEST_TIMELINESS_STATUS VARCHAR2(20 BYTE) 
, CASE_FILE_REQUEST_JEOPARDY_FLAG VARCHAR2(1 BYTE) 
, CLAIMED_DATE TIMESTAMP(6) 
, DECISION NUMBER(10, 0) 
, DECISION_NOTIFICATION_METHOD NUMBER(10, 0) 
, HPMS NUMBER(10, 0) 
, HPMS_REQUESTED_DATE TIMESTAMP(6) 
, IS_REQUEST_FOR_INFORMATION_P NUMBER(1, 0) 
, MAC NUMBER(10, 0) 
, MEDICARE_TYPE NUMBER(10, 0) 
, MSP NUMBER(10, 0) 
, NEW_DOCUMENTATION_REVIEWED NUMBER(1, 0) 
, PHYSICIAN_SPECIALTY VARCHAR2(100 CHAR) 
, PRECHECK_COMPLETED NUMBER(1, 0) 
, WITHDRAWAL NUMBER(1, 0) 
, WITHDRAWAL_REQUEST_SUBMITTED NUMBER(10, 0) 
, NON_ENGLISH NUMBER(10, 0) 
, NON_ENGLISH_OTHER VARCHAR2(250 CHAR) 
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0) 
, SUBSTANTIVE_REASON NUMBER(10, 0) 
, FIRST_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, FIRST_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, FIRST_REVIEWER NUMBER(10, 0) 
, THIRD_MEDICAL_REVIEW_DECISIO NUMBER(10, 0) 
, THIRD_REVIEW_CASE_ATTESTATIO TIMESTAMP(6) 
, THIRD_REVIEWER NUMBER(10, 0) 
, EXPERT_REVIEW_CASE_ATTESTATI TIMESTAMP(6) 
, EXPERT_REVIEWER_MD_ID NUMBER(10, 0) 
, STG_EXTRACT_DATE DATE 
, STG_LAST_UPDATE_DATE DATE 
, REASON_FOR_APPEAL VARCHAR2(4000 BYTE) 
, EXPERT_REVIEW_CITATION VARCHAR2(4000 BYTE) 
, CLOSED_DATE TIMESTAMP(6) 
, WITHDRAWN_DATE TIMESTAMP(6) 
, DEMO_REOPENING_TYPE NUMBER(10, 0) 
, OTHER_REOPENING_TYPE VARCHAR2(50 CHAR) 
, CASE_CURRENTLY_WITH_ALJ NUMBER(1, 0) 
, DATE_OF_REQUEST_TO_ALJ DATE 
, DEMO_REOPENING_DUE_DATE DATE 
, DEMO_REO_SENT_TO_OMHA_DATE DATE 
, OMHA_RESPONSE_RECEIVED DATE 
, RESPONSE_FROM_OMHA NUMBER(10, 0) 
, ADDITIONAL_INFO_REQUESTED DATE 
, REQUESTED_INFORMATION_DUE DATE 
, DEMO_REOPEN_FOLLOW_UP DATE 
, ADDITIONAL_INFO_RECEIVED DATE 
, REOPENING_DECISION_RESULTS NUMBER(10, 0) 
, NOT_REOPENED_REASON NUMBER(10, 0) 
, OMHA_REMAND_REQUEST DATE 
, REMAND_ELIGIBILITY_RESPONSE DATE 
, REMAND_RECEIVED_DATE DATE 
, OMHA_REMAND_REQUEST_RESPONSE NUMBER(10, 0) 
, OMHA_WITHDRAW_FORM_SENT DATE 
, OMHA_WITHDRAW_FORM_RETURNED DATE 
, OMHA_NOTIFIED_OF_WITHDRAWL DATE 
, ALJ_WITHDRAWAL DATE 
, DEMO_REOPENING_APPEAL_NUMBER VARCHAR2(20 CHAR) 
, REOPENING_ANALYSIS_COMPLETED DATE 
, REOPENING_ANALYSIS_OUTCOME NUMBER(10, 0) 
, NOT_PURSUED_BY_CONTR_REASON NUMBER(10, 0) 
, ACK_LETTER_MAILED DATE 
, REO_DECISION_LETTER_MAILED DATE 
, REOPENING_OUTCOME NUMBER(10, 0) 
, DECLINE_TO_REOPEN_DECISION DATE 
, APPEAL_ATTESTATION_DATE DATE 
, APPEAL_ATTESTATION NUMBER(1, 0) 
, DEMO_SCHEDULED TIMESTAMP(6) 
, DEMO_NOTIFICATION_LETTER_SENT DATE 
, RESPONSE_DUE DATE 
, RESPONSE_RECEIVED DATE 
, DEMO_ACCEPTANCE_STATUS NUMBER(10, 0) 
, TELE_DEMO_FOLLOW_UP DATE 
, DEMO_NOTIFICATION_LTR_RESENT DATE 
, RESCHEDULED_RESPONSE_DUE DATE 
, RESCHEDULE_RESPONSE_RECEIVED DATE 
, VERBAL_CONFIRMATION DATE 
, RESCHEDULED_DEMO_STATUS NUMBER(10, 0) 
, PROVIDER_OR_SUPPLIER_NAME VARCHAR2(100 CHAR) 
, DEMO_CONFERENCE_STATUS NUMBER(10, 0) 
, REVIEW_TYPE NUMBER(10, 0) 
, EXPERT_REVIEW_DECISION NUMBER(10, 0) 
, REVIEW_NUMBER NUMBER(10, 0) 
)   tablespace MAXDAT_DATA ; 

  alter table D_MW_APPEAL_INSTANCE add constraint APP_INST_PK primary key (AP_BI_ID)
  using index tablespace MAXDAT_INDX;

create unique index DMWAP_UIX1 on D_MW_APPEAL_INSTANCE ("APPEAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_PART on D_MW_APPEAL_INSTANCE ("APPEAL_PART_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_PRIORITY on D_MW_APPEAL_INSTANCE ("APPEAL_PRIORITY_ID") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_AP_NUMBER on D_MW_APPEAL_INSTANCE ("APPEAL_NUMBER") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_CREATE_DATE on D_MW_APPEAL_INSTANCE ("CREATE_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_COMPLETE_DATE on D_MW_APPEAL_INSTANCE ("COMPLETE_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_CANCELLED_DATE on D_MW_APPEAL_INSTANCE ("CANCELLED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_CLAIMED_DATE on D_MW_APPEAL_INSTANCE ("CLAIMED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_STAGE on D_MW_APPEAL_INSTANCE ("APPEAL_STAGE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_ISSUE on D_MW_APPEAL_INSTANCE ("APPEAL_ISSUE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_ITEM on D_MW_APPEAL_INSTANCE ("APPEAL_ITEM") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_TYPE on D_MW_APPEAL_INSTANCE ("APPEAL_TYPE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_DISMS on D_MW_APPEAL_INSTANCE ("APPEAL_DISMISSAL") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_AP_DISMS_RSN on D_MW_APPEAL_INSTANCE ("APPEAL_DISMISSAL_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_AUTOFO on D_MW_APPEAL_INSTANCE ("AUTO_FORWARD") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_AP_REASON on D_MW_APPEAL_INSTANCE ("APPEAL_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_DRT on D_MW_APPEAL_INSTANCE ("DEMO_REOPENING_TYPE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ORT on D_MW_APPEAL_INSTANCE ("OTHER_REOPENING_TYPE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_WALJ on D_MW_APPEAL_INSTANCE ("CASE_CURRENTLY_WITH_ALJ") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RALJ on D_MW_APPEAL_INSTANCE ("DATE_OF_REQUEST_TO_ALJ") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RDD on D_MW_APPEAL_INSTANCE ("DEMO_REOPENING_DUE_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RSO on D_MW_APPEAL_INSTANCE ("DEMO_REO_SENT_TO_OMHA_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ORR on D_MW_APPEAL_INSTANCE ("OMHA_RESPONSE_RECEIVED") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_DEMO_RO on D_MW_APPEAL_INSTANCE ("RESPONSE_FROM_OMHA") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_AIRQ on D_MW_APPEAL_INSTANCE ("ADDITIONAL_INFO_REQUESTED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RID on D_MW_APPEAL_INSTANCE ("REQUESTED_INFORMATION_DUE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RFU on D_MW_APPEAL_INSTANCE ("DEMO_REOPEN_FOLLOW_UP") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_AIRC on D_MW_APPEAL_INSTANCE ("ADDITIONAL_INFO_RECEIVED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RDR on D_MW_APPEAL_INSTANCE ("REOPENING_DECISION_RESULTS") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_NRR on D_MW_APPEAL_INSTANCE ("NOT_REOPENED_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ORMR on D_MW_APPEAL_INSTANCE ("OMHA_REMAND_REQUEST") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RER on D_MW_APPEAL_INSTANCE ("REMAND_ELIGIBILITY_RESPONSE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RRD on D_MW_APPEAL_INSTANCE ("REMAND_RECEIVED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_DEMO_ORRR on D_MW_APPEAL_INSTANCE ("OMHA_REMAND_REQUEST_RESPONSE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_OWFS on D_MW_APPEAL_INSTANCE ("OMHA_WITHDRAW_FORM_SENT") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ONW on D_MW_APPEAL_INSTANCE ("OMHA_NOTIFIED_OF_WITHDRAWL") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ALJW on D_MW_APPEAL_INSTANCE ("ALJ_WITHDRAWAL") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RAN on D_MW_APPEAL_INSTANCE ("DEMO_REOPENING_APPEAL_NUMBER") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RAC on D_MW_APPEAL_INSTANCE ("REOPENING_ANALYSIS_COMPLETED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RAO on D_MW_APPEAL_INSTANCE ("REOPENING_ANALYSIS_OUTCOME") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_NPCR on D_MW_APPEAL_INSTANCE ("NOT_PURSUED_BY_CONTR_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ALM on D_MW_APPEAL_INSTANCE ("ACK_LETTER_MAILED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RDLM on D_MW_APPEAL_INSTANCE ("REO_DECISION_LETTER_MAILED") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_DEMO_ROO on D_MW_APPEAL_INSTANCE ("REOPENING_OUTCOME") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_DROD on D_MW_APPEAL_INSTANCE ("DECLINE_TO_REOPEN_DECISION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_AAD on D_MW_APPEAL_INSTANCE ("APPEAL_ATTESTATION_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_AA on D_MW_APPEAL_INSTANCE ("APPEAL_ATTESTATION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_DS on D_MW_APPEAL_INSTANCE ("DEMO_SCHEDULED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_NLS on D_MW_APPEAL_INSTANCE ("DEMO_NOTIFICATION_LETTER_SENT") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RDU on D_MW_APPEAL_INSTANCE ("RESPONSE_DUE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RRC on D_MW_APPEAL_INSTANCE ("RESPONSE_RECEIVED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_DAS on D_MW_APPEAL_INSTANCE ("DEMO_ACCEPTANCE_STATUS") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_TFU on D_MW_APPEAL_INSTANCE ("TELE_DEMO_FOLLOW_UP") online tablespace MAXDAT_INDX parallel compute statistics;

create index DMWAP_DEMO_NLR on D_MW_APPEAL_INSTANCE ("DEMO_NOTIFICATION_LTR_RESENT") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RRDU on D_MW_APPEAL_INSTANCE ("RESCHEDULED_RESPONSE_DUE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RRRC on D_MW_APPEAL_INSTANCE ("RESCHEDULE_RESPONSE_RECEIVED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_VC on D_MW_APPEAL_INSTANCE ("VERBAL_CONFIRMATION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RDS on D_MW_APPEAL_INSTANCE ("RESCHEDULED_DEMO_STATUS") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_PSN on D_MW_APPEAL_INSTANCE ("PROVIDER_OR_SUPPLIER_NAME") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_DCS on D_MW_APPEAL_INSTANCE ("DEMO_CONFERENCE_STATUS") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RTY on D_MW_APPEAL_INSTANCE ("REVIEW_TYPE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_ERD on D_MW_APPEAL_INSTANCE ("EXPERT_REVIEW_DECISION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DMWAP_DEMO_RNU on D_MW_APPEAL_INSTANCE ("REVIEW_NUMBER") online tablespace MAXDAT_INDX parallel compute statistics;


Grant select on D_MW_APPEAL_INSTANCE to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_BI_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

------------------------------------------------------------------------------------
--appeals timeliness config table
  drop table C_MW_APPEALS_TIMELINESS_CONFIG;
  CREATE TABLE C_MW_APPEALS_TIMELINESS_CONFIG 
   (	C_MW_ATC_ID NUMBER NOT NULL,
        PART_ID NUMBER(19,0),
        APPEAL_SLICE_ID NUMBER,
        TASK_TYPE_ID NUMBER,
        APPEAL_PRIORITY_ID NUMBER(19,0),
        APPEAL_CONFIG_TYPE_ID NUMBER(19,0),
        SLA_DAYS NUMBER, 
        SLA_DAYS_TYPE VARCHAR2(1 BYTE), 
        SLA_TARGET_DAYS NUMBER, 
        SLA_JEOPARDY_DAYS NUMBER, 
        UNIT_OF_WORK VARCHAR2(30 BYTE)
    )   tablespace MAXDAT_DATA ;

  alter table C_MW_APPEALS_TIMELINESS_CONFIG add constraint CMWATC_PK primary key (C_MW_ATC_ID)
  using index tablespace MAXDAT_INDX;


Grant select on C_MW_APPEALS_TIMELINESS_CONFIG to MAXDAT_READ_ONLY;


--appeal timeliness config view (not needed per Lucius)
/*CREATE OR REPLACE VIEW C_MW_APPEALS_TIME_CONFIG_SV
AS
SELECT 
atc.C_MW_ATC_ID,
atc.TEAM_SUPERVISOR_STAFF_ID,
staff.FIRST_NAME ||' '|| staff.middle_name || '' || staff.LAST_NAME,
atc.PART_ID,
parts.PART_NAME,
atc.APPEAL_SLICE_ID,
atc.TASK_TYPE_ID,
tt.TASK_NAME,
atc.APPEAL_PRIORITY_ID,
pris.APPEAL_PRIORITY_NAME,
atc.APPEAL_CONFIG_TYPE_ID,
ctypes.APPEAL_CONFIG_TYPE,
atc.SLA_DAYS,
atc.SLA_DAYS_TYPE,
atc.SLA_TARGET_DAYS,
atc.SLA_JEOPARDY_DAYS,
atc.UNIT_OF_WORK
FROM
C_MW_APPEALS_TIME_CONFIG atc
JOIN D_APPEAL_PARTS parts ON atc.part_id = parts.part_id
JOIN D_APPEAL_PRIORITIES pris ON atc.priority_id = pris.priority_id
jOIN D_
;
*/
--------------------------------------------------------------------------------------------
--part table
--t_appeal_form_part
  CREATE TABLE D_APPEAL_PARTS 
   (
        D_AP_ID NUMBER NOT NULL,
        PART_ID NUMBER(19,0) NOT NULL,
        PART_NAME VARCHAR2(255 CHAR),
        PART_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_PARTS add constraint DAPPARTS_PK primary key (D_AP_ID)
  using index tablespace MAXDAT_INDX;

create unique index DAPPART_UIX1 on D_APPEAL_PARTS ("PART_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_PARTS to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_PARTS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--priority table
--t_appeal_priority_type
  CREATE TABLE D_APPEAL_PRIORITIES 
   (
        D_AP_ID NUMBER NOT NULL,
        PRIORITY_ID NUMBER(19,0) NOT NULL,
        PRIORITY_NAME VARCHAR2(255 CHAR),
        PRIORITY_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_PRIORITIES add constraint DAPPRIORITIES_PK primary key (D_AP_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPRIOR_UIX1 on D_APPEAL_PRIORITIES ("PRIORITY_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_PRIORITIES to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_PRIORS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--config type table
  CREATE TABLE D_APPEAL_CONFIG_TYPES 
   (
        APPEAL_CONFIG_TYPE_ID NUMBER(19,0) NOT NULL,
         APPEAL_CONFIG_TYPE_NAME VARCHAR2(255 CHAR),
         APPEAL_CONFIG_TYPE_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_CONFIG_TYPES add constraint DAPCONFTYPES_PK primary key (APPEAL_CONFIG_TYPE_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_CONFIG_TYPES to MAXDAT_READ_ONLY;

--slice table
  CREATE TABLE D_APPEAL_SLICES 
   (
        APPEAL_SLICE_ID NUMBER(19,0) NOT NULL,
        APPEAL_SLICE_NAME VARCHAR2(255 CHAR),
        APPEAL_SLICE_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_SLICES add constraint DAPSLICES_PK primary key (APPEAL_SLICE_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_SLICES to MAXDAT_READ_ONLY;

---------------------other lookup tables------------------------------
--
--t_appeal_issue
  CREATE TABLE D_APPEAL_ISSUES 
   (
        ISSUE_ID NUMBER(19,0) NOT NULL,
        ISSUE_NAME VARCHAR2(50 CHAR),
        ISSUE_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_ISSUES add constraint DAPISS_PK primary key (ISSUE_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_ISSUES to MAXDAT_READ_ONLY;


--t_item_service
  CREATE TABLE D_APPEAL_ITEM_SERVICES 
   (
        D_AIS_ID NUMBER NOT NULL,
        ITEM_SERVICE_ID NUMBER(19,0) NOT NULL,
        ITEM_SERVICE_NAME VARCHAR2(255 CHAR),
        ITEM_SERVICE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_ITEM_SERVICES add constraint DAPISE_PK primary key (D_AIS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPITEM_UIX1 on D_APPEAL_ITEM_SERVICES ("ITEM_SERVICE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_ITEM_SERVICES to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_ITEMS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--t_appeal_stage
  CREATE TABLE D_APPEAL_STAGES 
   (
        D_AS_ID NUMBER NOT NULL,
        STAGE_ID NUMBER(19,0) NOT NULL,
        STAGE_NAME VARCHAR2(255 CHAR),
        STAGE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_STAGES add constraint DAPST_PK primary key (D_AS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPSTAGE_UIX1 on D_APPEAL_STAGES ("STAGE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_STAGES to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_STAGES_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;



--t_appeal_status/t_rf_state
drop table d_appeal_statuses;
 CREATE TABLE D_APPEAL_STATUSES
   (
        D_AS_ID NUMBER NOT NULL,
        STATUS_ID NUMBER(19,0) NOT NULL,
        STATUS_NAME VARCHAR2(255 CHAR) ,
        STATUS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
        
    )   tablespace MAXDAT_DATA ;
  
alter table D_APPEAL_STATUSES add constraint DAPS_PK primary key (D_AS_ID)
using index tablespace MAXDAT_INDX;
create unique index DAPTYPE_UIX1 on D_APPEAL_STATUSES ("STATUS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_STATUSES to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_AP_STATUSES_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
  

--t_appeal_type
  CREATE TABLE D_APPEAL_TYPES
   (
        D_AT_ID NUMBER NOT NULL,
        TYPE_ID NUMBER(19,0) NOT NULL,
        TYPE_NAME VARCHAR2(255 CHAR),
        TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_TYPES add constraint DAPT_PK primary key (D_AT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPTYPE_UIX1 on D_APPEAL_TYPES ("TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_TYPES to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_AP_TYPES_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--t_appellant_dismissal
  CREATE TABLE D_APPELLANT_DISMISSALS
   (
        D_AD_ID NUMBER NOT NULL,
        DISMISSAL_ID NUMBER(19,0) NOT NULL,
        DISMISSAL_NAME VARCHAR2(255 CHAR),
        DISMISSAL_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPELLANT_DISMISSALS add constraint DAPDI_PK primary key (D_AD_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPDISMISS_UIX1 on D_APPELLANT_DISMISSALS ("DISMISSAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPELLANT_DISMISSALS to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_DISMISSALS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;



--t_appellant_dismissal_reason
  CREATE TABLE D_APPELLANT_DISMISS_REASONS
   (
        DISMISS_REASON_ID NUMBER(19,0) NOT NULL,
        DISMISS_REASON_NAME VARCHAR2(255 CHAR),
        DISMISS_REASON_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPELLANT_DISMISS_REASONS add constraint DAPDIR_PK primary key (DISMISS_REASON_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPELLANT_DISMISS_REASONS to MAXDAT_READ_ONLY;

--CREATE SEQUENCE  SEQ_AP_DISMISS_REASONS_ID  
--MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--t_auto_forward
  CREATE TABLE D_APPEAL_AUTO_FORWARDS
   (
        AUTO_FORWARD_ID NUMBER(19,0) NOT NULL,
        AUTO_FORWARD_NAME VARCHAR2(255 CHAR),
        AUTO_FORWARD_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_AUTO_FORWARDS add constraint DAPAF_PK primary key (AUTO_FORWARD_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_AUTO_FORWARDS to MAXDAT_READ_ONLY;

--t_appeal_reason
  CREATE TABLE D_APPEAL_REASONS
   (
        REASON_ID NUMBER(19,0) NOT NULL,
        REASON_NAME VARCHAR2(255 CHAR),
        REASON_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_REASONS add constraint DAPRE_PK primary key (REASON_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_REASONS to MAXDAT_READ_ONLY;

--t_decision
  CREATE TABLE D_APPEAL_DECISIONS
   (
        D_AD_ID NUMBER NOT NULL,
        DECISION_ID NUMBER(19,0) NOT NULL,
        DECISION_NAME VARCHAR2(255 CHAR),
        DECISION_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_DECISIONS add constraint DAPDE_PK primary key (D_AD_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPDEC_UIX1 on D_APPEAL_DECISIONS ("DECISION_ID") online tablespace MAXDAT_INDX parallel compute statistics;
CREATE SEQUENCE  SEQ_AP_DECISIONS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

Grant select on D_APPEAL_DECISIONS to MAXDAT_READ_ONLY;

--t_decision_notification_method
  CREATE TABLE D_APPEAL_DEC_NOTIF_METHODS
   (
        DEC_NOTIF_METHOD_ID NUMBER(19,0) NOT NULL,
        DEC_NOTIF_METHOD_NAME VARCHAR2(255 CHAR),
        DEC_NOTIF_METHOD_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_DEC_NOTIF_METHODS add constraint DAPDNM_PK primary key (DEC_NOTIF_METHOD_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_DEC_NOTIF_METHODS to MAXDAT_READ_ONLY;

--t_hpms
  CREATE TABLE D_APPEAL_HPMSS
   (
        D_AH_ID NUMBER NOT NULL,
        HPMS_ID NUMBER(19,0) NOT NULL,
        HPMS_NAME VARCHAR2(50 CHAR),
        HPMS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_HPMSS add constraint DAPH_PK primary key (D_AH_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPHPMS_UIX1 on D_APPEAL_HPMSS ("HPMS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_HPMSS to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_HPMSS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--t_mac_lookup
  CREATE TABLE D_APPEAL_MACS
   (
        D_AM_ID NUMBER NOT NULL,
        MAC_ID NUMBER(19,0) NOT NULL,
        MAC_NAME VARCHAR2(255 CHAR),
        MAC_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_MACS add constraint DAPM_PK primary key (D_AM_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPMAC_UIX1 on D_APPEAL_MACS ("MAC_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_MACS to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_MACS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--t_medicare_type
  CREATE TABLE D_APPEAL_MEDICARE_TYPES
   (
        MEDICARE_TYPE_ID NUMBER(19,0) NOT NULL,
        MEDICARE_TYPE_NAME VARCHAR2(255 CHAR),
        MEDICARE_TYPE_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_MEDICARE_TYPES add constraint DAPMT_PK primary key (MEDICARE_TYPE_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_MEDICARE_TYPES to MAXDAT_READ_ONLY;

--t_msp
  CREATE TABLE D_APPEAL_MSPS
   (
        D_AM_ID NUMBER NOT NULL,
        MSP_ID NUMBER(19,0) NOT NULL,
        MSP_NAME VARCHAR2(50 CHAR),
        MSP_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_MSPS add constraint DAPMSP_PK primary key (D_AM_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPMSP_UIX1 on D_APPEAL_MSPS ("MSP_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_MSPS to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_AP_MSPS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--t_withdrawal_request_submitted
  CREATE TABLE D_APPEAL_WITHDRAW_REQ_SUBMS
   (
        WITHDRAW_REQ_SUBM_ID NUMBER(19,0) NOT NULL,
        WITHDRAW_REQ_SUBM_NAME VARCHAR2(50 CHAR),
        WITHDRAW_REQ_SUBM_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_WITHDRAW_REQ_SUBMS add constraint DAPWRS_PK primary key (WITHDRAW_REQ_SUBM_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_WITHDRAW_REQ_SUBMS to MAXDAT_READ_ONLY;

--t_non_english
  CREATE TABLE D_APPEAL_NON_ENGLISHES
   (
        D_AN_ID NUMBER NOT NULL,
        NON_ENGLISH_ID NUMBER(19,0) NOT NULL,
        NON_ENGLISH_NAME VARCHAR2(255 CHAR),
        NON_ENGLISH_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_NON_ENGLISHES add constraint DAPNE_PK primary key (D_AN_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPNENGL_UIX1 on D_APPEAL_NON_ENGLISHES ("NON_ENGLISH_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_NON_ENGLISHES to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_NENGL_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--t_disposition
  CREATE TABLE D_APPEAL_DISPOSITIONS
   (
        DISPOSITION_ID NUMBER(19,0) NOT NULL,
        DISPOSITION_NAME VARCHAR2(255 CHAR),
        DISPOSITION_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_DISPOSITIONS add constraint DAPDIS_PK primary key (DISPOSITION_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_DISPOSITIONS to MAXDAT_READ_ONLY;

--t_disposition_explanation
  CREATE TABLE D_APPEAL_DISPOSITION_EXPS
   (
        DISPOSITION_EXP_ID NUMBER(19,0) NOT NULL,
        DISPOSITION_EXP_NAME VARCHAR2(255 CHAR),
        DISPOSITION_EXP_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_DISPOSITION_EXPS add constraint DAPDISEXP_PK primary key (DISPOSITION_EXP_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_DISPOSITION_EXPS to MAXDAT_READ_ONLY;

--t_procedural_decision_reason
  CREATE TABLE D_APPEAL_PROC_DEC_REASONS
   (
        PROC_DEC_REASON_ID NUMBER(19,0) NOT NULL,
        PROC_DEC_REASON_NAME VARCHAR2(255 CHAR),
        PROC_DEC_REASON_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_PROC_DEC_REASONS add constraint DAPPDR_PK primary key (PROC_DEC_REASON_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_PROC_DEC_REASONS to MAXDAT_READ_ONLY;

--t_substantive_reason
  CREATE TABLE D_APPEAL_SUBSTANTIVE_REASONS
   (
        SUBSTANTIVE_REASON_ID NUMBER(19,0) NOT NULL,
        SUBSTANTIVE_REASON_NAME VARCHAR2(255 CHAR),
        SUBSTANTIVE_REASON_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_SUBSTANTIVE_REASONS add constraint DAPSR_PK primary key (SUBSTANTIVE_REASON_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_APPEAL_SUBSTANTIVE_REASONS to MAXDAT_READ_ONLY;

--- T_FIRST_THIRD_MEDICAL_REVIEW_D
  CREATE TABLE D_APPEAL_FT_MED_REV_DS
   (
        D_AF_ID NUMBER NOT NULL,
        FT_MED_REV_ID NUMBER(19,0) NOT NULL,
        FT_MED_REV_NAME VARCHAR2(255 CHAR),
        FT_MED_REV_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table D_APPEAL_FT_MED_REV_DS add constraint DAPFTMR_PK primary key (D_AF_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPMEDREVS_UIX1 on D_APPEAL_FT_MED_REV_DS ("FT_MED_REV_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_APPEAL_FT_MED_REV_DS to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_AP_MED_REV_DS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


CREATE TABLE D_DEMO_REOPENING_TYPE
   (
        D_DRT_ID NUMBER NOT NULL,
        DEMO_REOPEN_TYPE_ID NUMBER(19,0) NOT NULL,
        DEMO_REOPEN_TYPE_NAME VARCHAR2(255 CHAR),
        DEMO_REOPEN_TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DEMO_REOPENING_TYPE add constraint DAPP_DRT_PK primary key (D_DRT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPDRT_UIX1 on D_DEMO_REOPENING_TYPE ("DEMO_REOPEN_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DEMO_REOPENING_TYPE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_DRT_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_OMHA_RESPONSE
   (
        D_OR_ID NUMBER NOT NULL,
        OMHA_RESPONSE_ID NUMBER(19,0) NOT NULL,
        OMHA_RESPONSE_NAME VARCHAR2(255 CHAR),
        OMHA_RESPONSE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table  D_OMHA_RESPONSE add constraint DAPP_OR_PK primary key (D_OR_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPOR_UIX1 on  D_OMHA_RESPONSE ("OMHA_RESPONSE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on  D_OMHA_RESPONSE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_OR_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_REOPENING_DECISION_RESULTS
   (
        D_RDR_ID NUMBER NOT NULL,
        REOPEN_DECISION_RESULTS_ID NUMBER(19,0) NOT NULL,
        REOPEN_DECISION_RESULTS_NAME VARCHAR2(255 CHAR),
        REOPEN_DECISION_RESULTS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table  D_REOPENING_DECISION_RESULTS add constraint DAPP_RDR_PK primary key (D_RDR_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPRDR_UIX1 on  D_REOPENING_DECISION_RESULTS ("REOPEN_DECISION_RESULTS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on  D_REOPENING_DECISION_RESULTS to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RDR_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_NOT_REOPENED_REASON
   (
        D_NRR_ID NUMBER NOT NULL,
        NOT_REOPENED_REASON_ID NUMBER(19,0) NOT NULL,
        NOT_REOPENED_REASON_NAME VARCHAR2(255 CHAR),
        NOT_REOPENED_REASON_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table  D_NOT_REOPENED_REASON add constraint DAPP_NRR_PK primary key (D_NRR_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPNRR_UIX1 on  D_NOT_REOPENED_REASON ("NOT_REOPENED_REASON_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on  D_NOT_REOPENED_REASON to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_NRR_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_OMHA_REM_RESP
   (
        D_ORR_ID NUMBER NOT NULL,
        OMHA_REM_RESP_ID NUMBER(19,0) NOT NULL,
        OMHA_REM_RESP_NAME VARCHAR2(255 CHAR),
        OMHA_REM_RESP_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_OMHA_REM_RESP add constraint DAPP_ORR_PK primary key (D_ORR_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPORR_UIX1 on D_OMHA_REM_RESP ("OMHA_REM_RESP_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_OMHA_REM_RESP to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_ORR_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_REOPENING_ANALYSIS_OUTCOME_TYPE
   (
        D_RAOT_ID NUMBER NOT NULL,
        REOPEN_ANALYSIS_OUTCOME_TYPE_ID NUMBER(19,0) NOT NULL,
        REOPEN_ANALYSIS_OUTCOME_TYPE_NAME VARCHAR2(255 CHAR),
        REOPEN_ANALYSIS_OUTCOME_TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_REOPENING_ANALYSIS_OUTCOME_TYPE add constraint DAPP_RAOT_PK primary key (D_RAOT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPRAOT_UIX1 on D_REOPENING_ANALYSIS_OUTCOME_TYPE ("REOPEN_ANALYSIS_OUTCOME_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_REOPENING_ANALYSIS_OUTCOME_TYPE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RAOT_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_NOT_PURSUE_CONTR_REASON_TYPE
   (
        D_NPCRT_ID NUMBER NOT NULL,
        NOT_PURSUE_CONTR_REASON_TYPE_ID NUMBER(19,0) NOT NULL,
        NOT_PURSUE_CONTR_REASON_TYPE_NAME VARCHAR2(255 CHAR),
        NOT_PURSUE_CONTR_REASON_TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_NOT_PURSUE_CONTR_REASON_TYPE add constraint DAPP_NPCRT_PK primary key (D_NPCRT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPNPCRT_UIX1 on D_NOT_PURSUE_CONTR_REASON_TYPE ("NOT_PURSUE_CONTR_REASON_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_NOT_PURSUE_CONTR_REASON_TYPE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_NPCRT_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_REOPENING_OUTCOME
   (
        D_RO_ID NUMBER NOT NULL,
        REOPEN_OUTCOME_ID NUMBER(19,0) NOT NULL,
        REOPEN_OUTCOME_NAME VARCHAR2(255 CHAR),
        REOPEN_OUTCOME_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_REOPENING_OUTCOME add constraint DAPP_RO_PK primary key (D_RO_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPRO_UIX1 on D_REOPENING_OUTCOME ("REOPEN_OUTCOME_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_REOPENING_OUTCOME to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RO_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_DEMO_ACCEPTANCE_STATUS
   (
        D_DAS_ID NUMBER NOT NULL,
        DEMO_ACCEPT_STATUS_ID NUMBER(19,0) NOT NULL,
        DEMO_ACCEPT_STATUS_NAME VARCHAR2(255 CHAR),
        DEMO_ACCEPT_STATUS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DEMO_ACCEPTANCE_STATUS add constraint DAPP_DAS_PK primary key (D_DAS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPDAS_UIX1 on D_DEMO_ACCEPTANCE_STATUS ("DEMO_ACCEPT_STATUS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DEMO_ACCEPTANCE_STATUS to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_DAS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_RESCHEDULED_DEMO_STATUS_TYPE
   (
        D_RDS_ID NUMBER NOT NULL,
        RESCHED_DEMO_STATUS_ID NUMBER(19,0) NOT NULL,
        RESCHED_DEMO_STATUS_NAME VARCHAR2(255 CHAR),
        RESCHED_DEMO_STATUS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_RESCHEDULED_DEMO_STATUS_TYPE add constraint DAPP_RDS_PK primary key (D_RDS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPRDS_UIX1 on D_RESCHEDULED_DEMO_STATUS_TYPE ("RESCHED_DEMO_STATUS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_RESCHEDULED_DEMO_STATUS_TYPE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RDS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_DEMO_CONFERENCE_STATUS
   (
        D_DCS_ID NUMBER NOT NULL,
        DEMO_CONF_STATUS_ID NUMBER(19,0) NOT NULL,
        DEMO_CONF_STATUS_NAME VARCHAR2(255 CHAR),
        DEMO_CONF_STATUS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DEMO_CONFERENCE_STATUS add constraint DAPP_DCS_PK primary key (D_DCS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPDCS_UIX1 on D_DEMO_CONFERENCE_STATUS ("DEMO_CONF_STATUS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DEMO_CONFERENCE_STATUS to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_DCS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_REVIEW_TYPE
   (
        D_RT_ID NUMBER NOT NULL,
        REVIEW_TYPE_ID NUMBER(19,0) NOT NULL,
        REVIEW_TYPE_NAME VARCHAR2(255 CHAR),
        REVIEW_TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_REVIEW_TYPE add constraint DAPP_RT_PK primary key (D_RT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPRT_UIX1 on D_REVIEW_TYPE ("REVIEW_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_REVIEW_TYPE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RT_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_REVIEW_NUMBER
   (
        D_RN_ID NUMBER NOT NULL,
        REVIEW_NUMBER_ID NUMBER(19,0) NOT NULL,
        REVIEW_NUMBER_NAME VARCHAR2(255 CHAR),
        REVIEW_NUMBER_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_REVIEW_NUMBER add constraint DAPP_RN_PK primary key (D_RN_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPRN_UIX1 on D_REVIEW_NUMBER ("REVIEW_NUMBER_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_REVIEW_NUMBER to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_RN_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_SECOND_MED_REV_DEC
   (
        D_SR_ID NUMBER NOT NULL,
        SECOND_MED_REV_DEC_ID NUMBER(19,0) NOT NULL,
        SECOND_MED_REV_DEC_NAME VARCHAR2(255 CHAR),
        SECOND_MED_REV_DEC_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_SECOND_MED_REV_DEC add constraint DAPP_SRD_PK primary key (D_SR_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPPSRD_UIX1 on D_SECOND_MED_REV_DEC ("SECOND_MED_REV_DEC_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_SECOND_MED_REV_DEC to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_SRD_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

 CREATE TABLE D_DEMO_STATUS
   (
        D_DS_ID NUMBER NOT NULL,
        DEMO_STATUS_ID NUMBER(19,0) NOT NULL,
        DEMO_STATUS_NAME VARCHAR2(255 CHAR),
        DEMO_STATUS_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DEMO_STATUS add constraint DAPP_DST_PK primary key (D_DS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DAPDST_UIX1 on D_DEMO_STATUS ("DEMO_STATUS_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DEMO_STATUS to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_APP_DST_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

commit;
---------------------------------------------------------------------------------------------

--appeal instance view
CREATE OR REPLACE VIEW D_MW_APPEAL_INSTANCE_SV
AS select *
from (select
  a.APPEAL_ID
, a.CREATE_DATE
, a.COMPLETE_DATE
, a.CANCELLED_DATE
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.ADJUDICATOR) as ADJUDICATOR
, a.DEADLINE_DATE
, issues.ISSUE_NAME as APPEAL_ISSUE
, items.ITEM_SERVICE_NAME as APPEAL_ITEM
, a.APPEAL_NUMBER
, priorities.PRIORITY_NAME as APPEAL_PRIORITY
, a.REQUEST_RECEIVED
, stages.STAGE_NAME as APPEAL_STAGE
, statuses.STATUS_NAME as APPEAL_STATUS
, types.TYPE_NAME as APPEAL_TYPE
, dismissals.DISMISSAL_NAME as APPEAL_DISMISSAL
, dismissal_reasons.DISMISS_REASON_NAME as APPEAL_DISMISSAL_REASON
, case when a.auto_forward is not null then 'Y' else 'N' end as AUTO_FORWARD
, a.CASE_FILE_REQUEST_DATE
, a.ACKNOWLEDGEMENT_LETTER_DATE
, a.DECISION_MAILED_DATE
, a.DECISION_SENT_PLAN_DATE
, a.MEDICAL_REVIEW_CHECK
, parts.PART_NAME as APPEAL_PART
, reasons.REASON_NAME as APPEAL_REASON
, a.APPEAL_TOLLING_DATE
, a.APPEAL_NOTICE_DATE
, a.CASE_FILE_RECEIVED_DATE
, a.PRECHECK_COMPLETED
,a.ACKNOWLEDGEMENT_LETTER_AGE_IN_BUS_DAYS
--, a.ACKNOWLEDGEMENT_LETTER_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(a.ACKNOWLEDGEMENT_LETTER_DATE,sysdate)) - TRUNC(a.REQUEST_RECEIVED) AS ACKNOWLEDGEMENT_LETTER_AGE_IN_CAL_DAYS
, 'C' as ACKNOWLEDGEMENT_LETTER_DAYS_TYPE
,a.ACKNOWLEDGEMENT_LETTER_TIMELINESS_STATUS
, 999 as ACKNOWLEDGEMENT_LETTER_JEOPARDY_DAYS
,a.ACKNOWLEDGEMENT_LETTER_JEOPARDY_FLAG
, 999 as ACKNOWLEDGEMENT_LETTER_TIMELINESS
,a.CASE_FILE_AGE_IN_BUS_DAYS
,a.CASE_FILE_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(a.CASE_FILE_RECEIVED_DATE, sysdate)) - TRUNC(a.CASE_FILE_REQUEST_DATE) AS CASE_FILE_RECEIVED_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_DAYS_TYPE
,a.CASE_FILE_TIMELINESS_STATUS
, 999 as CASE_FILE_JEOPARDY_DAYS
,a.CASE_FILE_JEOPARDY_FLAG
, 999 as CASE_FILE_TIMELINESS_THRESHOLD
,a.APPEAL_AGE_IN_BUS_DAYS
,a.APPEAL_AGE_IN_CAL_DAYS
, 'C' as APPEAL_DAYS_TYPE
,case when (a.complete_date is not null and a.complete_date <= a.deadline_date) then 'Timely' when (a.complete_date is not null and a.complete_date > a.deadline_date) then 'Untimely' else null end as APPEAL_TIMELINESS_STATUS
, 999 as APPEAL_JEOPARDY_DAYS
,a.APPEAL_JEOPARDY_FLAG
, 999 as APPEAL_TIMELINESS_THRESHOLD
,a.CASE_FILE_ENTRY_AGE_IN_BUS_DAYS
,a.CASE_FILE_ENTRY_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_ENTRY_DAYS_TYPE
,a.CASE_FILE_ENTRY_TIMELINESS_STATUS
, 999 as CASE_FILE_ENTRY_JEOPARDY_DAYS
,a.CASE_FILE_ENTRY_JEOPARDY_FLAG
,999 as CASE_FILE_ENTRY_TIMELINESS_THRESHOLD
,a.DECISION_LETTER_AGE_IN_BUS_DAYS
,a.DECISION_LETTER_AGE_IN_CAL_DAYS
, 'C' as DECISION_LETTER_DAYS_TYPE
,a.DECISION_LETTER_TIMELINESS_STATUS
,999 as DECISION_LETTER_JEOPARDY_DAYS
,a.DECISION_LETTER_JEOPARDY_FLAG
, 999 as DECISION_LETTER_TIMELINESS_THRESHOLD
,a.REQUEST_HPMS_AGE_IN_BUS_DAYS
,a.REQUEST_HPMS_AGE_IN_CAL_DAYS
, 'C' as REQUEST_HPMS_DAYS_TYPE
,a.REQUEST_HPMS_TIMELINESS_STATUS
, 999 as REQUEST_HPMS_JEOPARDY_DAYS
,a.REQUEST_HPMS_JEOPARDY_FLAG
, 999 as REQUEST_HPMS_TIMELINESS_THRESHOLD
,a.ADJUDICATOR_PROCESS_AGE_IN_BUS_DAYS
,a.ADJUDICATOR_PROCESS_AGE_IN_CAL_DAYS
, 'C' as ADJUDICATOR_PROCESS_DAYS_TYPE
,a.ADJUDICATOR_PROCESS_TIMELINESS_STATUS
, 999 as ADJUDICATOR_PROCESS_JEOPARDY_DAYS
,a.ADJUDICATOR_PROCESS_JEOPARDY_FLAG
, 999 as ADJUDICATOR_PROCESS_TIMELINESS_THRESHOLD
,a.CASE_FILE_REQUEST_AGE_IN_BUS_DAYS
--,a.CASE_FILE_REQUEST_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(CASE_FILE_REQUEST_DATE, sysdate)) - TRUNC(REQUEST_RECEIVED) AS CASE_FILE_REQUEST_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_REQUEST_DAYS_TYPE
,a.CASE_FILE_REQUEST_TIMELINESS_STATUS
, 999 as CASE_FILE_REQUEST_JEOPARDY_DAYS
,a.CASE_FILE_REQUEST_JEOPARDY_FLAG
, 999 as CASE_FILE_REQUEST_TIMELINESS_THRESHOLD
, a.CLAIMED_DATE
, decisions.DECISION_NAME as DECISION
, dec_notif_methods.DEC_NOTIF_METHOD_NAME as DECISION_NOTIFICATION_METHOD
, hpmss.HPMS_NAME as HPMS
, a.HPMS_REQUESTED_DATE
, a.IS_REQUEST_FOR_INFORMATION_P
, macs.MAC_NAME as MAC
, medicare_types.MEDICARE_TYPE_NAME as MEDICARE_TYPE
, msps.MSP_NAME as MSP
, a.NEW_DOCUMENTATION_REVIEWED
, a.PHYSICIAN_SPECIALTY
, a.REASON_FOR_APPEAL
, a.WITHDRAWAL
, withdraw_req_subms.WITHDRAW_REQ_SUBM_NAME as WITHDRAWAL_REQUEST_SUBMITTED
, non_englishes.NON_ENGLISH_NAME as NON_ENGLISH
, a.NON_ENGLISH_OTHER
, dispositions.DISPOSITION_NAME as DISPOSITION
, disposition_exps.DISPOSITION_EXP_NAME as DISPOSITION_EXPLANATION
, proc_dec_reasons.PROC_DEC_REASON_NAME as PROCEDURAL_DECISION_REASON
, sub_reasons.SUBSTANTIVE_REASON_NAME as SUBSTANTIVE_REASON
, a.FIRST_REVIEW_CASE_ATTESTATIO
, (select ft_med_rev_ds.FT_MED_REV_NAME from D_APPEAL_FT_MED_REV_DS ft_med_rev_ds where a.FIRST_MEDICAL_REVIEW_DECISIO = ft_med_rev_ds.FT_MED_REV_ID) as FIRST_MEDICAL_REVIEW_DECISIO
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.FIRST_REVIEWER) as FIRST_REVIEWER
, (select ft_med_rev_ds.FT_MED_REV_NAME from D_APPEAL_FT_MED_REV_DS ft_med_rev_ds where a.THIRD_MEDICAL_REVIEW_DECISIO = ft_med_rev_ds.FT_MED_REV_ID) as THIRD_MEDICAL_REVIEW_DECISIO
, a.THIRD_REVIEW_CASE_ATTESTATIO
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.THIRD_REVIEWER) as THIRD_REVIEWER
, a.EXPERT_REVIEW_CASE_ATTESTATI
, a.EXPERT_REVIEW_CITATION
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.EXPERT_REVIEWER_MD_ID) as EXPERT_REVIEWER_MD_ID,
a.STG_LAST_UPDATE_DATE,
(select sum (ti.task_claimed_time) from d_mw_task_instance ti where ti.source_reference_id = a.appeal_id) as CLAIMED_TIME,
(select sum (ti.task_unclaimed_time) from d_mw_task_instance ti where ti.source_reference_id = a.appeal_id) as UNCLAIMED_TIME,
a.closed_date as CLOSED_DATE,
a.withdrawn_date as WITHDRAWN_DATE,
case when (a.create_date is null or trunc(a.create_date) <= trunc(sysdate)) and (a.closed_date is null or trunc(a.closed_date) > trunc(sysdate))
and (a.withdrawn_date is null or trunc(a.withdrawn_date) > trunc(sysdate)) and (a.cancelled_date is null or trunc(a.cancelled_date) > trunc(sysdate))
then 1 else 0 end as INVENTORY_FLAG,
case when (a.create_date is null or trunc(a.create_date) <= trunc(sysdate)) and (a.complete_date is null or trunc(a.complete_date) > trunc(sysdate))
and (a.closed_date is null or trunc(a.closed_date) > trunc(sysdate)) and (a.withdrawn_date is null or trunc(a.withdrawn_date) > trunc(sysdate))
and (a.cancelled_date is null or trunc(a.cancelled_date) > trunc(sysdate))
then 1 else 0 end as SLA_INVENTORY_FLAG,
(select count(distinct (document_id)) from d_qic_document qd where qd.appeal_id = a.appeal_id) as document_count,
(select count(distinct (claim_id)) from d_qic_claim qc where qc.appeal_id = a.appeal_id) as claim_count,
DRT.DEMO_REOPEN_TYPE_NAME as DEMO_REOPENING_TYPE,
a.OTHER_REOPENING_TYPE,
a.CASE_CURRENTLY_WITH_ALJ,
a.DATE_OF_REQUEST_TO_ALJ,
a.DEMO_REOPENING_DUE_DATE,
a.DEMO_REO_SENT_TO_OMHA_DATE,
a.OMHA_RESPONSE_RECEIVED,
OHR.OMHA_RESPONSE_NAME as RESPONSE_FROM_OMHA,
a.ADDITIONAL_INFO_REQUESTED,
a.REQUESTED_INFORMATION_DUE,
a.DEMO_REOPEN_FOLLOW_UP,
a.ADDITIONAL_INFO_RECEIVED,
RDR.REOPEN_DECISION_RESULTS_NAME as REOPENING_DECISION_RESULTS,
NRR.NOT_REOPENED_REASON_NAME as NOT_REOPENED_REASON,
a.OMHA_REMAND_REQUEST,
a.REMAND_ELIGIBILITY_RESPONSE,
a.REMAND_RECEIVED_DATE,
ORR.OMHA_REM_RESP_NAME as OMHA_REMAND_REQUEST_RESPONSE,
a.OMHA_WITHDRAW_FORM_SENT,
a.OMHA_WITHDRAW_FORM_RETURNED,
a.OMHA_NOTIFIED_OF_WITHDRAWL,
a.ALJ_WITHDRAWAL,
a.DEMO_REOPENING_APPEAL_NUMBER,
a.REOPENING_ANALYSIS_COMPLETED,
RAOT.REOPEN_ANALYSIS_OUTCOME_TYPE_NAME as REOPENING_ANALYSIS_OUTCOME,
NPCRT.NOT_PURSUE_CONTR_REASON_TYPE_NAME  as NOT_PURSUED_BY_CONTR_REASON,
a.ACK_LETTER_MAILED,
a.REO_DECISION_LETTER_MAILED,
RO.REOPEN_OUTCOME_NAME as REOPENING_OUTCOME,
a.DECLINE_TO_REOPEN_DECISION,
a.APPEAL_ATTESTATION_DATE,
a.APPEAL_ATTESTATION,
a.DEMO_SCHEDULED,
a.DEMO_NOTIFICATION_LETTER_SENT,
a.RESPONSE_DUE,
a.RESPONSE_RECEIVED,
DAS.DEMO_STATUS_NAME as DEMO_ACCEPTANCE_STATUS,
a.TELE_DEMO_FOLLOW_UP,
a.DEMO_NOTIFICATION_LTR_RESENT,
a.RESCHEDULED_RESPONSE_DUE,
a.RESCHEDULE_RESPONSE_RECEIVED,
a.VERBAL_CONFIRMATION,
RDS.DEMO_STATUS_NAME as RESCHEDULED_DEMO_STATUS,
a.PROVIDER_OR_SUPPLIER_NAME,
DCS.DEMO_CONF_STATUS_NAME as DEMO_CONFERENCE_STATUS,
RT.REVIEW_TYPE_NAME as REVIEW_TYPE,
SMRD.SECOND_MED_REV_DEC_NAME as EXPERT_REVIEW_DECISION,
RN.REVIEW_NUMBER_NAME  as REVIEW_NUMBER,
a.EXPERT_REVIEW_CASE_ATTESTATI as SECOND_REVIEW_CASE_ATTESTATION,
case when (a.DEMO_REO_SENT_TO_OMHA_DATE is null) and
(ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as DEMO_REOPENING_NEW_COUNT,
case when (a.DEMO_REO_SENT_TO_OMHA_DATE is not null) and
(a.OMHA_RESPONSE_RECEIVED is null) and
(ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as SENT_TO_OMHA_COUNT,
case when (a.OMHA_RESPONSE_RECEIVED is not null) and
(a.RESPONSE_FROM_OMHA = 9287858) and
(ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as OMHA_RESPONSE_RECEIVED_NOT_REOPEN_COUNT,
case when (a.OMHA_RESPONSE_RECEIVED is not null) and
(a.RESPONSE_FROM_OMHA = 9287857)
and (a.REQUESTED_INFORMATION_DUE is null) and
(ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as OMHA_RESPONSE_RECEIVED_REOPEN_COUNT,
case when (a.ADDITIONAL_INFO_RECEIVED is null)
and (a.REQUESTED_INFORMATION_DUE is not null and trunc(a.REQUESTED_INFORMATION_DUE) >= trunc(sysdate)) and
(ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_ADDITIONAL_INFO_COUNT,
case when (a.ADDITIONAL_INFO_RECEIVED is null)
and (a.REQUESTED_INFORMATION_DUE is not null and trunc(a.REQUESTED_INFORMATION_DUE) < trunc(sysdate))
and (a.NOT_REOPENED_REASON is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as ADDITIONAL_INFO_OVERDUE_COUNT,
case when (a.ADDITIONAL_INFO_RECEIVED is not null)
and (a.REQUESTED_INFORMATION_DUE is null)
and (a.OMHA_REMAND_REQUEST is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as ADDITIONAL_INFORMATION_RECEIVED_COUNT,
case when (a.OMHA_REMAND_REQUEST is not null)
and (a.REMAND_ELIGIBILITY_RESPONSE is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_REMAND_ELIGIBILITY_RESPONSE_FROM_OMHA_COUNT,
case when (a.REMAND_ELIGIBILITY_RESPONSE is not null)
and (a.REMAND_RECEIVED_DATE is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_REMAND_COUNT,
case when (a.REMAND_RECEIVED_DATE is not null)
and (a.REOPENING_ANALYSIS_COMPLETED is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as REOPENING_ANALYSIS_COUNT,
case when (a.REOPENING_ANALYSIS_COMPLETED is not null)
and (a.REO_DECISION_LETTER_MAILED is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as REOPENING_DECISION_LETTER_NEEDED_COUNT,
case when (a.REO_DECISION_LETTER_MAILED is not null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as REOPENING_COMPLETE_COUNT,
case when (a.OMHA_WITHDRAW_FORM_SENT is not null)
and (a.OMHA_WITHDRAW_FORM_RETURNED is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_OMHA_WITHDRAWL_FORM_FROM_SUPPLIER_COUNT,
case when (a.OMHA_WITHDRAW_FORM_RETURNED is not null)
and (a.OMHA_NOTIFIED_OF_WITHDRAWL is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as NOTIFY_OMHA_OF_SUPPLIER_WITHDRAWL_COUNT,
case when (a.OMHA_NOTIFIED_OF_WITHDRAWL is not null)
and (a.ALJ_WITHDRAWAL is null)
and (ti.task_type_id = 9286497 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end  as PENDING_ALJ_WITHDRAWAL_COUNT,
case when (a.DEMO_SCHEDULED is null)
and (a.DEMO_NOTIFICATION_LETTER_SENT is null)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as NEW_READY_FOR_DEMO_COUNT,
case when (a.DEMO_SCHEDULED is not null)
and (a.DEMO_NOTIFICATION_LETTER_SENT is not null)
and (a.RESPONSE_RECEIVED is null)
and (a.RESPONSE_DUE is not null and trunc(a.RESPONSE_DUE) >= trunc(sysdate))
and (a.DEMO_NOTIFICATION_LTR_RESENT is null)
and (a.TELE_DEMO_FOLLOW_UP is null)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_RESPONSE_COUNT,
case when (a.DEMO_NOTIFICATION_LETTER_SENT is not null)
and (a.RESPONSE_RECEIVED is not null)
and (a.DEMO_ACCEPTANCE_STATUS = 9287312)
and (a.DEMO_SCHEDULED > sysdate) --? --- note demo_scheduled has times as well as dates in source
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESPONSE_RECEIVED_ACCEPTED_PENDING_CONFERENCE_COUNT,
case when (a.DEMO_NOTIFICATION_LETTER_SENT is not null)
and (a.RESPONSE_RECEIVED is not null)
and (a.DEMO_ACCEPTANCE_STATUS = 9287313)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESPONSE_RECEIVED_DECLINED_COUNT,
case when (a.DEMO_SCHEDULED is not null)
and (a.DEMO_NOTIFICATION_LETTER_SENT is not null)
and (a.RESPONSE_RECEIVED is null)
and (a.RESPONSE_DUE is not null and trunc(a.RESPONSE_DUE) < trunc(sysdate))
and (a.DEMO_NOTIFICATION_LTR_RESENT is null)
and (a.TELE_DEMO_FOLLOW_UP is null)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESPONSE_OVERDUE_FOLLOW_UP_REQUIRED_COUNT,
case when (a.DEMO_SCHEDULED is not null)
and (a.DEMO_NOTIFICATION_LETTER_SENT is not null)
and (a.RESPONSE_RECEIVED is null)
and (a.RESPONSE_DUE is not null and trunc(a.RESPONSE_DUE) < trunc(sysdate))
and (a.DEMO_NOTIFICATION_LTR_RESENT is null) --?
and (a.TELE_DEMO_FOLLOW_UP is not null)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESPONSE_OVERDUE_FOLLOW_UP_COMPLETE_COUNT,
case when (a.DEMO_NOTIFICATION_LTR_RESENT is not null)
and (a.RESCHEDULE_RESPONSE_RECEIVED is null)
and (a.RESCHEDULED_RESPONSE_DUE is not null and trunc(a.RESCHEDULED_RESPONSE_DUE) >= trunc(sysdate))
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as AWAITING_RESCHEDULE_RESPONSE_COUNT,
case when  (a.RESCHEDULE_RESPONSE_RECEIVED is not null)
and (a.DEMO_ACCEPTANCE_STATUS = 9287312)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESCHEDULE_RESPONSE_RECEIVED_ACCEPTED_COUNT,
case when  (a.RESCHEDULE_RESPONSE_RECEIVED is not null)
and (a.DEMO_ACCEPTANCE_STATUS = 9287313)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESCHEDULE_RESPONSE_RECEIVED_DECLINED_COUNT,
case when (a.DEMO_NOTIFICATION_LTR_RESENT is not null)
and (a.RESCHEDULE_RESPONSE_RECEIVED is null) --?
and (a.RESCHEDULED_RESPONSE_DUE is not null and trunc(a.RESCHEDULED_RESPONSE_DUE) < trunc(sysdate))
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as RESCHEDULE_RESPONSE_OVERDUE_COUNT,
case when (a.DEMO_CONFERENCE_STATUS = 9287314)
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as DEMO_CONFERENCE_HELD_COUNT,
case when (a.DEMO_CONFERENCE_STATUS = 9287316 )
and (ti.task_type_id = 9286496 and ti.instance_start_date is not null and ti.instance_end_date is null)
then 1 else 0 end as DEMO_CONFERENCE_CANCELLED_NO_SHOW_COUNT,
rank() over (partition by a.appeal_id order by ti.task_id desc) rnk
from D_MW_APPEAL_INSTANCE a
LEFT OUTER JOIN D_APPEAL_PRIORITIES priorities ON a.APPEAL_PRIORITY_ID = priorities.PRIORITY_ID
LEFT OUTER JOIN D_APPEAL_PARTS parts ON a.APPEAL_PART_ID = parts.PART_ID
LEFT OUTER JOIN D_APPEAL_ISSUES issues ON a.APPEAL_ISSUE = issues.ISSUE_ID
LEFT OUTER JOIN D_APPEAL_ITEM_SERVICES items ON a.APPEAL_ITEM = items.ITEM_SERVICE_ID
LEFT OUTER JOIN D_APPEAL_STAGES stages ON a.APPEAL_STAGE = stages.STAGE_ID
LEFT OUTER JOIN D_APPEAL_STATUSES statuses ON a.APPEAL_STATUS = statuses.STATUS_ID
LEFT OUTER JOIN D_APPEAL_TYPES types ON a.APPEAL_TYPE = types.TYPE_ID
LEFT OUTER JOIN D_APPELLANT_DISMISSALS dismissals ON a.APPEAL_DISMISSAL = dismissals.DISMISSAL_ID
LEFT OUTER JOIN D_APPELLANT_DISMISS_REASONS dismissal_reasons ON a.APPEAL_DISMISSAL_REASON = dismissal_reasons.DISMISS_REASON_ID
LEFT OUTER JOIN D_APPEAL_REASONS reasons ON a.APPEAL_REASON = reasons.REASON_ID
LEFT OUTER JOIN D_APPEAL_DECISIONS decisions ON a.DECISION = decisions.DECISION_ID
LEFT OUTER JOIN D_APPEAL_DEC_NOTIF_METHODS dec_notif_methods ON a.DECISION_NOTIFICATION_METHOD = dec_notif_methods.DEC_NOTIF_METHOD_ID
LEFT OUTER JOIN D_APPEAL_HPMSS hpmss ON a.HPMS = hpmss.HPMS_ID
LEFT OUTER JOIN D_APPEAL_MACS macs ON a.MAC = macs.MAC_ID
LEFT OUTER JOIN D_APPEAL_MEDICARE_TYPES medicare_types ON a.MEDICARE_TYPE = medicare_types.MEDICARE_TYPE_ID
LEFT OUTER JOIN D_APPEAL_MSPS msps ON a.MSP = msps.MSP_ID
LEFT OUTER JOIN D_APPEAL_WITHDRAW_REQ_SUBMS withdraw_req_subms ON a.WITHDRAWAL_REQUEST_SUBMITTED = withdraw_req_subms.WITHDRAW_REQ_SUBM_ID
LEFT OUTER JOIN D_APPEAL_NON_ENGLISHES non_englishes ON a.NON_ENGLISH = non_englishes.NON_ENGLISH_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITIONS dispositions ON a.DISPOSITION = dispositions.DISPOSITION_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITION_EXPS disposition_exps ON a.DISPOSITION_EXPLANATION = disposition_exps.DISPOSITION_ExP_ID
LEFT OUTER JOIN D_APPEAL_PROC_DEC_REASONS proc_dec_reasons ON a.PROCEDURAL_DECISION_REASON = proc_dec_reasons.PROC_DEC_REASON_ID
LEFT OUTER JOIN D_APPEAL_SUBSTANTIVE_REASONS sub_reasons ON a.SUBSTANTIVE_REASON = sub_reasons.SUBSTANTIVE_REASON_ID
LEFT OUTER JOIN D_DEMO_REOPENING_TYPE DRT ON a.DEMO_REOPENING_TYPE = DRT.DEMO_REOPEN_TYPE_ID
LEFT OUTER JOIN D_OMHA_RESPONSE OHR ON a.RESPONSE_FROM_OMHA = OHR.OMHA_RESPONSE_ID
LEFT OUTER JOIN D_REOPENING_DECISION_RESULTS RDR ON a.REOPENING_DECISION_RESULTS = RDR.REOPEN_DECISION_RESULTS_ID
LEFT OUTER JOIN D_NOT_REOPENED_REASON NRR ON a.NOT_REOPENED_REASON = NRR.NOT_REOPENED_REASON_ID
LEFT OUTER JOIN D_OMHA_REM_RESP ORR ON a.OMHA_REMAND_REQUEST_RESPONSE = ORR.OMHA_REM_RESP_ID
LEFT OUTER JOIN D_REOPENING_ANALYSIS_OUTCOME_TYPE RAOT ON a.REOPENING_ANALYSIS_OUTCOME	 = RAOT.REOPEN_ANALYSIS_OUTCOME_TYPE_ID
LEFT OUTER JOIN D_NOT_PURSUE_CONTR_REASON_TYPE NPCRT ON a.NOT_PURSUED_BY_CONTR_REASON =  NPCRT.NOT_PURSUE_CONTR_REASON_TYPE_ID
LEFT OUTER JOIN D_REOPENING_OUTCOME RO ON a.REOPENING_OUTCOME = RO.REOPEN_OUTCOME_ID
LEFT OUTER JOIN D_DEMO_STATUS DAS ON a.DEMO_ACCEPTANCE_STATUS= DAS.DEMO_STATUS_ID
LEFT OUTER JOIN D_DEMO_STATUS RDS ON a.RESCHEDULED_DEMO_STATUS = RDS.DEMO_STATUS_ID
LEFT OUTER JOIN D_DEMO_CONFERENCE_STATUS DCS ON a.DEMO_CONFERENCE_STATUS= DCS.DEMO_CONF_STATUS_ID
LEFT OUTER JOIN D_REVIEW_TYPE RT ON a.REVIEW_TYPE = RT.REVIEW_TYPE_ID
LEFT OUTER JOIN D_SECOND_MED_REV_DEC SMRD ON a.EXPERT_REVIEW_DECISION = SMRD.SECOND_MED_REV_DEC_ID
LEFT OUTER JOIN D_REVIEW_NUMBER RN ON a.REVIEW_NUMBER = RN.REVIEW_NUMBER_ID
LEFT OUTER JOIN D_MW_TASK_INSTANCE ti ON a.appeal_id = ti.source_reference_id
)
where rnk=1 WITH READ ONLY;


GRANT SELECT ON D_MW_APPEAL_INSTANCE_SV TO MAXDAT_READ_ONLY;


---------------------------------------------------
--appeal instance by date view
CREATE OR REPLACE VIEW F_MW_APPEAL_INSTANCE_BY_DATE_SV
AS select
a.APPEAL_ID
, bdd.D_DATE
, a.CREATE_DATE
, a.COMPLETE_DATE
, a.CANCELLED_DATE
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.ADJUDICATOR) as ADJUDICATOR
, a.DEADLINE_DATE
, issues.ISSUE_NAME as APPEAL_ISSUE
, items.ITEM_SERVICE_NAME as APPEAL_ITEM
, a.APPEAL_NUMBER
, priorities.PRIORITY_NAME as APPEAL_PRIORITY
, a.REQUEST_RECEIVED
, stages.STAGE_NAME as APPEAL_STAGE
, statuses.STATUS_NAME as APPEAL_STATUS
, types.TYPE_NAME as APPEAL_TYPE
, dismissals.DISMISSAL_NAME as APPEAL_DISMISSAL
, dismissal_reasons.DISMISS_REASON_NAME as APPEAL_DISMISSAL_REASON
, case when a.auto_forward is not null then 'Y' else 'N' end as AUTO_FORWARD
, a.CASE_FILE_REQUEST_DATE
, a.ACKNOWLEDGEMENT_LETTER_DATE
, a.DECISION_MAILED_DATE
, a.DECISION_SENT_PLAN_DATE
, a.MEDICAL_REVIEW_CHECK
, parts.PART_NAME as APPEAL_PART
, reasons.REASON_NAME as APPEAL_REASON
, a.APPEAL_TOLLING_DATE
, a.APPEAL_NOTICE_DATE
, a.CASE_FILE_RECEIVED_DATE
, a.PRECHECK_COMPLETED
,a.ACKNOWLEDGEMENT_LETTER_AGE_IN_BUS_DAYS
--,a.ACKNOWLEDGEMENT_LETTER_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(a.ACKNOWLEDGEMENT_LETTER_DATE,sysdate)) - TRUNC(a.REQUEST_RECEIVED) AS ACKNOWLEDGEMENT_LETTER_AGE_IN_CAL_DAYS
, 'C' as ACKNOWLEDGEMENT_LETTER_DAYS_TYPE
,a.ACKNOWLEDGEMENT_LETTER_TIMELINESS_STATUS
, 999 as ACKNOWLEDGEMENT_LETTER_JEOPARDY_DAYS
,a.ACKNOWLEDGEMENT_LETTER_JEOPARDY_FLAG
, 999 as ACKNOWLEDGEMENT_LETTER_TIMELINESS
,a.CASE_FILE_AGE_IN_BUS_DAYS
,a.CASE_FILE_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(a.CASE_FILE_RECEIVED_DATE, sysdate)) - TRUNC(a.CASE_FILE_REQUEST_DATE) AS CASE_FILE_RECEIVED_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_DAYS_TYPE
,a.CASE_FILE_TIMELINESS_STATUS
, 999 as CASE_FILE_JEOPARDY_DAYS
,a.CASE_FILE_JEOPARDY_FLAG
, 999 as CASE_FILE_TIMELINESS_THRESHOLD
,a.APPEAL_AGE_IN_BUS_DAYS
,a.APPEAL_AGE_IN_CAL_DAYS
, 'C' as APPEAL_DAYS_TYPE
,case when (a.complete_date is not null and a.complete_date <= a.deadline_date) then 'Timely' when (a.complete_date is not null and a.complete_date > a.deadline_date) then 'Untimely' else null end as APPEAL_TIMELINESS_STATUS
, 999 as APPEAL_JEOPARDY_DAYS
,a.APPEAL_JEOPARDY_FLAG
, 999 as APPEAL_TIMELINESS_THRESHOLD
,a.CASE_FILE_ENTRY_AGE_IN_BUS_DAYS
,a.CASE_FILE_ENTRY_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_ENTRY_DAYS_TYPE
,a.CASE_FILE_ENTRY_TIMELINESS_STATUS
, 999 as CASE_FILE_ENTRY_JEOPARDY_DAYS
,a.CASE_FILE_ENTRY_JEOPARDY_FLAG
,999 as CASE_FILE_ENTRY_TIMELINESS_THRESHOLD
,a.DECISION_LETTER_AGE_IN_BUS_DAYS
,a.DECISION_LETTER_AGE_IN_CAL_DAYS
, 'C' as DECISION_LETTER_DAYS_TYPE
,a.DECISION_LETTER_TIMELINESS_STATUS
,999 as DECISION_LETTER_JEOPARDY_DAYS
,a.DECISION_LETTER_JEOPARDY_FLAG
, 999 as DECISION_LETTER_TIMELINESS_THRESHOLD
,a.REQUEST_HPMS_AGE_IN_BUS_DAYS
,a.REQUEST_HPMS_AGE_IN_CAL_DAYS
, 'C' as REQUEST_HPMS_DAYS_TYPE
,a.REQUEST_HPMS_TIMELINESS_STATUS
, 999 as REQUEST_HPMS_JEOPARDY_DAYS
,a.REQUEST_HPMS_JEOPARDY_FLAG
, 999 as REQUEST_HPMS_TIMELINESS_THRESHOLD
,a.ADJUDICATOR_PROCESS_AGE_IN_BUS_DAYS
,a.ADJUDICATOR_PROCESS_AGE_IN_CAL_DAYS
, 'C' as ADJUDICATOR_PROCESS_DAYS_TYPE
,a.ADJUDICATOR_PROCESS_TIMELINESS_STATUS
, 999 as ADJUDICATOR_PROCESS_JEOPARDY_DAYS
,a.ADJUDICATOR_PROCESS_JEOPARDY_FLAG
, 999 as ADJUDICATOR_PROCESS_TIMELINESS_THRESHOLD
,a.CASE_FILE_REQUEST_AGE_IN_BUS_DAYS
--,a.CASE_FILE_REQUEST_AGE_IN_CAL_DAYS
,TRUNC(COALESCE(a.CASE_FILE_REQUEST_DATE, sysdate)) - TRUNC(a.REQUEST_RECEIVED) AS CASE_FILE_REQUEST_AGE_IN_CAL_DAYS
, 'C' as CASE_FILE_REQUEST_DAYS_TYPE
,a.CASE_FILE_REQUEST_TIMELINESS_STATUS
, 999 as CASE_FILE_REQUEST_JEOPARDY_DAYS
,a.CASE_FILE_REQUEST_JEOPARDY_FLAG
, 999 as CASE_FILE_REQUEST_TIMELINESS_THRESHOLD
, a.CLAIMED_DATE
, decisions.DECISION_NAME as DECISION
, dec_notif_methods.DEC_NOTIF_METHOD_NAME as DECISION_NOTIFICATION_METHOD
, hpmss.HPMS_NAME as HPMS
, a.HPMS_REQUESTED_DATE
, a.IS_REQUEST_FOR_INFORMATION_P
, macs.MAC_NAME as MAC
, medicare_types.MEDICARE_TYPE_NAME as MEDICARE_TYPE
, msps.MSP_NAME as MSP
, a.NEW_DOCUMENTATION_REVIEWED
, a.PHYSICIAN_SPECIALTY
, a.REASON_FOR_APPEAL
, a.WITHDRAWAL
, withdraw_req_subms.WITHDRAW_REQ_SUBM_NAME as WITHDRAWAL_REQUEST_SUBMITTED
, non_englishes.NON_ENGLISH_NAME as NON_ENGLISH
, a.NON_ENGLISH_OTHER
, dispositions.DISPOSITION_NAME as DISPOSITION
, disposition_exps.DISPOSITION_EXP_NAME as DISPOSITION_EXPLANATION
, proc_dec_reasons.PROC_DEC_REASON_NAME as PROCEDURAL_DECISION_REASON
, sub_reasons.SUBSTANTIVE_REASON_NAME as SUBSTANTIVE_REASON
, a.FIRST_REVIEW_CASE_ATTESTATIO
, (select ft_med_rev_ds.FT_MED_REV_NAME from D_APPEAL_FT_MED_REV_DS ft_med_rev_ds where a.FIRST_MEDICAL_REVIEW_DECISIO = ft_med_rev_ds.FT_MED_REV_ID) as FIRST_MEDICAL_REVIEW_DECISIO
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.FIRST_REVIEWER) as FIRST_REVIEWER
, (select ft_med_rev_ds.FT_MED_REV_NAME from D_APPEAL_FT_MED_REV_DS ft_med_rev_ds where a.THIRD_MEDICAL_REVIEW_DECISIO = ft_med_rev_ds.FT_MED_REV_ID) as THIRD_MEDICAL_REVIEW_DECISIO
, a.THIRD_REVIEW_CASE_ATTESTATIO
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.THIRD_REVIEWER) as THIRD_REVIEWER
, a.EXPERT_REVIEW_CASE_ATTESTATI
, a.EXPERT_REVIEW_CITATION
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = a.EXPERT_REVIEWER_MD_ID) as EXPERT_REVIEWER_MD_ID,
a.CLOSED_DATE,
a.WITHDRAWN_DATE
              ,CASE WHEN bdd.D_DATE = TRUNC(a.CREATE_DATE) THEN 1 ELSE 0 END AS CREATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(a.CLOSED_DATE) OR bdd.D_DATE = TRUNC(a.CANCELLED_DATE) OR bdd.D_DATE = TRUNC(a.WITHDRAWN_DATE)) THEN 0 ELSE 1 END AS INVENTORY_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(a.CLOSED_DATE) OR bdd.D_DATE = TRUNC(a.CANCELLED_DATE) OR bdd.D_DATE = TRUNC(a.WITHDRAWN_DATE))
		OR (a.COMPLETE_DATE IS NOT NULL AND bdd.d_DATE >= TRUNC(a.COMPLETE_DATE))
		THEN 0 ELSE 1 END AS SLA_INVENTORY_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(a.COMPLETE_DATE) THEN 1 ELSE 0 END AS COMPLETION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(a.CLOSED_DATE) THEN 1 ELSE 0 END AS CLOSED_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(a.CANCELLED_DATE) THEN 1 ELSE 0 END AS CANCELLATION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(a.WITHDRAWN_DATE) THEN 1 ELSE 0 END AS WITHDRAWN_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(a.CLOSED_DATE) OR bdd.D_DATE = TRUNC(a.CANCELLED_DATE) OR bdd.D_DATE = TRUNC(a.WITHDRAWN_DATE)) THEN 1 ELSE 0 END AS TERMINATION_COUNT,
              Bus_days_between(TRUNC(a.CREATE_DATE), trunc(bdd.d_date)) AGE_IN_BUS_DAYS,
              CASE WHEN  (bdd.D_DATE = TRUNC(a.COMPLETE_DATE) AND bdd.D_DATE <= a.DEADLINE_DATE AND a.complete_date <= a.deadline_date) THEN 1 ELSE 0 END as TIMELY_APPEALS_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(a.COMPLETE_DATE) AND (bdd.D_DATE > a.DEADLINE_DATE or a.complete_date > a.deadline_date)) THEN 1 ELSE 0 END as UNTIMELY_APPEALS_COUNT,
case when (bdd.d_date = trunc(a.create_date)) then (select count(distinct(claim_id)) from d_qic_claim qc where a.appeal_id = qc.appeal_id) else 0 end as CLAIM_CREATION_COUNT,
case when (bdd.d_date = trunc(a.closed_date)) then (select count(distinct(claim_id)) from d_qic_claim qc where a.appeal_id = qc.appeal_id) else 0 end as CLAIMS_CLOSED_COUNT,
CASE WHEN bdd.D_DATE = TRUNC(a.CASE_FILE_RECEIVED_DATE) THEN 1 ELSE 0 END AS CASE_FILE_RECEIVED_COUNT,
CASE WHEN ( (a.CASE_FILE_REQUEST_DATE IS NOT NULL ) AND (bdd.D_DATE >= TRUNC(a.CASE_FILE_REQUEST_DATE) )
AND ( (a.CASE_FILE_RECEIVED_DATE IS NULL) OR (bdd.d_date < trunc(a.CASE_FILE_RECEIVED_DATE)) )) THEN 1 ELSE 0 END AS CASE_FILE_PENDING_COUNT,
a.DEMO_SCHEDULED,
a.DEMO_NOTIFICATION_LETTER_SENT,
a.EXPERT_REVIEW_CASE_ATTESTATI as SECOND_REVIEW_CASE_ATTESTATION
FROM D_DATES bdd
JOIN D_MW_APPEAL_INSTANCE a
  ON  (
       ((a.create_date is null) OR (bdd.D_DATE >= TRUNC(a.CREATE_DATE)))
       AND (
                ((closed_date is null) OR (bdd.d_date <= trunc(closed_date))) AND
 		((cancelled_date is null) OR (bdd.d_date <= trunc(cancelled_date))) AND
     		((withdrawn_date is null) OR (bdd.d_date <= trunc(withdrawn_date)))
            )
    )
LEFT OUTER JOIN D_APPEAL_PRIORITIES priorities ON a.APPEAL_PRIORITY_ID = priorities.PRIORITY_ID
LEFT OUTER JOIN D_APPEAL_PARTS parts ON a.APPEAL_PART_ID = parts.PART_ID
LEFT OUTER JOIN D_APPEAL_ISSUES issues ON a.APPEAL_ISSUE = issues.ISSUE_ID
LEFT OUTER JOIN D_APPEAL_ITEM_SERVICES items ON a.APPEAL_ITEM = items.ITEM_SERVICE_ID
LEFT OUTER JOIN D_APPEAL_STAGES stages ON a.APPEAL_STAGE = stages.STAGE_ID
LEFT OUTER JOIN D_APPEAL_STATUSES statuses ON a.APPEAL_STATUS = statuses.STATUS_ID
LEFT OUTER JOIN D_APPEAL_TYPES types ON a.APPEAL_TYPE = types.TYPE_ID
LEFT OUTER JOIN D_APPELLANT_DISMISSALS dismissals ON a.APPEAL_DISMISSAL = dismissals.DISMISSAL_ID
LEFT OUTER JOIN D_APPELLANT_DISMISS_REASONS dismissal_reasons ON a.APPEAL_DISMISSAL_REASON = dismissal_reasons.DISMISS_REASON_ID
LEFT OUTER JOIN D_APPEAL_REASONS reasons ON a.APPEAL_REASON = reasons.REASON_ID
LEFT OUTER JOIN D_APPEAL_DECISIONS decisions ON a.DECISION = decisions.DECISION_ID
LEFT OUTER JOIN D_APPEAL_DEC_NOTIF_METHODS dec_notif_methods ON a.DECISION_NOTIFICATION_METHOD = dec_notif_methods.DEC_NOTIF_METHOD_ID
LEFT OUTER JOIN D_APPEAL_HPMSS hpmss ON a.HPMS = hpmss.HPMS_ID
LEFT OUTER JOIN D_APPEAL_MACS macs ON a.MAC = macs.MAC_ID
LEFT OUTER JOIN D_APPEAL_MEDICARE_TYPES medicare_types ON a.MEDICARE_TYPE = medicare_types.MEDICARE_TYPE_ID
LEFT OUTER JOIN D_APPEAL_MSPS msps ON a.MSP = msps.MSP_ID
LEFT OUTER JOIN D_APPEAL_WITHDRAW_REQ_SUBMS withdraw_req_subms ON a.WITHDRAWAL_REQUEST_SUBMITTED = withdraw_req_subms.WITHDRAW_REQ_SUBM_ID
LEFT OUTER JOIN D_APPEAL_NON_ENGLISHES non_englishes ON a.NON_ENGLISH = non_englishes.NON_ENGLISH_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITIONS dispositions ON a.DISPOSITION = dispositions.DISPOSITION_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITION_EXPS disposition_exps ON a.DISPOSITION_EXPLANATION = disposition_exps.DISPOSITION_ExP_ID
LEFT OUTER JOIN D_APPEAL_PROC_DEC_REASONS proc_dec_reasons ON a.PROCEDURAL_DECISION_REASON = proc_dec_reasons.PROC_DEC_REASON_ID
LEFT OUTER JOIN D_APPEAL_SUBSTANTIVE_REASONS sub_reasons ON a.SUBSTANTIVE_REASON = sub_reasons.SUBSTANTIVE_REASON_ID WITH READ ONLY;

GRANT SELECT ON F_MW_APPEAL_INSTANCE_BY_DATE_SV TO MAXDAT_READ_ONLY;    
----------------------------------------------------
--appeals by day view
CREATE OR REPLACE VIEW F_MW_APPEALS_BY_DAY_SV
AS SELECT
ABD_DP_ID
,d_date
,appeal_part_id
,parts.part_name as appeal_part
,creation_count
,inventory_count
,sla_inventory_count
,completion_count
,closed_count
,cancellation_count
,withdrawn_count
,termination_count
,timely_appeals_count
,untimely_appeals_count
,last_update_date
FROM F_APPEALS_BY_DAY_BY_PART
LEFT OUTER JOIN D_APPEAL_PARTS parts ON APPEAL_PART_ID = parts.PART_ID
WHERE D_DATE >= TRUNC((SYSDATE - (select value from corp_etl_control where name = 'APPEAL_CUBE_SPAN')),'MONTH')
order by d_date, appeal_part_id;

GRANT SELECT ON F_MW_APPEALS_BY_DAY_SV TO MAXDAT_READ_ONLY; 
----------------------------------------------------
--F_MW_TASK_INSTANCE_BY_DATE_SV
   --should work as is
   
--F_MW_TASKS_BY_DAY_SV
  --should work as is
  
--FM_MW_TASKS_BY_MONTH_SV
  --need to add inventory count (it was decided that this column can be removed)

  
--F_MW_TAKS_BY_WEEK
  --need to add inventory count (it was decided that this column can be removed)
  
--F_MW_TASKS_BY_YEAR
  --need to add inventory count (it was decided that this column can be removed)
  
--F_MW_TASK_TYPES_BY_DAY_SV
  --should work as is
  
--F_MW_TASK_TYPES_BY MONTH_SV
  --need to add inventory count (it was decided that this column can be removed)
  
--F_W_TASK_TYPES_BY_WEEK_SV
  --need  to add inventory count (it was decided that this column can be removed)
  
--F_MW_TASK_TYPES_BY_YEAR_SV
  --need to add inventory count (it was decided that this column can be removed)


-----------------------------------------------------------------------------
 CREATE OR REPLACE VIEW F_STAFF_BY_DATE_SV 
AS SELECT
    sbd.STAFF_ID
    , sbd.HOURS_DATE
    , sbd.TOTAL_HOURS
    , sbd.COMPLETED_TASKS_COUNT
    , sbd.PRODUCTIVE_HOURS
    , sbd.CREATE_DATE
    , sbd.UPDATE_DATE
, delt.EMPL_ORG_ID as EMPLOYEE_ORG_ID
, delt.EMPL_ORG_NAME as EMPLOYEE_ORG_NAME
, delt.PROJECT_ID
, delt.PROJECT_NAME
, delt.ORG_ID
, delt.ORG_NAME
, delt.PAY_TYPE
, delt.COMMENTS
, delt.NOTES
, delt.SUP_UPDATED as SUPERVISOR_UPDATE_FLAG
FROM F_STAFF_BY_DATE sbd
JOIN D_DELTEK_HOURS delt ON sbd.STAFF_ID = delt.EMPLOYEE_ID WITH READ ONLY;

GRANT SELECT ON F_STAFF_BY_DATE_SV TO MAXDAT_READ_ONLY;
--------------------------------------------------------------
  -------------------------------------------------
--staff performance by day view
CREATE OR REPLACE VIEW F_MW_STAFF_PERFORMANCE_BY_DAY_SV 
AS select
D_DATE as D_DAY,
staff.STAFF_ID
,case when curr_owner_staff_id = 0 then 'system' when curr_owner_staff_id = -1 then 'unknown staff'
else trim(staff.first_name) || ' ' || (case when staff.middle_name is not null then (trim(staff.middle_name) || ' ') else '' end) || trim(staff.last_name) end as STAFF_NAME
,super.SUPERVISOR_PERSON_ID as SUPERVISOR_ID
,case when super.supervisor_person_id = -1 then 'supervisor unknown'
else (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from D_STAFF st where st.staff_id = super.SUPERVISOR_PERSON_ID) end as SUPERVISOR_NAME
,TASK_TYPE_ID
--appeal attributes
,priorities.PRIORITY_NAME as APPEAL_PRIORITY
,parts.PART_NAME as APPEAL_PART
,stages.STAGE_NAME as APPEAL_STAGE
,issues.ISSUE_NAME as APPEAL_ISSUE
,items.ITEM_SERVICE_NAME as APPEAL_ITEM
,types.TYPE_NAME as APPEAL_TYPE
,dismissals.DISMISSAL_NAME as APPEAL_DISMISSAL
,dismissal_reasons.DISMISS_REASON_NAME as APPEAL_DISMISSAL_REASON
,case when auto_forward is not null then 'Y' else 'N' end as AUTO_FORWARD
,reasons.REASON_NAME as APPEAL_REASON
, EMPLOYEE_COMPLETION_COUNT
, CURRENT_CLAIM_COUNT
,round(EMPLOYEE_TOTAL_HANDLE_TIME,6) as EMPLOYEE_TOTAL_HANDLE_TIME
,round(EMPLOYEE_MIN_HANDLE_TIME,6) as EMPLOYEE_MIN_HANDLE_TIME
,round(EMPLOYEE_MAX_HANDLE_TIME,6) as EMPLOYEE_MAX_HANDLE_TIME
,TEAM_COMPLETION_COUNT
,round(TEAM_TOTAL_HANDLE_TIME,6) as TEAM_TOTAL_HANDLE_TIME
,round(TEAM_MIN_HANDLE_TIME,6) as TEAM_MIN_HANDLE_TIME
,round(TEAM_MAX_HANDLE_TIME,6) as TEAM_MAX_HANDLE_TIME
,PROJECT_COMPLETION_COUNT
,round(PROJECT_TOTAL_HANDLE_TIME,6) as PROJECT_TOTAL_HANDLE_TIME
,round(PROJECT_MIN_HANDLE_TIME,6) as PROJECT_MIN_HANDLE_TIME
,round(PROJECT_MAX_HANDLE_TIME,6) as PROJECT_MAX_HANDLE_TIME
from(
WITH EMPS as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,ti.CURR_OWNER_STAFF_ID
,count(ti.MW_BI_ID ) as EMPLOYEE_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as EMPLOYEE_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as EMPLOYEE_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as EMPLOYEE_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,ti.CURR_OWNER_STAFF_ID
),
TEAMS as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,count(ti.MW_BI_ID ) as TEAM_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as TEAM_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as TEAM_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as TEAM_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
),
PROJECT as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,count(ti.MW_BI_ID ) as PROJECT_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as PROJECT_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as PROJECT_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as PROJECT_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
),
EMPS_CLAIM_COUNT as (
SELECT dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,staff.STAFF_ID,
count(ti.MW_BI_ID) as CURRENT_CLAIM_COUNT
FROM D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON ti.CREATE_DATE <= dd.D_DATE
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
JOIN D_STAFF staff ON ti.CURR_OWNER_STAFF_ID = staff.STAFF_ID
WHERE ti.CURR_TASK_STATUS = 'CLAIMED'
GROUP BY dd.D_DATE, ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,staff.STAFF_ID
)
SELECT EMPS.D_DATE, EMPS.TASK_TYPE_ID
,EMPS.APPEAL_PRIORITY_ID
,EMPS.APPEAL_PART_ID
,EMPS.APPEAL_STAGE
,EMPS.APPEAL_ISSUE
,EMPS.APPEAL_ITEM
,EMPS.APPEAL_TYPE
,EMPS.APPEAL_DISMISSAL
,EMPS.APPEAL_DISMISSAL_REASON
,EMPS.AUTO_FORWARD
,EMPS.APPEAL_REASON
, EMPS.CURR_TEAM_ID, EMPS.CURR_OWNER_STAFF_ID
, EMPS.EMPLOYEE_COMPLETION_COUNT
, nvl(EMPS_CLAIM_COUNT.CURRENT_CLAIM_COUNT,0) as CURRENT_CLAIM_COUNT
,EMPS.EMPLOYEE_TOTAL_HANDLE_TIME
,EMPS.EMPLOYEE_MIN_HANDLE_TIME
,EMPS.EMPLOYEE_MAX_HANDLE_TIME
,TEAMS.TEAM_COMPLETION_COUNT
,TEAMS.TEAM_TOTAL_HANDLE_TIME
,TEAMS.TEAM_MIN_HANDLE_TIME
,TEAMS.TEAM_MAX_HANDLE_TIME
,PROJECT.PROJECT_COMPLETION_COUNT
,PROJECT.PROJECT_TOTAL_HANDLE_TIME
,PROJECT.PROJECT_MIN_HANDLE_TIME
,PROJECT.PROJECT_MAX_HANDLE_TIME
FROM
EMPS
JOIN TEAMS ON EMPS.D_DATE = TEAMS.D_DATE
 AND EMPS.TASK_TYPE_ID = TEAMS.TASK_TYPE_ID
 AND decode(EMPS.APPEAL_PRIORITY_ID,TEAMS.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,TEAMS.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,TEAMS.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,TEAMS.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,TEAMS.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,TEAMS.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,TEAMS.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,TEAMS.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD,TEAMS.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,TEAMS.APPEAL_REASON,1,0)=1
AND decode(EMPS.CURR_TEAM_ID,TEAMS.CURR_TEAM_ID,1,0)=1
JOIN PROJECT ON EMPS.D_DATE = PROJECT.D_DATE
AND EMPS.TASK_TYPE_ID = PROJECT.TASK_TYPE_ID
 AND decode(EMPS.APPEAL_PRIORITY_ID,PROJECT.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,PROJECT.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,PROJECT.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,PROJECT.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,PROJECT.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,PROJECT.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,PROJECT.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,PROJECT.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD,PROJECT.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,PROJECT.APPEAL_REASON,1,0)=1
LEFT JOIN EMPS_CLAIM_COUNT ON EMPS.CURR_OWNER_STAFF_ID = EMPS_CLAIM_COUNT.STAFF_ID
AND EMPS.D_DATE = EMPS_CLAIM_COUNT.D_DATE
AND EMPS.TASK_TYPE_ID = EMPS_CLAIM_COUNT.TASK_TYPE_ID
 AND decode(EMPS.APPEAL_PRIORITY_ID,EMPS_CLAIM_COUNT.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,EMPS_CLAIM_COUNT.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,EMPS_CLAIM_COUNT.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,EMPS_CLAIM_COUNT.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,EMPS_CLAIM_COUNT.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,EMPS_CLAIM_COUNT.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,EMPS_CLAIM_COUNT.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,EMPS_CLAIM_COUNT.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD, EMPS_CLAIM_COUNT.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,EMPS_CLAIM_COUNT.APPEAL_REASON,1,0)=1
)
LEFT OUTER JOIN D_STAFF staff ON CURR_OWNER_STAFF_ID = staff.STAFF_ID
LEFT OUTER JOIN D_SUPERVISOR super ON CURR_OWNER_STAFF_ID = super.PERSON_ID
LEFT OUTER JOIN D_APPEAL_PRIORITIES priorities ON APPEAL_PRIORITY_ID = priorities.PRIORITY_ID
LEFT OUTER JOIN D_APPEAL_PARTS parts ON APPEAL_PART_ID = parts.PART_ID
LEFT OUTER JOIN D_APPEAL_ISSUES issues ON APPEAL_ISSUE = issues.ISSUE_ID
LEFT OUTER JOIN D_APPEAL_ITEM_SERVICES items ON APPEAL_ITEM = items.ITEM_SERVICE_ID
LEFT OUTER JOIN D_APPEAL_STAGES stages ON APPEAL_STAGE = stages.STAGE_ID
LEFT OUTER JOIN D_APPEAL_TYPES types ON APPEAL_TYPE = types.TYPE_ID
LEFT OUTER JOIN D_APPELLANT_DISMISSALS dismissals ON APPEAL_DISMISSAL = dismissals.DISMISSAL_ID
LEFT OUTER JOIN D_APPELLANT_DISMISS_REASONS dismissal_reasons ON APPEAL_DISMISSAL_REASON = dismissal_reasons.DISMISS_REASON_ID
--LEFT OUTER JOIN D_APPEAL_AUTO_FORWARDS auto_forwards ON AUTO_FORWARD = auto_forwards.AUTO_FORWARD_ID
LEFT OUTER JOIN D_APPEAL_REASONS reasons ON APPEAL_REASON = reasons.REASON_ID;

GRANT SELECT ON F_MW_STAFF_PERFORMANCE_BY_DAY_SV TO MAXDAT_READ_ONLY;
--------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW F_MW_TASK_INSTANCE_BY_DATE_SV
AS WITH tasks AS (
SELECT a.task_type_id, a.MW_BI_ID, a.task_id, b.entity_id FROM D_MW_TASK_INSTANCE a JOIN d_bpm_task_type_entity b ON a.TASK_TYPE_ID = b.TASK_TYPE_ID
), processes AS (
SELECT e.process_instance_id,t.mw_bi_id FROM D_BPM_ENTITY_INSTANCE e JOIN tasks t ON t.task_id = e.entity_instance_id
)
SELECT        d.MW_BI_ID,
              bdd.D_DATE,
              p.Process_instance_id,
              CASE WHEN bdd.D_DATE = TRUNC(d.CREATE_DATE) THEN 1 ELSE 0 END AS CREATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 0 ELSE 1 END AS INVENTORY_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN 1 ELSE 0 END AS COMPLETION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE) THEN 1 ELSE 0 END AS CANCELLATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 1 ELSE 0 END AS TERMINATION_COUNT,
              Bus_days_between(TRUNC(d.CREATE_DATE), bdd.d_date) AGE_IN_BUS_DAYS,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN round(d.handle_time,6) ELSE 0 END as HANDLE_TIME
  FROM D_DATES bdd
  JOIN D_MW_TASK_INSTANCE d ON (bdd.D_DATE >= TRUNC(d.INSTANCE_START_DATE) AND (bdd.D_DATE <= d.INSTANCE_END_DATE OR d.INSTANCE_END_DATE IS NULL))
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_START_DATE)
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_END_DATE)
  LEFT JOIN processes p
      ON d.MW_BI_ID = p.mw_bi_id;
      
      
GRANT SELECT ON F_MW_TASK_INSTANCE_BY_DATE_SV TO MAXDAT_READ_ONLY;
  
----------------------------------------------------------------------

  CREATE TABLE FEDQIC_APPEAL_LOGGING 
   (	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"MODULE" VARCHAR2(20 BYTE)
   ) 
  TABLESPACE "MAXDAT_DATA" ;



----------------------------------

insert into corp_etl_control values('APPEAL_CUBE_LOOK_BACK_DAYS','N',0,'Number of days to lookback for hourly appeal cube refreshes',sysdate,sysdate);
insert into corp_etl_control values('APPEAL_CUBE_SPAN','N',365,'Span in days for appeal cubes to include data',sysdate,sysdate);

CREATE TABLE F_APPEALS_BY_DAY_BY_PART
   (
        ABD_DP_ID NUMBER NOT NULL,
        D_DATE DATE NOT NULL,
        APPEAL_PART_ID NUMBER(10, 0) NOT NULL,
        creation_count number,
        inventory_count number,
        sla_inventory_count number,
        completion_count number,
        closed_count number,
        cancellation_count number,
        withdrawn_count number,
        termination_count number,
        timely_appeals_count number,
        untimely_appeals_count number,
        LAST_UPDATE_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table F_APPEALS_BY_DAY_BY_PART add constraint ABD_DP_PK primary key (ABD_DP_ID)
  using index tablespace MAXDAT_INDX;

create index FABD_D_DATE on F_APPEALS_BY_DAY_BY_PART ("D_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index FABD_APART on F_APPEALS_BY_DAY_BY_PART ("APPEAL_PART_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index FABD_LUPDATE on F_APPEALS_BY_DAY_BY_PART ("LAST_UPDATE_DATE") online tablespace MAXDAT_INDX parallel compute statistics;

Grant select on F_APPEALS_BY_DAY_BY_PART to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_ABD_DP_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

commit;


insert into F_APPEALS_BY_DAY_BY_PART 
(ABD_DP_ID,
D_DATE,
APPEAL_PART_ID,
creation_count,
inventory_count,
sla_inventory_count,
completion_count,
closed_count,
cancellation_count,
withdrawn_count,
termination_count,
timely_appeals_count,
untimely_appeals_count,
LAST_UPDATE_DATE)
SELECT 
SEQ_ABD_DP_ID.nextVal, res.*, sysdate as last_update_date from
(select
bdd.d_date
,a.appeal_part_id
,sum(0) as creation_count
,sum(0) as inventory_count
,sum(0) as sla_inventory_count
,sum(0) as completion_count
,sum(0) as closed_count
,sum(0) as cancellation_count
,sum(0) as withdrawn_count
,sum(0) as termination_count
,sum(0) as timely_appeals_count
,sum(0) as untimely_appeals_count
FROM D_DATES bdd
JOIN D_MW_APPEAL_INSTANCE a
  ON  (
       ((a.create_date is null) OR (bdd.D_DATE >= TRUNC(a.CREATE_DATE)))
       AND (
                ((closed_date is null) OR (bdd.d_date <= trunc(closed_date))) AND
 		((cancelled_date is null) OR (bdd.d_date <= trunc(cancelled_date))) AND
     		((withdrawn_date is null) OR (bdd.d_date <= trunc(withdrawn_date)))
            )
    )
WHERE bdd.D_DATE >= TRUNC((SYSDATE - (select value from corp_etl_control where name = 'APPEAL_CUBE_SPAN')),'MONTH')    
group by bdd.d_date, a.appeal_part_id
order by bdd.d_date, a.appeal_part_id) res;

commit;

CREATE OR REPLACE VIEW MAXDAT.F_MW_APPEALS_BY_DAY_SV AS
SELECT 
ABD_DP_ID
,d_date
,appeal_part_id
,parts.part_name as appeal_part
,creation_count
,inventory_count
,sla_inventory_count
,completion_count
,closed_count
,cancellation_count
,withdrawn_count
,termination_count
,timely_appeals_count
,untimely_appeals_count
,last_update_date
FROM F_APPEALS_BY_DAY_BY_PART
LEFT OUTER JOIN D_APPEAL_PARTS parts ON APPEAL_PART_ID = parts.PART_ID
WHERE D_DATE >= TRUNC((SYSDATE - (select value from corp_etl_control where name = 'APPEAL_CUBE_SPAN')),'MONTH')    
order by d_date, appeal_part_id;

GRANT SELECT ON MAXDAT.F_MW_APPEALS_BY_DAY_SV TO MAXDAT_READ_ONLY;

-----------------------------
CREATE TABLE F_APPEAL_TASKS_BY_DAY
   (
        ATD_DPT_ID NUMBER NOT NULL,
        D_DATE DATE NOT NULL,
        APPEAL_PART_ID NUMBER(10, 0) NOT NULL,
        TASK_TYPE_ID NUMBER NOT NULL,
        creation_count number,
        inventory_count number,
        completion_count number,
        cancellation_count number,
        LAST_UPDATE_DATE DATE
    )   tablespace MAXDAT_DATA ;

  alter table F_APPEAL_TASKS_BY_DAY add constraint ATD_DPT_PK primary key (ATD_DPT_ID)
  using index tablespace MAXDAT_INDX;

create index FATD_D_DATE on F_APPEAL_TASKS_BY_DAY ("D_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index FATD_APART on F_APPEAL_TASKS_BY_DAY ("APPEAL_PART_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index FATD_TT on F_APPEAL_TASKS_BY_DAY ("TASK_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;

--create index FATD_DPT on F_APPEAL_TASKS_BY_DAY ("D_DATE","APPEAL_PART_ID","TASK_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;


Grant select on F_APPEAL_TASKS_BY_DAY to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_ATBD_DPT_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

commit;

insert into corp_etl_control values ('APPEAL_TASKS_CUBE_SPAN','N',183,'Span in days for appeal tasks by day cube to include data', sysdate, sysdate);
commit;

delete f_appeal_tasks_by_day;
insert into F_APPEAL_TASKS_BY_DAY
(ATD_DPT_ID,
D_DATE,
APPEAL_PART_ID,
TASK_TYPE_ID,
creation_count,
inventory_count,
completion_count,
cancellation_count,
LAST_UPDATE_DATE)
SELECT 
SEQ_ATBD_DPT_ID.nextVal, res.*, sysdate as last_update_date from
(select
bdd.d_date
,ap.part_id
,t.status_id
,sum(0) as creation_count
,sum(0) as inventory_count
,sum(0) as completion_count
,sum(0) as cancellation_count
FROM D_DATES bdd
CROSS JOIN D_APPEAL_STATUSES t
CROSS JOIN d_appeal_parts ap
WHERE bdd.D_DATE >= TRUNC((SYSDATE - (select value from corp_etl_control where name = 'APPEAL_TASKS_CUBE_SPAN')),'MONTH')  
group by bdd.d_date, ap.part_id, t.status_id
order by bdd.d_date, ap.part_id,t.status_id) res;

commit;

CREATE OR REPLACE VIEW MAXDAT.F_MW_APPEAL_TASKS_BY_DAY_SV AS
SELECT 
ATD_DPT_ID
,d_date
,appeal_part_id
,parts.part_name as appeal_part
,task_type_id
,tts.status_name as task_type
,creation_count
,inventory_count
,completion_count
,cancellation_count
,last_update_date
FROM F_APPEAL_TASKS_BY_DAY
LEFT OUTER JOIN D_APPEAL_PARTS parts ON APPEAL_PART_ID = parts.PART_ID
LEFT OUTER JOIN D_APPEAL_STATUSES tts ON TASK_TYPE_ID = tts.STATUS_ID
WHERE D_DATE >= TRUNC((SYSDATE - (select value from corp_etl_control where name = 'APPEAL_TASKS_CUBE_SPAN')),'MONTH')    
order by d_date, appeal_part_id;

GRANT SELECT ON MAXDAT.F_MW_APPEAL_TASKS_BY_DAY_SV TO MAXDAT_READ_ONLY;


-----------------

CREATE TABLE FEDQIC_DOCUMENT_STG 
(
  ID_PARENT NUMBER(19, 0)
, ID NUMBER(19, 0) NOT NULL
, C_DOCUMENT_TYPE NUMBER(10, 0) 
, C_ICN VARCHAR2(255 CHAR) 
, C_SOURCE NUMBER(10, 0)  
, C_MAILED_DATE DATE  
, C_DUE_DATE DATE 
, C_UPLOADED_DATE DATE  
, C_DOCUMENT_CLAIMED_DATE TIMESTAMP(6)
, C_DATE_SCANNED TIMESTAMP(6) 
, C_CLASSIFIED_DATE TIMESTAMP(6) 
, C_ASSOCIATED_DATE TIMESTAMP(6)  
, C_DATE_RECEIVED TIMESTAMP(6) 
, C_REQUESTED_INFORMATION NUMBER(10, 0)  
, C_REQUEST_SENT_TO NUMBER(10, 0) 
, C_REQUESTOR NUMBER(10, 0)   
, C_DATE_OF_REQUEST DATE  
)   tablespace MAXDAT_DATA; 

  alter table FEDQIC_DOCUMENT_STG add constraint DOC_STG_PK primary key (ID)
  using index tablespace MAXDAT_INDX;

Grant select on FEDQIC_DOCUMENT_STG to MAXDAT_READ_ONLY;

CREATE TABLE CORP_ETL_DOCUMENT 
(
CEDOC_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, DOCUMENT_ID NUMBER(19, 0) NOT NULL
, DOCUMENT_TYPE NUMBER(10, 0) 
, ICN VARCHAR2(255 CHAR) 
, SOURCE NUMBER(10, 0)  
, MAILED_DATE DATE  
, DUE_DATE DATE 
, UPLOADED_DATE DATE  
, DOCUMENT_CLAIMED_DATE TIMESTAMP(6)
, SCANNED_DATE TIMESTAMP(6) 
, CLASSIFIED_DATE TIMESTAMP(6) 
, ASSOCIATED_DATE TIMESTAMP(6)  
, DATE_RECEIVED TIMESTAMP(6) 
, REQUEST_INFORMATION NUMBER(10, 0)  
, REQUEST_SENT_TO NUMBER(10, 0) 
, REQUESTOR NUMBER(10, 0)   
, DATE_OF_REQUEST DATE  
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table CORP_ETL_DOCUMENT add constraint CORP_ETL_DOCUMENT_PK primary key (CEDOC_ID)
  using index tablespace MAXDAT_INDX;

create unique index CEDOC_UIX1 on CORP_ETL_DOCUMENT ("DOCUMENT_ID") online tablespace MAXDAT_INDX parallel compute statistics;

   CREATE SEQUENCE  SEQ_CEDOC_ID  
   MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

Grant select on CORP_ETL_DOCUMENT to MAXDAT_READ_ONLY;


CREATE TABLE CORP_ETL_DOCUMENT_WIP 
(
CEDOC_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, DOCUMENT_ID NUMBER(19, 0) NOT NULL
, DOCUMENT_TYPE NUMBER(10, 0) 
, ICN VARCHAR2(255 CHAR) 
, SOURCE NUMBER(10, 0)  
, MAILED_DATE DATE  
, DUE_DATE DATE 
, UPLOADED_DATE DATE  
, DOCUMENT_CLAIMED_DATE TIMESTAMP(6)
, SCANNED_DATE TIMESTAMP(6) 
, CLASSIFIED_DATE TIMESTAMP(6) 
, ASSOCIATED_DATE TIMESTAMP(6)  
, DATE_RECEIVED TIMESTAMP(6) 
, REQUEST_INFORMATION NUMBER(10, 0)  
, REQUEST_SENT_TO NUMBER(10, 0) 
, REQUESTOR NUMBER(10, 0)   
, DATE_OF_REQUEST DATE  
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
, change_flag varchar2(1)
)   tablespace MAXDAT_DATA; 

create unique index CEDOCWP_UIX1 on CORP_ETL_DOCUMENT_WIP ("DOCUMENT_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create unique index CEDOCWP_UIX2 on CORP_ETL_DOCUMENT_WIP ("CEDOC_ID") online tablespace MAXDAT_INDX parallel compute statistics;

Grant select on CORP_ETL_DOCUMENT_WIP to MAXDAT_READ_ONLY;

CREATE TABLE D_QIC_DOCUMENT 
(
DOC_BI_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, DOCUMENT_ID NUMBER(19, 0) NOT NULL
, DOCUMENT_TYPE NUMBER(10, 0) 
, ICN VARCHAR2(255 CHAR) 
, SOURCE NUMBER(10, 0)  
, MAILED_DATE DATE  
, DUE_DATE DATE 
, UPLOADED_DATE DATE  
, DOCUMENT_CLAIMED_DATE TIMESTAMP(6)
, SCANNED_DATE TIMESTAMP(6) 
, CLASSIFIED_DATE TIMESTAMP(6) 
, ASSOCIATED_DATE TIMESTAMP(6)  
, DATE_RECEIVED TIMESTAMP(6) 
, REQUEST_INFORMATION NUMBER(10, 0)  
, REQUEST_SENT_TO NUMBER(10, 0) 
, REQUESTOR NUMBER(10, 0)   
, DATE_OF_REQUEST DATE  
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table D_QIC_DOCUMENT add constraint DOC_PK primary key (DOC_BI_ID)
  using index tablespace MAXDAT_INDX;

create unique index DDOC_UIX1 on D_QIC_DOCUMENT ("DOCUMENT_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_TYPE on D_QIC_DOCUMENT ("DOCUMENT_TYPE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_APP on D_QIC_DOCUMENT ("APPEAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_ICN on D_QIC_DOCUMENT ("ICN") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_SCE on D_QIC_DOCUMENT ("SOURCE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_MAILED_DT on D_QIC_DOCUMENT ("MAILED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_DUE_DT on D_QIC_DOCUMENT ("DUE_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_UPL_DT on D_QIC_DOCUMENT ("UPLOADED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_DOC_CLMD_DT on D_QIC_DOCUMENT ("DOCUMENT_CLAIMED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_SCN_DT on D_QIC_DOCUMENT ("SCANNED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_CLS_DT on D_QIC_DOCUMENT ("CLASSIFIED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_ASS_DT on D_QIC_DOCUMENT ("ASSOCIATED_DATE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_DT_RC on D_QIC_DOCUMENT ("DATE_RECEIVED") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_RIN on D_QIC_DOCUMENT ("REQUEST_INFORMATION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_RST on D_QIC_DOCUMENT ("REQUEST_SENT_TO") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_RQR on D_QIC_DOCUMENT ("REQUESTOR") online tablespace MAXDAT_INDX parallel compute statistics;
create index DDOC_DT_RQ on D_QIC_DOCUMENT ("DATE_OF_REQUEST") online tablespace MAXDAT_INDX parallel compute statistics;

Grant select on D_QIC_DOCUMENT to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_DOC_BI_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_DOC_TYPES
   (
        D_DT_ID NUMBER NOT NULL,
        DOC_TYPE_ID NUMBER(19,0) NOT NULL,
        DOC_TYPE_NAME VARCHAR2(255 CHAR),
        DOC_TYPE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DOC_TYPES add constraint DDOCDT_PK primary key (D_DT_ID)
  using index tablespace MAXDAT_INDX;
create unique index DDOCDT_UIX1 on D_DOC_TYPES ("DOC_TYPE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DOC_TYPES to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_DOC_DTS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;


CREATE TABLE D_DOC_REQ_INFORMATION
   (
        D_DRI_ID NUMBER NOT NULL,
        DOC_REQ_INFORMATION_ID NUMBER(19,0) NOT NULL,
        DOC_REQ_INFORMATION_NAME VARCHAR2(255 CHAR),
        DOC_REQ_INFORMATION_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DOC_REQ_INFORMATION add constraint DDOCRI_PK primary key (D_DRI_ID)
  using index tablespace MAXDAT_INDX;
create unique index DDOCRI_UIX1 on D_DOC_REQ_INFORMATION ("DOC_REQ_INFORMATION_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DOC_REQ_INFORMATION to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_DOC_DRI_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_DOC_SOURCE
   (
        D_DSC_ID NUMBER NOT NULL,
        DOC_SOURCE_ID NUMBER(19,0) NOT NULL,
        DOC_SOURCE_NAME VARCHAR2(255 CHAR),
        DOC_SOURCE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DOC_SOURCE add constraint DDOCSC_PK primary key (D_DSC_ID)
  using index tablespace MAXDAT_INDX;
create unique index DDOCSC_UIX1 on D_DOC_SOURCE ("DOC_SOURCE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DOC_SOURCE to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_DOC_DSC_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_DOC_REQ_SENT_TO
   (
        D_DRS_ID NUMBER NOT NULL,
        DOC_REQ_SENT_TO_ID NUMBER(19,0) NOT NULL,
        DOC_REQ_SENT_TO_NAME VARCHAR2(255 CHAR),
        DOC_REQ_SENT_TO_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_DOC_REQ_SENT_TO add constraint DDOCRS_PK primary key (D_DRS_ID)
  using index tablespace MAXDAT_INDX;
create unique index DDOCRS_UIX1 on D_DOC_REQ_SENT_TO ("DOC_REQ_SENT_TO_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_DOC_REQ_SENT_TO to MAXDAT_READ_ONLY;
CREATE SEQUENCE  SEQ_DOC_DRS_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;



CREATE OR REPLACE VIEW D_QIC_DOCUMENT_SV
AS
SELECT
d.APPEAL_ID
, d.DOCUMENT_ID
, dt.doc_type_name as document_type
, d.ICN 
, ds.doc_source_name as source 
, d.MAILED_DATE  
, d.DUE_DATE 
, d.UPLOADED_DATE  
, d.DOCUMENT_CLAIMED_DATE
, d.SCANNED_DATE 
, d.CLASSIFIED_DATE 
, d.ASSOCIATED_DATE  
, d.DATE_RECEIVED 
, dri.doc_req_information_name as request_information  
, drs.doc_req_sent_to_name  as request_sent_to
, (select trim(st.first_name) || ' ' || (case when st.middle_name is not null then (trim(st.middle_name) || ' ') else '' end) || trim(st.last_name) from d_staff st where st.staff_id = d.REQUESTOR) as REQUESTOR  
, d.DATE_OF_REQUEST
, ap.part_name as APPEAL_PART
, d.STG_LAST_UPDATE_DATE
from D_QIC_DOCUMENT d
LEFT OUTER JOIN D_DOC_TYPES dt 
ON d.document_type = dt.doc_type_id
LEFT OUTER JOIN D_DOC_SOURCE ds 
ON d.SOURCE = ds.DOC_SOURCE_ID
LEFT OUTER JOIN D_DOC_REQ_INFORMATION dri 
ON d.request_information = dri.doc_req_information_id
LEFT OUTER JOIN D_DOC_REQ_SENT_TO drs ON d.REQUEST_SENT_TO = drs.DOC_REQ_SENT_TO_ID
LEFT OUTER JOIN D_MW_APPEAL_INSTANCE A ON d.APPEAL_ID = A.APPEAL_ID
LEFT OUTER JOIN D_APPEAL_PARTS ap ON A.APPEAL_PART_ID = ap.PART_ID
with read only;

GRANT SELECT ON D_QIC_DOCUMENT_SV TO MAXDAT_READ_ONLY;


CREATE TABLE FEDQIC_CLAIM_STG 
(
ID_PARENT NUMBER(19, 0)
, ID NUMBER(19, 0) NOT NULL 
, C_CLAIM_NUMBER VARCHAR2(20 CHAR)  
, C_HCPCS_CPT_CODE VARCHAR2(255 CHAR)  
, C_VMS_REASON_CODE VARCHAR2(20 CHAR)   
, C_APPELLANT_ARGUMENT NUMBER(10, 0)  
, C_DISPOSITION NUMBER(10, 0) 
, C_DISPOSITION_EXPLANATION NUMBER(10, 0)     
, C_REVERSAL_REASON VARCHAR2(100 CHAR) 
, C_PROCEDURAL_DECISION_REASON NUMBER(10, 0)   
, C_SUBSTANTIVE_REASON NUMBER(10, 0)  
, C_CITATION_SOURCE NUMBER(10,0)  
, C_PROVIDER VARCHAR2(100 CHAR)
, C_PROVIDER_NAME VARCHAR2(100 CHAR)
, C_DIAGNOSIS_CODE VARCHAR2(255 CHAR)
, C_PROCEDURE_CODE VARCHAR2(20 BYTE)
, C_CLAIM_STATUS_CODE VARCHAR2(20 CHAR)
, C_CLAIM_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, C_NATIONAL_DRUG_CODE VARCHAR2(10 CHAR)
, C_TYPE_OF_COVERAGE NUMBER(10,0)
)   tablespace MAXDAT_DATA; 

alter table FEDQIC_CLAIM_STG add constraint CLM_STG_PK primary key (ID)
using index tablespace MAXDAT_INDX;


Grant select on FEDQIC_CLAIM_STG to MAXDAT_READ_ONLY;

CREATE TABLE FEDQIC_CLAIM_LINE_ITEM_STG 
(
ID_PARENT NUMBER(19, 0)
, ID NUMBER(19, 0) NOT NULL 
, LI_C_CLAIM_LINE_ITEM_NUMBER VARCHAR2(20 CHAR)
, LI_C_MSG_ACTION_CODE VARCHAR2(20 CHAR)
, LI_C_CLAIM_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, LI_C_PROCEDURE_CODE VARCHAR2(20 CHAR)
, LI_C_DRG_CODE VARCHAR2(20 BYTE)
, LI_C_HIPPS_CODE VARCHAR2(20 CHAR)
, LI_C_DIAGNOSIS_CODE VARCHAR2(20 BYTE)
, LI_C_MISC_CODES VARCHAR2(50 CHAR)
, LI_C_DISPOSITION NUMBER(10,0)
, LI_C_DISPOSITION_EXPLANATION NUMBER(10,0)
, LI_C_PROCEDURAL_DECISION_REASON NUMBER(10,0)
, LI_C_SUBSTANTIVE_REASON NUMBER(10,0)
)   tablespace MAXDAT_DATA; 

alter table FEDQIC_CLAIM_LINE_ITEM_STG add constraint CLM_LI_STG_PK primary key (ID)
using index tablespace MAXDAT_INDX;


Grant select on FEDQIC_CLAIM_LINE_ITEM_STG to MAXDAT_READ_ONLY;


CREATE TABLE CORP_ETL_CLAIM 
(
CECLM_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, CLAIM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_NUMBER VARCHAR2(20 CHAR)  
, HCPCS_CODE VARCHAR2(255 CHAR)  
, ACTION_CODE VARCHAR2(20 CHAR)   
, APPELLANT_ARGUMENT NUMBER(10, 0)  
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0)     
, REVERSAL_REASON VARCHAR2(100 CHAR) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0)   
, SUBSTANTIVE_REASON NUMBER(10, 0)  
, CITATION_SOURCE NUMBER(10,0)  
, PROVIDER VARCHAR2(100 CHAR)
, PROVIDER_NAME VARCHAR2(100 CHAR)
, CLAIM_DIAGNOSIS_CODES VARCHAR2(255 CHAR)
, CLAIM_PROCEDURE_CODES VARCHAR2(20 BYTE)
, CLAIM_STATUS_CODE VARCHAR2(20 CHAR)
, CLAIM_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, NATIONAL_DRUG_CODE VARCHAR2(10 CHAR)
, TYPE_OF_COVERAGE NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table CORP_ETL_CLAIM add constraint CORP_ETL_CLAIM_PK primary key (CECLM_ID)
  using index tablespace MAXDAT_INDX;

create unique index CECLM_UIX1 on CORP_ETL_CLAIM ("CLAIM_ID") online tablespace MAXDAT_INDX parallel compute statistics;

   CREATE SEQUENCE  SEQ_CECLM_ID  
   MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

Grant select on CORP_ETL_CLAIM to MAXDAT_READ_ONLY;


CREATE TABLE CORP_ETL_CLAIM_LINE_ITEM 
(
CECLI_ID NUMBER NOT NULL
, CLAIM_ID NUMBER(19, 0) NOT NULL
, CLAIM_LINE_ITEM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_LINE_ITEM_NUMBER VARCHAR2(20 CHAR)
, MSG_ACTION_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_PROCEDURE_CODES VARCHAR2(20 CHAR)
, CLAIM_LINE_DRUG_CODES VARCHAR2(20 BYTE)
, HIPPS_CODE VARCHAR2(20 CHAR)
, DIAGNOSIS_CODE VARCHAR2(20 BYTE)
, MISC_CODES VARCHAR2(50 CHAR)
, CLAIM_LINE_DISPOSITION NUMBER(10,0)
, CLAIM_LINE_DISPOSITION_EXPLANATION NUMBER(10,0)
, CLAIM_LINE_PROCEDURAL_DECISION_REASON NUMBER(10,0)
, CLAIM_LINE_SUBSTANTIVE_REASON NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table CORP_ETL_CLAIM_LINE_ITEM add constraint CORP_ETL_CLAIM_LI_PK primary key (CECLI_ID)
  using index tablespace MAXDAT_INDX;

create unique index CECLI_UIX1 on CORP_ETL_CLAIM_LINE_ITEM ("CLAIM_LINE_ITEM_ID") online tablespace MAXDAT_INDX parallel compute statistics;

   CREATE SEQUENCE  SEQ_CECLI_ID  
   MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

Grant select on CORP_ETL_CLAIM_LINE_ITEM to MAXDAT_READ_ONLY;


CREATE TABLE CORP_ETL_CLAIM_WIP 
(
CECLM_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, CLAIM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_NUMBER VARCHAR2(20 CHAR)  
, HCPCS_CODE VARCHAR2(255 CHAR)  
, ACTION_CODE VARCHAR2(20 CHAR)   
, APPELLANT_ARGUMENT NUMBER(10, 0)  
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0)     
, REVERSAL_REASON VARCHAR2(100 CHAR) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0)   
, SUBSTANTIVE_REASON NUMBER(10, 0)  
, CITATION_SOURCE NUMBER(10,0)  
, PROVIDER VARCHAR2(100 CHAR)
, PROVIDER_NAME VARCHAR2(100 CHAR)
, CLAIM_DIAGNOSIS_CODES VARCHAR2(255 CHAR)
, CLAIM_PROCEDURE_CODES VARCHAR2(20 BYTE)
, CLAIM_STATUS_CODE VARCHAR2(20 CHAR)
, CLAIM_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, NATIONAL_DRUG_CODE VARCHAR2(10 CHAR)
, TYPE_OF_COVERAGE NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
, change_flag varchar2(1)
)   tablespace MAXDAT_DATA; 


create unique index CECLMWP_UIX1 on CORP_ETL_CLAIM_WIP ("CLAIM_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create unique index CECLMWP_UIX2 on CORP_ETL_CLAIM_WIP ("CECLM_ID") online tablespace MAXDAT_INDX parallel compute statistics;

Grant select on CORP_ETL_CLAIM_WIP to MAXDAT_READ_ONLY;


CREATE TABLE CORP_ETL_CLAIM_LINE_ITEM_WIP 
(
CECLI_ID NUMBER NOT NULL
, CLAIM_ID NUMBER(19, 0) NOT NULL
, CLAIM_LINE_ITEM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_LINE_ITEM_NUMBER VARCHAR2(20 CHAR)
, MSG_ACTION_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_PROCEDURE_CODES VARCHAR2(20 CHAR)
, CLAIM_LINE_DRUG_CODES VARCHAR2(20 BYTE)
, HIPPS_CODE VARCHAR2(20 CHAR)
, DIAGNOSIS_CODE VARCHAR2(20 BYTE)
, MISC_CODES VARCHAR2(50 CHAR)
, CLAIM_LINE_DISPOSITION NUMBER(10,0)
, CLAIM_LINE_DISPOSITION_EXPLANATION NUMBER(10,0)
, CLAIM_LINE_PROCEDURAL_DECISION_REASON NUMBER(10,0)
, CLAIM_LINE_SUBSTANTIVE_REASON NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
, change_flag varchar2(1)
)   tablespace MAXDAT_DATA; 


create unique index CECLMIWP_UIX1 on CORP_ETL_CLAIM_LINE_ITEM_WIP ("CLAIM_LINE_ITEM_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create unique index CECLMIWP_UIX2 on CORP_ETL_CLAIM_LINE_ITEM_WIP ("CECLI_ID") online tablespace MAXDAT_INDX parallel compute statistics;


Grant select on CORP_ETL_CLAIM_LINE_ITEM_WIP to MAXDAT_READ_ONLY;


CREATE TABLE D_QIC_CLAIM 
(
CLM_BI_ID NUMBER NOT NULL
, APPEAL_ID NUMBER(19, 0)
, CLAIM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_NUMBER VARCHAR2(20 CHAR)  
, HCPCS_CODE VARCHAR2(255 CHAR)  
, ACTION_CODE VARCHAR2(20 CHAR)   
, APPELLANT_ARGUMENT NUMBER(10, 0)  
, DISPOSITION NUMBER(10, 0) 
, DISPOSITION_EXPLANATION NUMBER(10, 0)     
, REVERSAL_REASON VARCHAR2(100 CHAR) 
, PROCEDURAL_DECISION_REASON NUMBER(10, 0)   
, SUBSTANTIVE_REASON NUMBER(10, 0)  
, CITATION_SOURCE NUMBER(10,0)
, PROVIDER VARCHAR2(100 CHAR)
, PROVIDER_NAME VARCHAR2(100 CHAR)
, CLAIM_DIAGNOSIS_CODES VARCHAR2(255 CHAR)
, CLAIM_PROCEDURE_CODES VARCHAR2(20 BYTE)
, CLAIM_STATUS_CODE VARCHAR2(20 CHAR)
, CLAIM_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, NATIONAL_DRUG_CODE VARCHAR2(10 CHAR)
, TYPE_OF_COVERAGE NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table D_QIC_CLAIM add constraint CLM_PK primary key (CLM_BI_ID)
  using index tablespace MAXDAT_INDX;


create index DCLM_APP on D_QIC_CLAIM ("APPEAL_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create unique index DCLM_UIX1 on D_QIC_CLAIM ("CLAIM_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_NM on D_QIC_CLAIM ("CLAIM_NUMBER") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_HCPCS on D_QIC_CLAIM ("HCPCS_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_ACT on D_QIC_CLAIM ("ACTION_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_AA on D_QIC_CLAIM ("APPELLANT_ARGUMENT") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_DIS on D_QIC_CLAIM ("DISPOSITION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_DISE on D_QIC_CLAIM ("DISPOSITION_EXPLANATION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_RR on D_QIC_CLAIM ("REVERSAL_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_PDR on D_QIC_CLAIM ("PROCEDURAL_DECISION_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_SR on D_QIC_CLAIM ("SUBSTANTIVE_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_CITS on D_QIC_CLAIM ("CITATION_SOURCE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_PRV on D_QIC_CLAIM ("PROVIDER") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_PRVN on D_QIC_CLAIM ("PROVIDER_NAME") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_CLMD on D_QIC_CLAIM ("CLAIM_DIAGNOSIS_CODES") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_CLMP on D_QIC_CLAIM ("CLAIM_PROCEDURE_CODES") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_CLMS on D_QIC_CLAIM ("CLAIM_STATUS_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_CLMA on D_QIC_CLAIM ("CLAIM_ADJUSTMENT_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_NGC on D_QIC_CLAIM ("NATIONAL_DRUG_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLM_TCOV on D_QIC_CLAIM ("TYPE_OF_COVERAGE") online tablespace MAXDAT_INDX parallel compute statistics;

Grant select on D_QIC_CLAIM to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_CLM_BI_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

CREATE TABLE D_QIC_CLAIM_LINE_ITEM 
(
CLI_BI_ID NUMBER NOT NULL
, CLAIM_ID NUMBER(19, 0) NOT NULL
, CLAIM_LINE_ITEM_ID NUMBER(19, 0) NOT NULL 
, CLAIM_LINE_ITEM_NUMBER VARCHAR2(20 CHAR)
, MSG_ACTION_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_ADJUSTMENT_CODE VARCHAR2(20 CHAR)
, CLAIM_LINE_PROCEDURE_CODES VARCHAR2(20 CHAR)
, CLAIM_LINE_DRUG_CODES VARCHAR2(20 BYTE)
, HIPPS_CODE VARCHAR2(20 CHAR)
, DIAGNOSIS_CODE VARCHAR2(20 BYTE)
, MISC_CODES VARCHAR2(50 CHAR)
, CLAIM_LINE_DISPOSITION NUMBER(10,0)
, CLAIM_LINE_DISPOSITION_EXPLANATION NUMBER(10,0)
, CLAIM_LINE_PROCEDURAL_DECISION_REASON NUMBER(10,0)
, CLAIM_LINE_SUBSTANTIVE_REASON NUMBER(10,0)
, STG_EXTRACT_DATE DATE
, STG_LAST_UPDATE_DATE DATE
)   tablespace MAXDAT_DATA; 

  alter table D_QIC_CLAIM_LINE_ITEM add constraint CLI_PK primary key (CLI_BI_ID)
  using index tablespace MAXDAT_INDX;

create unique index DCLI_UIX1 on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_ITEM_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_CLM on D_QIC_CLAIM_LINE_ITEM ("CLAIM_ID") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_MSG on D_QIC_CLAIM_LINE_ITEM ("MSG_ACTION_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_ADJ on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_ADJUSTMENT_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_PRC on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_PROCEDURE_CODES") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_DRG on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_DRUG_CODES") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_HPS on D_QIC_CLAIM_LINE_ITEM ("HIPPS_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_DGN on D_QIC_CLAIM_LINE_ITEM ("DIAGNOSIS_CODE") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_MSC on D_QIC_CLAIM_LINE_ITEM ("MISC_CODES") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_DSP on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_DISPOSITION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_DSPE on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_DISPOSITION_EXPLANATION") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_PDR on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_PROCEDURAL_DECISION_REASON") online tablespace MAXDAT_INDX parallel compute statistics;
create index DCLI_SUR on D_QIC_CLAIM_LINE_ITEM ("CLAIM_LINE_SUBSTANTIVE_REASON") online tablespace MAXDAT_INDX parallel compute statistics;

ALTER TABLE D_QIC_CLAIM ADD CONSTRAINT UNC_CLAIM_ID UNIQUE (CLAIM_ID);
ALTER TABLE D_QIC_CLAIM_LINE_ITEM ADD CONSTRAINT FK_CLAIM_ID FOREIGN KEY(CLAIM_ID) REFERENCES D_QIC_CLAIM(CLAIM_ID);


Grant select on D_QIC_CLAIM_LINE_ITEM to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_CLI_BI_ID  
MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

  CREATE TABLE D_CLAIM_APPELLANT_ARGUMENT 
   (
        APPELLANT_ARG_ID NUMBER(19,0) NOT NULL,
        APPELLANT_ARG_NAME VARCHAR2(255 CHAR),
        APPELLANT_ARG_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA;

  alter table D_CLAIM_APPELLANT_ARGUMENT add constraint DCAA_PK primary key (APPELLANT_ARG_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_CLAIM_APPELLANT_ARGUMENT to MAXDAT_READ_ONLY;


  CREATE TABLE D_CLAIM_CITATION_SOURCE 
   (
        CITATION_SRC_ID NUMBER(19,0) NOT NULL,
        CITATION_SRC_NAME VARCHAR2(255 CHAR),
        CITATION_SRC_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA;

  alter table D_CLAIM_CITATION_SOURCE add constraint DCCS_PK primary key (CITATION_SRC_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_CLAIM_CITATION_SOURCE to MAXDAT_READ_ONLY;

  CREATE TABLE D_CLAIM_TYPE_COVERAGE 
   (
        D_TC_ID NUMBER NOT NULL,
        TYPE_COVERAGE_ID NUMBER(19,0) NOT NULL,
        TYPE_COVERAGE_NAME VARCHAR2(255 CHAR),
        TYPE_COVERAGE_DESCRIPTION VARCHAR2(255 CHAR),
        START_DATE DATE,
        END_DATE DATE
    )   tablespace MAXDAT_DATA;

  alter table D_CLAIM_TYPE_COVERAGE add constraint DCLTC_PK primary key (D_TC_ID)
  using index tablespace MAXDAT_INDX;

create unique index DCLTC_UIX1 on D_CLAIM_TYPE_COVERAGE ("TYPE_COVERAGE_ID") online tablespace MAXDAT_INDX parallel compute statistics;
Grant select on D_CLAIM_TYPE_COVERAGE to MAXDAT_READ_ONLY;

CREATE SEQUENCE  SEQ_CL_TC_ID  
MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;


  CREATE TABLE D_CLAIM_REVERSAL_REASON 
   (
        REVERSAL_REASON_ID NUMBER(19,0) NOT NULL,
        REVERSAL_REASON_NAME VARCHAR2(255 CHAR),
        REVERSAL_REASON_DESCRIPTION VARCHAR2(255 CHAR)
    )   tablespace MAXDAT_DATA;

  alter table D_CLAIM_REVERSAL_REASON add constraint DCLRR_PK primary key (REVERSAL_REASON_ID)
  using index tablespace MAXDAT_INDX;

Grant select on D_CLAIM_REVERSAL_REASON to MAXDAT_READ_ONLY;


CREATE OR REPLACE VIEW D_QIC_CLAIM_SV
AS
SELECT
c.APPEAL_ID
, c.CLAIM_ID 
, c.CLAIM_NUMBER  
, c.HCPCS_CODE  
, c.ACTION_CODE   
, app_args.APPELLANT_ARG_NAME as APPELLANT_ARGUMENT   
, disp.DISPOSITION_NAME as CLAIM_DISPOSITION
, disp_exp.DISPOSITION_EXP_NAME as CLAIM_DISPOSITION_EXPLANATION  
, rr.reversal_reason_name as REVERSAL_REASON 
, proc_dec_reason.PROC_DEC_REASON_NAME as CLAIM_PROCEDURAL_DECISION_REASON 
, subst_reason.SUBSTANTIVE_REASON_NAME as CLAIM_SUBSTANTIVE_REASON
, cit_src.CITATION_SRC_NAME as CITATION_SOURCE
, c.PROVIDER
, c.PROVIDER_NAME
, c.CLAIM_DIAGNOSIS_CODES
, c.CLAIM_PROCEDURE_CODES
, c.CLAIM_STATUS_CODE
, c.CLAIM_ADJUSTMENT_CODE
, c.NATIONAL_DRUG_CODE
, cov.type_coverage_name as TYPE_OF_COVERAGE
, cli.CLAIM_LINE_ITEM_NUMBER
, cli.MSG_ACTION_CODE
, cli.CLAIM_LINE_ADJUSTMENT_CODE
, cli.CLAIM_LINE_PROCEDURE_CODES
, cli.CLAIM_LINE_DRUG_CODES
, cli.HIPPS_CODE
, cli.DIAGNOSIS_CODE
, cli.MISC_CODES
, disp2.DISPOSITION_NAME as CLAIM_LINE_DISPOSITION
, disp_exp2.DISPOSITION_EXP_NAME as CLAIM_LINE_DISPOSITION_EXPLANATION
, proc_dec_reason2.PROC_DEC_REASON_NAME as CLAIM_LINE_PROCEDURAL_DECISION_REASON   
, subst_reason2.SUBSTANTIVE_REASON_NAME as CLAIM_LINE_SUBSTANTIVE_REASON
, ap.part_name as APPEAL_PART
, cli.claim_line_item_id
, statuses.STATUS_NAME as APPEAL_STATUS 
, a.REQUEST_RECEIVED 
, macs.MAC_NAME as MAC
from D_QIC_CLAIM c
LEFT OUTER JOIN D_QIC_CLAIM_LINE_ITEM cli
ON c.claim_id = cli.claim_id
LEFT OUTER JOIN D_CLAIM_APPELLANT_ARGUMENT app_args 
ON c.appellant_argument = app_args.appellant_arg_id
LEFT OUTER JOIN D_APPEAL_DISPOSITIONS disp 
ON c.DISPOSITION = disp.DISPOSITION_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITION_EXPS disp_exp 
ON c.DISPOSITION_EXPLANATION = disp_exp.disposition_exp_id
LEFT OUTER JOIN D_APPEAL_PROC_DEC_REASONS proc_dec_reason
ON c.PROCEDURAL_DECISION_REASON = proc_dec_reason.PROC_DEC_REASON_ID
LEFT OUTER JOIN D_APPEAL_SUBSTANTIVE_REASONS subst_reason
ON c.SUBSTANTIVE_REASON = subst_reason.SUBSTANTIVE_REASON_ID
LEFT OUTER JOIN D_CLAIM_CITATION_SOURCE cit_src
ON c.CITATION_SOURCE = cit_src.CITATION_SRC_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITIONS disp2 
ON cli.CLAIM_LINE_DISPOSITION = disp2.DISPOSITION_ID
LEFT OUTER JOIN D_APPEAL_DISPOSITION_EXPS disp_exp2 
ON cli.CLAIM_LINE_DISPOSITION_EXPLANATION = disp_exp2.disposition_exp_id
LEFT OUTER JOIN D_APPEAL_PROC_DEC_REASONS proc_dec_reason2
ON cli.CLAIM_LINE_PROCEDURAL_DECISION_REASON = proc_dec_reason2.PROC_DEC_REASON_ID
LEFT OUTER JOIN D_APPEAL_SUBSTANTIVE_REASONS subst_reason2
ON cli.CLAIM_LINE_SUBSTANTIVE_REASON = subst_reason2.SUBSTANTIVE_REASON_ID
LEFT OUTER JOIN D_CLAIM_TYPE_COVERAGE cov
ON c.type_of_coverage = cov.TYPE_COVERAGE_ID
LEFT OUTER JOIN D_CLAIM_REVERSAL_REASON rr
ON c.reversal_reason = rr.REVERSAL_REASON_ID
LEFT OUTER JOIN D_MW_APPEAL_INSTANCE A ON c.APPEAL_ID = A.APPEAL_ID
LEFT OUTER JOIN D_APPEAL_PARTS ap ON A.APPEAL_PART_ID = ap.PART_ID
LEFT OUTER JOIN D_APPEAL_STATUSES statuses ON a.APPEAL_STATUS = statuses.STATUS_ID
LEFT OUTER JOIN D_APPEAL_MACS macs ON a.MAC = macs.MAC_ID
with read only;

GRANT SELECT ON D_QIC_CLAIM_SV TO MAXDAT_READ_ONLY;

  CREATE TABLE FEDQIC_LOGGING 
   (	START_DATE DATE, 
	END_DATE DATE, 
	MODULE VARCHAR2(20 BYTE)
   ) 
  TABLESPACE MAXDAT_DATA;

  CREATE TABLE FEDQIC_DOCUMENT_LOGGING 
   (	START_DATE DATE, 
	END_DATE DATE, 
	MODULE VARCHAR2(20 BYTE)
   ) 
  TABLESPACE MAXDAT_DATA;

commit;





