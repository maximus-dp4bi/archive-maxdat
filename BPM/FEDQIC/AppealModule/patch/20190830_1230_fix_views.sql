CREATE OR REPLACE VIEW D_MW_TASK_INSTANCE_SV
AS SELECT
  MW_BI_ID,
  AGE_IN_BUSINESS_DAYS,
  AGE_IN_CALENDAR_DAYS,
  CANCELLED_BY_STAFF_ID,
  CANCEL_METHOD,
  CANCEL_REASON,
  CANCEL_WORK_DATE,
  CASE_ID,
  CLIENT_ID,
  COMPLETE_DATE,
  CREATE_DATE,
  CURR_CREATED_BY_STAFF_ID,
  ESCALATED_FLAG,
  CURR_ESCALATED_TO_STAFF_ID,
  CURR_FORWARDED_BY_STAFF_ID,
  FORWARDED_FLAG,
  CURR_BUSINESS_UNIT_ID,
  INSTANCE_START_DATE,
  INSTANCE_END_DATE,
  JEOPARDY_FLAG,
  CURR_LAST_UPD_BY_STAFF_ID,
  CURR_LAST_UPDATE_DATE,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN CURR_OWNER_STAFF_ID
       WHEN curr_task_status != 'CLAIMED' THEN 0
  ELSE CURR_OWNER_STAFF_ID END CURR_OWNER_STAFF_ID,
  PARENT_TASK_ID,
  SOURCE_REFERENCE_ID,
  SOURCE_REFERENCE_TYPE,
  CURR_STATUS_DATE,
  STATUS_AGE_IN_BUS_DAYS,
  STATUS_AGE_IN_CAL_DAYS,
  STG_EXTRACT_DATE,
  STG_LAST_UPDATE_DATE,
  STAGE_DONE_DATE,
  TASK_ID,
  TASK_PRIORITY,
  CURR_TASK_STATUS,
  TASK_TYPE_ID,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN CURR_TEAM_ID
  WHEN curr_task_status != 'CLAIMED' THEN 0
  ELSE CURR_TEAM_ID END CURR_TEAM_ID,
  TIMELINESS_STATUS,
  UNIT_OF_WORK,
  CURR_WORK_RECEIPT_DATE,
  SOURCE_PROCESS_ID,
  SOURCE_PROCESS_INSTANCE_ID,
  CASE WHEN complete_date IS NOT NULL AND CURR_CLAIM_DATE IS NOT NULL THEN curr_claim_date
       WHEN curr_task_status != 'CLAIMED' THEN NULL
       WHEN curr_task_status = 'CLAIMED' THEN curr_last_update_date
  ELSE NULL END curr_claim_date,
  appeal_stage,
  round(task_claimed_time,6) as task_claimed_time,
  round(task_unclaimed_time,6) as task_unclaimed_time,
  previous_task_type_id,
  non_standard_work_flag,
  round(handle_time,6) as handle_time,
  c.SLA_DAYS,
  d.sla_jeopardy_days,
  e.sla_days_type
from D_MW_TASK_INSTANCE a
LEFT JOIN (SELECT out_var SLA_DAYS, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Days') c
ON a.TASK_TYPE_ID = c.ref_id
LEFT JOIN (SELECT out_var sla_jeopardy_days, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Jeopardy_Days') d
ON a.TASK_TYPE_ID = d.ref_id
LEFT JOIN (SELECT out_var sla_days_type, ref_id FROM CORP_ETL_LIST_LKUP b WHERE b.name = 'ManageWork_SLA_Days_Type') e
ON a.TASK_TYPE_ID = e.ref_id WITH READ ONLY;

GRANT SELECT ON D_MW_TASK_INSTANCE_SV TO MAXDAT_READ_ONLY;

CREATE OR REPLACE VIEW F_MW_STAFF_PERFORMANCE_BY_DAY_SV AS
select  
D_DATE as D_DAY,
staff.STAFF_ID
,case when curr_owner_staff_id = 0 then 'system' when curr_owner_staff_id = -1 then 'unknown staff' else staff.FIRST_NAME || ' ' || staff.middle_name || ' ' || staff.last_name end as STAFF_NAME
,super.SUPERVISOR_PERSON_ID as SUPERVISOR_ID
,case when super.supervisor_person_id = -1 then 'supervisor unknown' else (select st.FIRST_NAME || ' ' || st.middle_name || ' ' || st.last_name from D_STAFF st where st.staff_id = super.SUPERVISOR_PERSON_ID) end as SUPERVISOR_NAME
,TASK_TYPE_ID
--appeal attributes
,priorities.PRIORITY_NAME as APPEAL_PRIORITY
,parts.PART_NAME as APPEAL_PART
,stages.STAGE_NAME as APPEAL_STAGE
,issues.ISSUE_NAME as APPEAL_ISSUE
,items.ITEM_SERVICE_NAME as APPEAL_ITEM
,types.TYPE_NAME as APPEAL_TYPE
,dismissals.DISMISSAL_NAME as APPEAL_DISMISSAL
,dismissal_reasons.DISMISS_REASON_NAME as APPEAL_DISMISSAL_REASON
,case when auto_forward is not null then 'Y' else 'N' end as AUTO_FORWARD
,reasons.REASON_NAME as APPEAL_REASON
, EMPLOYEE_COMPLETION_COUNT
, CURRENT_CLAIM_COUNT
,round(EMPLOYEE_TOTAL_HANDLE_TIME,6) as EMPLOYEE_TOTAL_HANDLE_TIME
,round(EMPLOYEE_MIN_HANDLE_TIME,6) as EMPLOYEE_MIN_HANDLE_TIME
,round(EMPLOYEE_MAX_HANDLE_TIME,6) as EMPLOYEE_MAX_HANDLE_TIME
,TEAM_COMPLETION_COUNT
,round(TEAM_TOTAL_HANDLE_TIME,6) as TEAM_TOTAL_HANDLE_TIME
,round(TEAM_MIN_HANDLE_TIME,6) as TEAM_MIN_HANDLE_TIME
,round(TEAM_MAX_HANDLE_TIME,6) as TEAM_MAX_HANDLE_TIME
,PROJECT_COMPLETION_COUNT
,round(PROJECT_TOTAL_HANDLE_TIME,6) as PROJECT_TOTAL_HANDLE_TIME
,round(PROJECT_MIN_HANDLE_TIME,6) as PROJECT_MIN_HANDLE_TIME
,round(PROJECT_MAX_HANDLE_TIME,6) as PROJECT_MAX_HANDLE_TIME
from(
WITH EMPS as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,ti.CURR_OWNER_STAFF_ID
,count(ti.MW_BI_ID ) as EMPLOYEE_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as EMPLOYEE_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as EMPLOYEE_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as EMPLOYEE_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,ti.CURR_OWNER_STAFF_ID
),
TEAMS as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
,count(ti.MW_BI_ID ) as TEAM_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as TEAM_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as TEAM_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as TEAM_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,ti.CURR_TEAM_ID
),
PROJECT as (
SELECT
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,count(ti.MW_BI_ID ) as PROJECT_COMPLETION_COUNT
,sum (ti.HANDLE_TIME) as PROJECT_TOTAL_HANDLE_TIME
,min (ti.HANDLE_TIME) as PROJECT_MIN_HANDLE_TIME
,max (ti.HANDLE_TIME) as PROJECT_MAX_HANDLE_TIME
FROM
D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON trunc(ti.COMPLETE_DATE) = trunc(dd.D_DATE)
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
GROUP BY
dd.D_DATE
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
),
EMPS_CLAIM_COUNT as (
SELECT dd.D_DATE 
,ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,staff.STAFF_ID, 
count(ti.MW_BI_ID) as CURRENT_CLAIM_COUNT
FROM D_MW_TASK_INSTANCE ti
JOIN D_DATES dd ON ti.CREATE_DATE <= dd.D_DATE
JOIN D_MW_APPEAL_INSTANCE ai ON ti.SOURCE_REFERENCE_ID = ai.APPEAL_ID
JOIN D_STAFF staff ON ti.CURR_OWNER_STAFF_ID = staff.STAFF_ID
WHERE ti.CURR_TASK_STATUS = 'CLAIMED'
GROUP BY dd.D_DATE, ti.TASK_TYPE_ID
,ai.APPEAL_PRIORITY_ID
,ai.APPEAL_PART_ID
,ai.APPEAL_STAGE
,ai.APPEAL_ISSUE
,ai.APPEAL_ITEM
,ai.APPEAL_TYPE
,ai.APPEAL_DISMISSAL
,ai.APPEAL_DISMISSAL_REASON
,ai.AUTO_FORWARD
,ai.APPEAL_REASON
,staff.STAFF_ID
)
SELECT EMPS.D_DATE, EMPS.TASK_TYPE_ID
,EMPS.APPEAL_PRIORITY_ID
,EMPS.APPEAL_PART_ID
,EMPS.APPEAL_STAGE
,EMPS.APPEAL_ISSUE
,EMPS.APPEAL_ITEM
,EMPS.APPEAL_TYPE
,EMPS.APPEAL_DISMISSAL
,EMPS.APPEAL_DISMISSAL_REASON
,EMPS.AUTO_FORWARD
,EMPS.APPEAL_REASON
, EMPS.CURR_TEAM_ID, EMPS.CURR_OWNER_STAFF_ID 
, EMPS.EMPLOYEE_COMPLETION_COUNT
, nvl(EMPS_CLAIM_COUNT.CURRENT_CLAIM_COUNT,0) as CURRENT_CLAIM_COUNT
,EMPS.EMPLOYEE_TOTAL_HANDLE_TIME
,EMPS.EMPLOYEE_MIN_HANDLE_TIME
,EMPS.EMPLOYEE_MAX_HANDLE_TIME
,TEAMS.TEAM_COMPLETION_COUNT
,TEAMS.TEAM_TOTAL_HANDLE_TIME
,TEAMS.TEAM_MIN_HANDLE_TIME
,TEAMS.TEAM_MAX_HANDLE_TIME
,PROJECT.PROJECT_COMPLETION_COUNT
,PROJECT.PROJECT_TOTAL_HANDLE_TIME
,PROJECT.PROJECT_MIN_HANDLE_TIME
,PROJECT.PROJECT_MAX_HANDLE_TIME
FROM
EMPS
JOIN TEAMS ON EMPS.D_DATE = TEAMS.D_DATE 
 AND EMPS.TASK_TYPE_ID = TEAMS.TASK_TYPE_ID 
 AND decode(EMPS.APPEAL_PRIORITY_ID,TEAMS.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,TEAMS.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,TEAMS.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,TEAMS.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,TEAMS.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,TEAMS.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,TEAMS.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,TEAMS.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD,TEAMS.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,TEAMS.APPEAL_REASON,1,0)=1
AND decode(EMPS.CURR_TEAM_ID,TEAMS.CURR_TEAM_ID,1,0)=1
JOIN PROJECT ON EMPS.D_DATE = PROJECT.D_DATE 
AND EMPS.TASK_TYPE_ID = PROJECT.TASK_TYPE_ID
 AND decode(EMPS.APPEAL_PRIORITY_ID,PROJECT.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,PROJECT.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,PROJECT.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,PROJECT.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,PROJECT.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,PROJECT.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,PROJECT.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,PROJECT.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD,PROJECT.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,PROJECT.APPEAL_REASON,1,0)=1
LEFT JOIN EMPS_CLAIM_COUNT ON EMPS.CURR_OWNER_STAFF_ID = EMPS_CLAIM_COUNT.STAFF_ID 
AND EMPS.D_DATE = EMPS_CLAIM_COUNT.D_DATE 
AND EMPS.TASK_TYPE_ID = EMPS_CLAIM_COUNT.TASK_TYPE_ID 
 AND decode(EMPS.APPEAL_PRIORITY_ID,EMPS_CLAIM_COUNT.APPEAL_PRIORITY_ID,1,0)=1
 AND decode(EMPS.APPEAL_PART_ID,EMPS_CLAIM_COUNT.APPEAL_PART_ID,1,0)=1
 AND decode(EMPS.APPEAL_STAGE,EMPS_CLAIM_COUNT.APPEAL_STAGE,1,0)=1
 AND decode(EMPS.APPEAL_ISSUE,EMPS_CLAIM_COUNT.APPEAL_ISSUE,1,0)=1
 AND decode(EMPS.APPEAL_ITEM,EMPS_CLAIM_COUNT.APPEAL_ITEM,1,0)=1
 AND decode(EMPS.APPEAL_TYPE,EMPS_CLAIM_COUNT.APPEAL_TYPE,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL,EMPS_CLAIM_COUNT.APPEAL_DISMISSAL,1,0)=1
 AND decode(EMPS.APPEAL_DISMISSAL_REASON,EMPS_CLAIM_COUNT.APPEAL_DISMISSAL_REASON,1,0)=1
 AND decode(EMPS.AUTO_FORWARD, EMPS_CLAIM_COUNT.AUTO_FORWARD,1,0)=1
 AND decode(EMPS.APPEAL_REASON,EMPS_CLAIM_COUNT.APPEAL_REASON,1,0)=1
)
LEFT OUTER JOIN D_STAFF staff ON CURR_OWNER_STAFF_ID = staff.STAFF_ID
LEFT OUTER JOIN D_SUPERVISOR super ON CURR_OWNER_STAFF_ID = super.PERSON_ID 
LEFT OUTER JOIN D_APPEAL_PRIORITIES priorities ON APPEAL_PRIORITY_ID = priorities.PRIORITY_ID
LEFT OUTER JOIN D_APPEAL_PARTS parts ON APPEAL_PART_ID = parts.PART_ID
LEFT OUTER JOIN D_APPEAL_ISSUES issues ON APPEAL_ISSUE = issues.ISSUE_ID
LEFT OUTER JOIN D_APPEAL_ITEM_SERVICES items ON APPEAL_ITEM = items.ITEM_SERVICE_ID
LEFT OUTER JOIN D_APPEAL_STAGES stages ON APPEAL_STAGE = stages.STAGE_ID
LEFT OUTER JOIN D_APPEAL_TYPES types ON APPEAL_TYPE = types.TYPE_ID
LEFT OUTER JOIN D_APPELLANT_DISMISSALS dismissals ON APPEAL_DISMISSAL = dismissals.DISMISSAL_ID
LEFT OUTER JOIN D_APPELLANT_DISMISS_REASONS dismissal_reasons ON APPEAL_DISMISSAL_REASON = dismissal_reasons.DISMISS_REASON_ID
--LEFT OUTER JOIN D_APPEAL_AUTO_FORWARDS auto_forwards ON AUTO_FORWARD = auto_forwards.AUTO_FORWARD_ID
LEFT OUTER JOIN D_APPEAL_REASONS reasons ON APPEAL_REASON = reasons.REASON_ID
;

GRANT SELECT ON F_MW_STAFF_PERFORMANCE_BY_DAY_SV TO MAXDAT_READ_ONLY;

CREATE OR REPLACE VIEW F_MW_TASK_INSTANCE_BY_DATE_SV
AS WITH tasks AS (
SELECT a.task_type_id, a.MW_BI_ID, a.task_id, b.entity_id FROM D_MW_TASK_INSTANCE a JOIN d_bpm_task_type_entity b ON a.TASK_TYPE_ID = b.TASK_TYPE_ID
), processes AS (
SELECT e.process_instance_id,t.mw_bi_id FROM D_BPM_ENTITY_INSTANCE e JOIN tasks t ON t.task_id = e.entity_instance_id
)
SELECT        d.MW_BI_ID,
              bdd.D_DATE,
              p.Process_instance_id,
              CASE WHEN bdd.D_DATE = TRUNC(d.CREATE_DATE) THEN 1 ELSE 0 END AS CREATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 0 ELSE 1 END AS INVENTORY_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN 1 ELSE 0 END AS COMPLETION_COUNT,
              CASE WHEN bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE) THEN 1 ELSE 0 END AS CANCELLATION_COUNT,
              CASE WHEN (bdd.D_DATE = TRUNC(d.COMPLETE_DATE) OR bdd.D_DATE = TRUNC(d.CANCEL_WORK_DATE)) THEN 1 ELSE 0 END AS TERMINATION_COUNT,
              Bus_days_between(TRUNC(d.CREATE_DATE), bdd.d_date) AGE_IN_BUS_DAYS,
              CASE WHEN bdd.D_DATE = TRUNC(d.COMPLETE_DATE) THEN round(d.handle_time,6) ELSE 0 END as HANDLE_TIME
  FROM D_DATES bdd
  JOIN D_MW_TASK_INSTANCE d ON (bdd.D_DATE >= TRUNC(d.INSTANCE_START_DATE) AND (bdd.D_DATE <= d.INSTANCE_END_DATE OR d.INSTANCE_END_DATE IS NULL))
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_START_DATE)
                                          OR bdd.D_DATE = TRUNC(d.INSTANCE_END_DATE)
  LEFT JOIN processes p
      ON d.MW_BI_ID = p.mw_bi_id;
            
GRANT SELECT ON F_MW_TASK_INSTANCE_BY_DATE_SV TO MAXDAT_READ_ONLY;

commit;