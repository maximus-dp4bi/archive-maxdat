<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>ReleaseValidations- CI</name>
    <description/>
    <extended_description>Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.

    ---------------------------------

    SVN_FILE_URL        = $URL$

    SVN_REVISION        = $Revision$

    SVN_REVISION_DATE   = $Date$

    SVN_REVISION_AUTHOR = $Author$

    ---------------------------------
    </extended_description>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2013/04/26 09:53:50.844</created_date>
    <modified_user>-</modified_user>
    <modified_date>2013/04/26 09:53:50.844</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>MAXDAT_VAL</name>
    <server/>
    <type>ORACLE</type>
    <access>JNDI</access>
    <database>${DB_MAXDAT_JNDI_VAL}</database>
    <port>1521</port>
    <username/>
    <password>Encrypted </password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>1521</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <order>
    <hop>
      <from>Table Input - Contact Attr Validations</from>
      <to>Text file output</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>Table Input - Contact Attr Validations</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>MAXDAT_VAL</connection>
    <sql>SELECT * FROM (
select 'AV01' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV02' as test_num, 'Attributes 1 - At least one non-null value:  supp_contact_type_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV03' as test_num, 'Attributes 1 - At least one non-null value:  contact_type ' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV04' as test_num, 'Attributes 1 - At least one non-null value:  parent_record_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where parent_record_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV05' as test_num, 'Attributes 1 - At least one non-null value:  tracking_number' as test_name, case when exists(select 1 from corp_etl_client_inquiry where tracking_number is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV06' as test_num, 'Attributes 1 - At least one non-null value:  supp_worker_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV07' as test_num, 'Attributes 1 - At least one non-null value:  supp_worker_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV08' as test_num, 'Attributes 1 - At least one non-null value:  supp_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV09' as test_num, 'Attributes 1 - At least one non-null value:  created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV10' as test_num, 'Attributes 1 - At least one non-null value:  create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV11' as test_num, 'Attributes 1 - At least one non-null value:  complete_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where complete_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV12' as test_num, 'Attributes 1 - At least one non-null value:  contact_start_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_start_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV13' as test_num, 'Attributes 1 - At least one non-null value:  contact_end_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_end_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV14' as test_num, 'Attributes 1 - At least one non-null value:  supp_contact_group_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV15' as test_num, 'Attributes 1 - At least one non-null value:  contact_group' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_group is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV16' as test_num, 'Attributes 1 - At least one non-null value:  supp_language_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV17' as test_num, 'Attributes 1 - At least one non-null value:  language' as test_name, case when exists(select 1 from corp_etl_client_inquiry where language is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV18' as test_num, 'Attributes 1 - At least one non-null value:  translation_req' as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV19' as test_num, 'Attributes 1 - At least one non-null value:  supp_latest_note_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_latest_note_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV20' as test_num, 'Attributes 1 - At least one non-null value:  note_category' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_category is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV21' as test_num, 'Attributes 1 - At least one non-null value:  note_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_type is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV22' as test_num, 'Attributes 1 - At least one non-null value:  note_source' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_source is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV23' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_field1' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field1 is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV24' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_field2' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field2 is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV25' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_field3' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field3 is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV26' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_field4' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field4 is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV27' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_field5' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field5 is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV28' as test_num, 'Attributes 1 - At least one non-null value:  assd_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV29' as test_num, 'Attributes 1 - At least one non-null value:  ased_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV30' as test_num, 'Attributes 1 - At least one non-null value:  aspb_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV31' as test_num, 'Attributes 1 - At least one non-null value:  assd_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV32' as test_num, 'Attributes 1 - At least one non-null value:  ased_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV33' as test_num, 'Attributes 1 - At least one non-null value:  asf_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV34' as test_num, 'Attributes 1 - At least one non-null value:  asf_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV35' as test_num, 'Attributes 1 - At least one non-null value:  asf_cancel_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV36' as test_num, 'Attributes 1 - At least one non-null value:  gwf_work_identified' as test_name, case when exists(select 1 from corp_etl_client_inquiry where gwf_work_identified is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV37' as test_num, 'Attributes 1 - At least one non-null value:  instance_status' as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV38' as test_num, 'Attributes 1 - At least one non-null value:  cancel_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV39' as test_num, 'Attributes 1 - At least one non-null value:  supp_update_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV40' as test_num, 'Attributes 1 - At least one non-null value:  last_update_by_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV41' as test_num, 'Attributes 1 - At least one non-null value:  last_update_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV42' as test_num, 'Attributes 1 - At least one non-null value:  contact_record_link_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV43' as test_num, 'Attributes 1 - At least one non-null value:  client_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where client_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV44' as test_num, 'Attributes 1 - At least one non-null value:  case_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where case_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV45' as test_num, 'Attributes 1 - At least one non-null value:  event_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV46' as test_num, 'Attributes 1 - At least one non-null value:  supp_event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV47' as test_num, 'Attributes 1 - At least one non-null value:  event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV48' as test_num, 'Attributes 1 - At least one non-null value:  event_create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV49' as test_num, 'Attributes 1 - At least one non-null value:  supp_event_type_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_type_cd is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV50' as test_num, 'Attributes 1 - At least one non-null value:  supp_event_context' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_context is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV51' as test_num, 'Attributes 1 - At least one non-null value:  event_action' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_action is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION  -- Changed from EVENT_ACTION_CATEGORY
select 'AV52' as test_num, 'Attributes 1 - At least one non-null value:  manual_action_category' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where manual_action_category is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV53' as test_num, 'Attributes 1 - At least one non-null value:  event_ref_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_id is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV54' as test_num, 'Attributes 1 - At least one non-null value:  event_ref_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_type is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV55' as test_num, 'Attributes 1 - At least one non-null value:  program_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV56' as test_num, 'Attributes 1 - At least one non-null value:  program_subtype' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV57' as test_num, 'Attributes 1 - At least one non-null value:  note_present' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is not null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV58' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  contact_record_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV59' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_contact_type_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV60' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  contact_type ' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV61' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  parent_record_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where parent_record_id is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV62' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  tracking_number' as test_name, case when exists(select 1 from corp_etl_client_inquiry where tracking_number is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV63' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_worker_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV64' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_worker_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV65' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV66' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV67' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV68' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  complete_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where complete_dt is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV69' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_start_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_start_dt is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV70' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_end_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_end_dt is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV71' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_contact_group_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV72' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_group' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_group is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV73' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_language_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV74' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  language' as test_name, case when exists(select 1 from corp_etl_client_inquiry where language is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV75' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  translation_req' as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV76' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  supp_latest_note_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_latest_note_id is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV77' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  note_category' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_category is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV78' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  note_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_type is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV79' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  note_source' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_source is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV80' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field1' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field1 is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV81' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field2' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field2 is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV82' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field3' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field3 is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV83' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field4' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field4 is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV84' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field5' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field5 is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV85' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  assd_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV86' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  ased_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV87' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  aspb_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV88' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  assd_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV89' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  ased_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV90' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  asf_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV91' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  asf_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV92' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  asf_cancel_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV93' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  gwf_work_identified' as test_name, case when exists(select 1 from corp_etl_client_inquiry where gwf_work_identified is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV94' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  instance_status' as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV95' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  cancel_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV96' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_update_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV97' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  last_update_by_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV98' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  last_update_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV99' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  contact_record_link_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV100' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  client_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where client_id is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV101' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  case_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where case_id is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV102' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  event_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV103' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  supp_event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV104' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV105' as test_num, 'Attributes 2 - Zero Result Tests - Required Attribute:  event_create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV106' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  supp_event_type_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_type_cd is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV107' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  supp_event_context' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_context is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV108' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  event_action' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_action is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION  -- Changed from EVENT_ACTION_CATEGORY
select 'AV109' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  manual_action_category' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where manual_action_category is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV110' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  event_ref_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_id is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV111' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  event_ref_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_type is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV112' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  program_type' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV113' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  program_subtype' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV114' as test_num, 'Attributes 2 - Zero Result Tests - Optional Attribute:  note_present' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is null) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV115' as test_num, 'Attributes 3 - Only Valid Values:  Translation Required' as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is not null and translation_req  in ('Y','N')) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV116' as test_num, 'Attributes 3 - Only Valid Values:  Note Present' as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is not null and note_present  in ('Y','N')) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV117' as test_num, 'Attributes 3 - Only Valid Values:  Instance Status' as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status not in ('Active', 'Complete')) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV118' as test_num, 'Attributes 3 - Only Valid Values:  Program Type' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is not null and program_type  in ('Medicaid')) then 'PASS' else 'FAIL' end as test_result from dual
UNION -- Changed from SUBPROGRAM_TYPE
select 'AV119' as test_num, 'Attributes 3 - Only Valid Values:  Program Subtype' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is not null and program_subtype  in ('Illinois Health Connect',
'Integrated Care Program',
'Voluntary Managed Care')) then 'PASS' else 'FAIL' end as test_result from dual
UNION
select 'AV120' as test_num, 'Attributes 4 - Required Not Null:  contact_record_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV121' as test_num, 'Attributes 4 - Required Not Null:  supp_contact_type_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV122' as test_num, 'Attributes 4 - Required Not Null:  contact_type ' as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV123' as test_num, 'Attributes 4 - Required Not Null:  supp_worker_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV124' as test_num, 'Attributes 4 - Required Not Null:  supp_worker_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV125' as test_num, 'Attributes 4 - Required Not Null:  supp_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV126' as test_num, 'Attributes 4 - Required Not Null:  created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV127' as test_num, 'Attributes 4 - Required Not Null:  create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV128' as test_num, 'Attributes 4 - Required Not Null:  supp_contact_group_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV129' as test_num, 'Attributes 4 - Required Not Null:  supp_language_cd' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV130' as test_num, 'Attributes 4 - Required Not Null:  asf_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV131' as test_num, 'Attributes 4 - Required Not Null:  asf_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV132' as test_num, 'Attributes 4 - Required Not Null:  asf_cancel_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV133' as test_num, 'Attributes 4 - Required Not Null:  assd_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV134' as test_num, 'Attributes 4 - Required Not Null:  instance_status' as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV135' as test_num, 'Attributes 4 - Required Not Null:  supp_update_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV136' as test_num, 'Attributes 4 - Required Not Null:  last_update_by_name' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV137' as test_num, 'Attributes 4 - Required Not Null:  last_update_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV138' as test_num, 'Attributes 4 - Required Not Null:  contact_record_link_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV139' as test_num, 'Attributes 4 - Required Not Null:  event_id' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV140' as test_num, 'Attributes 4 - Required Not Null:  supp_event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV141' as test_num, 'Attributes 4 - Required Not Null:  event_created_by' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV142' as test_num, 'Attributes 4 - Required Not Null:  event_create_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV143' as test_num, 'Attributes 5 - ASSD Not Null with ASED Not Null:  assd_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null and ased_handle_contact is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV144' as test_num, 'Attributes 5 - ASSD Not Null with ASED Not Null:  assd_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null and ased_create_route_work is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV145' as test_num, 'Attributes 6 - ASSD Not Null with ASF = Y:  assd_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null and asf_handle_contact = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV146' as test_num, 'Attributes 6 - ASSD Not Null with ASF = Y:  assd_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null and asf_create_route_work = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV147' as test_num, 'Attributes 7 - ASED Not Null with ASF = Y:  ased_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null and asf_handle_contact = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV148' as test_num, 'Attributes 7 - ASED Not Null with ASF = Y:  ased_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is null and asf_create_route_work = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV149' as test_num, 'Attributes 7 - ASED Not Null with ASF = Y:  cancel_dt' as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is null and asf_cancel_contact = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV150' as test_num, 'Attributes 8 - ASED Not Null with ASPB Not Null:  ased_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null and aspb_handle_contact is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV151' as test_num, 'Attributes 9 - ASPB Not Null with ASF = Y:  aspb_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null and asf_handle_contact = 'Y') then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV152' as test_num, 'Attributes 10 - ASPB Not Null with ASED Not Null:  aspb_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null and ased_handle_contact is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV153' as test_num, 'Attributes 11 - ASF = N with ASED Null:  asf_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact = 'N' and ased_handle_contact is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV154' as test_num, 'Attributes 11 - ASF = N with ASED Null:  asf_create_route_work' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work = 'N' and ased_create_route_work is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV155' as test_num, 'Attributes 11 - ASF = N with ASED Null:  asf_cancel_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact = 'N' and cancel_dt is not null) then 'FAIL' else 'PASS' end as test_result from dual
UNION
select 'AV156' as test_num, 'Attributes 12 - ASF = N with ASPB Null:  asf_handle_contact' as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact = 'N' and aspb_handle_contact is not null) then 'FAIL' else 'PASS' end as test_result from dual
) ORDER BY 1
</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>123</xloc>
      <yloc>36</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Text file output</name>
    <type>TextFileOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <separator>;</separator>
    <enclosure>"</enclosure>
    <enclosure_forced>N</enclosure_forced>
    <enclosure_fix_disabled>N</enclosure_fix_disabled>
    <header>Y</header>
    <footer>N</footer>
    <format>DOS</format>
    <compression>None</compression>
    <encoding/>
    <endedLine/>
    <fileNameInField>N</fileNameInField>
    <fileNameField/>
    <create_parent_folder>N</create_parent_folder>
    <file>
      <name>C:\Kettle\ETL\ETL_LOG_DIRECTORY\ILClientInquiryValidation</name>
      <servlet_output>N</servlet_output>
      <do_not_open_new_file_init>N</do_not_open_new_file_init>
      <extention>txt</extention>
      <append>N</append>
      <split>N</split>
      <haspartno>N</haspartno>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <SpecifyFormat>Y</SpecifyFormat>
      <date_time_format>yyyyMMddHHmmss</date_time_format>
      <add_to_result_filenames>Y</add_to_result_filenames>
      <pad>N</pad>
      <fast_dump>N</fast_dump>
      <splitevery>0</splitevery>
    </file>
    <fields>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>329</xloc>
      <yloc>36</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes/>
</transformation>
