DROP TABLE CC_C_IVR_CTRLS;

CREATE TABLE CC_C_IVR_CTRLS (
IVR_CTRL_ID NUMBER(38)
, CTRL_TYPE VARCHAR2(20) NOT NULL
, CTRL_NAME VARCHAR2(30) NOT NULL
, CTRL_VALUE  VARCHAR2(60)
, CTRL_DESCRIPTION  VARCHAR2(200)  NOT NULL
, D_PROJECT_ID  NUMBER(30)  
, D_PROGRAM_ID  NUMBER(30)
, IVR_SOURCE  VARCHAR2(20)
, IVR_APPNAME VARCHAR2(60)
, IVR_DNIS  VARCHAR2(30)
, EFFECTIVE_DT  DATE  NOT NULL
, END_DT    DATE  NOT NULL
, FACTOR1_COLUMN  VARCHAR2(30)
, FACTOR1_EXPR VARCHAR2(200)
, FACTOR2_COLUMN  VARCHAR2(30)
, FACTOR2_EXPR VARCHAR2(200)
, FACTOR3_COLUMN  VARCHAR2(30)
, FACTOR3_EXPR VARCHAR2(200)
, FACTOR4_COLUMN  VARCHAR2(30)
, FACTOR4_EXPR VARCHAR2(200)
, FACTOR5_COLUMN  VARCHAR2(30)
, FACTOR5_EXPR VARCHAR2(200)
, FACTOR6_COLUMN  VARCHAR2(30)
, FACTOR6_EXPR VARCHAR2(200)
, CREATE_DT DATE
, CREATED_BY  VARCHAR2(100)
, UPDATE_DT DATE
, UPDATED_BY  VARCHAR2(100)  NOT NULL
, IVR_PROJECT_NAME VARCHAR2(50)
, IVR_PROGRAM_NAME VARCHAR2(50)
)
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;        


ALTER TABLE CC_C_IVR_CTRLS ADD  (
INS_CLASS_RUN_STMT  CLOB
, INS_CLASS_RUN_MISSING_STMT CLOB
, INS_CLASS_RUN_RANGE_STMT CLOB
);

ALTER TABLE CC_C_IVR_CTRLS 
    ADD CONSTRAINT CC_C_IVR_CTRLS_PK PRIMARY KEY ( IVR_CTRL_ID ) ;


ALTER TABLE CC_C_IVR_CTRLS 
    ADD CONSTRAINT CC_C_IVR_CTRLS_UN UNIQUE ( CTRL_TYPE , CTRL_NAME, CTRL_VALUE, D_PROJECT_ID, D_PROGRAM_ID, IVR_SOURCE, IVR_APPNAME, IVR_DNIS, FACTOR1_COLUMN, FACTOR2_COLUMN, FACTOR3_COLUMN, FACTOR4_COLUMN, FACTOR5_COLUMN, FACTOR6_COLUMN ) ;
    
DROP SEQUENCE SEQ_IVR_CTRL_ID;
CREATE SEQUENCE SEQ_IVR_CTRL_ID;  

CREATE OR REPLACE TRIGGER BIU_CC_C_IVR_CTRLS
    BEFORE INSERT OR UPDATE ON CC_C_IVR_CTRLS 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.IVR_CTRL_ID IS NULL THEN 
          SELECT SEQ_IVR_CTRL_ID.NEXTVAL INTO :NEW.IVR_CTRL_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.CREATE_DT := SYSDATE;
          :NEW.CREATED_BY := USER;
          if :new.effective_dt is null then
             :NEW.EFFECTIVE_DT := trunc(sysdate);
          end if;
          if :new.end_dt is null then   
                    :NEW.END_DT := to_date('7/7/7777','mm/dd/yyyy');
          end if;          
END IF;
--- SND 6/1/2020 - REVERSE POPULATION USING PROJECT_NAME AND PROGRAM_NAME TO POPULATE PROJECT_ID AND PROGRAM_ID WILL BE DONE LATER
IF (INSERTING OR (UPDATING AND :NEW.D_PROJECT_ID <> :OLD.D_PROJECT_ID)) AND :NEW.D_PROJECT_ID IS NOT NULL THEN
  DECLARE
   V_PROJECT_NAME VARCHAR2(55);
   BEGIN
    SELECT PROJECT_NAME INTO V_PROJECT_NAME FROM CC_D_PROJECT PROJ WHERE PROJ.PROJECT_ID = :NEW.D_PROJECT_ID;
    :NEW.IVR_PROJECT_NAME := V_PROJECT_NAME;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      NULL;
      WHEN TOO_MANY_ROWS THEN
        NULL;
    END;
END IF;
IF INSERTING OR (UPDATING AND :NEW.D_PROGRAM_ID <> :OLD.D_PROGRAM_ID) AND :NEW.D_PROGRAM_ID IS NOT NULL THEN
  DECLARE
   V_PROGRAM_NAME VARCHAR2(55);
   BEGIN
    SELECT PROGRAM_NAME INTO V_PROGRAM_NAME FROM CC_D_PROGRAM PROJ WHERE PROJ.PROGRAM_ID = :NEW.D_PROGRAM_ID;
    :NEW.IVR_PROGRAM_NAME := V_PROGRAM_NAME;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      NULL;
      WHEN TOO_MANY_ROWS THEN
        NULL;
    END;
END IF;
IF (INSERTING OR UPDATING) AND :NEW.CTRL_TYPE = 'CLASSIFICATION' THEN
  DECLARE
  V_SQL CLOB;
  V_SQL_MISSING VARCHAR2(3000);
  V_SQL_RANGE VARCHAR2(3000);
  BEGIN

  v_sql := ' INSERT INTO CC_S_TMP_CLASS_RUN (CLASS_RUN_ID, F_IVR_PERFORMANCE_INSTANCE_ID, IVR_CTRL_ID, CTRL_NAME, CTRL_VALUE, CREATE_DT, CREATED_BY)';
  V_SQL := V_SQL || CHR(10) || ' (SELECT :1, IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID, CIC.IVR_CTRL_ID, CIC.CTRL_NAME, CIC.CTRL_VALUE , SYSDATE, USER';
  V_SQL := V_SQL || CHR(10) || ' from ' || dbms_assert.qualified_sql_name('cisco_enterprise_cc.cc_f_ivr_performance_instance') || ' ivrpi';
  V_SQL := V_SQL || CHR(10) || ' join ' || dbms_assert.qualified_sql_name('cisco_enterprise_cc.CC_C_IVR_CTRLS') || ' cic ON';
  V_SQL := V_SQL || CHR(10) || ' CIC.CTRL_TYPE = ''CLASSIFICATION''';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.EFFECTIVE_DT <= SYSDATE';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.END_DT >= SYSDATE';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.IVR_CTRL_ID = '|| :NEW.IVR_CTRL_ID;
  V_SQL := V_SQL || CHR(10) || ' AND CIC.D_PROJECT_ID = IVRPI.D_PROJECT_ID';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.D_PROGRAM_ID = IVRPI.D_PROGRAM_ID';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.IVR_SOURCE = IVRPI.IVR_SOURCE';
  V_SQL := V_SQL || CHR(10) || ' AND CIC.IVR_APPNAME = IVRPI.IVR_APPLICATION_NAME';
  V_SQL := V_SQL || CHR(10) || ' WHERE NVL(CIC.IVR_DNIS, IVRPI.INBOUND_DNIS) = IVRPI.INBOUND_DNIS';  
  IF :NEW.FACTOR1_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR1_COLUMN) || ' ' || :NEW.FACTOR1_EXPR;
  END IF;
  IF :NEW.FACTOR2_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR2_COLUMN) || ' ' || :NEW.FACTOR2_EXPR;
  END IF;
  IF :NEW.FACTOR3_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR3_COLUMN) || ' ' || :NEW.FACTOR3_EXPR;
  END IF;
  IF :NEW.FACTOR4_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR4_COLUMN) || ' ' || :NEW.FACTOR4_EXPR;
  END IF;
  IF :NEW.FACTOR5_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR5_COLUMN) || ' ' || :NEW.FACTOR5_EXPR;
  END IF;
  IF :NEW.FACTOR6_COLUMN IS NOT NULL THEN
    V_SQL := V_SQL || chr(10) || ' AND ' || DBMS_ASSERT.qualified_sql_name('IVRPI.' || :NEW.FACTOR6_COLUMN) || ' ' || :NEW.FACTOR6_EXPR;
  END IF;
  :NEW.INS_CLASS_RUN_STMT := V_SQL || CHR(10) || ' AND 1=1' || CHR(10) || ') ';

  V_SQL_MISSING := 'AND NOT EXISTS (SELECT ''X'' FROM ' || dbms_assert.qualified_sql_name('cisco_enterprise_cc.CC_S_IVR_PERFORMANCE_INSTANCE_EXT') || ' IVRPIE';
  V_SQL_MISSING := V_SQL_MISSING || CHR(10) || ' WHERE IVRPIE.F_IVR_PERFORMANCE_INSTANCE_ID = IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID)';
  :NEW.INS_CLASS_RUN_MISSING_STMT := V_SQL || CHR(10) || V_SQL_MISSING || CHR(10) || ' AND 1=1' || CHR(10) || ') ';
  
  V_SQL_RANGE := 'AND IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID >= :2 AND IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID <= :3';
  :NEW.INS_CLASS_RUN_RANGE_STMT := V_SQL || CHR(10) || V_SQL_RANGE || CHR(10) || ' AND 1=1' || CHR(10) || ') ';
  
  END;
END IF;
:NEW.UPDATE_DT := SYSDATE;
:NEW.UPDATED_BY := USER;
END; 
/

CREATE OR REPLACE VIEW CC_C_IVR_CTRLS_SV AS 
SELECT * FROM CC_C_IVR_CTRLS;

GRANT SELECT ON CC_C_IVR_CTRLS TO CISCO_READ_ONLY;
GRANT SELECT ON CC_C_IVR_CTRLS_SV TO CISCO_READ_ONLY;
GRANT SELECT, INSERT, UPDATE, DELETE ON CC_C_IVR_CTRLS TO SD25802, SR18956;
GRANT SELECT ON CC_C_IVR_CTRLS TO MAXDAT_READ_ONLY;
GRANT SELECT ON CC_C_IVR_CTRLS_SV TO MAXDAT_READ_ONLY;
