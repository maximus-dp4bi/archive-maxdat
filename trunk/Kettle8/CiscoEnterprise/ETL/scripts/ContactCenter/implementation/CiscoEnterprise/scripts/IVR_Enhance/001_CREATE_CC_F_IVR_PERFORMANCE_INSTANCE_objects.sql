DROP TABLE CC_F_IVR_PERFORMANCE_INSTANCE;
CREATE TABLE CC_F_IVR_PERFORMANCE_INSTANCE
(
F_IVR_PERFORMANCE_INSTANCE_ID NUMBER(38)
,D_DATE_ID    NUMBER(38)
,D_INTERVAL_ID    NUMBER(38)
,D_PROJECT_ID   NUMBER(38)
,D_PROGRAM_ID   NUMBER(38)
,IVR_SOURCE   VARCHAR2(20)
,IVR_APPLICATION_NAME VARCHAR2(60)
,IVR_CALL_DATE    DATE
,IVR_CALL_START_TIME  DATE
,IVR_CALL_END_TIME  DATE
,INBOUND_DNIS   VARCHAR2(30)
,ANI      VARCHAR2(30)
,D_IVR_LANG_ID    NUMBER(38)    
,DURATION_IN_IVR    NUMBER
,CALL_GUID    VARCHAR2(40)
,ROUTER_CALL_KEY_DAY  NUMBER
,ROUTER_CALL_KEY    NUMBER
,IVR_EXIT_EVENT   VARCHAR2(60)
,IVR_EXIT_CAUSE   VARCHAR2(60)
,COMPLETION_CODE    VARCHAR2(10)
,IVR_EXIT_POINT   VARCHAR2(255)
,MAIN_MENU_SELECTION  VARCHAR2(255)
,SELF_SERVICE_DESCRIPTION VARCHAR2(250)
,DESTINATION_TRANSFER   NUMBER
,AGENT_ROUTING_GROUP_NAME VARCHAR2(60)  
,AGENT_ROUTING_GROUP_ID   NUMBER
,QUEUE_NAME     VARCHAR2(60)
,D_CONTACT_QUEUE_ID   NUMBER
,SOURCE_TABLE_NAME    VARCHAR2(50)
,SOURCE_TABLE_ID    NUMBER
,CREATE_DT    DATE
,CREATED_BY   VARCHAR2(50)
,UPDATE_DT    DATE
,UPDATED_BY   VARCHAR2(50)
)
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


COMMENT ON TABLE CC_F_IVR_PERFORMANCE_INSTANCE IS 'Fact Table; Stores the IVR data from all sources; Uniqueness yet to determine';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.D_DATE_ID IS 'CC_D_DATES.D_DATE_ID FOR IVR_CALL_DATE';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.D_INTERVAL_ID IS 'CC_D_INTERVAL.D_INTERVAL_ID FOR IVR_CALL_START_TIME';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.D_PROJECT_ID IS 'CC_D_PROJECT.D_PROJECT_ID FOR IVR CALL';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.D_PROGRAM_ID IS 'CC_D_PROGRAM.D_PROGRAM_ID FOR IVR CALL';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.D_IVR_LANG_ID IS 'CC_C_IVR_LANGUAGE.IVR_LANG_ID; For CSI it is already in source. For CVP it is derived using classification';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.SOURCE_TABLE_NAME IS 'Source Staging table name';
COMMENT ON COLUMN CC_F_IVR_PERFORMANCE_INSTANCE.SOURCE_TABLE_ID IS 'Source Staging table PK';

ALTER TABLE CC_F_IVR_PERFORMANCE_INSTANCE 
    ADD CONSTRAINT CC_F_IVR_PERFORMANCE_INSTANCE_PK PRIMARY KEY ( F_IVR_PERFORMANCE_INSTANCE_ID ) ;


ALTER TABLE CC_F_IVR_PERFORMANCE_INSTANCE 
    ADD CONSTRAINT CC_F_IVR_PERFORMANCE_INSTANCE_UN UNIQUE ( SOURCE_TABLE_NAME, SOURCE_TABLE_ID) ;

ALTER TABLE CC_F_IVR_PERFORMANCE_INSTANCE ADD CONSTRAINT F_IVR_PERF_INST_D_DATES_FK FOREIGN KEY (D_DATE_ID) REFERENCES CISCO_ENTERPRISE_CC.CC_D_DATES(D_DATE_ID);
ALTER TABLE CC_F_IVR_PERFORMANCE_INSTANCE ADD CONSTRAINT F_IVR_PERF_INST_D_IVR_LANG_FK FOREIGN KEY (D_IVR_LANG_ID) REFERENCES CISCO_ENTERPRISE_CC.CC_C_IVR_LANGUAGE(IVR_LANG_ID);

CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_IDX1 ON  CC_F_IVR_PERFORMANCE_INSTANCE(D_DATE_ID)     TABLESPACE MAXDAT_DATA      LOGGING ;
CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_IDX2 ON  CC_F_IVR_PERFORMANCE_INSTANCE(D_INTERVAL_ID)     TABLESPACE MAXDAT_DATA      LOGGING ;
CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_IDX3 ON  CC_F_IVR_PERFORMANCE_INSTANCE(D_PROJECT_ID,D_PROGRAM_ID)     TABLESPACE MAXDAT_DATA      LOGGING ;
CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_IDX4 ON  CC_F_IVR_PERFORMANCE_INSTANCE(D_PROJECT_ID, D_PROGRAM_ID, D_INTERVAL_ID)     TABLESPACE MAXDAT_DATA      LOGGING ;
CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_IDX5 ON  CC_F_IVR_PERFORMANCE_INSTANCE(IVR_APPLICATION_NAME, IVR_CALL_DATE)     TABLESPACE MAXDAT_DATA      LOGGING ;
 
CREATE SEQUENCE SEQ_IVR_PERFORMANCE_INSTANCE_ID;  

CREATE OR REPLACE TRIGGER BIU_CC_F_IVR_PERFORMANCE_INSTANCE
    BEFORE INSERT OR UPDATE ON CC_F_IVR_PERFORMANCE_INSTANCE 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.F_IVR_PERFORMANCE_INSTANCE_ID IS NULL THEN 
          SELECT SEQ_IVR_PERFORMANCE_INSTANCE_ID.NEXTVAL INTO :NEW.F_IVR_PERFORMANCE_INSTANCE_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.CREATE_DT := SYSDATE;
          :NEW.CREATED_BY := USER;
END IF;
:NEW.UPDATE_DT := SYSDATE;
:NEW.UPDATED_BY := USER;
END; 
/

DROP TABLE CC_S_IVR_PERFORMANCE_INSTANCE_EXT;
drop table CC_S_TMP_CLASS_RUN;

CREATE TABLE CC_S_IVR_PERFORMANCE_INSTANCE_EXT (
S_IVR_PERFORMANCE_INSTANCE_EXT_ID    NUMBER(38)
, F_IVR_PERFORMANCE_INSTANCE_ID NUMBER(38)
, inbound_dnis_type             varchar2(30)
, unit_of_work                   varchar2(50)
, ivr_exit_result                varchar2(50)
, IVR_EXIT_RESULT_DETAIL         varchar2(50)
, CALL_CONTAINED_IN_IVR          number(30)
, CALL_ROUTED_TO_AGENT           number(30)
, CALL_RECEIVED_AFTER_HOURS      number(30)
,CREATE_DT    DATE
,CREATED_BY   VARCHAR2(50)
,UPDATE_DT    DATE
,UPDATED_BY   VARCHAR2(50)
,CLASS_RUN_ID NUMBER
);

ALTER TABLE CC_S_IVR_PERFORMANCE_INSTANCE_EXT 
    ADD CONSTRAINT CC_S_IVR_PERFORMANCE_INSTANCE_EXT_PK PRIMARY KEY ( S_IVR_PERFORMANCE_INSTANCE_EXT_ID ) ;

CREATE INDEX CC_F_IVR_PERFORMANCE_INSTANCE_EXT_IDX1 ON  CC_S_IVR_PERFORMANCE_INSTANCE_EXT(F_IVR_PERFORMANCE_INSTANCE_ID)     TABLESPACE MAXDAT_DATA      LOGGING ;

CREATE SEQUENCE SEQ_IVR_PERFORMANCE_INSTANCE_EXT_ID;  

CREATE OR REPLACE TRIGGER BIU_CC_S_IVR_PERFORMANCE_INSTANCE_EXT
    BEFORE INSERT OR UPDATE ON CC_S_IVR_PERFORMANCE_INSTANCE_EXT 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.S_IVR_PERFORMANCE_INSTANCE_EXT_ID IS NULL THEN 
          SELECT SEQ_IVR_PERFORMANCE_INSTANCE_EXT_ID.NEXTVAL INTO :NEW.S_IVR_PERFORMANCE_INSTANCE_EXT_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.CREATE_DT := SYSDATE;
          :NEW.CREATED_BY := USER;
END IF;
:NEW.UPDATE_DT := SYSDATE;
:NEW.UPDATED_BY := USER;
END; 
/
--select * from CC_F_IVR_PERFORMANCE_INSTANCE_SV;
CREATE OR REPLACE VIEW CC_F_IVR_PERFORMANCE_INSTANCE_SV AS
SELECT * FROM ( 
SELECT /*+ PARALLEL(10) */
IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID
,IVRPI.D_DATE_ID
,IVRPI.D_INTERVAL_ID
,IVRPI.D_PROJECT_ID
,IVRPI.D_PROGRAM_ID
,IVRPI.IVR_SOURCE
,IVRPI.IVR_APPLICATION_NAME
,IVRPI.IVR_CALL_DATE
,IVRPI.IVR_CALL_START_TIME
,IVRPI.IVR_CALL_END_TIME
,IVRPI.INBOUND_DNIS
,IVRPI.ANI
,IVRPI.D_IVR_LANG_ID
,IVRPI.DURATION_IN_IVR
,IVRPI.CALL_GUID
,IVRPI.ROUTER_CALL_KEY_DAY
,IVRPI.ROUTER_CALL_KEY
,IVRPI.IVR_EXIT_EVENT
,IVRPI.IVR_EXIT_CAUSE
,IVRPI.COMPLETION_CODE
,IVRPI.IVR_EXIT_POINT
,IVRPI.MAIN_MENU_SELECTION
,IVRPI.SELF_SERVICE_DESCRIPTION
,IVRPI.DESTINATION_TRANSFER
,IVRPI.AGENT_ROUTING_GROUP_NAME
,IVRPI.AGENT_ROUTING_GROUP_ID
,IVRPI.QUEUE_NAME
,IVRPI.D_CONTACT_QUEUE_ID   QUEUE_NUMBER
,IVRPI.SOURCE_TABLE_NAME
,IVRPI.SOURCE_TABLE_ID
,IVRPI.CREATE_DT
,IVRPI.CREATED_BY,UPDATE_DT,UPDATED_BY
,IVRPIE.inbound_dnis_type           
,IVRPIE.unit_of_work                
,IVRPIE.ivr_exit_result             
,IVRPIE.IVR_EXIT_RESULT_DETAIL      
,IVRPIE.CALL_CONTAINED_IN_IVR       
,IVRPIE.CALL_ROUTED_TO_AGENT        
,IVRPIE.CALL_RECEIVED_AFTER_HOURS
,IVRPIE.S_IVR_PERFORMANCE_INSTANCE_EXT_ID 
FROM CC_F_IVR_PERFORMANCE_INSTANCE IVRPI
LEFT JOIN (SELECT 
      S_IVR_PERFORMANCE_INSTANCE_EXT_ID
      ,F_IVR_PERFORMANCE_INSTANCE_ID
      ,inbound_dnis_type         
      ,unit_of_work              
      ,ivr_exit_result           
      ,IVR_EXIT_RESULT_DETAIL    
      ,CALL_CONTAINED_IN_IVR     
      ,CALL_ROUTED_TO_AGENT      
      ,CALL_RECEIVED_AFTER_HOURS
      FROM (
           SELECT IEXT.*
           , ROW_NUMBER() OVER (PARTITION BY IEXT.F_IVR_PERFORMANCE_INSTANCE_ID ORDER BY IEXT.S_IVR_PERFORMANCE_INSTANCE_EXT_ID DESC) ROWN 
           FROM CC_S_IVR_PERFORMANCE_INSTANCE_EXT IEXT
      )
      WHERE ROWN = 1
      ) IVRPIE ON IVRPI.F_IVR_PERFORMANCE_INSTANCE_ID = IVRPIE.F_IVR_PERFORMANCE_INSTANCE_ID
) ;

CREATE TABLE CC_S_TMP_CLASS_RUN (
CLASS_RUN_ID    NUMBER(38)
, F_IVR_PERFORMANCE_INSTANCE_ID NUMBER(38)
, ivr_ctrl_id                   number(38)
, CTRL_NAME                     VARCHAR2(30)
, CTRL_VALUE                    VARCHAR2(60)
,CREATE_DT    DATE
,CREATED_BY   VARCHAR2(50)
);

CREATE SEQUENCE SEQ_CLASS_RUN_ID;  

CREATE INDEX CC_S_TMP_CLASS_RUN_IDX1 ON  CC_S_TMP_CLASS_RUN(F_IVR_PERFORMANCE_INSTANCE_ID, CTRL_NAME)     TABLESPACE MAXDAT_DATA      LOGGING ;

GRANT SELECT ON CC_F_IVR_PERFORMANCE_INSTANCE TO CISCO_READ_ONLY;
GRANT SELECT ON CC_F_IVR_PERFORMANCE_INSTANCE_SV TO CISCO_READ_ONLY;
GRANT SELECT, INSERT, UPDATE, DELETE ON CC_F_IVR_PERFORMANCE_INSTANCE TO SD25802, SR18956;
GRANT SELECT ON CC_F_IVR_PERFORMANCE_INSTANCE TO MAXDAT_READ_ONLY;
GRANT SELECT ON CC_F_IVR_PERFORMANCE_INSTANCE_SV TO MAXDAT_READ_ONLY;

GRANT SELECT ON CC_S_TMP_CLASS_RUN TO CISCO_READ_ONLY;
GRANT SELECT, INSERT, UPDATE, DELETE ON CC_S_TMP_CLASS_RUN TO SD25802, SR18956;
GRANT SELECT ON CC_S_TMP_CLASS_RUN TO MAXDAT_READ_ONLY;

GRANT SELECT ON CC_S_IVR_PERFORMANCE_INSTANCE_EXT TO CISCO_READ_ONLY;
GRANT SELECT, INSERT, UPDATE, DELETE ON CC_S_IVR_PERFORMANCE_INSTANCE_EXT TO SD25802, SR18956;
GRANT SELECT ON CC_S_IVR_PERFORMANCE_INSTANCE_EXT TO MAXDAT_READ_ONLY;
