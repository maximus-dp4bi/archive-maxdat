<?xml version="1.0" encoding="UTF-8"?>
<job>
  <name>PP_Actuals_Process_MailFaxBatchScan</name>
  <description/>
    <extended_description>Do not edit these four SVN_* variable values.  They are populated when you commit code to SVN and used later to identify deployed code.

    ---------------------------------

    SVN_FILE_URL        = $URL$

    SVN_REVISION        = $Revision$

    SVN_REVISION_DATE   = $Date$

    SVN_REVISION_AUTHOR = $Author$

    ---------------------------------
    </extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/</directory>
  <created_user>-</created_user>
  <created_date>2013/07/30 01:04:45.392</created_date>
  <modified_user>-</modified_user>
  <modified_date>2013/07/30 01:04:45.392</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>EMRS</name>
    <server>${DB_EMRS_HOSTNAME}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${DB_EMRS_NAME}</database>
    <port>${DB_EMRS_PORT}</port>
    <username>${DB_EMRS_USER}</username>
    <password>${DB_EMRS_PASSWORD}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${DB_EMRS_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>MAXDAT</name>
    <server> ${DB_MAXDAT_HOSTNAME}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${DB_MAXDAT_NAME}</database>
    <port>${DB_MAXDAT_PORT}</port>
    <username>${DB_MAXDAT_USER}</username>
    <password>${DB_MAXDAT_PASSWORD}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${DB_MAXDAT_PORT}</attribute>
      </attribute>
      <attribute>
        <code>PREFERRED_SCHEMA_NAME</code>
        <attribute>${DB_MAXDAT_SCHEMA}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SQL_CONNECT</code>
        <attribute>ALTER SESSION SET CURRENT_SCHEMA = MAXDAT;</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>NYECDMS</name>
    <server>${DB_DMS_HOSTNAME}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${DB_DMS_NAME}</database>
    <port>${DB_DMS_PORT}</port>
    <username>${DB_DMS_USER}</username>
    <password>${DB_DMS_PASSWORD}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>INITIAL_POOL_SIZE</code>
        <attribute>5</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>MAXIMUM_POOL_SIZE</code>
        <attribute>10</attribute>
      </attribute>
      <attribute>
        <code>POOLING_initialSize</code>
        <attribute>${INIT_POOL_SIZE}</attribute>
      </attribute>
      <attribute>
        <code>POOLING_logAbandoned</code>
        <attribute>false</attribute>
      </attribute>
      <attribute>
        <code>POOLING_maxActive</code>
        <attribute>${MAX_POOL_SIZE}</attribute>
      </attribute>
      <attribute>
        <code>POOLING_testOnBorrow</code>
        <attribute>true</attribute>
      </attribute>
      <attribute>
        <code>POOLING_validationQuery</code>
        <attribute>select 1 from dual</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${DB_DMS_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>Y</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>OLTP_SOURCE</name>
    <server>${DB_OLTP_HOSTNAME}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${DB_OLTP_NAME}</database>
    <port>${DB_OLTP_PORT}</port>
    <username>${DB_OLTP_USER}</username>
    <password>${DB_OLTP_PASSWORD}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${DB_OLTP_PORT}</attribute>
      </attribute>
      <attribute>
        <code>PREFERRED_SCHEMA_NAME</code>
        <attribute>${DB_OLTP_SCHEMA}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SQL_CONNECT</code>
        <attribute>alter session set current_schema = EB;</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <attributes/>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>328</xloc>
      <yloc>35</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Abort job 2</name>
      <description/>
      <type>ABORT</type>
      <attributes/>
      <message/>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>483</xloc>
      <yloc>501</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Write Log 14</name>
      <description/>
      <type>TRANS</type>
      <attributes/>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}/tr_pps_write_to_db_log.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>330</xloc>
      <yloc>182</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Set Log Vars 23</name>
      <description/>
      <type>SET_VARIABLES</type>
      <attributes/>
      <replacevars>Y</replacevars>
      <filename/>
      <file_variable_type>JVM</file_variable_type>
      <fields>
        <field>
          <variable_name>V_LOG_TYPE</variable_name>
          <variable_value>LOG</variable_value>
          <variable_type>JVM</variable_type>
        </field>
        <field>
          <variable_name>V_LOG_PROCESS</variable_name>
          <variable_value>PP_Actuals_Process</variable_value>
          <variable_type>JVM</variable_type>
        </field>
        <field>
          <variable_name>V_LOG_DESCRIPTION</variable_name>
          <variable_value>PP_Actuals_Process_MailFaxBatchScan STARTED</variable_value>
          <variable_type>JVM</variable_type>
        </field>
      </fields>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>329</xloc>
      <yloc>117</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Inventory Avg Age</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
      SELECT X.INVENTORY_DATE,
       X.INVENTORY_HOUR,
       X.CFG_UOW_ID,
       X.PROJECT_ID,
       X.PROGRAM_ID,
       X.GEOGRAPHY_MASTER_ID,
       X.AVG_AGE,
       (SELECT ACTUALS_ID
          FROM PP_F_ACTUALS
         WHERE D_DATE = X.INVENTORY_DATE
           AND D_HOUR = X.INVENTORY_HOUR
           AND UOW_ID = X.CFG_UOW_ID
           AND PROJECT_ID = X.PROJECT_ID
           AND PROGRAM_ID = X.PROGRAM_ID
           AND GEOGRAPHY_MASTER_ID = X.GEOGRAPHY_MASTER_ID) AS ACTUALS_ID
  FROM 
  (
      SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
             '0' AS INVENTORY_HOUR,
             UOW.CFG_UOW_ID,
             AVG(CASE
                   WHEN UOW.AGE_DAYS_TYPE = 'BUS' THEN
                    (CASE
                      WHEN BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH), TRUNC(SYSDATE)) >=
                           UOW.INV_AVG_AGE THEN
                       UOW.INV_AVG_AGE
                      ELSE
                       BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH), TRUNC(SYSDATE))
                    END)
                   ELSE
                    (CASE
                      WHEN (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL) >=
                           UOW.INV_AVG_AGE THEN
                       UOW.INV_AVG_AGE
                      ELSE
                       (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL)
                    END)
                 END) as AVG_AGE,
             (SELECT CFG_PROJECT_CONFIG_ID FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
             (SELECT CFG_PROGRAM_CONFIG_ID FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
             (SELECT CFG_GEOGRAPHY_CONFIG_ID FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
        FROM PP_CFG_UNIT_OF_WORK UOW
       INNER JOIN PP_D_UOW_SOURCE_REF USR
          ON UOW.CFG_UOW_ID = USR.UOW_ID
         AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
       INNER JOIN PP_D_SOURCE_REF_TYPE SRT
          ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
         AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                       WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                         AND ASSD_SCAN_BATCH IS NOT NULL
                         AND ASED_SCAN_BATCH IS NULL
                         AND UOW.HOURLY_FLAG = 'N'
       GROUP BY TRUNC(SYSDATE), UOW.CFG_UOW_ID
      UNION ALL
      SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
             TO_CHAR(SYSDATE, 'HH24') AS INVENTORY_HOUR,
             UOW.CFG_UOW_ID,
             AVG(CASE
                   WHEN UOW.AGE_DAYS_TYPE = 'BUS' THEN
                    (CASE
                      WHEN BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH), TRUNC(SYSDATE)) >=
                           UOW.INV_AVG_AGE THEN
                       UOW.INV_AVG_AGE
                      ELSE
                       BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH), TRUNC(SYSDATE))
                    END)
                   ELSE
                    (CASE
                      WHEN (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL) >=
                           UOW.INV_AVG_AGE THEN
                       UOW.INV_AVG_AGE
                      ELSE
                       (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL)
                    END)
                 END) as AVG_AGE,
             (SELECT CFG_PROJECT_CONFIG_ID FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
             (SELECT CFG_PROGRAM_CONFIG_ID FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
             (SELECT CFG_GEOGRAPHY_CONFIG_ID FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
        FROM PP_CFG_UNIT_OF_WORK UOW
       INNER JOIN PP_D_UOW_SOURCE_REF USR
          ON UOW.CFG_UOW_ID = USR.UOW_ID
         AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
       INNER JOIN PP_D_SOURCE_REF_TYPE SRT
          ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
         AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
         WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
           AND ASSD_SCAN_BATCH IS NOT NULL 
           AND ASED_SCAN_BATCH IS NULL
           AND UOW.HOURLY_FLAG = 'Y'
       GROUP BY TRUNC(SYSDATE), TO_CHAR(SYSDATE, 'HH24'), UOW.CFG_UOW_ID           
        ) X
    ) 
    LOOP
        CASE
            WHEN (RECS.ACTUALS_ID >=0) THEN 
              UPDATE PP_F_ACTUALS
                 SET ACTL_INVENTORY_AGE_AVG=RECS.AVG_AGE
               WHERE ACTUALS_ID=RECS.ACTUALS_ID;
            ELSE 
              INSERT INTO PP_F_ACTUALS
                (ACTUALS_ID,
                 D_DATE,
                 D_HOUR,
                 UOW_ID,
                 PROJECT_ID,
                 PROGRAM_ID,
                 GEOGRAPHY_MASTER_ID,
                 ACTL_INVENTORY_AGE_AVG)
              VALUES
                (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
                 RECS.INVENTORY_DATE,
                 RECS.INVENTORY_HOUR,
                 RECS.CFG_UOW_ID,
                 RECS.PROJECT_ID,
                 RECS.PROGRAM_ID,
                 RECS.GEOGRAPHY_MASTER_ID,
                 RECS.AVG_AGE);
          END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Avg Age - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Avg Age - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END; </sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>658</xloc>
      <yloc>695</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Inventory Min,Max, etc</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
      SELECT X.INVENTORY_DATE,
       X.INVENTORY_HOUR,
       X.CFG_UOW_ID,
       X.PROJECT_ID,
       X.PROGRAM_ID,
       X.GEOGRAPHY_MASTER_ID,
       X.INVENTORY_COUNT,
       X.INV_AGE_MIN,
       X.INV_AGE_MAX,
       X.INV_AGE_MEAN,
       X.INV_AGE_MEDIAN,
       X.INV_AGE_STDDEV,
       (SELECT ACTUALS_ID
          FROM PP_F_ACTUALS
         WHERE D_DATE = X.INVENTORY_DATE
           AND D_HOUR = X.INVENTORY_HOUR
           AND UOW_ID = X.CFG_UOW_ID
           AND PROJECT_ID = X.PROJECT_ID
           AND PROGRAM_ID = X.PROGRAM_ID
           AND GEOGRAPHY_MASTER_ID = X.GEOGRAPHY_MASTER_ID) AS ACTUALS_ID
  FROM (SELECT DISTINCT INVENTORY.INVENTORY_DATE,
                        0 AS INVENTORY_HOUR,
                        INVENTORY.CFG_UOW_ID,
                        SUM(INVENTORY.INVENTORY_COUNT) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) as INVENTORY_COUNT,
                        MIN(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) AS INV_AGE_MIN,
                        MAX(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) AS INV_AGE_MAX,
                        AVG(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) AS INV_AGE_MEAN,
                        MEDIAN(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) AS INV_AGE_MEDIAN,
                        STDDEV(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.CFG_UOW_ID) AS INV_AGE_STDDEV,
                        (SELECT CFG_PROJECT_CONFIG_ID
                           FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                        (SELECT CFG_PROGRAM_CONFIG_ID
                           FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                        (SELECT CFG_GEOGRAPHY_CONFIG_ID
                           FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
          FROM (SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
                       UOW.CFG_UOW_ID,
                       1 AS INVENTORY_COUNT,
                       CASE
                         WHEN UOW.AGE_DAYS_TYPE = 'BUS' THEN 
                           BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH),TRUNC(SYSDATE))
                         ELSE
                          (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL)  
                       END AS INV_AGE
                  FROM PP_CFG_UNIT_OF_WORK UOW
                 INNER JOIN PP_D_UOW_SOURCE_REF USR
                    ON UOW.CFG_UOW_ID = USR.UOW_ID
                   AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                 INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                    ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                   AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                 INNER JOIN PP_D_SOURCE S
                     ON SRT.SOURCE_ID = S.SOURCE_ID
                    AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                 INNER JOIN CORP_ETL_MFB_BATCH MFB
                     ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                        UPPER(TRIM(MFB.BATCH_TYPE))*/
                 WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                   AND ASSD_SCAN_BATCH IS NOT NULL
                   AND ASED_SCAN_BATCH IS NULL
                   AND UOW.HOURLY_FLAG = 'N') INVENTORY
        
        UNION ALL
        SELECT DISTINCT INVENTORY.INVENTORY_DATE,
                        TO_NUMBER(INVENTORY.INVENTORY_HOUR) AS INVENTORY_HOUR,
                        INVENTORY.CFG_UOW_ID,
                        SUM(INVENTORY.INVENTORY_COUNT) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) as INVENTORY_COUNT,
                        MIN(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) AS INV_AGE_MIN,
                        MAX(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) AS INV_AGE_MAX,
                        AVG(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) AS INV_AGE_MEAN,
                        MEDIAN(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) AS INV_AGE_MEDIAN,
                        STDDEV(INVENTORY.INV_AGE) OVER(PARTITION BY INVENTORY.INVENTORY_DATE, INVENTORY.INVENTORY_HOUR, INVENTORY.CFG_UOW_ID) AS INV_AGE_STDDEV,
                        (SELECT CFG_PROJECT_CONFIG_ID
                           FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                        (SELECT CFG_PROGRAM_CONFIG_ID
                           FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                        (SELECT CFG_GEOGRAPHY_CONFIG_ID
                           FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
          FROM (SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
                       TO_CHAR(SYSDATE, 'HH24') AS INVENTORY_HOUR,
                       UOW.CFG_UOW_ID,
                       1 AS INVENTORY_COUNT,
                       CASE
                         WHEN UOW.AGE_DAYS_TYPE = 'BUS' THEN 
                           BUS_DAYS_BETWEEN(TRUNC(ASSD_SCAN_BATCH),TRUNC(SYSDATE))
                         ELSE
                          (SELECT TRUNC(SYSDATE) - TRUNC(ASSD_SCAN_BATCH) AS AGE FROM DUAL)  
                       END AS INV_AGE
                  FROM PP_CFG_UNIT_OF_WORK UOW
                 INNER JOIN PP_D_UOW_SOURCE_REF USR
                    ON UOW.CFG_UOW_ID = USR.UOW_ID
                   AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                 INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                    ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                   AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                INNER JOIN PP_D_SOURCE S
                   ON SRT.SOURCE_ID = S.SOURCE_ID
                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                INNER JOIN CORP_ETL_MFB_BATCH MFB
                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                 WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                   AND ASSD_SCAN_BATCH IS NOT NULL
                   AND ASED_SCAN_BATCH IS NULL
                   AND UOW.HOURLY_FLAG = 'Y') INVENTORY) X
    ) 
    LOOP
        CASE
            WHEN (RECS.ACTUALS_ID >=0) THEN 
              UPDATE PP_F_ACTUALS
                 SET ACTL_INVENTORY=RECS.INVENTORY_COUNT,
                     ACTL_INVENTORY_AGE_MIN=RECS.INV_AGE_MIN,
                     ACTL_INVENTORY_AGE_MAX=RECS.INV_AGE_MAX,
                     ACTL_INVENTORY_AGE_MEAN=RECS.INV_AGE_MEAN,
                     ACTL_INVENTORY_AGE_MEDIAN=RECS.INV_AGE_MEDIAN,
                     ACTL_INVENTORY_AGE_SD=RECS.INV_AGE_STDDEV
               WHERE ACTUALS_ID=RECS.ACTUALS_ID;
            ELSE 
              INSERT INTO PP_F_ACTUALS
                (ACTUALS_ID,
                 D_DATE,
                 D_HOUR,
                 UOW_ID,
                 PROJECT_ID,
                 PROGRAM_ID,
                 GEOGRAPHY_MASTER_ID,
         ACTL_INVENTORY,
                 ACTL_INVENTORY_AGE_MIN,
                 ACTL_INVENTORY_AGE_MAX,
                 ACTL_INVENTORY_AGE_MEAN,
                 ACTL_INVENTORY_AGE_MEDIAN,
                 ACTL_INVENTORY_AGE_SD)
              VALUES
                (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
                 RECS.INVENTORY_DATE,
                 RECS.INVENTORY_HOUR,
                 RECS.CFG_UOW_ID,
                 RECS.PROJECT_ID,
                 RECS.PROGRAM_ID,
                 RECS.GEOGRAPHY_MASTER_ID,
                 RECS.INVENTORY_COUNT,
         RECS.INV_AGE_MIN,
                 RECS.INV_AGE_MAX,
                 RECS.INV_AGE_MEAN,
                 RECS.INV_AGE_MEDIAN,
                 RECS.INV_AGE_STDDEV);
          END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Min,Max, etc - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Min,Max, etc - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>767</xloc>
      <yloc>505</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Actual Details Arrivals</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
        SELECT X.D_DATE, X.D_HOUR, X.USR_ID, X.BATCH_ID, X.ACTUAL_CNT, X.COMPLETE_DATE, X.JEOPARDY_FLAG
          FROM (SELECT DISTINCT TRUNC(ASSD_SCAN_BATCH) AS D_DATE,
                                0 AS D_HOUR,
                                USR.USR_ID,
                                MFB.BATCH_ID,
                                TRUNC(MFB.ASED_SCAN_BATCH) AS COMPLETE_DATE,
                                1 AS ACTUAL_CNT,
                                CASE 
                                  WHEN BUS_DAYS_BETWEEN(TRUNC(MFB.ASSD_SCAN_BATCH),NVL(MFB.ASED_SCAN_BATCH,TRUNC(SYSDATE))) >= UOW.JEOPARDY_INV_AGE THEN
                                    'Y'
                                  ELSE
                                    'N'
                                 END AS JEOPARDY_FLAG
                  FROM PP_CFG_UNIT_OF_WORK UOW
                 INNER JOIN PP_D_UOW_SOURCE_REF USR
                    ON UOW.CFG_UOW_ID = USR.UOW_ID
                   AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                 INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                    ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                   AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                 WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                   AND UOW.HOURLY_FLAG = 'N'
                UNION ALL
                SELECT DISTINCT TRUNC(ASSD_SCAN_BATCH) AS D_DATE,
                                TO_NUMBER(TO_CHAR(ASSD_SCAN_BATCH, 'HH24')) AS D_HOUR,
                                USR.USR_ID,
                                MFB.BATCH_ID,
                                TRUNC(MFB.ASED_SCAN_BATCH) AS COMPLETE_DATE,
                                1 AS ACTUAL_CNT,
                                CASE 
                                  WHEN BUS_DAYS_BETWEEN(TRUNC(MFB.ASSD_SCAN_BATCH),NVL(MFB.ASED_SCAN_BATCH,TRUNC(SYSDATE))) >= UOW.JEOPARDY_INV_AGE THEN
                                    'Y'
                                  ELSE
                                    'N'
                                 END AS JEOPARDY_FLAG
                  FROM PP_CFG_UNIT_OF_WORK UOW
                 INNER JOIN PP_D_UOW_SOURCE_REF USR
                    ON UOW.CFG_UOW_ID = USR.UOW_ID
                   AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                 INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                    ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                   AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                 WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                   AND UOW.HOURLY_FLAG = 'Y') X
                 WHERE NOT EXISTS (SELECT DAD_ID
                        FROM PP_D_ACTUAL_DETAILS
                       WHERE D_DATE = X.D_DATE
                         AND D_HOUR = X.D_HOUR
                         AND USR_ID = X.USR_ID
                         AND SOURCE_DETAIL_ID = X.BATCH_ID)  
         ORDER BY X.D_DATE, X.D_HOUR
) 
    LOOP
              INSERT INTO PP_D_ACTUAL_DETAILS
                (DAD_ID,
                 D_DATE,
                 D_HOUR,
                 USR_ID,
                 SOURCE_DETAIL_ID,
                 ACTUAL_ARRIVAL,
                 ACTUAL_COMPLETION,
                 ACTUAL_INVENTORY,
                 ACTUAL_INVENTORY_AGE,
                 ACTUAL_HANDLE_TIME,
                 ACTUAL_STAFF_HOURS,
                 BUCKET_START_DATE,
                 BUCKET_END_DATE,
                 JEOPARDY_FLAG)
              VALUES
                (SEQ_PP_DAD_ID.NEXTVAL,
                 RECS.D_DATE,
                 RECS.D_HOUR,
                 RECS.USR_ID,
                 RECS.BATCH_ID,
                 1,
                 0,
                 1,
                 0,
                 0,
                 0,
                 RECS.D_DATE,
                 TO_DATE('07/07/2077','MM/DD/YYYY'),
                 RECS.JEOPARDY_FLAG
                 );
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Actual Details Arrivals - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Actual Details Arrivals - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END; </sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>385</xloc>
      <yloc>711</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Actual Details Completions</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
        SELECT DAD.DAD_ID,
        DAD.SOURCE_DETAIL_ID,
        DAD.D_HOUR,
        DAD.D_DATE,
        DAD.USR_ID,
        MFB.BATCH_ID,
        TRUNC(MFB.ASED_SCAN_BATCH) AS COMPLETE_DATE,
        CASE
          WHEN BUS_DAYS_BETWEEN(TRUNC(MFB.ASSD_SCAN_BATCH),
                                NVL(MFB.ASED_SCAN_BATCH, TRUNC(SYSDATE))) >=
               UOW.JEOPARDY_INV_AGE THEN
           'Y'
          ELSE
           'N'
        END AS JEOPARDY_FLAG,
        CASE WHEN TRUNC(MFB.ASSD_SCAN_BATCH) = TRUNC(MFB.ASED_SCAN_BATCH)
         THEN 'Y'
           ELSE 'N'
        END AS COMPLETED_SAME_DAY
   FROM PP_D_SOURCE S
  INNER JOIN PP_D_SOURCE_REF_TYPE SRT
     ON SRT.SOURCE_ID = S.SOURCE_ID
    AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
    AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
  INNER JOIN PP_D_UOW_SOURCE_REF USR
     ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
    AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
  INNER JOIN PP_D_UNIT_OF_WORK UOW
     ON UOW.UOW_ID = USR.UOW_ID
  INNER JOIN PP_D_ACTUAL_DETAILS DAD
     ON DAD.USR_ID = USR.USR_ID
  INNER JOIN CORP_ETL_MFB_BATCH MFB
     ON MFB.BATCH_ID = DAD.SOURCE_DETAIL_ID
  INNER JOIN PP_D_UNIT_OF_WORK UOW
     ON UOW.UOW_ID = USR.UOW_ID
  WHERE DAD.BUCKET_END_DATE = TO_DATE('07/07/2077', 'MM/DD/YYYY')
    AND (MFB.ASED_SCAN_BATCH IS NOT NULL OR CASE
          WHEN BUS_DAYS_BETWEEN(TRUNC(MFB.ASSD_SCAN_BATCH),
                                NVL(MFB.ASED_SCAN_BATCH, TRUNC(SYSDATE))) >=
               UOW.JEOPARDY_INV_AGE THEN
           'Y'
          ELSE
           'N'
        END &lt;&gt; DAD.JEOPARDY_FLAG)

               
) 
    LOOP
         CASE WHEN RECS.COMPLETE_DATE IS NOT NULL AND RECS.COMPLETED_SAME_DAY='Y' THEN
                UPDATE PP_D_ACTUAL_DETAILS
                   SET BUCKET_END_DATE=RECS.COMPLETE_DATE, ACTUAL_INVENTORY=0, ACTUAL_COMPLETION=1
                 WHERE DAD_ID=RECS.DAD_ID;
         ELSE
                 UPDATE PP_D_ACTUAL_DETAILS
                       SET BUCKET_END_DATE=
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN TRUNC(SYSDATE)
                            ELSE RECS.COMPLETE_DATE
                       END
                     WHERE DAD_ID=RECS.DAD_ID;
               
                 INSERT INTO PP_D_ACTUAL_DETAILS
                      (DAD_ID,
                       D_DATE,
                       D_HOUR,
                       USR_ID,
                       SOURCE_DETAIL_ID,
                       ACTUAL_ARRIVAL,
                       ACTUAL_COMPLETION,
                       ACTUAL_INVENTORY,
                       ACTUAL_INVENTORY_AGE,
                       ACTUAL_HANDLE_TIME,
                       ACTUAL_STAFF_HOURS,
                       BUCKET_START_DATE,
                       BUCKET_END_DATE,
                       JEOPARDY_FLAG)
                    VALUES
                      (SEQ_PP_DAD_ID.NEXTVAL,
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN TRUNC(SYSDATE)
                            ELSE RECS.COMPLETE_DATE
                       END,
                       RECS.D_HOUR,
                       RECS.USR_ID,
                       RECS.BATCH_ID,
                       0,
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN 0
                            ELSE 1
                       END,
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN 1
                            ELSE 0
                       END,
                       0,
                       0,
                       0,
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN TRUNC(SYSDATE)
                            ELSE RECS.COMPLETE_DATE
                       END,
                       CASE
                           WHEN RECS.COMPLETE_DATE IS NULL THEN TO_DATE('07/07/2077','MM/DD/YYYY')
                            ELSE RECS.COMPLETE_DATE
                       END,
                       RECS.JEOPARDY_FLAG                 
                       );
         END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Actual Details Completions - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Actual Details Completions - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>233</xloc>
      <yloc>597</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Actuals Backfill Missing Days</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR 
    RECS IN
    (               
                 WITH DAYS AS
                  (SELECT TRUNC(SYSDATE - 365) + ROWNUM missing_date
                     FROM ALL_OBJECTS
                    WHERE ROWNUM &lt;= 365),
                 ALL_DAYS AS
                  (SELECT DAYS.MISSING_DATE FROM DAYS)
                 
                 SELECT Y.D_DATE,
                        Y.D_HOUR,
                        Y.UOW_ID,
                        Y.PROJECT_ID,
                        Y.PROGRAM_ID,
                        Y.GEOGRAPHY_MASTER_ID
                   FROM (SELECT AD.MISSING_DATE AS D_DATE,
                                X.CFG_UOW_ID AS UOW_ID,
                                0 AS D_HOUR,
                                (SELECT CFG_PROJECT_CONFIG_ID
                                   FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                                (SELECT CFG_PROGRAM_CONFIG_ID
                                   FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                                (SELECT CFG_GEOGRAPHY_CONFIG_ID
                                   FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                           FROM ALL_DAYS AD,
                                (SELECT DISTINCT UOW.CFG_UOW_ID
                                   FROM PP_CFG_UNIT_OF_WORK UOW
                                  INNER JOIN PP_D_UOW_SOURCE_REF USR
                                     ON UOW.CFG_UOW_ID = USR.UOW_ID
                                    AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND
                                        USR.END_DATE
                                  INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                                     ON USR.SOURCE_REF_TYPE_ID =
                                        SRT.SOURCE_REF_TYPE_ID
                                    AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                  INNER JOIN PP_D_SOURCE S
                                     ON SRT.SOURCE_ID = S.SOURCE_ID
                                    AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN') X) Y
                  WHERE (SELECT ACTUALS_ID
                           FROM PP_F_ACTUALS
                          WHERE D_DATE = Y.D_DATE
                            AND D_HOUR = Y.D_HOUR
                            AND UOW_ID = Y.UOW_ID
                            AND PROJECT_ID = Y.PROJECT_ID
                            AND PROGRAM_ID = Y.PROGRAM_ID
                            AND GEOGRAPHY_MASTER_ID = Y.GEOGRAPHY_MASTER_ID) IS NULL
                  ORDER BY Y.D_DATE, Y.D_HOUR, Y.UOW_ID
    ) 
    LOOP  
        INSERT INTO MAXDAT.PP_F_ACTUALS
          (ACTUALS_ID,
           D_DATE,
           D_HOUR,
           UOW_ID,
           PROJECT_ID,
           PROGRAM_ID,
           GEOGRAPHY_MASTER_ID,
           ACTL_ARRIVAL,
           ACTL_COMPLETION,
           ACTL_INVENTORY,
           ACTL_INVENTORY_AGE_AVG,
           ACTL_INVENTORY_AGE_MIN,
           ACTL_INVENTORY_AGE_MAX,
           ACTL_INVENTORY_AGE_MEAN,
           ACTL_INVENTORY_AGE_MEDIAN,
           ACTL_INVENTORY_AGE_SD,
           ACTL_INVENTORY_JEOPARDY,
           ACTL_HANDLE_TIME_AVG,
           ACTL_HANDLE_TIME_MIN,
           ACTL_HANDLE_TIME_MAX,
           ACTL_HANDLE_TIME_MEAN,
           ACTL_HANDLE_TIME_MEDIAN,
           ACTL_HANDLE_TIME_SD,
           ACTL_STAFF_HOURS)
        VALUES
          (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
           RECS.D_DATE,
           RECS.D_HOUR,
           RECS.UOW_ID,
           RECS.PROJECT_ID,
           RECS.PROGRAM_ID,
           RECS.GEOGRAPHY_MASTER_ID,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0);
    END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Actuals Backfill Missing Days - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Actuals Backfill Missing Days - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
	  RAISE;
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>237</xloc>
      <yloc>410</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Success</name>
      <description/>
      <type>SUCCESS</type>
      <attributes/>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>92</xloc>
      <yloc>410</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Arrivals</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
      SELECT X.CREATE_DATE, X.CREATE_HOUR, X.CFG_UOW_ID, X.PROJECT_ID, X.PROGRAM_ID, X.GEOGRAPHY_MASTER_ID,X.CREATION_COUNT, 
        (SELECT ACTUALS_ID FROM PP_F_ACTUALS WHERE D_DATE=X.CREATE_DATE AND D_HOUR=X.CREATE_HOUR AND UOW_ID=X.CFG_UOW_ID AND PROJECT_ID=X.PROJECT_ID AND PROGRAM_ID=X.PROGRAM_ID AND GEOGRAPHY_MASTER_ID=X.GEOGRAPHY_MASTER_ID) AS ACTUALS_ID 
        FROM
        (
        SELECT ARRIVAL.CREATE_DATE,
                              0 AS CREATE_HOUR,
                              ARRIVAL.CFG_UOW_ID,
                              ARRIVAL.CREATION_COUNT,
                              (SELECT CFG_PROJECT_CONFIG_ID
                                 FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                              (SELECT CFG_PROGRAM_CONFIG_ID
                                 FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                              (SELECT CFG_GEOGRAPHY_CONFIG_ID
                                 FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                         FROM (SELECT TRUNC(ASSD_SCAN_BATCH) AS CREATE_DATE,
                                      UOW.CFG_UOW_ID,
                                      COUNT(1) AS CREATION_COUNT
                                 FROM PP_CFG_UNIT_OF_WORK UOW
                                INNER JOIN PP_D_UOW_SOURCE_REF USR
                                   ON UOW.CFG_UOW_ID = USR.UOW_ID
                                  AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND
                                      USR.END_DATE
                                INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                                   ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                                  AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1
                                   /*ON UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                                WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                                  AND UOW.HOURLY_FLAG = 'N'
                                GROUP BY TRUNC(ASSD_SCAN_BATCH), UOW.CFG_UOW_ID) ARRIVAL
                       UNION ALL
                       SELECT ARRIVAL.CREATE_DATE,
                              TO_NUMBER(ARRIVAL.CREATE_HOUR),
                              ARRIVAL.CFG_UOW_ID,
                              ARRIVAL.CREATION_COUNT,
                              (SELECT CFG_PROJECT_CONFIG_ID
                                 FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                              (SELECT CFG_PROGRAM_CONFIG_ID
                                 FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                              (SELECT CFG_GEOGRAPHY_CONFIG_ID
                                 FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                         FROM (SELECT TRUNC(ASSD_SCAN_BATCH) AS CREATE_DATE,
                                      TO_CHAR(ASSD_SCAN_BATCH, 'HH24') AS CREATE_HOUR,
                                      UOW.CFG_UOW_ID,
                                      COUNT(1) AS CREATION_COUNT
                                 FROM PP_CFG_UNIT_OF_WORK UOW
                                INNER JOIN PP_D_UOW_SOURCE_REF USR
                                   ON UOW.CFG_UOW_ID = USR.UOW_ID
                                  AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND
                                      USR.END_DATE
                                INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                                   ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                                  AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH TYPE'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH STG'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1
                                   /*ON UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                                WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                                  AND UOW.HOURLY_FLAG = 'Y'
                                GROUP BY TRUNC(ASSD_SCAN_BATCH),
                                         TO_CHAR(ASSD_SCAN_BATCH, 'HH24'),
                                         UOW.CFG_UOW_ID ) ARRIVAL
        ) X
    ) 
    LOOP
        CASE
            WHEN (RECS.ACTUALS_ID >=0) THEN 
              UPDATE PP_F_ACTUALS
                 SET ACTL_ARRIVAL = RECS.CREATION_COUNT
               WHERE ACTUALS_ID=RECS.ACTUALS_ID;
            ELSE 
              INSERT INTO PP_F_ACTUALS
                (ACTUALS_ID,
                 D_DATE,
                 D_HOUR,
                 UOW_ID,
                 PROJECT_ID,
                 PROGRAM_ID,
                 GEOGRAPHY_MASTER_ID,
                 ACTL_ARRIVAL)
              VALUES
                (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
                 RECS.CREATE_DATE,
                 RECS.CREATE_HOUR,
                 RECS.CFG_UOW_ID,
                 RECS.PROJECT_ID,
                 RECS.PROGRAM_ID,
                 RECS.GEOGRAPHY_MASTER_ID,
                 RECS.CREATION_COUNT);
          END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Arrivals - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Arrivals - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>334</xloc>
      <yloc>272</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Completions</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
      SELECT X.COMPLETE_DATE, X.COMPLETE_HOUR, X.CFG_UOW_ID, X.PROJECT_ID, X.PROGRAM_ID, X.GEOGRAPHY_MASTER_ID,X.COMPLETION_COUNT, 
        (SELECT ACTUALS_ID FROM PP_F_ACTUALS WHERE D_DATE=X.COMPLETE_DATE AND D_HOUR=X.COMPLETE_HOUR AND UOW_ID=X.CFG_UOW_ID AND PROJECT_ID=X.PROJECT_ID AND PROGRAM_ID=X.PROGRAM_ID AND GEOGRAPHY_MASTER_ID=X.GEOGRAPHY_MASTER_ID) AS ACTUALS_ID 
        FROM
        (
            SELECT COMPLETIONS.COMPLETE_DATE,
                              0 AS COMPLETE_HOUR,
                              COMPLETIONS.CFG_UOW_ID,
                              COMPLETIONS.COMPLETION_COUNT,
                              (SELECT CFG_PROJECT_CONFIG_ID
                                 FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                              (SELECT CFG_PROGRAM_CONFIG_ID
                                 FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                              (SELECT CFG_GEOGRAPHY_CONFIG_ID
                                 FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                         FROM (SELECT TRUNC(ASED_SCAN_BATCH) AS COMPLETE_DATE,
                                      UOW.CFG_UOW_ID,
                                      COUNT(1) AS COMPLETION_COUNT
                                 FROM PP_CFG_UNIT_OF_WORK UOW
                                INNER JOIN PP_D_UOW_SOURCE_REF USR
                                   ON UOW.CFG_UOW_ID = USR.UOW_ID
                                  AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND
                                      USR.END_DATE
                                INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                                   ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                                  AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1
                                WHERE ASED_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                                  AND UOW.HOURLY_FLAG = 'N'
                                GROUP BY TRUNC(ASED_SCAN_BATCH), UOW.CFG_UOW_ID) COMPLETIONS
                       UNION ALL
                       SELECT COMPLETIONS.COMPLETE_DATE,
                              TO_NUMBER(COMPLETIONS.COMPLETE_HOUR) AS COMPLETE_HOUR,
                              COMPLETIONS.CFG_UOW_ID,
                              COMPLETIONS.COMPLETION_COUNT,
                              (SELECT CFG_PROJECT_CONFIG_ID
                                 FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                              (SELECT CFG_PROGRAM_CONFIG_ID
                                 FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                              (SELECT CFG_GEOGRAPHY_CONFIG_ID
                                 FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                         FROM (SELECT TRUNC(ASED_SCAN_BATCH) AS COMPLETE_DATE,
                                      TO_CHAR(ASED_SCAN_BATCH, 'HH24') AS COMPLETE_HOUR,
                                      UOW.CFG_UOW_ID,
                                      COUNT(1) AS COMPLETION_COUNT
                                 FROM PP_CFG_UNIT_OF_WORK UOW
                                INNER JOIN PP_D_UOW_SOURCE_REF USR
                                   ON UOW.CFG_UOW_ID = USR.UOW_ID
                                  AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND
                                      USR.END_DATE
                                INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                                   ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                                  AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                                INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1
                                WHERE ASED_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                                  AND UOW.HOURLY_FLAG = 'Y'
                                GROUP BY TRUNC(ASED_SCAN_BATCH),
                                         TO_CHAR(ASED_SCAN_BATCH, 'HH24'),
                                         UOW.CFG_UOW_ID) COMPLETIONS
        ) X
    ) 
    LOOP
        CASE
            WHEN (RECS.ACTUALS_ID >=0) THEN 
              UPDATE PP_F_ACTUALS
                 SET ACTL_COMPLETION = RECS.COMPLETION_COUNT
               WHERE ACTUALS_ID=RECS.ACTUALS_ID;
            ELSE 
              INSERT INTO PP_F_ACTUALS
                (ACTUALS_ID,
                 D_DATE,
                 D_HOUR,
                 UOW_ID,
                 PROJECT_ID,
                 PROGRAM_ID,
                 GEOGRAPHY_MASTER_ID,
                 ACTL_COMPLETION)
              VALUES
                (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
                 RECS.COMPLETE_DATE,
                 RECS.COMPLETE_HOUR,
                 RECS.CFG_UOW_ID,
                 RECS.PROJECT_ID,
                 RECS.PROGRAM_ID,
                 RECS.GEOGRAPHY_MASTER_ID,
                 RECS.COMPLETION_COUNT);
          END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Completions - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Completions - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END;    </sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>536</xloc>
      <yloc>266</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>MFB Scan Inventory Jeopardy</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DECLARE
V_ERRCODE varchar2(50);
V_ERRMSG varchar2(3000);

BEGIN
  FOR RECS IN 
    (
      SELECT X.INVENTORY_DATE,
             X.INVENTORY_HOUR,
             X.CFG_UOW_ID,
             X.PROJECT_ID,
             X.PROGRAM_ID,
             X.GEOGRAPHY_MASTER_ID,
             X.INVENTORY_COUNT,
             (SELECT ACTUALS_ID
                FROM PP_F_ACTUALS
               WHERE D_DATE = X.INVENTORY_DATE
                 AND D_HOUR = X.INVENTORY_HOUR
                 AND UOW_ID = X.CFG_UOW_ID
                 AND PROJECT_ID = X.PROJECT_ID
                 AND PROGRAM_ID = X.PROGRAM_ID
                 AND GEOGRAPHY_MASTER_ID = X.GEOGRAPHY_MASTER_ID) AS ACTUALS_ID
        FROM (SELECT INVENTORY.INVENTORY_DATE,
                     0 AS INVENTORY_HOUR,
                     INVENTORY.CFG_UOW_ID,
                     INVENTORY.INVENTORY_COUNT,
                     (SELECT CFG_PROJECT_CONFIG_ID FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                     (SELECT CFG_PROGRAM_CONFIG_ID FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                     (SELECT CFG_GEOGRAPHY_CONFIG_ID FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                FROM (SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
                             UOW.CFG_UOW_ID,
                             COUNT(1) AS INVENTORY_COUNT
                        FROM PP_CFG_UNIT_OF_WORK UOW
                       INNER JOIN PP_D_UOW_SOURCE_REF USR
                          ON UOW.CFG_UOW_ID = USR.UOW_ID
                         AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                       INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                          ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                         AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                       INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                       WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                          AND ASSD_SCAN_BATCH IS NOT NULL
                          AND ASED_SCAN_BATCH IS NULL 
                          AND BUS_DAYS_BETWEEN(MFB.ASSD_SCAN_BATCH,SYSDATE) >= UOW.JEOPARDY_INV_AGE
                          AND UOW.HOURLY_FLAG = 'N'
                       GROUP BY TRUNC(SYSDATE),
                                UOW.CFG_UOW_ID) INVENTORY
              UNION ALL
              SELECT INVENTORY.INVENTORY_DATE,
                     TO_NUMBER(INVENTORY.INVENTORY_HOUR) AS INVENTORY_HOUR,
                     INVENTORY.CFG_UOW_ID,
                     INVENTORY.INVENTORY_COUNT,
                     (SELECT CFG_PROJECT_CONFIG_ID FROM PP_CFG_PROJECT_CONFIG) AS PROJECT_ID,
                     (SELECT CFG_PROGRAM_CONFIG_ID FROM PP_CFG_PROGRAM_CONFIG) AS PROGRAM_ID,
                     (SELECT CFG_GEOGRAPHY_CONFIG_ID FROM PP_CFG_GEOGRAPHY_CONFIG) AS GEOGRAPHY_MASTER_ID
                FROM (SELECT TRUNC(SYSDATE) AS INVENTORY_DATE,
                             TO_CHAR(SYSDATE, 'HH24') AS INVENTORY_HOUR,
                             UOW.CFG_UOW_ID,
                             COUNT(1) AS INVENTORY_COUNT
                        FROM PP_CFG_UNIT_OF_WORK UOW
                       INNER JOIN PP_D_UOW_SOURCE_REF USR
                          ON UOW.CFG_UOW_ID = USR.UOW_ID
                         AND SYSDATE BETWEEN USR.EFFECTIVE_DATE AND USR.END_DATE
                       INNER JOIN PP_D_SOURCE_REF_TYPE SRT
                          ON USR.SOURCE_REF_TYPE_ID = SRT.SOURCE_REF_TYPE_ID
                         AND SRT.SOURCE_REF_TYPE_NAME = 'BATCH CLASS'
                                INNER JOIN PP_D_SOURCE S
                                   ON SRT.SOURCE_ID = S.SOURCE_ID
                                  AND S.SOURCE_NAME = 'MAIL/FAX BATCH SCAN'
                       INNER JOIN CORP_ETL_MFB_BATCH MFB
                                   ON 1=1/*UPPER(TRIM(USR.SOURCE_REF_VALUE)) =
                                      UPPER(TRIM(MFB.BATCH_TYPE))*/
                       WHERE ASSD_SCAN_BATCH >= TRUNC(SYSDATE - 365) --CHANGE TO 7 DAYS
                          AND ASSD_SCAN_BATCH IS NOT NULL
                          AND ASED_SCAN_BATCH IS NULL  
                          AND BUS_DAYS_BETWEEN(MFB.ASSD_SCAN_BATCH,SYSDATE) >= UOW.JEOPARDY_INV_AGE
                          AND UOW.HOURLY_FLAG = 'Y'
                       GROUP BY TRUNC(SYSDATE),
                                TO_CHAR(SYSDATE, 'HH24'),
                                UOW.CFG_UOW_ID) INVENTORY) X
    ) 
    LOOP
        CASE
            WHEN (RECS.ACTUALS_ID >=0) THEN 
              UPDATE PP_F_ACTUALS
                 SET ACTL_INVENTORY_JEOPARDY = RECS.INVENTORY_COUNT
               WHERE ACTUALS_ID=RECS.ACTUALS_ID;
            ELSE 
              INSERT INTO PP_F_ACTUALS
                (ACTUALS_ID,
                 D_DATE,
                 D_HOUR,
                 UOW_ID,
                 PROJECT_ID,
                 PROGRAM_ID,
                 GEOGRAPHY_MASTER_ID,
                 ACTL_INVENTORY_JEOPARDY)
              VALUES
                (SEQ_PP_F_ACTUALS_ID.NEXTVAL,
                 RECS.INVENTORY_DATE,
                 RECS.INVENTORY_HOUR,
                 RECS.CFG_UOW_ID,
                 RECS.PROJECT_ID,
                 RECS.PROGRAM_ID,
                 RECS.GEOGRAPHY_MASTER_ID,
                 RECS.INVENTORY_COUNT);
          END CASE;
  END LOOP;
  INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'LOG',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Jeopardy - Processed', SYSDATE); 
  COMMIT;


EXCEPTION
WHEN OTHERS 
  THEN 
    ROLLBACK;
    V_ERRCODE := SQLCODE;
    V_ERRMSG := SUBSTR(SQLERRM, 1, 3000);                 
    INSERT INTO PP_STG_LOG
      (PP_STG_ID, LOG_TYPE, PROCESS_DATE, PROCESS, DESCRIPTION, CREATE_DATE)
      VALUES (SEQ_PP_STG_ID.NEXTVAL,'ERR',SYSDATE,'PP_Actuals_Process','MFB Scan Inventory Jeopardy - ' || V_ERRCODE || ' : ' || V_ERRMSG,SYSDATE); 
      COMMIT; 
    RAISE;
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>MAXDAT</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>700</xloc>
      <yloc>346</yloc>
      <attributes_kjc/>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>Set Log Vars 23</from>
      <to>Write Log 14</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Avg Age</from>
      <to>MFB Scan Actual Details Arrivals</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actuals Backfill Missing Days</from>
      <to>Success</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Min,Max, etc</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Avg Age</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actual Details Arrivals</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actuals Backfill Missing Days</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Set Log Vars 23</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Write Log 14</from>
      <to>MFB Scan Arrivals</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Arrivals</from>
      <to>MFB Scan Completions</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Completions</from>
      <to>MFB Scan Inventory Jeopardy</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Jeopardy</from>
      <to>MFB Scan Inventory Min,Max, etc</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Arrivals</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Completions</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Jeopardy</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Inventory Min,Max, etc</from>
      <to>MFB Scan Inventory Avg Age</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actual Details Arrivals</from>
      <to>MFB Scan Actual Details Completions</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actual Details Completions</from>
      <to>MFB Scan Actuals Backfill Missing Days</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>MFB Scan Actual Details Completions</from>
      <to>Abort job 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes/>
</job>
