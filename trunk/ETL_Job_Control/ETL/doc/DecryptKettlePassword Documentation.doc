
Compiling and Deploying KettleDecryptPassword

1. Copy the KettleDecryptPassword.java file into the directory $MAXDAT_KETTLE_DIR/lib on the server. 
   --note: $MAXDAT_KETTLE_DIR should = "/u01/app/appadmin/product/pentaho_8.3/data-integration/"
2. Run /u01/app/appadmin/product/java/jdk1.8.0_192/bin/javac -cp ./*:. KettleDecryptPassword.java
3. Leave the class file in this lib directory or move it to a different directory 
   --note: if you move it, you will need to add the classpath to its new directory in your classpath when you run the class
4. Copy the decr.sh bash script into the server directory from which you want to run it. Convert to unix file format.

Running KettleDecryptPassword

1. You can run KettleDecryptPassword directly as described in the usage notes in the java file:

Usage: java DecryptKettlePassword "Encrypted-Password" (note: the following must be included in the classpath:
     $MAXDAT_KETTLE_DIR/lib/*:$MAXDAT_KETTLE_DIR/lib;
     $MAXDAT_KETTL_DIR/plugins/pdi_core-plugins/*;
     $MAXDAT_KETTLE_DIR/plugins/ms-access-plugins/*;
     $MAXDAT_KETTLE_DIR/libswt/linux/x86_64/*;)
Input: a Kettle-encrypted password without the prefix "Encrypted " (for example a password encrypted by Encr.sh using -kettle as the first parameter);  
Output: the decrypted password

2. For example:
/u01/app/appadmin/product/java/jdk1.8.0_192/bin/java -cp /u01/app/appadmin/product/pentaho_8.3/data-integration/lib/*:/u01/app/appadmin/product/pentaho_8.3/data-integration/lib:/u01/app/appadmin/product/pentaho_8.3/data-integration/plugins/ms-access-plugins/*:/u01/app/appadmin/product/pentaho_8.3/data-integration/plugins/pdi-core-plugins/*:/u01/app/appadmin/product/pentaho_8.3/data-integration/libswt/linux/x86_64/* KettleDecryptPassword "2be98afc86aa7f2e4cb79ce52cb80a4df"

3. It is easiest to run fromm the bash script decr.sh, which exports all of the needed classpaths etc.: decr.sh "Encrypted-Password"


