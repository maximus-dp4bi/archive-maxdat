use role PI_DATA_INGEST_DEV_ALERT_USER;
use warehouse PUREINSIGHTS_DEV_LOAD_DAILY_WH;
use database PUREINSIGHTS_DEV;
use schema RAW;


CREATE or replace PROCEDURE INGESTPIDATASEGMENTS_V2(TABLENAME VARCHAR, STAGENAME VARCHAR, AWSFOLDERNAME VARCHAR,PROJECTID VARCHAR,PROJECTNAME VARCHAR, TRUNCATEFLAG BOOLEAN, REINGESTFLAG BOOLEAN,runFromBashFlag BOOLEAN, tableIngestType VARCHAR,tableKeyString VARCHAR)
	RETURNS VARCHAR
  	LANGUAGE javascript
  	EXECUTE AS CALLER
  	AS
  	$$  
  
  	var attempt=0;
  	var max_attempts=100;
  	var wait_seconds=30;
  	
  	var REINGEST_SFX = "";
    
	if (REINGESTFLAG)
	{
		REINGEST_SFX=" REINGEST";
	} 

	//set logging on
   	var sqlCommand = "set do_log = true;";
   	snowflake.execute ({sqlText: sqlCommand});

  	sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";

  	if (RUNFROMBASHFLAG) 
  	{
    	sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG_"+PROJECTID+"';";
   	}

   	snowflake.execute ({sqlText: sqlCommand});
     
	function log(projectid, object_category, object_name, status_string, msg)
	{
    	snowflake.createStatement({sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg]}).execute();
	}

 	//default stage
  	var stageName = STAGENAME;

  	if (! stageName)
  	{
    	stageName = 'PUREINSIGHTS_S3_2';
   	} 

	var LOG_CATEGORY="TABLE";
	if (REINGESTFLAG)
	{
   		LOG_CATEGORY="TABLE REINGEST";
	}

	//get list of files to ingest for this table

	var file_array=[];
 	var sqlCommand = "select filename, to_varchar(file_timestamp) from pi_files_to_ingest_" + PROJECTID + " where projectid = '"+PROJECTID+"' and tablename = '"+TABLENAME+"' and ingest_start_timestamp is null order by file_timestamp;";
    var createdSQL = snowflake.createStatement({sqlText: sqlCommand });
    var rs = createdSQL.execute();
   
   	while (rs.next()) 
    {
    	var fileName = rs.getColumnValue(1);
     	var file_ts = rs.getColumnValue(2)
     	file_array.push(fileName+";"+file_ts);
    }

 	var filesToIngestCount = file_array.length;
 
 	if (filesToIngestCount < 1)
 	{
  		log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"WARNING","Table " + TABLENAME + " has 0 files to ingest."); 
	} 
	else 
	{
		log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"INFO","filesToIngestCount: " + filesToIngestCount); 
 
		//tableingesttype
		//"truncate_insert","merge_no_deletes","merge_with_deletes", "insert"
 
		log(PROJECTID,"SQL"+REINGEST_SFX,TABLENAME,"INFO","table ingest type: " + TABLEINGESTTYPE); 

		if (TABLEINGESTTYPE == "merge_no_deletes")
		{

			//get keys
			//var keyString = "conversationId";

			var keyCounter = 0;
			var keyOnSQL = "";
			var selectKeySQL = "";
			var keyArray = TABLEKEYSTRING.split(";");

			for (const pKey of keyArray)
			{
				keyCounter++;

				if (keyCounter == 1)
				{
 					selectKeySQL = `SELECT parse_json(t.$1):`+pKey+` as pKey`+keyCounter+`,`;
 					keyOnSQL = `ON NVL(TO_CHAR(` +TABLENAME+`.raw:`+pKey+`),'') = NVL(TO_CHAR(bar.pKey`+keyCounter+`),'')`;
 				} 
 				else 
 				{
 					selectKeySQL += `parse_json(t.$1):`+pKey+` as pKey`+keyCounter+`,`;
 					keyOnSQL += ` AND NVL(TO_CHAR(` +TABLENAME+`.raw:`+pKey+`),'') = NVL(TO_CHAR(bar.pKey`+keyCounter+`),'')`;
 				}
			}

			//ingest files

			for (const fileinfo of file_array) 
			{
				var info_array = fileinfo.split(";");
				var filename = info_array[0];
				var file_timestamp = info_array[1];

			    log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO", "FILENAME="+filename+",FILE_TIMESTAMP="+file_timestamp);
			
				//update files to ingest table
   				var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'IN PROGRESS', status_msg = 'Ingestion is currently running...', ingest_start_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
   				log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
  
    			try 
    			{
            		snowflake.execute ({sqlText: sqlCommand});
                      
        		}
    			catch (err)  
    			{
        			log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err); 
        			return "99";
        		}
		
				attempt = 0;
		
				while (attempt <= max_attempts)
				{			
					if (attempt != 0)
					{
				       var sqlCommand = "call SYSTEM$WAIT("+wait_seconds+",'SECONDS');";
				       snowflake.execute ({sqlText: sqlCommand});
					}

					attempt++;
				
					try 
	  				{
				 	  				
						var sqlCommand = `MERGE INTO `+TABLENAME+` USING
						(
						 `+selectKeySQL+` parse_json(cast('{' || '"audioMuted":"'|| COALESCE(to_char(parse_json(t.$1):audioMuted),'') || '",' || '"conference":"'|| COALESCE(to_char(parse_json(t.$1):conference),'') || '",' || '"conversationId":"'|| COALESCE(to_char(parse_json(t.$1):conversationId),'') || '",' || '"disconnecttype":"'|| COALESCE(to_char(parse_json(t.$1):disconnecttype),'') || '",' || '"errorCode":"'|| COALESCE(to_char(parse_json(t.$1):errorCode),'') || '",' || '"participantid":"'|| COALESCE(to_char(parse_json(t.$1):participantid),'') || '",' || '"queueId":"'|| COALESCE(to_char(parse_json(t.$1):queueId),'') || '",' || '"segmentEndTime":"'|| COALESCE(to_char(parse_json(t.$1):segmentEndTime),'') || '",' || '"segmentStartTime":"'|| COALESCE(to_char(parse_json(t.$1):segmentStartTime),'') || '",' || '"duration":"'|| COALESCE(to_char(parse_json(t.$1):duration),'') || '",' || '"segmentType":"'|| COALESCE(to_char(parse_json(t.$1):segmentType),'') || '",' || '"sessionId":"'|| COALESCE(to_char(parse_json(t.$1):sessionId),'') || '",' || '"subject":"'|| COALESCE(to_char(parse_json(t.$1):subject),'') || '",' || '"wrapUpCode":"' || COALESCE(to_char(parse_json(t.$1):wrapUpCode),'') || '"}' as variant)) as newRecord
						from @`+stageName+`/`+TABLENAME+`/`+filename+` (PATTERN=>'.*.parquet', FILE_FORMAT => myformat2) t 
						) bar `+keyOnSQL+`
						and `+TABLENAME+`.projectid = '`+PROJECTID+`'
						WHEN MATCHED THEN
						 UPDATE SET `+TABLENAME+`.raw = bar.newRecord,`+TABLENAME+`.ingestiondatetime = convert_timezone('UTC','America/New_York',sysdate()),`+TABLENAME+`.ingestiondmloperation = 'UPDATE',`+TABLENAME+`.ingestionsource = '`+filename+`'
						 WHEN NOT MATCHED THEN
						 INSERT
						 (projectid, projectname, programid, programname,raw, ingestiondatetime, ingestiondmloperation, ingestionsource) VALUES
						 ('`+PROJECTID+`','`+PROJECTNAME+`',null,null,bar.newRecord,convert_timezone('UTC','America/New_York',sysdate()), 'INSERT', '`+filename+`');`;

						log(PROJECTID,"SQL"+REINGEST_SFX,TABLENAME,"INFO","SQL: " + sqlCommand); 
	  				
	  					snowflake.execute ({sqlText: sqlCommand});
	            	
	            		attempt = max_attempts + 1;

			  			//update files to ingest table

			  			var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'COMPLETE', status_msg = 'Ingestion completed successfully.', ingest_end_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
						log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
				  
				    	try 
				    	{
				        	snowflake.execute ({sqlText: sqlCommand});          
				        }
				    	catch (err)  
				    	{
				    		log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err); 
				        	
				        	if (attempt >= max_attempts)
				        	{				        	
				        		return "99";
				       		}
				        }           				       		        		        
	        		}
	    			catch (err)  
	    			{
	        			log(PROJECTID,LOG_CATEGORY, TABLENAME, "FAILED","Failed to ingest file "+filename+" for table "+TABLENAME+": "+ err);

	   	   				//update files to ingest TABLE
	   	   				
		    			var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'FAILED', status_msg = 'Ingestion failed with error:  "+err+"', ingest_end_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
	   				    log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO", sqlCommand);
		  
		    			try 
		    			{
		            		snowflake.execute({sqlText: sqlCommand});
		        		}
		    			catch (err)  
		    			{
		        			log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file "+filename+" for table "+TABLENAME+": "+ err);

		        			if (attempt >= max_attempts)
				        	{
		        		    	return "99";
		        		   	}
		        		}           
	        		     
  				        var error = err.message;
				        
					    if(!error.includes("was aborted because the number of waiters for this lock exceeds"))
					    {
		  					attempt = max_attempts + 1;
					    }
					    
	        		}
  				}
	        		
  			}
  
		}
		
		if (TABLEINGESTTYPE == "truncate_insert" || TABLEINGESTTYPE == "insert")
		{

   			//ingest data from parquet files

			for (const fileinfo of file_array) 
			{
				var info_array = fileinfo.split(";");
				var filename = info_array[0];
				var file_timestamp = info_array[1];

				//update files to ingest TABLE
				
   				var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'IN PROGRESS', status_msg = 'Ingestion is currently running...', ingest_start_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
   				log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
  
				try 
				{
					snowflake.execute({sqlText: sqlCommand});
				                  
				}
				catch (err)  
				{
					log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err);
					return "99";
				}

    			//truncate TABLE
    			
   				if (TABLEINGESTTYPE == "truncate_insert") 
   				{
					attempt = 0;
			
					while (attempt <= max_attempts)
					{			
						if (attempt != 0)
						{
					       var sqlCommand = "call SYSTEM$WAIT("+wait_seconds+",'SECONDS');";
					       snowflake.execute ({sqlText: sqlCommand});
						}
					
						attempt++;
   				   				
	    				try 
	    				{
		   					var sqlCommand = "delete from raw."+TABLENAME+" where projectid = '" + PROJECTID + "';";
		   					log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);

	    					snowflake.execute ({sqlText: sqlCommand});
	            		
	            			attempt = max_attempts + 1;
	        			}
	    				catch (err)  
	    				{
	       					log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to truncate table " +TABLENAME+ " for projectid " + PROJECTID + ": "+ err); 
	
	   	  					//update files to ingest TABLE
	   	  					
		   					var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'FAILED', status_msg = 'Ingestion failed with error:  "+err+"', ingest_end_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
	                 	    log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
		  
		    				try 
		    				{
		            			snowflake.execute ({sqlText: sqlCommand});
		                      
		        			}
		    				catch (err)  
		    				{
		        				log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err); 

		        				if (attempt >= max_attempts)
								{		        				
		        					return "99";
		        				}
		        			}           
	            
	  				        var error = err.message;
					        
						    if(!error.includes("was aborted because the number of waiters for this lock exceeds"))
						    {
			  					attempt = max_attempts + 1;
						    }
	    				}
					}	    				
  				}     

				attempt = 0;
		
				while(attempt <= max_attempts)
				{			
					if (attempt != 0)
					{
				       var sqlCommand = "call SYSTEM$WAIT("+wait_seconds+",'SECONDS');";
				       snowflake.execute ({sqlText: sqlCommand});
					}
				
					attempt++;
  				  				
					try
					{
	
		    			var sqlCommand = "copy into raw." + TABLENAME + " (projectid, projectname, ingestionDateTime, raw) from (select '"+ PROJECTID +"','" + PROJECTNAME + "',convert_timezone('UTC','America/New_York',sysdate()), * from @" + stageName + "/" + TABLENAME + "/) PATTERN='.*"+filename+"' FILE_FORMAT = (TYPE= 'PARQUET') FORCE=TRUE;";
		 				log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
									
						snowflake.execute ({sqlText: sqlCommand});
					
						attempt = max_attempts + 1;

			  			//update files to ingest table
			   			var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'COMPLETE', status_msg = 'Ingestion completed successfully.', ingest_end_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('" + file_timestamp + "');";
	   					log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
			  
			    		try 
			    		{
			            	snowflake.execute ({sqlText: sqlCommand});
			                      
			        	}
			    		catch (err)  
			    		{
			        		log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err); 

			        		if (attempt >= max_attempts)
							{		        				
			        			return "99";
			        		}
			        	}           
			        	
	        		}
	    			catch (err)  
	    			{
	        			log(PROJECTID,LOG_CATEGORY, TABLENAME, "FAILED","Failed to ingest file "+filename+" for table " + TABLENAME +" : "+ err);
	
	   	   				//update files to ingest table
		    			var sqlCommand = "update raw.pi_files_to_ingest_"+PROJECTID+" set status = 'FAILED', status_msg = 'Ingestion failed with error:  "+err+"', ingest_end_timestamp = convert_timezone('UTC','America/New_York',sysdate()), status_timestamp = convert_timezone('UTC','America/New_York',sysdate()) where tablename = '" + TABLENAME + "' and filename = '"+filename+"' and file_timestamp = to_timestamp('"+file_timestamp+"');";
	   				    log(PROJECTID,LOG_CATEGORY, TABLENAME, "INFO",sqlCommand);
		  
		    			try 
		    			{
		            		snowflake.execute ({sqlText: sqlCommand});	                      
		        		}
		    			catch (err)  
		    			{
		        			log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to update files_to_ingest table for file " + filename+ "for table " +TABLENAME+ ": "+ err); 

		        			if (attempt >= max_attempts)
							{		        				
		        				return "99";
		        			}
		        		}           
	        		        		        		
  				        var error = err.message;
				        
					    if(!error.includes("was aborted because the number of waiters for this lock exceeds"))
					    {
		  					attempt = max_attempts + 1;
					    }
					    
	        		}

	       		}

			} 

		}
	}
     
	//generate warning if 0 records for any table not listed in unavailable tables table
    var sqlCommand = "select count(*) from raw." + TABLENAME + " rw where rw.projectid = '" + PROJECTID + "';"; 
 
   	try 
   	{
    	stmt = snowflake.createStatement({sqlText: sqlCommand});
       	var result1 = stmt.execute();
        result1.next();
        rowCount = result1.getColumnValue(1); 
  	}
   	catch (err)  
   	{
    	log(PROJECTID, "TABLE ROW COUNT"+REINGEST_SFX, TABLENAME, "FAILED","Failed to count records after ingestion: "+ err);
        return "4";
  	}

  	log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"INFO","rowcount: " + rowCount); 
        
  	if (rowCount < 1) 
  	{
    	log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"WARNING","Table " + TABLENAME + " has 0 records after ingestion."); 
	} 

  	log(PROJECTID, LOG_CATEGORY, TABLENAME, "SUCCEEDED","Succeeded loading table " + TABLENAME + " for projectid " + PROJECTID);
  	return "0";
  	$$;

