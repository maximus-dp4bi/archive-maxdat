use role PI_DATA_INGEST_DEV_ALERT_USER;
use warehouse PUREINSIGHTS_DEV_LOAD_DAILY_WH;
use database PUREINSIGHTS_DEV;
use schema RAW;

CREATE or replace PROCEDURE getFilesToIngest(projectid varchar, programName varchar, tableName varchar, stageName varchar, afterTime varchar, beforeTime varchar, reIngestFlag Boolean, runFromBashFlag Boolean)
	RETURNS VARCHAR
  	LANGUAGE javascript
  	EXECUTE AS CALLER
  	AS
  	$$
  
  	//set logging on
  	var sqlCommand = "set do_log = true;";
   	snowflake.execute ({sqlText: sqlCommand});
   	sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";
	if (RUNFROMBASHFLAG) {
         sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG_"+PROJECTID+"';";
        }
   	snowflake.execute ({sqlText: sqlCommand});
 
	function log(projectid, object_category, object_name, status_string, msg)
	{
    	snowflake.createStatement( { sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
	}        

	function convertTZ(date, tzString) 
	{
    	return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
	}

   	//get date string for today
   	var today_local = new Date();
   	var today = convertTZ(today_local,'America/New_York')
   	var dd = String(today.getDate()).padStart(2, '0');
  	var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
   	var yyyy = today.getFullYear();
   	var hh = String(today.getHours());
   	var todayDateString = yyyy + mm + dd;

	REINGEST_SFX = ""

	if (REINGESTFLAG)
	{
		REINGEST_SFX=" REINGEST";
	}         

   	sqlCommand = "list @"+ STAGENAME + "/"+ TABLENAME + " pattern='.*/*parquet';";

   	if (TABLENAME == "ALL")
   	{
    	sqlCommand = "list @"+ STAGENAME + " pattern='.*/*parquet';";
    }

    try 
    {
    	snowflake.execute ({sqlText: sqlCommand});
   	}
    catch (err)  
    {
    	log( PROJECTID, "S3 DATA"+REINGEST_SFX, "LIST FILES", "FAILED", "Failed to list files for projectid " + PROJECTID + " and table "+TABLENAME+": "+ err); 
       	return "4";
   	}

     var pi_files_to_ingest_table = "PI_FILES_TO_INGEST";

     if (RUNFROMBASHFLAG) {
      pi_files_to_ingest_table = "PI_FILES_TO_INGEST_"+PROJECTID;
     }

	sqlCommand = "insert into "+pi_files_to_ingest_table+" select * from (with parquet as (select case when split_part(\"name\",'/','-3') in ('transcription_topics','transcription_sentiment') then split_part(\"name\",'/','-3') else split_part(\"name\",'/','-2') end as tablename,split_part(\"name\",'/','-1') as filename,\"last_modified\" as modified_timestamp FROM table(result_scan(last_query_id())) lsid where convert_timezone('UTC','America/New_York',to_timestamp(rtrim(\"last_modified\",' GMT'),'DY, DD MON YYYY HH24:MI:SS')) >= to_timestamp('"+AFTERTIME+"','YYYY/MM/DD HH24:MI:SS') and convert_timezone('UTC','America/New_York',to_timestamp(rtrim(\"last_modified\",' GMT'),'DY, DD MON YYYY HH24:MI:SS')) <= to_timestamp('"+BEFORETIME+"','YYYY/MM/DD HH24:MI:SS') order by \"last_modified\") select '"+PROJECTID+"',null, pt.tablename,pt.filename,convert_timezone('UTC','America/New_York',to_timestamp(rtrim(modified_timestamp,' GMT'),'DY, DD MON YYYY HH24:MI:SS')),null,null,null,null,null from parquet pt left outer join pi_files_to_ingest fti on fti.projectid = '"+PROJECTID+"' and fti.tablename = pt.tablename and fti.filename = pt.filename and fti.file_timestamp = convert_timezone('UTC','America/New_York',to_timestamp(rtrim(modified_timestamp,' GMT'),'DY, DD MON YYYY HH24:MI:SS')) where ((fti.file_timestamp is null or fti.status != 'COMPLETE') and (pt.tablename != 'wfm_schedule' or REGEXP_COUNT(pt.filename, '_', 1, 'i') = 2)));";

   	//sqlCommand = "insert into pi_files_to_ingest_"+PROJECTID+" select * from (with parquet as (select case when split_part(\"name\",'/','-3') in ('transcription_topics','transcription_sentiment') then split_part(\"name\",'/','-3') else split_part(\"name\",'/','-2') end as tablename,split_part(\"name\",'/','-1') as filename,\"last_modified\" as modified_timestamp FROM table(result_scan(last_query_id())) lsid where convert_timezone('UTC','America/New_York',to_timestamp(rtrim(\"last_modified\",' GMT'),'DY, DD MON YYYY HH24:MI:SS')) >= convert_timezone('America/New_York','UTC',to_timestamp('"+AFTERTIME+"','YYYY/MM/DD HH24:MI:SS')) and convert_timezone('UTC','America/New_York',to_timestamp(rtrim(\"last_modified\",' GMT'),'DY, DD MON YYYY HH24:MI:SS')) < convert_timezone('America/New_York','UTC',to_timestamp('"+BEFORETIME+"','YYYY/MM/DD HH24:MI:SS')) order by \"last_modified\") select '"+PROJECTID+"',null, pt.tablename,pt.filename,convert_timezone('UTC','America/New_York',to_timestamp(rtrim(modified_timestamp,' GMT'),'DY, DD MON YYYY HH24:MI:SS')),null,null,null,null,null from parquet pt left outer join pi_files_to_ingest fti on fti.projectid = '"+PROJECTID+"' and fti.tablename = pt.tablename and fti.filename = pt.filename and fti.file_timestamp = convert_timezone('UTC','America/New_York',to_timestamp(rtrim(modified_timestamp,' GMT'),'DY, DD MON YYYY HH24:MI:SS')) where (fti.file_timestamp is null));";
	//log(PROJECTID,"SQL"+REINGEST_SFX,TABLENAME,"INFO",sqlCommand); 

    try 
    {
    	snowflake.execute ({sqlText: sqlCommand});
   	}
    catch (err)
    {
    	log( PROJECTID, "S3 DATA"+REINGEST_SFX, "LIST FILES", "FAILED", "Failed to list files for projectid " + PROJECTID + " and table "+TABLENAME+": "+ err); 
        return "4";
   	}
    return "0";  
  	$$; 
