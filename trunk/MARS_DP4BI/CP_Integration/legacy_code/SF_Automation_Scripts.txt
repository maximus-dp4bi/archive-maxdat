ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY/MM/DD';
ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM';
SHOW PARAMETERS LIKE '%INPUT_FORMAT%';

drop table JSON_EVENTS_FIELDS_INFO;
create table JSON_EVENTS_FIELDS_INFO as
                  (select recordType,
                 key as field,
                 raw_type,
                 case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(valueExample::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' 
                                                           when try_to_date(valueExample::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end)
                 when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT'
                 when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type,
                 regexp_replace(fullPath, '.' || key, '',1,regexp_count(fullPath,key)) as path
          from (select regexp_replace(data:recordType, '( ){1,}','')::VARCHAR as recordType, 
                       key,                 
                       typeof(f.value)::VARCHAR as raw_type,
                       regexp_replace(regexp_replace(data:recordType, '( ){1,}','') || '.' || regexp_replace(f.path, '[0-9\]]', ''),'[\\[]','') as fullPath,
                       any_value(f.value) as valueExample
                from SNOWFLAKE_POC.PUBLIC.JSON_STREAMSETS_AMQ_DATA, lateral flatten (data:dataObject, recursive => true) f 
                where  typeof(f.value) <> 'NULL_VALUE' and key <> 'NULL'
                group by 1,2,3,4));
                
// Add new fields (if an event had its structure updated. We can't delete fields due to historical events)
                
// fields with no value for all records
insert into JSON_EVENTS_FIELDS_INFO 
                  (select recordType,
                 key as field,
                 raw_type,
                 case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(valueExample::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' 
                                                           when try_to_date(valueExample::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end)
                 when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT'
                 when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type,
                 path
          from (select regexp_replace(data:recordType, '( ){1,}','')::VARCHAR as recordType, 
                       key,                 
                       typeof(f.value)::VARCHAR as raw_type,
                       replace(regexp_replace(regexp_replace(data:recordType, '( ){1,}','') || '.' || regexp_replace(f.path, '[0-9\]]', ''),'[\\[]',''), '.' || key, '') as path,
                       any_value(f.value) as valueExample
                from SNOWFLAKE_POC.PUBLIC.JSON_STREAMSETS_AMQ_DATA, lateral flatten (data:dataObject, recursive => true) f 
                where  typeof(f.value) = 'NULL_VALUE' and key <> 'NULL'
                group by 1,2,3,4) 
           where path || '.' || field not in (select distinct (path || '.' || field) as fullField from JSON_EVENTS_FIELDS_INFO));


create or replace procedure create_views_over_json ()
returns array
language javascript
execute as CALLER
as
$$

// Variables
var query = "";
var stgQueryArray = [];
var crmQueryArray = [];
var crmInnerQueryArray = [];
var allQueries = [];

// Functions

String.prototype.toCamelCase = function() {
    return this.replace(/^([A-Z])|[\s-_](\w)/g, function(match, p1, p2, offset) {
        if (p2) return p2.toUpperCase();
        return p1.toLowerCase();        
    });
};

queryInfo = function() {
        this.fields = "";
        this.fromClause = "";
        
        this.addField = function(newField) {
            this.fields = this.fields + newField;
        };
        
        this.addFromClause = function(newFromClause) {
            this.fromClause = this.fromClause + newFromClause;
        };
        
        this.clear = function() { 
            this.fields = "";
            this.fromClause =  "";
        };
    }

// Set the date formats for the procedure
function setSessionParameters() {    
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY/MM/DD'";
    snowflake.createStatement({sqlText:query}).execute();
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.createStatement({sqlText:query}).execute();
}

// include the link in the fields and from clauses
function setLinkQueryInfo (row, linkInfo, tableName) {

    // Clear the previous link information
    linkInfo.clear();
    
    var linkTableSuffix = 0;
    var linkTableAlias = "L" + linkTableSuffix;
    query = "select distinct externalRefType from CRMA_LINK_VW where internalRefType = '" + tableName + "';";
    var linkFields = snowflake.createStatement({sqlText:query}).execute();
    
    while (linkFields.next()) {
        linkInfo.addField(", " + linkTableAlias + ".externalId as " + linkFields.getColumnValue(1).toLowerCase().toCamelCase() + "Id");
        linkInfo.addFromClause(" left join CRMA_LINK_VW as " + linkTableAlias + " on " + linkTableAlias + ".internalId = " + row.recordType + "Id and " + linkTableAlias + ".internalRefType = '" + tableName + "' and " + linkTableAlias + ".externalRefType = '" + linkFields.getColumnValue(1) + "'");
        
        linkTableSuffix ++;
        linkTableAlias = "L" + linkTableSuffix;
    
    }
}

// include a field in the select statment
function setSelectFields(row, query, prefix) {

    if (row.field != "projectId" && row.field != "projectName") {
        
        if (row.field == "action") {                
            query = query + ", " + prefix + row.field + "::" + row.type + " as " + row.recordType + row.field;
        } else {
            query = query + ", " + prefix + row.field + "::" + row.type + " as " + row.field;
        }
    }
    
    return query;
}

function createCRMInnerQuery(row, tableName) {

    var innerTableName = row.field.slice(0,1).toUpperCase() + row.field.slice(1, row.field.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
    var innerPrefix = "";
    var crmInnerFromClause = "";
    var innerQuery = "select * from JSON_EVENTS_FIELDS_INFO where path = '" + row.recordType + "." + row.field + "' order by recordType, path, field";;
       
    var crmInnerQuery = "create or replace view CRMA_" + innerTableName + "_VW as " +
                        "select action, " +
                                "eventCreatedOn, " +
                                "projectId, " +
                                "projectName";
                                
    if (row.rawType == 'ARRAY') {
        innerPrefix = 'VALUE:';        
        crmInnerFromClause = " from (select * from STA_" + tableName + "_VW, lateral flatten(input=> " + row.field + ")) as innerTable join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on " + row.recordType + "Id = currentRecord." + row.recordType + "Idc and eventCreatedOn = currentRecord.maxEventCreatedOn;";
    } else {
        innerPrefix = row.field + ':';
        crmInnerFromClause = " from STA_" + tableName + "_VW join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on " + row.recordType + "Id = currentRecord." + row.recordType + "Idc and eventCreatedOn = currentRecord.maxEventCreatedOn;"
    }
            
    var objectFields = snowflake.createStatement({sqlText:innerQuery}).execute();
            
    while (objectFields.next()) {
                
        row.recordType = objectFields.getColumnValue(1);
        row.field = objectFields.getColumnValue(2);
        row.rawType = objectFields.getColumnValue(3);
        row.type = objectFields.getColumnValue(4);
        row.path = objectFields.getColumnValue(5);
        
        crmInnerQuery = setSelectFields(row, crmInnerQuery, innerPrefix);            
    }
            
    crmInnerQuery = crmInnerQuery + crmInnerFromClause;
    
    return crmInnerQuery;

}


// Creates the view statment and executes it
function createStViewStatment(query, prefix) {

    // Variables
    var row = {
        recordType: "",
        field: "",
        rawType: "",
        type: "",
        path: "",
    };    
    var tableName = "";
    var viewFields = "";
    var stgQuery = "";
    var crmQuery = "";
    var crmInnerQuery = "";
    var stgFromClause = "";
    var crmFromClause = "";
    var crmLinkFields = "";
    var crmLinkFromClause = "";
    var linkInfo = new queryInfo();
    
    
    // Get view fields
    viewFields = snowflake.createStatement({sqlText:query}).execute();
    
    while (viewFields.next()) {

        row.recordType = viewFields.getColumnValue(1);
        row.field = viewFields.getColumnValue(2);
        row.rawType = viewFields.getColumnValue(3);
        row.type = viewFields.getColumnValue(4);
        row.path = viewFields.getColumnValue(5);

        if (tableName != row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase()) {

            if (tableName != "") {
                
                stgQuery = stgQuery + stgFromClause;
                stgQueryArray.push(stgQuery);                
                                
                crmQuery = crmQuery + linkInfo.fields + crmFromClause + linkInfo.fromClause + ";";
                crmQueryArray.push(crmQuery);                
            }

            tableName = row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
            stgQuery = "create or replace view STA_" + tableName + "_VW as " +
                       "select DATA:action::VARCHAR as action, " +
                       "DATA:eventCreatedOn::TIMESTAMP_TZ as eventCreatedOn, " +
                       "DATA:projectId::DECIMAL as projectId, " +
                       "DATA:projectName::VARCHAR as projectName";
            stgFromClause = " from JSON_STREAMSETS_AMQ_DATA where replace(DATA:recordType, ' ', '')  = '" + row.recordType + "';";
            
            // CRM
            crmQuery = "create or replace view CRMA_" + tableName + "_VW as " +
                    "select mt.action, " +
                    "mt.eventCreatedOn, " +
                    "mt.projectId, " +
                    "mt.projectName";
            
            setLinkQueryInfo (row, linkInfo, tableName);
            crmFromClause = " from STA_" + tableName + "_VW as mt join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on mt." + row.recordType + "Id = currentRecord." + row.recordType + "Idc and mt.eventCreatedOn = currentRecord.maxEventCreatedOn";
            
        } 
        
        stgQuery = setSelectFields(row, stgQuery, prefix);
        
        // CRM 
        if (row.rawType == 'OBJECT' || row.rawType == 'ARRAY') {
        
            crmInnerQuery = createCRMInnerQuery(row, tableName);
            crmInnerQueryArray.push(crmInnerQuery);
            
        } else {
            crmQuery = setSelectFields(row, crmQuery, "mt.");
        }

    }

    if (row.recordType == 'Link') {
        stgQuery = stgQuery + " from JSON_STREAMSETS_AMQ_DATA, lateral flatten(input=> DATA:dataObject:externalLinkPayload) where replace(DATA:recordType, ' ', '')  = '" + row.recordType + "';"        
        crmQuery = crmQuery + " from STA_" + tableName + "_VW as mt join (select externalLinkId as externalLinkIdc, internalRefType as internalRefTypec, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by externalLinkIdc, internalRefTypec) currentRecord on mt.externalLinkId = currentRecord.externalLinkIdc and mt.internalRefType = currentRecord.internalRefTypec and mt.eventCreatedOn = currentRecord.maxEventCreatedOn where mt.action = 'Create' and mt.effectiveEndDate IS NULL;";
    } else {        
        stgQuery = stgQuery + stgFromClause;        
        crmQuery = crmQuery + linkInfo.fields + crmFromClause + linkInfo.fromClause + ";";
    }
    
    //snowflake.createStatement({sqlText:query}).execute();
    stgQueryArray.push(stgQuery);
    crmQueryArray.push(crmQuery);
    
    // If the function is called again, tableName has to be empty to avoid the execution of an incomplete statement
    tableName = "";
    return crmQueryArray;

}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters();

// Retrieve the Stage fields (link)
query = "select * from JSON_EVENTS_FIELDS_INFO where path = 'Link.externalLinkPayload' order by recordType, path, field";            
createStViewStatment(query, "VALUE:");

// Retrieve the Stage fields (except link, different query)
query = "select * from JSON_EVENTS_FIELDS_INFO where path = recordType and recordType != 'Link' order by recordType, path, field";
createStViewStatment(query, "DATA:dataObject:");

allQueries.push(...stgQueryArray);
allQueries.push(...crmQueryArray);
allQueries.push(...crmInnerQueryArray);

return allQueries;
$$;

call create_views_over_json();