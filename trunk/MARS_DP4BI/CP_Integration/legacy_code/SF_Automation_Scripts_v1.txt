ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY/MM/DD';
ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM';
SHOW PARAMETERS LIKE '%INPUT_FORMAT%';

drop table JSON_EVENTS_FIELDS_INFO;
create table JSON_EVENTS_FIELDS_INFO as
                  (select recordType,
                 key as field,
                 raw_type,
                 case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(valueExample::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' 
                                                           when try_to_date(valueExample::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end)
                 when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT'
                 when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type,
                 regexp_replace(fullPath, '.' || key, '',1,regexp_count(fullPath,key)) as path
          from (select regexp_replace(data:recordType, '( ){1,}','')::VARCHAR as recordType, 
                       key,                 
                       typeof(f.value)::VARCHAR as raw_type,
                       regexp_replace(regexp_replace(data:recordType, '( ){1,}','') || '.' || regexp_replace(f.path, '[0-9\]]', ''),'[\\[]','') as fullPath,
                       any_value(f.value) as valueExample
                from SNOWFLAKE_POC.PUBLIC.JSON_STREAMSETS_AMQ_DATA, lateral flatten (data:dataObject, recursive => true) f 
                where  typeof(f.value) <> 'NULL_VALUE' and key <> 'NULL'
                group by 1,2,3,4));
                
// Add new fields (if an event had its structure updated. We can't delete fields due to historical events)
                
// fields with no value for all records
insert into JSON_EVENTS_FIELDS_INFO 
                  (select recordType,
                 key as field,
                 raw_type,
                 case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(valueExample::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' 
                                                           when try_to_date(valueExample::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end)
                 when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT'
                 when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type,
                 path
          from (select regexp_replace(data:recordType, '( ){1,}','')::VARCHAR as recordType, 
                       key,                 
                       typeof(f.value)::VARCHAR as raw_type,
                       replace(regexp_replace(regexp_replace(data:recordType, '( ){1,}','') || '.' || regexp_replace(f.path, '[0-9\]]', ''),'[\\[]',''), '.' || key, '') as path,
                       any_value(f.value) as valueExample
                from SNOWFLAKE_POC.PUBLIC.JSON_STREAMSETS_AMQ_DATA, lateral flatten (data:dataObject, recursive => true) f 
                where  typeof(f.value) = 'NULL_VALUE' and key <> 'NULL'
                group by 1,2,3,4) 
           where path || '.' || field not in (select distinct (path || '.' || field) as fullField from JSON_EVENTS_FIELDS_INFO));


create or replace procedure create_views_over_json ()
returns array
language javascript
execute as CALLER
as
$$

// Variables
var query = "";
var stgQueryArray = [];
var crmQueryArray = [];
var crmInnerQueryArray = [];
var allQueries = [];

// Objects

// Stores query information
var queryInfo = function() {
    this.query = "";
    this.fields = "";
    this.fromClause = "";
    
    this.addQueryPart = function(part) {
        this.query = this.query + part;
    };

    this.addField = function(newField) {
        this.fields = this.fields + newField;
    };

    this.addFromClause = function(newFromClause) {
        this.fromClause = this.fromClause + newFromClause;
    };

    this.clearFieldsFromClause = function() {           
        this.fields = "";
        this.fromClause =  "";
    };
}

// Stores JSON_EVENTS_FIELDS_INFO row information
var rowInfo = function() {
    thisrecordType = "";
    this.field = "";
    this.rawType = "";
    this.type = "";
    this.path = "";

    this.populateFields = function (fieldValues) {
        this.recordType = fieldValues.getColumnValue(1);
        this.field = fieldValues.getColumnValue(2);
        this.rawType = fieldValues.getColumnValue(3);
        this.type = fieldValues.getColumnValue(4);
        this.path = fieldValues.getColumnValue(5);        
    };
};

// Functions

// Converts lowercase strings separated by '_', '-' to camel case (got from internet)
String.prototype.toCamelCase = function() {
    return this.replace(/^([A-Z])|[\s-_](\w)/g, function(match, p1, p2, offset) {
        if (p2) return p2.toUpperCase();
        return p1.toLowerCase();        
    });
};

// Set the date formats for the procedure
function setSessionParameters() {    
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY/MM/DD'";
    snowflake.createStatement({sqlText:query}).execute();
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.createStatement({sqlText:query}).execute();
}

// Retrieves the link information for fields and from clause
function setLinkQueryInfo (row, linkInfo, tableName) {

    // Clear the previous link information
    linkInfo.clearFieldsFromClause();
    
    var linkTableSuffix = 0;
    var linkTableAlias = "L" + linkTableSuffix;
    query = "select distinct externalRefType from CRMA_LINK_VW where internalRefType = '" + tableName + "';";
    var linkFields = snowflake.createStatement({sqlText:query}).execute();
    
    // Loop through link fields
    while (linkFields.next()) {
    
        // Adds link information
        linkInfo.addField(", " + linkTableAlias + ".externalId as " + linkFields.getColumnValue(1).toLowerCase().toCamelCase() + "Id");
        linkInfo.addFromClause(" left join CRMA_LINK_VW as " + linkTableAlias + " on " + linkTableAlias + ".internalId = " + row.recordType + "Id and " + linkTableAlias + ".internalRefType = '" + tableName + "' and " + linkTableAlias + ".externalRefType = '" + linkFields.getColumnValue(1) + "'");
        
        // Changes the link alias (if there is more than one link field, they need to join with different versions of the link table)
        linkTableSuffix ++;
        linkTableAlias = "L" + linkTableSuffix;
    
    }
}

// Include a field in the select statment
function setSelectFields(row, prefix) {

    var queryField = "";

    // The project event has project information inside the dataobject as well
    if (row.field != "projectId" && row.field != "projectName") {
        
        // Task has an action field inside the dataObject
        if (row.field == "action") {                
            queryField = ", " + prefix + row.field + "::" + row.type + " as " + row.recordType + row.field;
        } else {
            queryField = ", " + prefix + row.field + "::" + row.type + " as " + row.field;
        }
    }
    
    return queryField;
}

// Creates the query for inner JSON (JSON or array of JSON)
function createCRMInnerQuery(row, crmInnerQueryInfo, tableName) {

    var innerPrefix = "";
    var innerRow = new rowInfo();
    var innerTableName = row.field.slice(0,1).toUpperCase() + row.field.slice(1, row.field.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
    var innerQuery = "select * from JSON_EVENTS_FIELDS_INFO where path = '" + row.recordType + "." + row.field + "' order by recordType, path, field";;
    
    // Inner query start statment
    crmInnerQueryInfo.query = "create or replace view CRMA_" + innerTableName + "_VW as " +
                              "select action, " +
                                     "eventCreatedOn, " +
                                     "projectId, " +
                                     "projectName";
                                
    // Defines the prefix and from clause depending on the type (ARRAY or OBJECT)
    if (row.rawType == 'ARRAY') {
        innerPrefix = 'VALUE:';        
        crmInnerQueryInfo.addFromClause(" from (select * from STA_" + tableName + "_VW, lateral flatten(input=> " + row.field + ")) as innerTable join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on " + row.recordType + "Id = currentRecord." + row.recordType + "Idc and eventCreatedOn = currentRecord.maxEventCreatedOn;");
    } else {
        innerPrefix = row.field + ':';
        crmInnerQueryInfo.addFromClause(" from STA_" + tableName + "_VW join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on " + row.recordType + "Id = currentRecord." + row.recordType + "Idc and eventCreatedOn = currentRecord.maxEventCreatedOn;");
    }
    
    // Retrieve the fields of the inner JSON
    var innerFields = snowflake.createStatement({sqlText:innerQuery}).execute();

    // Loop through the inner fields
    while (innerFields.next()) {

        // Populates the inner query fields
        innerRow.populateFields(innerFields);        
        crmInnerQueryInfo.addField(setSelectFields(innerRow, innerPrefix));
    }

    // Creates the inner JSON query
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fields);
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fromClause);

}

// Creates views statment bawed on passed base query
function createViewsStatment(query, prefix) {

    // Variables
    var tableName = "";
    var viewFields = "";        
    var row = new rowInfo();
    var stgQueryInfo = new queryInfo();
    var crmQueryInfo = new queryInfo();
    var crmInnerQueryInfo = new queryInfo();
    var linkInfo = new queryInfo();
    
    
    // Get view fields
    viewFields = snowflake.createStatement({sqlText:query}).execute();
    
    // Loop through query fields
    while (viewFields.next()) {
    
        // Populates the row information
        row.populateFields(viewFields);

        // If the table name changed, creates the query for the previous view
        if (tableName != row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase()) {

            // For the first call, the tableName is null and we can't create the view statment
            if (tableName != "") {
                
                // Creates stage query statment
                stgQueryInfo.addQueryPart(stgQueryInfo.fields);
                stgQueryInfo.addQueryPart(stgQueryInfo.fromClause);                
                
                // Creates the CRM query statment
                crmQueryInfo.addQueryPart(crmQueryInfo.fields);
                crmQueryInfo.addQueryPart(linkInfo.fields);
                crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);
                crmQueryInfo.addQueryPart(linkInfo.fromClause + ";");
                
                // Adds the queries to the arrays
                stgQueryArray.push(stgQueryInfo.query);
                crmQueryArray.push(crmQueryInfo.query);
            }
            
            // Clear information
            stgQueryInfo.clearFieldsFromClause();
            crmQueryInfo.clearFieldsFromClause();

            // Defines the table name used to create the view (STA_ or CRMA_ + tableName + _VW)
            tableName = row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
            
            // Stage query start statment
            stgQueryInfo.query = "create or replace view STA_" + tableName + "_VW as " +
                                 "select DATA:action::VARCHAR as action, " +
                                 "DATA:eventCreatedOn::TIMESTAMP_TZ as eventCreatedOn, " +
                                 "DATA:projectId::DECIMAL as projectId, " +
                                 "DATA:projectName::VARCHAR as projectName";
                                 
            // Stage from clause statment
            stgQueryInfo.addFromClause(" from JSON_STREAMSETS_AMQ_DATA where replace(DATA:recordType, ' ', '')  = '" + row.recordType + "';");
            
            // CRM start statment
            crmQueryInfo.query = "create or replace view CRMA_" + tableName + "_VW as " +
                                 "select mt.action, " +
                                 "mt.eventCreatedOn, " +
                                 "mt.projectId, " +
                                 "mt.projectName";
            
            // CRM from clause base statment
            crmQueryInfo.addFromClause(" from STA_" + tableName + "_VW as mt join (select " + row.recordType + "Id as " + row.recordType + "Idc, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by " + row.recordType + "Idc) currentRecord on mt." + row.recordType + "Id = currentRecord." + row.recordType + "Idc and mt.eventCreatedOn = currentRecord.maxEventCreatedOn");
            
            // Retrieve CRM link information
            setLinkQueryInfo (row, linkInfo, tableName);
        } 
        
        // Retrive stage field statment
        stgQueryInfo.addField(setSelectFields(row, prefix));
        
        // Retrive CRM field statment
        // If it is an object or array field (creates an inner JSON view statment)
        if (row.rawType == 'OBJECT' || row.rawType == 'ARRAY') {
            crmInnerQueryInfo.clearFieldsFromClause();
            createCRMInnerQuery(row, crmInnerQueryInfo, tableName);
            crmInnerQueryArray.push(crmInnerQueryInfo.query);
        
        // Primitive fields
        } else {
            crmQueryInfo.addField(setSelectFields(row, "mt."));
        }
    }

    // Adds the field information for the last queries statments
    stgQueryInfo.addQueryPart(stgQueryInfo.fields);
    crmQueryInfo.addQueryPart(crmQueryInfo.fields);
    crmQueryInfo.addQueryPart(linkInfo.fields);
    
    // Adds the from clause information for the last queries statments
    if (row.recordType == 'Link') {        
        stgQueryInfo.addQueryPart(" from JSON_STREAMSETS_AMQ_DATA, lateral flatten(input=> DATA:dataObject:externalLinkPayload) where replace(DATA:recordType, ' ', '')  = '" + row.recordType + "';");        
        crmQueryInfo.addQueryPart(" from STA_" + tableName + "_VW as mt join (select externalLinkId as externalLinkIdc, internalRefType as internalRefTypec, MAX(eventCreatedOn) as maxEventCreatedOn from STA_" + tableName + "_VW group by externalLinkIdc, internalRefTypec) currentRecord on mt.externalLinkId = currentRecord.externalLinkIdc and mt.internalRefType = currentRecord.internalRefTypec and mt.eventCreatedOn = currentRecord.maxEventCreatedOn where mt.action = 'Create' and mt.effectiveEndDate IS NULL;");
    } else {        
        stgQueryInfo.addQueryPart(stgQueryInfo.fromClause);
        crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);
        crmQueryInfo.addQueryPart(linkInfo.fromClause + ";");
    }
    
    // Adds the queries to the arrays
    stgQueryArray.push(stgQueryInfo.query);
    crmQueryArray.push(crmQueryInfo.query);
    
    // If the function is called again, tableName has to be empty to avoid the execution of an incomplete statement
    tableName = "";

}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters();

// Retrieve the Stage fields (link)
query = "select * from JSON_EVENTS_FIELDS_INFO where path = 'Link.externalLinkPayload' order by recordType, path, field";            
createViewsStatment(query, "VALUE:");

// Retrieve the Stage fields (except link, different query)
query = "select * from JSON_EVENTS_FIELDS_INFO where path = recordType and recordType != 'Link' order by recordType, path, field";
createViewsStatment(query, "DATA:dataObject:");

allQueries.push(...stgQueryArray);
allQueries.push(...crmQueryArray);
allQueries.push(...crmInnerQueryArray);

return allQueries;
$$;

call create_views_over_json();