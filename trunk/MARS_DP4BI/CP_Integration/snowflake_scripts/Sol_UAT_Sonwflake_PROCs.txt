create table CTL_CRM_CREATION_ERROR (
query string ,
creation_time timestamp_tz,
error string);

-- Create a stream on the event raw table
create or replace stream EVENT_RAW_DATA_STREAM on table EVENT_RAW_DATA;
select * from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM;

-- Create a stream on the event fields table
create or replace stream CFG_EVENTS_FIELDS_STREAM on table CFG_EVENTS_FIELDS;

-- Create a task to schedule the update of the views process
create or replace task MARS_DP4BI_DEV.SOLACE.DP4BI_VIEW_AUTOMATION_TASK 
                       WAREHOUSE = MARS_DP4BI_LOAD_WH 
                       SCHEDULE = 'USING CRON * * * * * UTC' 
                       WHEN system$stream_has_data('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM')
as  
call mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA','CRM_', 'MARS_DP4BI_DEV', 'SOLACE', 'SOLACE');
alter task MARS_DP4BI_DEV.SOLACE.DP4BI_VIEW_AUTOMATION_TASK resume;
show tasks;

show procedures;
drop procedure DP4BI_SOL_CREATE_VIEWS(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR);
drop procedure DP4BI_SOL_JSON_MC_FIELDS_UPDATE(VARCHAR, VARCHAR, VARCHAR, VARCHAR);
drop procedure DP4BI_SOL_MC_AUTOMATION_WORKFLOW(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR);


-- Procedure with the calls in the required order
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow(SRC_FIELDS_TABLE varchar, DST_FIELDS_TABLE varchar, SRC_TABLE varchar, VIEW_PREFIX varchar, DST_DB varchar, DST_SCHEMA_FIELDS varchar, DST_SCHEMA_VIEWS varchar)
returns string
language javascript
execute as CALLER
as
$$
// Arguments (convert arguments to lower case)
var src_fields_table = SRC_FIELDS_TABLE;
var dst_fields_table = DST_FIELDS_TABLE;
var src_table = SRC_TABLE;
var view_prefix = VIEW_PREFIX;
var dst_db = DST_DB;
var dst_schema_fields = DST_SCHEMA_FIELDS;
var dst_schema_views = DST_SCHEMA_VIEWS;
var today = new Date();
var day = String(today.getDate()).padStart(2, '0');
var month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
var year = today.getFullYear();


// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Main code
try {
  // Set the formats to our definitions of DATE and TIMESTAMP
  setSessionParameters(dst_db, dst_schema_fields);

  // Update fields' definitions
  snowflake.execute({sqlText:"call mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update(:1, :2, :3, :4);", binds:[src_fields_table, dst_fields_table, dst_db, dst_schema_fields]});
  
  // Update views' definitions
  snowflake.execute({sqlText:"call mars_dp4bi_dev.solace.dp4bi_sol_create_views(:1, :2, :3, :4, :5);", binds:[src_table, dst_fields_table, view_prefix, dst_db, dst_schema_views]});
  
  // Export Files to S3
  snowflake.execute({sqlText:"call mars_dp4bi_dev.solace.dp4bi_sol_export_s3(:1, :2);", binds:[year + '-' + month + '-' + day + 'T00:00:00.000000+00:00', 'day']});

  return 0;
} catch(e) {
    return e.message;
}
$$
;
call mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA','CRM_', 'MARS_DP4BI_DEV', 'SOLACE', 'PUBLIC');


-- updates the field table with the new fields
-- Since we don't know the type without a value, we only added a field in the field once we can evaluate its type
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update(SRC_FIELDS_TABLE varchar, DST_FIELDS_TABLE varchar, DST_DB varchar, DST_SCHEMA varchar)
returns string
language javascript
execute as CALLER
as
$$

// Arguments (convert arguments to lower case)
var src_fields_table = SRC_FIELDS_TABLE;
var dst_fields_table = DST_FIELDS_TABLE;
var dst_db = DST_DB;
var dst_schema = DST_SCHEMA;

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters(dst_db, dst_schema);

var statment = "merge into " + dst_fields_table + " dst_tb using \n" + 
               "(select regexp_replace(regexp_replace(recordType, '( ){1,}', '') || '.' || regexp_replace(regexp_replace(regexp_replace(f.path, key, '', 1, regexp_count(f.path, key)), '[0-9]', ''), ']', ''), '[\[]', '') || key as id, \n" +               
               "        recordType::VARCHAR as recordType, \n" +
               "        key as field, \n" +
               "        typeof(f.value)::VARCHAR as raw_type, \n" +
               "        case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(any_value(f.value)::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' \n" +
               "                                                  when try_to_date(any_value(f.value)::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end) \n" +
               "             when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT' \n" +
               "             when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type, \n" +
               "        RTRIM(regexp_replace(regexp_replace(recordType, '( ){1,}', '') || '.' || regexp_replace(regexp_replace(regexp_replace(f.path, key, '', 1, regexp_count(f.path, key)), '[0-9]', ''), ']', ''), '[\[]', ''),'.') as path \n" +
               " from " + src_fields_table + ", lateral flatten (dataObject, recursive => true) f \n" +
               " where  typeof(f.value) <> 'NULL_VALUE' \n" +
               "    and key <> 'NULL' \n" +
               " group by 1,2,3,4,6 \n" +
               " minus \n" +
               " select * from " + dst_fields_table + ") as currFields on dst_tb.id = currfields.id \n" +
                 "when matched then update set dst_tb.recordType = currfields.recordType, \n" +
                                              "dst_tb.field = currfields.field, \n" +
                                              "dst_tb.raw_type = currfields.raw_type, \n" +
                                              "dst_tb.type = currfields.type, \n" +
                                              "dst_tb.path = currfields.path \n" +
                 "when not matched then insert (id ,recordType, field, raw_type, type, path) \n" +
                                       "values (currfields.id ,currfields.recordType, currfields.field, currfields.raw_type, currfields.type, currfields.path);";

snowflake.execute({sqlText:statment});
return statment;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', ' MARS_DP4BI_DEV', 'SOLACE');
truncate table "MARS_DP4BI_DEV"."SOLACE"."CFG_EVENTS_FIELDS";

-- Creates the views over the JSON
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_create_views(SRC_TABLE varchar, FIELDS_TABLE varchar, VIEW_PREFIX varchar, DST_DB varchar, DST_SCHEMA varchar)
returns array
language javascript
execute as CALLER
as
$$

// Arguments (convert arguments to lower case)
// src_table is the source event table
// fields_table is the table that has the fields information
// stage_prefix is the prefix of the stage tables
// view_prefix is the prefix of the final views
var src_table = SRC_TABLE;
var fields_table = FIELDS_TABLE;
var view_prefix = VIEW_PREFIX;
var dst_db = DST_DB;
var dst_schema = DST_SCHEMA;

// Variables
var query = "";
var crmQueryArray = [];
var crmInnerQueryArray = [];
var allQueries = [];
var dropViewSts = [];

// Objects

// Stores query information
var queryInfo = function() {
    this.query = "";
    this.fields = "";
    this.fromClause = "";
    this.whereClause ="";

    this.addQueryPart = function(part) {
        this.query = this.query + part;
    };

    this.addField = function(newField) {
        this.fields = this.fields + newField;
    };

    this.addFromClause = function(newFromClause) {
        this.fromClause = this.fromClause + newFromClause;
    };

    this.addWhereCondition = function(newWhereCondition) {
        if (this.whereClause == "") {
            this.whereClause = " where " + newWhereCondition;
        } else {
            this.whereClause = this.whereClause + " and " + newWhereCondition;
        }

    };

    this.clearQueryInfo = function() {
        this.fields = "";
        this.fromClause =  "";
        this.whereClause = "";
        this.query = "";
    };
}

// Stores JSON_EVENTS_FIELDS_INFO row information
var rowInfo = function() {
    this.id = "";
    this.recordType = "";
    this.field = "";
	this.fieldAlias = "";					 
    this.rawType = "";
    this.type = "";
    this.path = "";
    this.rowId = "";

    this.populateFields = function (fieldValues) {
        
        var formatedRecordType = fieldValues.getColumnValue(2).replace(/ /g, "",1);
    
        this.id = fieldValues.getColumnValue(1);
        this.recordType = formatedRecordType;
        this.field = fieldValues.getColumnValue(3);
		this.fieldAlias = fieldValues.getColumnValue(3).slice(0,1).toUpperCase() + fieldValues.getColumnValue(3).slice(1, fieldValues.getColumnValue(3).length).replace( /(((?<![A-Z])[A-Z]))/g, "_$1",1).toUpperCase();
        this.rawType = fieldValues.getColumnValue(4);
        this.type = fieldValues.getColumnValue(5);
        this.path = fieldValues.getColumnValue(6);
        this.rowId = formatedRecordType.slice(0,1).toLowerCase() + formatedRecordType.slice(1, fieldValues.getColumnValue(2).length) + "Id";
    };
    
};

// Functions

// Converts lowercase strings separated by '_', '-' to camel case (got from internet)
String.prototype.toCamelCase = function() {
    return this.replace(/^([A-Z])|[\s-_](\w)/g, function(match, p1, p2, offset) {
        if (p2) return p2.toUpperCase();
        return p1.toLowerCase();        
    });
};

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Retrieves the link information for fields and from clause
function setLinkQueryInfo (row, linkInfo, tableName, view_prefix) {

    // Clear the previous link information
    linkInfo.clearQueryInfo();

    var linkFields = "";
    var linkTableSuffix = 0;
    var linkTableAlias = "L" + linkTableSuffix;
    query = "select distinct externalRefType from " + view_prefix + "LINK_VW where internalRefType = '" + tableName + "';";

    // If there isn't a link event created yet, this will return an error
    try {
       linkFields = snowflake.execute({sqlText:query});
    }
    catch (e) {
       return;
    }

    // Loop through link fields
    while (linkFields.next()) {

        // Adds link information (Needs to be refactored if used)
        linkInfo.addField(", " + linkTableAlias + ".externalId as " + linkFields.getColumnValue(1).toLowerCase().toCamelCase() + "Id"); 
        linkInfo.addFromClause(" left join " + view_prefix + "LINK_VW as " + linkTableAlias + " on " + linkTableAlias + ".internalId = dataObject:" + row.rowId + " and " + linkTableAlias + ".internalRefType = '" + tableName + "' and " + linkTableAlias + ".externalRefType = '" + linkFields.getColumnValue(1) + "'");
        
        // Changes the link alias (if there is more than one link field, they need to join with different versions of the link table)
        linkTableSuffix ++;
        linkTableAlias = "L" + linkTableSuffix;

    }
}

// Include a field in the select statment
function setSelectFields(row, field_prefix) {

    var queryField = "";

    // The project event has project information inside the dataobject as well
    if (row.field != "projectId" && row.field != "projectName") {
        
        // Task has an action field inside the dataObject
        if (row.field == "action") {                
            queryField = ", " + field_prefix + row.field + "::" + row.type + " as " + row.recordType + row.fieldAlias;
        } else {
            switch(row.type) {
              case 'TIMESTAMP_TZ':
              case 'DATE':
                //queryField = ", " + "to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM')"  + " as " + row.fieldAlias;
                
                queryField = ", " + "case when " + field_prefix + row.field + " RLIKE '\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}[.]\\\\d{6}[+]\\\\d{2}:\\\\d{2}' then to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') "  + 
                                         "when " + field_prefix + row.field + " RLIKE '\\\\d{4}-\\\\d{2}-\\\\d{2}' then to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD') " +
                "else null end as " + row.fieldAlias;
                
                break;
//              case 'DATE':
//                queryField = ", " + "to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD')"  + " as " + row.fieldAlias;
//                break;
              default:
                queryField = ", " + field_prefix + row.field + "::" + row.type + " as " + row.fieldAlias;
            }
        }
    }

    return queryField;
}

// Executes the queries in the array
function executeQueries(queryArray) {

    // Execute Queries in the array
    queryArray.forEach(function(entry) {
        // Obs1.: Including a rule to exclude the case member inner jsons, since they have the same names as the consumer inner jsons
        if (!entry.startsWith("--") 
        && !(entry.indexOf("CRM_COMMUNICATION_PREFERENCES_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_CONSUMER_CONSENT_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_CONSUMER_IDENTIFICATION_NUMBER_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_TASKS_VW") != -1 && entry.indexOf("  = 'BusinessUnit'") != -1)) {
            try {
                snowflake.execute({sqlText:entry});
            }
            catch (e) {                
                snowflake.execute({sqlText:"insert into CFG_CRM_CREATION_ERROR values (:1, current_timestamp, :2)", binds:[entry, e.message]});
            }
        } else if (!entry.startsWith("--")){
        
            queryArray[queryArray.indexOf(entry)] = "-- " + entry;
        }
    });
}

// Creates the query for inner JSON (JSON or array of JSON)
function createCRMInnerQuery(row, crmInnerQueryInfo, src_table, field_prefix, fields_table, view_prefix) {

    var innerPrefix = "";
    var innerRow = new rowInfo();
    var innerTableName = row.field.slice(0,1).toUpperCase() + row.field.slice(1, row.field.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
    var innerQuery = "select * from " + fields_table + " where path = '" + row.recordType + "." + row.field + "' order by recordType, path, field";
    
    // Drop statment if required (included in the array as a comment)
    dropViewSts.push("-- drop view " + dst_schema + "." + view_prefix + innerTableName + "_VW;");
    
    // Inner query start statment
    crmInnerQueryInfo.query = "create or replace view " + dst_schema + "." + view_prefix + innerTableName + "_VW as " +
                              "select mt.action::VARCHAR as ACTION, " +
                                     "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                     "mt.recordType::VARCHAR as RECORD_TYPE, " +
                                     "mt.projectId::DECIMAL as PROJECT_ID, " +
                                     "mt.projectName::VARCHAR as PROJECT_NAME";
                                
    // Defines the prefix and from clause depending on the type (ARRAY or OBJECT)
    if (row.rawType == 'ARRAY') {
        innerPrefix = 'VALUE:';        
        crmInnerQueryInfo.addFromClause(" from (select * " + 
                                              " from " + src_table + ", lateral flatten(input=> " + field_prefix + row.field + ")) as mt " + 
                                              " join (select projectId as projectIdin, " + field_prefix + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                                    " from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by projectIdin, " + row.rowId + "c) currentRecord " + 
                                              " on mt.projectId = currentRecord.ProjectIdin " + 
                                              " and " + field_prefix + row.rowId + " = currentRecord." + row.rowId + "c  " + 
                                              " and eventCreatedOn = currentRecord.maxEventCreatedOn ");
    } else {
        innerPrefix = field_prefix + row.field + ":";
        crmInnerQueryInfo.addFromClause(" from " + src_table + " as mt " + 
                                             " join (select projectId as projectIdin, " + field_prefix + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                                   " from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by projectIdin, " + row.rowId + "c) currentRecord " + 
                                        " on mt.projectId = currentRecord.ProjectIdin " + 
                                        " and " + field_prefix + row.rowId + " = currentRecord." + row.rowId + "c " + 
                                        " and eventCreatedOn = currentRecord.maxEventCreatedOn ");
    }
    
    // CRM Where clase base statment
    crmInnerQueryInfo.addWhereCondition("replace(recordType, ' ', '')  = '" + row.recordType + "'");
    
    // Retrieve the fields of the inner JSON
    var innerFields = snowflake.execute({sqlText:innerQuery});

    // Loop through the inner fields
    while (innerFields.next()) {

        // Populates the inner query fields
        innerRow.populateFields(innerFields);        
        crmInnerQueryInfo.addField(setSelectFields(innerRow, innerPrefix));
    }

    // Creates the inner JSON query
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fields);
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fromClause);
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.whereClause + ";");

}

// Creates views statement based on passed base query
function createViewsStatment(query, src_table, fields_table, field_prefix, view_prefix) {
    // Variables
    var tableName = "";
    var viewFields = "";
    var row = new rowInfo();
    var crmQueryInfo = new queryInfo();
    var crmInnerQueryInfo = new queryInfo();
    var linkInfo = new queryInfo();

    // Get view fields
    viewFields = snowflake.execute({sqlText:query});

    // Loop through query fields
    while (viewFields.next()) {

        // Populates the row information
        row.populateFields(viewFields);

        // If the table name changed, creates the query for the previous view
        //if (tableName != row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase()) {
        if (tableName != viewFields.getColumnValue(2).replace(/ /g, "_",1).toUpperCase()) {

            // For the first call, the tableName is null and we can't create the view statment
            if (tableName != "") {

                // Creates the CRM query statment
                crmQueryInfo.addQueryPart(crmQueryInfo.fields);
                //crmQueryInfo.addQueryPart(linkInfo.fields);
                crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);
                //crmQueryInfo.addQueryPart(linkInfo.fromClause);
                crmQueryInfo.addQueryPart(crmQueryInfo.whereClause + ";");

                // Adds the queries to the arrays                
                crmQueryArray.push(crmQueryInfo.query);
            }

            // Clear information
            crmQueryInfo.clearQueryInfo();

            // Defines the table name used to create the view (view_prefix + tableName + _VW)
            //tableName = row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
            tableName = viewFields.getColumnValue(2).replace(/ /g, "_",1).toUpperCase();
            
            // CRM start statment
            crmQueryInfo.query = "create or replace view "+ dst_schema + "." + view_prefix + tableName + "_VW as " +
                                 "select mt.action::VARCHAR as ACTION, " +
                                 "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                 "mt.recordType::VARCHAR as RECORD_TYPE, " +
                                 "mt.projectId::DECIMAL as PROJECT_ID, " +
                                 "mt.projectName::VARCHAR as PROJECT_NAME";

            // CRM from clause base statment
            crmQueryInfo.addFromClause(" from " + src_table + " as mt join " + 
                                       "(select projectId as projectIdin, dataObject:" + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " +
                                        "from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by projectIdin, " + row.rowId + "c) currentRecord " + 
                                        "on mt.projectId = currentRecord.ProjectIdin " +
                                        "and dataobject:" + row.rowId + " = currentRecord." + row.recordType + "Idc " +
                                        "and mt.eventCreatedOn = currentRecord.maxEventCreatedOn ");

            // CRM Where clase base statment
            crmQueryInfo.addWhereCondition("replace(recordType, ' ', '')  = '" + row.recordType + "'");

            // Retrieve CRM link information (needs the link view created)
            if (row.recordType != 'Link') {
                // This will include the columns on both views
                // Since we don't know the parent/child, it is better to create this relationship in the datasets (to keep the views at the PK level)
                //setLinkQueryInfo (row, linkInfo, tableName, view_prefix);
            }

        } 

        // Retrive CRM field statment
        // If it is an object or array field (creates an inner JSON view statment)
        if (row.rawType == 'OBJECT' || row.rawType == 'ARRAY') {
            crmInnerQueryInfo.clearQueryInfo();
            createCRMInnerQuery(row, crmInnerQueryInfo, src_table, field_prefix, fields_table, view_prefix)
            crmInnerQueryArray.push(crmInnerQueryInfo.query);
        
        // Primitive fields
        } else {
            crmQueryInfo.addField(setSelectFields(row, field_prefix));
        }
    }
    
    // There are no fields to process (empty query)
    if (tableName == "") {
        return;
    }

    // Adds the from clause information for the last queries statments (Link table pairs will be created here)
    if (row.recordType == 'Link') {
    
        var linkPairQuery = "select distinct VALUE:internalRefType, VALUE:externalRefType " + 
                            "from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA, lateral flatten(input=> dataObject:externalLinkPayload) f " + 
                            "where recordType = 'Link' " + 
                            "and VALUE:internalRefType::VARCHAR is not null " + 
                            "and VALUE:externalRefType::VARCHAR is not null " + 
                            "order by 1;"
        
        // Get view fields
        var linkPairs = snowflake.execute({sqlText:linkPairQuery});

        // Loop through Link pairs
        while (linkPairs.next()) {
        
            // Drop statment if required (included in the array as a comment)
            dropViewSts.push("-- drop view " + dst_schema + "." + view_prefix + tableName + "_" + linkPairs.getColumnValue(1) + "_" + linkPairs.getColumnValue(2) + "_VW;");
        
            crmQueryInfo.query = "create or replace view " + dst_schema + "." + view_prefix + tableName + "_" + linkPairs.getColumnValue(1) + "_" + linkPairs.getColumnValue(2) + "_VW as " +
                                 "select mt.action::VARCHAR as ACTION, " +
                                 "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                 "mt.recordType::VARCHAR as RECORD_TYPE, " +
                                 "mt.projectId::DECIMAL as PROJECT_ID, " +
                                 "mt.projectName::VARCHAR as PROJECT_NAME";
                                 
            // Adds the field information for the last queries statments
            crmQueryInfo.addQueryPart(crmQueryInfo.fields);
        
            crmQueryInfo.addQueryPart(" from (select * from " + src_table + ", lateral flatten(input=> dataObject:externalLinkPayload) f where recordType = 'Link') as mt " + 
                                       "join (select projectId as projectIdin, VALUE:externalLinkId as externalLinkIdc, VALUE:internalRefType as internalRefTypec, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                             "from " + src_table + ", lateral flatten(input=> dataObject:externalLinkPayload) " + 
                                             "where recordType = 'Link' and value:effectiveEndDate::TIMESTAMP_TZ IS NULL group by projectIdin, externalLinkIdc, internalRefTypec) currentRecord " + 
                                       "on mt.projectId = currentRecord.ProjectIdin " +
                                       "and VALUE:externalLinkId = currentRecord.externalLinkIdc and VALUE:internalRefType = currentRecord.internalRefTypec " + 
                                       "and mt.eventCreatedOn = currentRecord.maxEventCreatedOn " + 
                                       "where VALUE:effectiveEndDate::TIMESTAMP_TZ IS NULL " + 
                                       "and VALUE:internalRefType = '" + linkPairs.getColumnValue(1) + "' " +
                                       "and VALUE:externalRefType = '" + linkPairs.getColumnValue(2) + "';");
                                       
            // Adds the queries to the arrays    
            crmQueryArray.push(crmQueryInfo.query);
        }
        
    } else {
    
        // Drop statment if required (included in the array as a comment)
        dropViewSts.push("-- drop view "+ dst_schema + "." + view_prefix + tableName + "_VW;");
        
        // Adds the field information for the last queries statments
        crmQueryInfo.addQueryPart(crmQueryInfo.fields);
        //crmQueryInfo.addQueryPart(linkInfo.fields);
    
        crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);        
        //crmQueryInfo.addQueryPart(linkInfo.fromClause);
        crmQueryInfo.addQueryPart(crmQueryInfo.whereClause + ";");
        
        // Adds the queries to the arrays    
        crmQueryArray.push(crmQueryInfo.query);
    }
    
    // If the function is called again, tableName has to be empty to avoid the execution of an incomplete statement
    tableName = "";

}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters(dst_db, dst_schema);

// Retrieve the Stage fields (link)

query = "select * from " + fields_table + " where path = 'Link.externalLinkPayload' order by recordType, path, field";            
createViewsStatment(query, src_table, fields_table, "VALUE:", view_prefix);

// Needs to be ran before the others since the other tables might have fields based on the link event (commented currently)
//executeQueries(crmQueryArray);

// Retrieve the Stage fields (except link, different query)
query = "select * from " + fields_table + " where path = replace(recordType, ' ', '') and recordType != 'Link' order by recordType, path, field";
createViewsStatment(query, src_table, fields_table, "dataObject:", view_prefix);

allQueries.push(...crmQueryArray);
allQueries.push(...crmInnerQueryArray);

// Included in the reverse order to keep the drop commands consistent
allQueries.push(...dropViewSts.reverse());

// Execute all queries
executeQueries(allQueries);

return allQueries;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_create_views('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'CRM_', 'MARS_DP4BI_DEV', 'SOLACE');

-- Creates the views over the JSON
create or replace procedure SOLACE.dp4bi_sol_export_s3(DATE varchar, OPERATION varchar)
returns array
language javascript
execute as CALLER
as
$$
// Arguments (convert arguments to lower case)
// date is the datetime from when we want to export the events
var date = DATE;
var operation = OPERATION;
var query = "";
var whereClause = "";
var allQueries = [];
var day = date.substring(8,10);
var month = date.substring(5,7);
var year = date.substring(0,4);

// Set the date formats for the procedure
function setSessionParameters() {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use schema SOLACE;";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Executes the queries in the array
function executeQueries(queryArray) {

    // Execute Queries in the array
    queryArray.forEach(function(entry) {
            try {
                snowflake.execute({sqlText:entry});
            }
            catch (e) {                
                snowflake.execute({sqlText:"insert into CTL_CRM_CREATION_ERROR values (:1, current_timestamp, :2)", binds:[entry, e.message]});
            }
        
    });
}

// Retrieves the link information for fields and from clause
function exportEvents () {
    
    if (operation == 'day') {
        whereClause = "WHERE DATA:eventCreatedOn >= '" + date + "' and DATA:eventCreatedOn < dateadd(day, 1, '"  + date + "') ";
    } else {
        whereClause = "WHERE DATA:eventCreatedOn >= '" + date + "' ";
    }
    
    query = "select distinct EVENTNAME from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA " + whereClause + ";";
    
    var events = snowflake.execute({sqlText:query});
    
    // Loop through link fields
    while (events.next()) {
        
        if (events.getColumnValue(1) != null) {
    
            query = "copy into '@SOLACE.MARS_DP4BI_DEV_S3_SOL_QA/" + year + month + day + "/" + events.getColumnValue(1) + ".json' from (select DATA from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA " + whereClause + " and EVENTNAME = '" + events.getColumnValue(1) + "' order by DATA:eventCreatedOn) OVERWRITE = TRUE SINGLE = TRUE file_format = (format_name ='CSV_FORMAT_FULL' compression='NONE');";
        
            // Adds the queries to the arrays                
            allQueries.push(query);        
        }
    }
    
    query = "copy into '@SOLACE.MARS_DP4BI_DEV_S3_SOL_QA/" + year + month + day + "/ALL_EVENTS.json' from (select DATA:eventName, DATA:eventCreatedOn, DATA from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA WHERE DATA:eventCreatedOn >= '" + date + "' order by DATA:eventCreatedOn) OVERWRITE = TRUE SINGLE = TRUE file_format = (format_name ='CSV_FORMAT_FULL' compression='NONE');";
    allQueries.push(query);
}

// Main code
setSessionParameters();
exportEvents(date);
// Execute all queries
executeQueries(allQueries);

return allQueries;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_export_s3('2020-06-25T00:00:00.000000+00:00', 'day');create table CTL_CRM_CREATION_ERROR (
query string ,
creation_time timestamp_tz,
error string);

-- Create a stream on the event raw table
create or replace stream EVENT_RAW_DATA_STREAM on table EVENT_RAW_DATA;
select * from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM;

-- Create a stream on the event fields table
create or replace stream CFG_EVENTS_FIELDS_STREAM on table CFG_EVENTS_FIELDS;

-- Create a task to schedule the update of the views process
create or replace task SOLACE.DP4BI_VIEW_AUTOMATION_TASK 
                       WAREHOUSE = MARS_DP4BI_LOAD_WH 
                       SCHEDULE = 'USING CRON * * * * * UTC' 
                       WHEN system$stream_has_data('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM')
as  
call mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA','CRM_', 'MARS_DP4BI_DEV', 'SOLACE', 'PUBLIC');
alter task SOLACE.DP4BI_VIEW_AUTOMATION_TASK resume;
show tasks;

show procedures;
drop procedure DP4BI_SOL_CREATE_VIEWS(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR);
drop procedure DP4BI_SOL_JSON_MC_FIELDS_UPDATE(VARCHAR, VARCHAR, VARCHAR, VARCHAR);
drop procedure DP4BI_SOL_MC_AUTOMATION_WORKFLOW(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR);


-- Procedure with the calls in the required order
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow(SRC_FIELDS_TABLE varchar, DST_FIELDS_TABLE varchar, SRC_TABLE varchar, VIEW_PREFIX varchar, DST_DB varchar, DST_SCHEMA_FIELDS varchar, DST_SCHEMA_VIEWS varchar)
returns string
language javascript
execute as CALLER
as
$$
// Arguments (convert arguments to lower case)
var src_fields_table = SRC_FIELDS_TABLE;
var dst_fields_table = DST_FIELDS_TABLE;
var src_table = SRC_TABLE;
var view_prefix = VIEW_PREFIX;
var dst_db = DST_DB;
var dst_schema_fields = DST_SCHEMA_FIELDS;
var dst_schema_views = DST_SCHEMA_VIEWS;

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Main code
try {
  // Set the formats to our definitions of DATE and TIMESTAMP
  setSessionParameters(dst_db, dst_schema_fields);

  // Update fields' definitions
  snowflake.execute({sqlText:"call mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update(:1, :2, :3, :4);", binds:[src_fields_table, dst_fields_table, dst_db, dst_schema_fields]});
  
  // Update views' definitions
  snowflake.execute({sqlText:"call mars_dp4bi_dev.solace.dp4bi_sol_create_views(:1, :2, :3, :4, :5);", binds:[src_table, dst_fields_table, view_prefix, dst_db, dst_schema_views]});
  

  return 0;
} catch(e) {
    return e.message;
}
$$
;
call mars_dp4bi_dev.solace.dp4bi_sol_mc_automation_workflow('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA_STREAM', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA','CRM_', 'MARS_DP4BI_DEV', 'SOLACE', 'PUBLIC');


-- updates the field table with the new fields
-- Since we don't know the type without a value, we only added a field in the field once we can evaluate its type
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update(SRC_FIELDS_TABLE varchar, DST_FIELDS_TABLE varchar, DST_DB varchar, DST_SCHEMA varchar)
returns string
language javascript
execute as CALLER
as
$$

// Arguments (convert arguments to lower case)
var src_fields_table = SRC_FIELDS_TABLE;
var dst_fields_table = DST_FIELDS_TABLE;
var dst_db = DST_DB;
var dst_schema = DST_SCHEMA;

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters(dst_db, dst_schema);

var statment = "merge into " + dst_fields_table + " dst_tb using \n" + 
               "(select regexp_replace(regexp_replace(recordType, '( ){1,}', '') || '.' || regexp_replace(regexp_replace(regexp_replace(f.path, key, '', 1, regexp_count(f.path, key)), '[0-9]', ''), ']', ''), '[\[]', '') || key as id, \n" +               
               "        recordType::VARCHAR as recordType, \n" +
               "        key as field, \n" +
               "        typeof(f.value)::VARCHAR as raw_type, \n" +
               "        case when raw_type = 'VARCHAR' then (CASE when try_to_timestamp_tz(any_value(f.value)::VARCHAR) IS NOT NULL then 'TIMESTAMP_TZ' \n" +
               "                                                  when try_to_date(any_value(f.value)::VARCHAR) IS NOT NULL then 'DATE' else 'VARCHAR' end) \n" +
               "             when raw_type = 'ARRAY' or raw_type = 'OBJECT' then 'VARIANT' \n" +
               "             when raw_type = 'INTEGER' then 'DECIMAL' else raw_type end as type, \n" +
               "        RTRIM(regexp_replace(regexp_replace(recordType, '( ){1,}', '') || '.' || regexp_replace(regexp_replace(regexp_replace(f.path, key, '', 1, regexp_count(f.path, key)), '[0-9]', ''), ']', ''), '[\[]', ''),'.') as path \n" +
               " from " + src_fields_table + ", lateral flatten (dataObject, recursive => true) f \n" +
               " where  typeof(f.value) <> 'NULL_VALUE' \n" +
               "    and key <> 'NULL' \n" +
               " group by 1,2,3,4,6 \n" +
               " minus \n" +
               " select * from " + dst_fields_table + ") as currFields on dst_tb.id = currfields.id \n" +
                 "when matched then update set dst_tb.recordType = currfields.recordType, \n" +
                                              "dst_tb.field = currfields.field, \n" +
                                              "dst_tb.raw_type = currfields.raw_type, \n" +
                                              "dst_tb.type = currfields.type, \n" +
                                              "dst_tb.path = currfields.path \n" +
                 "when not matched then insert (id ,recordType, field, raw_type, type, path) \n" +
                                       "values (currfields.id ,currfields.recordType, currfields.field, currfields.raw_type, currfields.type, currfields.path);";

snowflake.execute({sqlText:statment});
return statment;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_json_mc_fields_update('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', ' MARS_DP4BI_DEV', 'SOLACE');

-- Creates the views over the JSON
create or replace procedure mars_dp4bi_dev.solace.dp4bi_sol_create_views(SRC_TABLE varchar, FIELDS_TABLE varchar, VIEW_PREFIX varchar, DST_DB varchar, DST_SCHEMA varchar)
returns array
language javascript
execute as CALLER
as
$$

// Arguments (convert arguments to lower case)
// src_table is the source event table
// fields_table is the table that has the fields information
// stage_prefix is the prefix of the stage tables
// view_prefix is the prefix of the final views
var src_table = SRC_TABLE;
var fields_table = FIELDS_TABLE;
var view_prefix = VIEW_PREFIX;
var dst_db = DST_DB;
var dst_schema = DST_SCHEMA;

// Variables
var query = "";
var crmQueryArray = [];
var crmInnerQueryArray = [];
var allQueries = [];
var dropViewSts = [];

// Objects

// Stores query information
var queryInfo = function() {
    this.query = "";
    this.fields = "";
    this.fromClause = "";
    this.whereClause ="";

    this.addQueryPart = function(part) {
        this.query = this.query + part;
    };

    this.addField = function(newField) {
        this.fields = this.fields + newField;
    };

    this.addFromClause = function(newFromClause) {
        this.fromClause = this.fromClause + newFromClause;
    };

    this.addWhereCondition = function(newWhereCondition) {
        if (this.whereClause == "") {
            this.whereClause = " where " + newWhereCondition;
        } else {
            this.whereClause = this.whereClause + " and " + newWhereCondition;
        }

    };

    this.clearQueryInfo = function() {
        this.fields = "";
        this.fromClause =  "";
        this.whereClause = "";
        this.query = "";
    };
}

// Stores JSON_EVENTS_FIELDS_INFO row information
var rowInfo = function() {
    this.id = "";
    this.recordType = "";
    this.field = "";
	this.fieldAlias = "";					 
    this.rawType = "";
    this.type = "";
    this.path = "";
    this.rowId = "";

    this.populateFields = function (fieldValues) {
        
        var formatedRecordType = fieldValues.getColumnValue(2).replace(/ /g, "",1);
    
        this.id = fieldValues.getColumnValue(1);
        this.recordType = formatedRecordType;
        this.field = fieldValues.getColumnValue(3);
		this.fieldAlias = fieldValues.getColumnValue(3).slice(0,1).toUpperCase() + fieldValues.getColumnValue(3).slice(1, fieldValues.getColumnValue(3).length).replace( /(((?<![A-Z])[A-Z]))/g, "_$1",1).toUpperCase();
        this.rawType = fieldValues.getColumnValue(4);
        this.type = fieldValues.getColumnValue(5);
        this.path = fieldValues.getColumnValue(6);
        this.rowId = formatedRecordType.slice(0,1).toLowerCase() + formatedRecordType.slice(1, fieldValues.getColumnValue(2).length) + "Id";
    };
    
};

// Functions

// Converts lowercase strings separated by '_', '-' to camel case (got from internet)
String.prototype.toCamelCase = function() {
    return this.replace(/^([A-Z])|[\s-_](\w)/g, function(match, p1, p2, offset) {
        if (p2) return p2.toUpperCase();
        return p1.toLowerCase();        
    });
};

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema) {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_LOAD_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Retrieves the link information for fields and from clause
function setLinkQueryInfo (row, linkInfo, tableName, view_prefix) {

    // Clear the previous link information
    linkInfo.clearQueryInfo();

    var linkFields = "";
    var linkTableSuffix = 0;
    var linkTableAlias = "L" + linkTableSuffix;
    query = "select distinct externalRefType from " + view_prefix + "LINK_VW where internalRefType = '" + tableName + "';";

    // If there isn't a link event created yet, this will return an error
    try {
       linkFields = snowflake.execute({sqlText:query});
    }
    catch (e) {
       return;
    }

    // Loop through link fields
    while (linkFields.next()) {

        // Adds link information (Needs to be refactored if used)
        linkInfo.addField(", " + linkTableAlias + ".externalId as " + linkFields.getColumnValue(1).toLowerCase().toCamelCase() + "Id"); 
        linkInfo.addFromClause(" left join " + view_prefix + "LINK_VW as " + linkTableAlias + " on " + linkTableAlias + ".internalId = dataObject:" + row.rowId + " and " + linkTableAlias + ".internalRefType = '" + tableName + "' and " + linkTableAlias + ".externalRefType = '" + linkFields.getColumnValue(1) + "'");
        
        // Changes the link alias (if there is more than one link field, they need to join with different versions of the link table)
        linkTableSuffix ++;
        linkTableAlias = "L" + linkTableSuffix;

    }
}

// Include a field in the select statment
function setSelectFields(row, field_prefix) {

    var queryField = "";

    // The project event has project information inside the dataobject as well
    if (row.field != "projectId" && row.field != "projectName") {
        
        // Task has an action field inside the dataObject
        if (row.field == "action") {                
            queryField = ", " + field_prefix + row.field + "::" + row.type + " as " + row.recordType + row.fieldAlias;
        } else {
            switch(row.type) {
              case 'TIMESTAMP_TZ':
              case 'DATE':
                //queryField = ", " + "to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM')"  + " as " + row.fieldAlias;
                
                queryField = ", " + "case when " + field_prefix + row.field + " RLIKE '\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}[.]\\\\d{6}[+]\\\\d{2}:\\\\d{2}' then to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') "  + 
                                         "when " + field_prefix + row.field + " RLIKE '\\\\d{4}-\\\\d{2}-\\\\d{2}' then to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD') " +
                "else " + field_prefix + row.field + "::VARCHAR end as " + row.fieldAlias;
                
                break;
//              case 'DATE':
//                queryField = ", " + "to_timestamp_tz(" + field_prefix + row.field + "::VARCHAR, 'YYYY-MM-DD')"  + " as " + row.fieldAlias;
//                break;
              default:
                queryField = ", " + field_prefix + row.field + "::" + row.type + " as " + row.fieldAlias;
            }
        }
    }

    return queryField;
}

// Executes the queries in the array
function executeQueries(queryArray) {

    // Execute Queries in the array
    queryArray.forEach(function(entry) {
        // Obs1.: Including a rule to exclude the case member inner jsons, since they have the same names as the consumer inner jsons
        if (!entry.startsWith("--") 
        && !(entry.indexOf("CRM_COMMUNICATION_PREFERENCES_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_CONSUMER_CONSENT_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_CONSUMER_IDENTIFICATION_NUMBER_VW") != -1 && entry.indexOf("  = 'CaseMember'") != -1)
        && !(entry.indexOf("CRM_TASKS_VW") != -1 && entry.indexOf("  = 'BusinessUnit'") != -1)) {
            try {
                snowflake.execute({sqlText:entry});
            }
            catch (e) {                
                snowflake.execute({sqlText:"insert into CFG_CRM_CREATION_ERROR values (:1, current_timestamp, :2)", binds:[entry, e.message]});
            }
        } else if (!entry.startsWith("--")){
        
            queryArray[queryArray.indexOf(entry)] = "-- " + entry;
        }
    });
}

// Creates the query for inner JSON (JSON or array of JSON)
function createCRMInnerQuery(row, crmInnerQueryInfo, src_table, field_prefix, fields_table, view_prefix) {

    var innerPrefix = "";
    var innerRow = new rowInfo();
    var innerTableName = row.field.slice(0,1).toUpperCase() + row.field.slice(1, row.field.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
    var innerQuery = "select * from " + fields_table + " where path = '" + row.recordType + "." + row.field + "' order by recordType, path, field";
    
    // Drop statment if required (included in the array as a comment)
    dropViewSts.push("-- drop view " + dst_schema + "." + view_prefix + innerTableName + "_VW;");
    
    // Inner query start statment
    crmInnerQueryInfo.query = "create or replace view " + dst_schema + "." + view_prefix + innerTableName + "_VW as " +
                              "select mt.action as ACTION, " +
                                     "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                     "mt.recordType as RECORD_TYPE, " +
                                     "mt.projectId as PROJECT_ID, " +
                                     "mt.projectName as PROJECT_NAME";
                                
    // Defines the prefix and from clause depending on the type (ARRAY or OBJECT)
    if (row.rawType == 'ARRAY') {
        innerPrefix = 'VALUE:';        
        crmInnerQueryInfo.addFromClause(" from (select * " + 
                                              " from " + src_table + ", lateral flatten(input=> " + field_prefix + row.field + ")) as mt " + 
                                              " join (select " + field_prefix + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                                    " from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by " + row.rowId + "c) currentRecord " + 
                                              " on " + field_prefix + row.rowId + " = currentRecord." + row.rowId + "c  " + 
                                              " and eventCreatedOn = currentRecord.maxEventCreatedOn ");
    } else {
        innerPrefix = field_prefix + row.field + ":";
        crmInnerQueryInfo.addFromClause(" from " + src_table + " as mt " + 
                                             " join (select " + field_prefix + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                                   " from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by " + row.rowId + "c) currentRecord " + 
                                        " on " + field_prefix + row.rowId + " = currentRecord." + row.rowId + "c " + 
                                        " and eventCreatedOn = currentRecord.maxEventCreatedOn ");
    }
    
    // CRM Where clase base statment
    crmInnerQueryInfo.addWhereCondition("replace(recordType, ' ', '')  = '" + row.recordType + "'");
    
    // Retrieve the fields of the inner JSON
    var innerFields = snowflake.execute({sqlText:innerQuery});

    // Loop through the inner fields
    while (innerFields.next()) {

        // Populates the inner query fields
        innerRow.populateFields(innerFields);        
        crmInnerQueryInfo.addField(setSelectFields(innerRow, innerPrefix));
    }

    // Creates the inner JSON query
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fields);
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.fromClause);
    crmInnerQueryInfo.addQueryPart(crmInnerQueryInfo.whereClause + ";");

}

// Creates views statement based on passed base query
function createViewsStatment(query, src_table, fields_table, field_prefix, view_prefix) {
    // Variables
    var tableName = "";
    var viewFields = "";
    var row = new rowInfo();
    var crmQueryInfo = new queryInfo();
    var crmInnerQueryInfo = new queryInfo();
    var linkInfo = new queryInfo();

    // Get view fields
    viewFields = snowflake.execute({sqlText:query});

    // Loop through query fields
    while (viewFields.next()) {

        // Populates the row information
        row.populateFields(viewFields);

        // If the table name changed, creates the query for the previous view
        //if (tableName != row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase()) {
        if (tableName != viewFields.getColumnValue(2).replace(/ /g, "_",1).toUpperCase()) {

            // For the first call, the tableName is null and we can't create the view statment
            if (tableName != "") {

                // Creates the CRM query statment
                crmQueryInfo.addQueryPart(crmQueryInfo.fields);
                //crmQueryInfo.addQueryPart(linkInfo.fields);
                crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);
                //crmQueryInfo.addQueryPart(linkInfo.fromClause);
                crmQueryInfo.addQueryPart(crmQueryInfo.whereClause + ";");

                // Adds the queries to the arrays                
                crmQueryArray.push(crmQueryInfo.query);
            }

            // Clear information
            crmQueryInfo.clearQueryInfo();

            // Defines the table name used to create the view (view_prefix + tableName + _VW)
            //tableName = row.recordType.slice(0,1) + row.recordType.slice(1, row.recordType.length).replace( /([A-Z])/g, "_$1",1).toUpperCase();
            tableName = viewFields.getColumnValue(2).replace(/ /g, "_",1).toUpperCase();
            
            // CRM start statment
            crmQueryInfo.query = "create or replace view "+ dst_schema + "." + view_prefix + tableName + "_VW as " +
                                 "select mt.action as ACTION, " +
                                 "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                 "mt.recordType as RECORD_TYPE, " +
                                 "mt.projectId as PROJECT_ID, " +
                                 "mt.projectName as PROJECT_NAME";

            // CRM from clause base statment
            crmQueryInfo.addFromClause(" from " + src_table + " as mt join " + 
                                       "(select dataObject:" + row.rowId + " as " + row.rowId + "c, MAX(eventCreatedOn) as maxEventCreatedOn " +
                                        "from " + src_table + " where replace(recordType, ' ', '')  = '" + row.recordType + "' group by " + row.rowId + "c) currentRecord " + 
                                        "on dataobject:" + row.rowId + " = currentRecord." + row.recordType + "Idc " +
                                        "and mt.eventCreatedOn = currentRecord.maxEventCreatedOn ");

            // CRM Where clase base statment
            crmQueryInfo.addWhereCondition("replace(recordType, ' ', '')  = '" + row.recordType + "'");

            // Retrieve CRM link information (needs the link view created)
            if (row.recordType != 'Link') {
                // This will include the columns on both views
                // Since we don't know the parent/child, it is better to create this relationship in the datasets (to keep the views at the PK level)
                //setLinkQueryInfo (row, linkInfo, tableName, view_prefix);
            }

        } 

        // Retrive CRM field statment
        // If it is an object or array field (creates an inner JSON view statment)
        if (row.rawType == 'OBJECT' || row.rawType == 'ARRAY') {
            crmInnerQueryInfo.clearQueryInfo();
            createCRMInnerQuery(row, crmInnerQueryInfo, src_table, field_prefix, fields_table, view_prefix)
            crmInnerQueryArray.push(crmInnerQueryInfo.query);
        
        // Primitive fields
        } else {
            crmQueryInfo.addField(setSelectFields(row, field_prefix));
        }
    }
    
    // There are no fields to process (empty query)
    if (tableName == "") {
        return;
    }

    // Adds the from clause information for the last queries statments (Link table pairs will be created here)
    if (row.recordType == 'Link') {
    
        var linkPairQuery = "select distinct VALUE:internalRefType, VALUE:externalRefType " + 
                            "from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA, lateral flatten(input=> dataObject:externalLinkPayload) f " + 
                            "where recordType = 'Link' " + 
                            "and VALUE:internalRefType::VARCHAR is not null " + 
                            "and VALUE:externalRefType::VARCHAR is not null " + 
                            "order by 1;"
        
        // Get view fields
        var linkPairs = snowflake.execute({sqlText:linkPairQuery});

        // Loop through Link pairs
        while (linkPairs.next()) {
        
            // Drop statment if required (included in the array as a comment)
            dropViewSts.push("-- drop view " + dst_schema + "." + view_prefix + tableName + "_" + linkPairs.getColumnValue(1) + "_" + linkPairs.getColumnValue(2) + "_VW;");
        
            crmQueryInfo.query = "create or replace view " + dst_schema + "." + view_prefix + tableName + "_" + linkPairs.getColumnValue(1) + "_" + linkPairs.getColumnValue(2) + "_VW as " +
                                 "select mt.action as ACTION, " +
                                 "to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, " +
                                 "mt.recordType as RECORD_TYPE, " +
                                 "mt.projectId as PROJECT_ID, " +
                                 "mt.projectName as PROJECT_NAME";
                                 
            // Adds the field information for the last queries statments
            crmQueryInfo.addQueryPart(crmQueryInfo.fields);
        
            crmQueryInfo.addQueryPart(" from (select * from " + src_table + ", lateral flatten(input=> dataObject:externalLinkPayload) f where recordType = 'Link') as mt " + 
                                       "join (select VALUE:externalLinkId as externalLinkIdc, VALUE:internalRefType as internalRefTypec, MAX(eventCreatedOn) as maxEventCreatedOn " + 
                                             "from " + src_table + ", lateral flatten(input=> dataObject:externalLinkPayload) " + 
                                             "where recordType = 'Link' and value:effectiveEndDate::TIMESTAMP_TZ IS NULL group by externalLinkIdc, internalRefTypec) currentRecord " + 
                                       "on VALUE:externalLinkId = currentRecord.externalLinkIdc and VALUE:internalRefType = currentRecord.internalRefTypec " + 
                                       "and mt.eventCreatedOn = currentRecord.maxEventCreatedOn " + 
                                       "where VALUE:effectiveEndDate::TIMESTAMP_TZ IS NULL " + 
                                       "and VALUE:internalRefType = '" + linkPairs.getColumnValue(1) + "' " +
                                       "and VALUE:externalRefType = '" + linkPairs.getColumnValue(2) + "';");
                                       
            // Adds the queries to the arrays    
            crmQueryArray.push(crmQueryInfo.query);
        }
        
    } else {
    
        // Drop statment if required (included in the array as a comment)
        dropViewSts.push("-- drop view "+ dst_schema + "." + view_prefix + tableName + "_VW;");
        
        // Adds the field information for the last queries statments
        crmQueryInfo.addQueryPart(crmQueryInfo.fields);
        //crmQueryInfo.addQueryPart(linkInfo.fields);
    
        crmQueryInfo.addQueryPart(crmQueryInfo.fromClause);        
        //crmQueryInfo.addQueryPart(linkInfo.fromClause);
        crmQueryInfo.addQueryPart(crmQueryInfo.whereClause + ";");
        
        // Adds the queries to the arrays    
        crmQueryArray.push(crmQueryInfo.query);
    }
    
    // If the function is called again, tableName has to be empty to avoid the execution of an incomplete statement
    tableName = "";

}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters(dst_db, dst_schema);

// Retrieve the Stage fields (link)

query = "select * from " + fields_table + " where path = 'Link.externalLinkPayload' order by recordType, path, field";            
createViewsStatment(query, src_table, fields_table, "VALUE:", view_prefix);

// Needs to be ran before the others since the other tables might have fields based on the link event (commented currently)
//executeQueries(crmQueryArray);

// Retrieve the Stage fields (except link, different query)
query = "select * from " + fields_table + " where path = replace(recordType, ' ', '') and recordType != 'Link' order by recordType, path, field";
createViewsStatment(query, src_table, fields_table, "dataObject:", view_prefix);

allQueries.push(...crmQueryArray);
allQueries.push(...crmInnerQueryArray);

// Included in the reverse order to keep the drop commands consistent
allQueries.push(...dropViewSts.reverse());

// Execute all queries
executeQueries(allQueries);

return allQueries;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_create_views('MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA', 'MARS_DP4BI_DEV.SOLACE.CFG_EVENTS_FIELDS', 'CRM_', 'MARS_DP4BI_DEV', 'PUBLIC');

-- Creates the views over the JSON
create or replace procedure SOLACE.dp4bi_sol_export_s3(DATE varchar, OPERATION varchar)
returns array
language javascript
execute as CALLER
as
$$
// Arguments (convert arguments to lower case)
// date is the datetime from when we want to export the events
var date = DATE;
var operation = OPERATION;
var query = "";
var whereClause = "";
var allQueries = [];
var day = date.substring(8,10);
var month = date.substring(5,7);
var year = date.substring(0,4);

// Set the date formats for the procedure
function setSessionParameters() {    

    // To guarantee that the correct parameters are used
    query = "use role MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse MARS_DP4BI_DEV_WH;";
    snowflake.execute({sqlText:query});
    
    query = "use database MARS_DP4BI_DEV;";
    snowflake.execute({sqlText:query});
    
    query = "use schema SOLACE;";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Executes the queries in the array
function executeQueries(queryArray) {

    // Execute Queries in the array
    queryArray.forEach(function(entry) {
            try {
                snowflake.execute({sqlText:entry});
            }
            catch (e) {                
                snowflake.execute({sqlText:"insert into CTL_CRM_CREATION_ERROR values (:1, current_timestamp, :2)", binds:[entry, e.message]});
            }
        
    });
}

// Retrieves the link information for fields and from clause
function exportEvents () {
    
    if (operation == 'day') {
        whereClause = "WHERE DATA:eventCreatedOn::TIMESTAMP_TZ >= '" + date + "'::TIMESTAMP_TZ and DATA:eventCreatedOn::TIMESTAMP_TZ < dateadd(day, 1, '"  + date + "'::TIMESTAMP_TZ) ";
    } else {
        whereClause = "WHERE DATA:eventCreatedOn::TIMESTAMP_TZ >= '" + date + "'::TIMESTAMP_TZ ";
    }
    
    query = "select distinct EVENTNAME from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA " + whereClause + ";";
    
    var events = snowflake.execute({sqlText:query});
    
    // Loop through link fields
    while (events.next()) {
        
        if (events.getColumnValue(1) != null) {
    
            query = "copy into '@SOLACE.MARS_DP4BI_DEV_S3_SOL_QA/" + year + month + day + "/" + events.getColumnValue(1) + ".json' from (select DATA from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA " + whereClause + " and EVENTNAME = '" + events.getColumnValue(1) + "' order by DATA:eventCreatedOn::TIMESTAMP_TZ) OVERWRITE = TRUE SINGLE = TRUE file_format = (format_name ='CSV_FORMAT_FULL' compression='NONE');";
        
            // Adds the queries to the arrays                
            allQueries.push(query);        
        }
    }
    
    query = "copy into '@SOLACE.MARS_DP4BI_DEV_S3_SOL_QA/" + year + month + day + "/ALL_EVENTS.json' from (select DATA:eventName, DATA:eventCreatedOn, DATA from MARS_DP4BI_DEV.SOLACE.EVENT_FULL_JSON_DATA WHERE DATA:eventCreatedOn::TIMESTAMP_TZ >= '" + date + "'::TIMESTAMP_TZ order by DATA:eventCreatedOn::TIMESTAMP_TZ) OVERWRITE = TRUE SINGLE = TRUE file_format = (format_name ='CSV_FORMAT_FULL' compression='NONE');";
    allQueries.push(query);
}

// Main code
setSessionParameters();
exportEvents(date);
// Execute all queries
executeQueries(allQueries);

return allQueries;
$$;
call mars_dp4bi_dev.solace.dp4bi_sol_export_s3('2020-06-12T00:00:00.000000+00:00', 'day');

select '2020-06-15T00:00:00.000000+00:00'::TIMESTAMP_TZ, dateadd(day, 1, '2020-06-15T00:00:00.000000+00:00'::TIMESTAMP_TZ);

 select mt.action as ACTION, to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON, mt.recordType as RECORD_TYPE, mt.projectId as PROJECT_ID, mt.projectName as PROJECT_NAME, dataObject:caseId::DECIMAL as CASE_ID, case when dataObject:consumerDateOfBirth RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:consumerDateOfBirth::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:consumerDateOfBirth RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:consumerDateOfBirth::VARCHAR, 'YYYY-MM-DD') else dataObject:consumerDateOfBirth::VARCHAR end as CONSUMER_DATE_OF_BIRTH, dataObject:consumerFirstName::VARCHAR as CONSUMER_FIRST_NAME, dataObject:consumerId::DECIMAL as CONSUMER_ID, dataObject:consumerLastName::VARCHAR as CONSUMER_LAST_NAME, dataObject:consumerMiddleName::VARCHAR as CONSUMER_MIDDLE_NAME, dataObject:consumerRole::VARCHAR as CONSUMER_ROLE, dataObject:consumerSSN::VARCHAR as CONSUMER_SSN, dataObject:consumerStatus::VARCHAR as CONSUMER_STATUS, dataObject:consumerSuffix::VARCHAR as CONSUMER_SUFFIX, dataObject:consumerType::VARCHAR as CONSUMER_TYPE, dataObject:correlationId::VARCHAR as CORRELATION_ID, dataObject:createdBy::VARCHAR as CREATED_BY, case when dataObject:createdOn RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:createdOn::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:createdOn RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:createdOn::VARCHAR, 'YYYY-MM-DD') else dataObject:createdOn::VARCHAR end as CREATED_ON, case when dataObject:dateOfDeath RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:dateOfDeath::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:dateOfDeath RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:dateOfDeath::VARCHAR, 'YYYY-MM-DD') else dataObject:dateOfDeath::VARCHAR end as DATE_OF_DEATH, dataObject:dateOfDeathNotifiedBy::VARCHAR as DATE_OF_DEATH_NOTIFIED_BY, case when dataObject:dateOfDeathNotifiedDate RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:dateOfDeathNotifiedDate::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:dateOfDeathNotifiedDate RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:dateOfDeathNotifiedDate::VARCHAR, 'YYYY-MM-DD') else dataObject:dateOfDeathNotifiedDate::VARCHAR end as DATE_OF_DEATH_NOTIFIED_DATE, case when dataObject:dateOfSsnValidation RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:dateOfSsnValidation::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:dateOfSsnValidation RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:dateOfSsnValidation::VARCHAR, 'YYYY-MM-DD') else dataObject:dateOfSsnValidation::VARCHAR end as DATE_OF_SSN_VALIDATION, case when dataObject:effectiveEndDate RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:effectiveEndDate::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:effectiveEndDate RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:effectiveEndDate::VARCHAR, 'YYYY-MM-DD') else dataObject:effectiveEndDate::VARCHAR end as EFFECTIVE_END_DATE, case when dataObject:effectiveStartDate RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:effectiveStartDate::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:effectiveStartDate RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:effectiveStartDate::VARCHAR, 'YYYY-MM-DD') else dataObject:effectiveStartDate::VARCHAR end as EFFECTIVE_START_DATE, dataObject:genderCode::VARCHAR as GENDER_CODE, dataObject:notBornInd::BOOLEAN as NOT_BORN_IND, dataObject:preferredLanguage::VARCHAR as PREFERRED_LANGUAGE, case when dataObject:pregnancyDueDate RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:pregnancyDueDate::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:pregnancyDueDate RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:pregnancyDueDate::VARCHAR, 'YYYY-MM-DD') else dataObject:pregnancyDueDate::VARCHAR end as PREGNANCY_DUE_DATE, dataObject:pregnancyInd::BOOLEAN as PREGNANCY_IND, dataObject:relationShip::VARCHAR as RELATION_SHIP, dataObject:uiid::VARCHAR as UIID, dataObject:updatedBy::VARCHAR as UPDATED_BY, case when dataObject:updatedOn RLIKE '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{6}[+]\d{2}:\d{2}' then to_timestamp_tz(dataObject:updatedOn::VARCHAR, 'YYYY-MM-DD"T"HH24:MI:SS.FFTZH:TZM') when dataObject:updatedOn RLIKE '\d{4}-\d{2}-\d{2}' then to_timestamp_tz(dataObject:updatedOn::VARCHAR, 'YYYY-MM-DD') else dataObject:updatedOn::VARCHAR end as UPDATED_ON from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA as mt join (select dataObject:consumerId as consumerIdc, MAX(eventCreatedOn) as maxEventCreatedOn from MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA where replace(recordType, ' ', '')  = 'Consumer' group by consumerIdc) currentRecord on dataobject:consumerId = currentRecord.ConsumerIdc and mt.eventCreatedOn = currentRecord.maxEventCreatedOn  where replace(recordType, ' ', '')  = 'Consumer';

select * from test;
create or replace view test as 
select
   mt.action as ACTION,
   to_timestamp_tz(mt.eventCreatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') as EVENT_CREATED_ON,
   mt.recordType as RECORD_TYPE,
   mt.projectId as PROJECT_ID,
   mt.projectName as PROJECT_NAME,
   dataObject:caseId::DECIMAL as CASE_ID,
   case
      when
         dataObject:consumerDateOfBirth RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:consumerDateOfBirth::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:consumerDateOfBirth RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:consumerDateOfBirth::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:consumerDateOfBirth::VARCHAR 
   end
   as CONSUMER_DATE_OF_BIRTH, dataObject:consumerFirstName::VARCHAR as CONSUMER_FIRST_NAME, dataObject:consumerId::DECIMAL as CONSUMER_ID, dataObject:consumerLastName::VARCHAR as CONSUMER_LAST_NAME, dataObject:consumerMiddleName::VARCHAR as CONSUMER_MIDDLE_NAME, dataObject:consumerRole::VARCHAR as CONSUMER_ROLE, dataObject:consumerSSN::VARCHAR as CONSUMER_SSN, dataObject:consumerStatus::VARCHAR as CONSUMER_STATUS, dataObject:consumerSuffix::VARCHAR as CONSUMER_SUFFIX, dataObject:consumerType::VARCHAR as CONSUMER_TYPE, dataObject:correlationId::VARCHAR as CORRELATION_ID, dataObject:createdBy::VARCHAR as CREATED_BY, 
   case
      when
         dataObject:createdOn RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:createdOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:createdOn RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:createdOn::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:createdOn::VARCHAR 
   end
   as CREATED_ON, 
   case
      when
         dataObject:dateOfDeath RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfDeath::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:dateOfDeath RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfDeath::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:dateOfDeath::VARCHAR 
   end
   as DATE_OF_DEATH, dataObject:dateOfDeathNotifiedBy::VARCHAR as DATE_OF_DEATH_NOTIFIED_BY, 
   case
      when
         dataObject:dateOfDeathNotifiedDate RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfDeathNotifiedDate::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:dateOfDeathNotifiedDate RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfDeathNotifiedDate::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:dateOfDeathNotifiedDate::VARCHAR 
   end
   as DATE_OF_DEATH_NOTIFIED_DATE, 
   case
      when
         dataObject:dateOfSsnValidation RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfSsnValidation::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:dateOfSsnValidation RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:dateOfSsnValidation::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:dateOfSsnValidation::VARCHAR 
   end
   as DATE_OF_SSN_VALIDATION, 
   case
      when
         dataObject:effectiveEndDate RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:effectiveEndDate::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:effectiveEndDate RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:effectiveEndDate::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:effectiveEndDate::VARCHAR 
   end
   as EFFECTIVE_END_DATE, 
   case
      when
         dataObject:effectiveStartDate RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:effectiveStartDate::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:effectiveStartDate RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:effectiveStartDate::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:effectiveStartDate::VARCHAR 
   end
   as EFFECTIVE_START_DATE, dataObject:genderCode::VARCHAR as GENDER_CODE, dataObject:notBornInd::BOOLEAN as NOT_BORN_IND, dataObject:preferredLanguage::VARCHAR as PREFERRED_LANGUAGE, 
   case
      when
         dataObject:pregnancyDueDate RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:pregnancyDueDate::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:pregnancyDueDate RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:pregnancyDueDate::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:pregnancyDueDate::VARCHAR 
   end
   as PREGNANCY_DUE_DATE, dataObject:pregnancyInd::BOOLEAN as PREGNANCY_IND, dataObject:relationShip::VARCHAR as RELATION_SHIP, dataObject:uiid::VARCHAR as UIID, dataObject:updatedBy::VARCHAR as UPDATED_BY, 
   case
      when
         dataObject:updatedOn RLIKE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[.]\\d{6}[+]\\d{2}:\\d{2}' 
      then
         to_timestamp_tz(dataObject:updatedOn::VARCHAR, 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM') 
      when
         dataObject:updatedOn RLIKE '\\d{4}-\\d{2}-\\d{2}' 
      then
         to_timestamp_tz(dataObject:updatedOn::VARCHAR, 'YYYY-MM-DD') 
      else
         dataObject:updatedOn::VARCHAR 
   end
   as UPDATED_ON 
from
   MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA as mt 
   join
      (
         select
            dataObject:consumerId as consumerIdc,
            MAX(eventCreatedOn) as maxEventCreatedOn 
         from
            MARS_DP4BI_DEV.SOLACE.EVENT_RAW_DATA 
         where
            replace(recordType, ' ', '') = 'Consumer' 
         group by
            consumerIdc
      )
      currentRecord 
      on dataobject:consumerId = currentRecord.ConsumerIdc 
      and mt.eventCreatedOn = currentRecord.maxEventCreatedOn 
where
   replace(recordType, ' ', '') = 'Consumer';