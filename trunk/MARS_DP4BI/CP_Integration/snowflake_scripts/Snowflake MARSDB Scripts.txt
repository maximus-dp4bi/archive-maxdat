CREATE OR REPLACE TABLE MARS_DP4BI_DEV.MARSDB.CFG_DATABASE_PROJECT_MAP (
 DATABASE VARCHAR NOT NULL,
 PROJECT_ID DECIMAL, 
 PRIMARY KEY (DATABASE)
  );
truncate table CFG_DATABASE_PROJECT_MAP;
insert into 
    CFG_DATABASE_PROJECT_MAP(DATABASE, PROJECT_ID) 
VALUES 
    ('mars-consumer-blcrm', 44),
    ('mars-consumer-njsbe', 115),
    ('mars-contact-record-blcrm', 44),
    ('mars-contact-record-njsbe', 115),
    ('mars-contacts-blcrm', 44),
    ('mars-contacts-njsbe', 115),
    ('mars-task-management', 44),
    ('mars-task-management-njsbe', 115),
    ('mars-task-template', null),
    ('mars-tenant-manager', null)
;

CREATE OR REPLACE TABLE MARS_DP4BI_DEV.MARSDB.CFG_TASK_TYPE (
     TASK_TYPE_ID DECIMAL NOT NULL
    ,TASK_NAME VARCHAR NOT NULL
    ,TASK_DESCRIPTION VARCHAR
    ,OPERATIONS_GROUP VARCHAR
    ,SLA_DAYS DECIMAL
    ,SLA_DAYS_TYPE VARCHAR
    ,SLA_TARGET_DAYS DECIMAL
    ,SLA_JEOPARDY_DAYS DECIMAL
    ,UNIT_OF_WORK VARCHAR
);

select $1 from @"MARS_DP4BI_DEV"."MARSDB"."MARS_DP4BI_DEV_S3_MDB_MF"/NJ_CFG_TASK_TYPE.csv ;
truncate table "MARS_DP4BI_DEV"."MARSDB"."CFG_TASK_TYPE";
COPY INTO "MARS_DP4BI_DEV"."MARSDB"."CFG_TASK_TYPE"
  FROM @"MARS_DP4BI_DEV"."MARSDB"."MARS_DP4BI_DEV_S3_MDB_MF"/NJ_CFG_TASK_TYPE.csv
  FILE_FORMAT = ( FORMAT_NAME = 'MARS_DP4BI_DEV.MARSDB.MARSDB_CSV');
  
-- Create a stream on the mars logs raw table
create or replace stream MARSDB.MARSDB_RAW_LOGS_STREAM on table MARSDB.MARSDB_RAW_LOGS;
create or replace table MARSDB.MARSDB_RAW_LOGS_TMP as select *  from MARSDB.MARSDB_RAW_LOGS;
select * from MARSDB.MARSDB_RAW_LOGS_TMP;
select * from MARSDB.MARSDB_RAW_LOGS_STREAM;

-- Updates the project id value / create base views for the tables
create or replace procedure marsdb.dp4bi_mdb_project_id_update(DST_DB varchar, DST_SCHEMA varchar, FULL_UPD BOOLEAN, USER_ROLE varchar, DB_WAREHOUSE varchar)
returns array
language javascript
execute as CALLER
as
$$

// Arguments (convert arguments to lower case)
var dst_db = DST_DB;
var dst_schema = DST_SCHEMA;
var full_upd = FULL_UPD;
var user_role = USER_ROLE;
var db_warehouse = DB_WAREHOUSE;
var statment = "";
var allQueries = [];
var crtViewsQueries = [];
var errQueries = [];

// Set the date formats for the procedure
function setSessionParameters(dst_db, dst_schema, full) {    

    // To guarantee that the correct parameters are used
    query = "use role " + user_role + ";";
    snowflake.execute({sqlText:query});
    
    query = "use warehouse " + db_warehouse + ";";
    snowflake.execute({sqlText:query});
    
    query = "use database " + dst_db + ";";
    snowflake.execute({sqlText:query});
    
    query = "use schema " + dst_schema + ";";
    snowflake.execute({sqlText:query});
    
    // Set the expected Date formats
    query = "ALTER SESSION SET DATE_INPUT_FORMAT = 'YYYY-MM-DD'";
    snowflake.execute({sqlText:query});
    
    query = "ALTER SESSION SET TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD\"T\"HH24:MI:SS.FFTZH:TZM'";
    snowflake.execute({sqlText:query});
}

// Executes the queries in the array
function executeQueries(queryArray) {

    // Execute Queries in the array
    queryArray.forEach(function(entry) {
        // Obs1.: Including a rule to exclude the case member inner jsons, since they have the same names as the consumer inner jsons
        if (!entry.startsWith("--")) {
            try {
                snowflake.execute({sqlText:entry});
            }
            catch (e) {                
                errQueries.push(entry);
            }
        }
    });
}

// Update queries for the direct project id
function updateQueryDirectPrjId(tableName) {
    
    var dt_columns_stmt = "select COLUMN_NAME from " + dst_db + ".INFORMATION_SCHEMA.COLUMNS where table_name = '" + tableName + "' and data_type = 'TIMESTAMP_NTZ' and column_name like '%_UTC';";
    var dt_columns = snowflake.execute({sqlText:dt_columns_stmt});
        
    var updQuery = " update " + dst_db + "." + dst_schema + "." + tableName + " t " +
                   " set t.sf_processed = 1 ";
        
    // Include the timezones changes
    //while (dt_columns.next()) {
    //    updQuery = updQuery + ", t." + dt_columns.getColumnValue(1).substring(0, dt_columns.getColumnValue(1).length - 4) + " = convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t." + dt_columns.getColumnValue(1) + ")"
    //}
                       
    // Include the from/where clauses
    updQuery = updQuery + " from " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                          " where t.project_id = p.project_id "                           
        
        // If full (don't consider sf processed status, stream)
        if (!full_upd) {
            updQuery = updQuery + " and t.SF_PROCESSED = 0; ";
        } 
        // Only the tables in the stream with sf processed = 0
        else {
            updQuery = updQuery + "; ";
        }
        
        allQueries.push(updQuery);
}

// Update queries for the indirect project id by user id
function updateQueryIndirectUserPrjId(tableName) {
    
    var dt_columns_stmt = "select COLUMN_NAME from " + dst_db + ".INFORMATION_SCHEMA.COLUMNS where table_name = '" + tableName + "' and data_type = 'TIMESTAMP_NTZ' and column_name like '%_UTC';";
    var dt_columns = snowflake.execute({sqlText:dt_columns_stmt});
        
    var updQuery = " update " + dst_db + "." + dst_schema + "." + tableName + " t " +
                   " set t.sf_processed = 1 ";
        
    // Include the timezones changes (will be migrated t)
    // while (dt_columns.next()) {
    //    updQuery = updQuery + ", t." + dt_columns.getColumnValue(1).substring(0, dt_columns.getColumnValue(1).length - 4) + " = convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t." + dt_columns.getColumnValue(1) + ")"
    //}
                       
    // Include the from/where clauses
    updQuery = updQuery + " from " + dst_db + "." + dst_schema + ".MARSDB_USER u " +
                          " join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                          " on u.project_id = p.project_id " +
                          " where t.user_id = u.user_id "
        
        // If full (don't consider sf processed status, stream)
        if (!full_upd) {
            updQuery = updQuery + " and t.SF_PROCESSED = 0; ";
        } 
        // Only the tables in the stream with sf processed = 0
        else {
            updQuery = updQuery + "; ";
        }
        
        allQueries.push(updQuery);
}

// Update queries for the indirect project id by project role id
function updateQueryIndirectPrjRoleId(tableName) {
    
    var dt_columns_stmt = "select COLUMN_NAME from " + dst_db + ".INFORMATION_SCHEMA.COLUMNS where table_name = '" + tableName + "' and data_type = 'TIMESTAMP_NTZ' and column_name like '%_UTC';";
    var dt_columns = snowflake.execute({sqlText:dt_columns_stmt});
        
    var updQuery = " update " + dst_db + "." + dst_schema + "." + tableName + " t " +
                   " set t.sf_processed = 1 ";
        
    // Include the timezones changes
    //while (dt_columns.next()) {
    //    updQuery = updQuery + ", t." + dt_columns.getColumnValue(1).substring(0, dt_columns.getColumnValue(1).length - 4) + " = convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t." + dt_columns.getColumnValue(1) + ")"
    //}
                       
    // Include the from/where clauses
    updQuery = updQuery + " from " + dst_db + "." + dst_schema + ".MARSDB_PROJECT_ROLE pr " +
                          " join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                          " on pr.project_id = p.project_id " +
                          " where t.project_role_id = pr.project_role_id "
        
        // If full (don't consider sf processed status, stream)
        if (!full_upd) {
            updQuery = updQuery + " and t.SF_PROCESSED = 0; ";
        } 
        // Only the tables in the stream with sf processed = 0
        else {
            updQuery = updQuery + "; ";
        }
        
        allQueries.push(updQuery);
}


// Update queries for the default case
function updateQueryDefaultPrjId(tableName) {
    
    var dt_columns_stmt = "select COLUMN_NAME from " + dst_db + ".INFORMATION_SCHEMA.COLUMNS where table_name = '" + tableName + "' and data_type = 'TIMESTAMP_NTZ' and column_name like '%_UTC';";
    var dt_columns = snowflake.execute({sqlText:dt_columns_stmt});
        
    var updQuery = " update " + dst_db + "." + dst_schema + "." + tableName + " t " +
                   " set t.project_id = c.project_id " +
                   "     ,t.sf_processed = 1 ";
        
    // Include the timezones changes
    //while (dt_columns.next()) {
    //    updQuery = updQuery + ", t." + dt_columns.getColumnValue(1).substring(0, dt_columns.getColumnValue(1).length - 4) + " = convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t." + dt_columns.getColumnValue(1) + ")"
    //}
                       
    // Include the from/where clauses
    updQuery = updQuery + " from " + dst_db + "." + dst_schema + ".CFG_DATABASE_PROJECT_MAP c " +
                          " join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                          " on c.project_id = p.project_id " +
                          " where t.database = c.database "                              
        
        // If full (don't consider sf processed status, stream)
        if (!full_upd) {
            updQuery = updQuery + " and t.SF_PROCESSED = 0; ";
        } 
        // Only the tables in the stream with sf processed = 0
        else {
            updQuery = updQuery + "; ";
        }
        
        allQueries.push(updQuery);
}

// Update queries for the default case
function createMarsViewDTConvertion(tableName, prjInfo) {
    
    var t_columns_stmt = "select COLUMN_NAME, DATA_TYPE from " + dst_db + ".INFORMATION_SCHEMA.COLUMNS where table_name = '" + tableName + "' order by 1;";
    var t_columns = snowflake.execute({sqlText:t_columns_stmt});

    var crtViewQuery = " create or replace view " + dst_db + "." + dst_schema + "." + tableName + "_VW AS SELECT t.SF_PROCESSED";
                   
    // Include the timezones changes
    while (t_columns.next()) {
    

        // Column that should be converted (assuming the same column in the table will hold the UTC time)
        if (prjInfo != 'noPrj' && t_columns.getColumnValue(2).startsWith('TIMESTAMP') && !t_columns.getColumnValue(1).endsWith('UTC')) {
        
            crtViewQuery = crtViewQuery + ", convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t." + t_columns.getColumnValue(1) + ") AS " + t_columns.getColumnValue(1) + " ";
            
        } else if (t_columns.getColumnValue(1) != 'SF_PROCESSED' && t_columns.getColumnValue(1) != 'TABLE' && t_columns.getColumnValue(1) != 'TABLE_NAME' && t_columns.getColumnValue(1) != 'PROJECT_ID'){
        
            crtViewQuery = crtViewQuery + ", t." + t_columns.getColumnValue(1) + " AS " + t_columns.getColumnValue(1) + " ";
        }
    }
     
    if (prjInfo == 'noPrj') {    
        // Include the from/where clauses
        crtViewQuery = crtViewQuery + " from " + dst_db + "." + dst_schema + "." + tableName + " t; ";     
    } else if (prjInfo == 'directPrj') {
        // Include the from/where clauses
        crtViewQuery = crtViewQuery + ", p.PROJECT_ID " +
                                      " from " + dst_db + "." + dst_schema + "." + tableName + " t " +
                                      " left outer join " + dst_db + "." + dst_schema + ".CFG_DATABASE_PROJECT_MAP c " +
                                      " on t.database = c.database " +
                                      " left outer join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                                      " on c.project_id = p.project_id; "    
    } else if (prjInfo == 'userPrj') {
        // Include the from/where clauses
        crtViewQuery = crtViewQuery + ", p.PROJECT_ID " +
                                      " from " + dst_db + "." + dst_schema + "." + tableName + " t " +
                                      " left outer join " + dst_db + "." + dst_schema + ".MARSDB_USER u " +
                                      " on t.user_id = u.user_id " +
                                      " left outer join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                                      " on u.project_id = p.project_id; "
    } else if (prjInfo == 'rolePrj') {
        // Include the from/where clauses
        crtViewQuery = crtViewQuery + ", p.PROJECT_ID " +
                                      " from " + dst_db + "." + dst_schema + "." + tableName + " t " +
                                      " left outer join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT_ROLE pr " +
                                      " on t.project_role_id = pr.project_role_id " +
                                      " left outer join " + dst_db + "." + dst_schema + ".MARSDB_PROJECT p " +
                                      " on pr.project_id = p.project_id; "
    }
        
    crtViewsQueries.push(crtViewQuery);
}

// Update the project id
function postLoadProcesses(query, prefix) {
    
    
    var tables = snowflake.execute({sqlText:query});
    var tableName = "";
    
    // Loop through query fields
    while (tables.next()) {
    
        tableName = prefix + tables.getColumnValue(1);
    
        // To diferentiate the queries types
        switch(tableName) {
            // Not bound to any project. TZ remains in UTC
            case 'MARSDB_ENUM_PHI_REASON_ACCESS':
            case 'MARSDB_ENUM_PII_REASON_ACCESS':
            case 'MARSDB_ENUM_PROGRAM_NAME':
            case 'MARSDB_ENUM_PROJECT_ROLE':
            case 'MARSDB_ENUM_PROJECT_STATUS':
            case 'MARSDB_ENUM_YEAR':
            case 'MARSDB_PERMISSION_GROUP':
            case 'MARSDB_PRODUCT':
            case 'MARSDB_STAFF':
            case 'MARSDB_ENUM_PERMISSION_GROUP_TYPE':
            case 'MARSDB_TASK_TYPE':
            case 'MARSDB_RAW_LOGS_TMP':
            case 'MARSDB_RAW_LOGS':
                createMarsViewDTConvertion(tableName, 'noPrj');
                break;

            // Have project id directly defined (not empty)
            case 'MARSDB_BUSINESS_UNIT':
            case 'MARSDB_HOLIDAYS':
            case 'MARSDB_PROJECT':
            case 'MARSDB_PROJECT_CONTACT':
            case 'MARSDB_PROJECT_ROLE':
            case 'MARSDB_PROJECT_STATUS':
            case 'MARSDB_TEAM':
            case 'MARSDB_USER':
            case 'MARSDB_USER_HISTORY':                
                updateQueryDirectPrjId(tableName);
                createMarsViewDTConvertion(tableName, 'directPrj');
                break;
                
            // Have project id indirectly identified by user id
            case 'MARSDB_USER_PROJECT_ROLE':
            case 'MARSDB_TEAM_USER':
                updateQueryIndirectUserPrjId(tableName);
                createMarsViewDTConvertion(tableName, 'userPrj');
                break;

            // Have project id indirectly identified project role id
            case 'MARSDB_PROJECT_ROLE_PERMISSION':                
                updateQueryIndirectPrjRoleId(tableName)
                createMarsViewDTConvertion(tableName, 'rolePrj');
                break;

            // project id is null, and we need to use the database to find the value
            default:            
                updateQueryDefaultPrjId(tableName);
                createMarsViewDTConvertion(tableName, 'directPrj');
        }
    }
}

// Main code

// Set the formats to our definitions of DATE and TIMESTAMP
setSessionParameters(dst_db, dst_schema);

snowflake.execute({sqlText:"begin;"});

if (full_upd) {
    statment = "select distinct table_name  from " + dst_db + ".INFORMATION_SCHEMA.TABLES where table_schema = '" + dst_schema + "' AND TABLE_NAME LIKE 'MARSDB%' AND TABLE_TYPE = 'BASE TABLE';";
    // Create update statments
    postLoadProcesses(statment,"");

} else {
    
    statment = 'insert into ' + dst_db + '.MARSDB.MARSDB_RAW_LOGS_TMP (select LOG_CREATED_ON, TYPE, "TABLE", DATABASE, OFFSET, TABLE_NAME, DATA, MARSDB_RAW_LOG_ID, LOG_CREATED_ON_UTC, SF_PROCESSED from ' + dst_db + '.MARSDB.MARSDB_RAW_LOGS_STREAM);';
    snowflake.execute({sqlText:statment});
    statment = 'select distinct "TABLE" from ' + dst_db + '.MARSDB.MARSDB_RAW_LOGS_TMP;';
    
    // Create update statments
    postLoadProcesses(statment,"MARSDB_");
}

// Include create view queries in the array
allQueries.push(...crtViewsQueries);

// Execute all queries
executeQueries(allQueries);

statment = "TRUNCATE TABLE " + dst_db + ".MARSDB.MARSDB_RAW_LOGS_TMP;";
snowflake.execute({sqlText:statment});

statment = "UPDATE " + dst_db + ".MARSDB.MARSDB_RAW_LOGS SET SF_PROCESSED = 1 where SF_PROCESSED = 0;";
snowflake.execute({sqlText:statment});
snowflake.execute({sqlText:"commit;"});
return errQueries;
$$;
call marsdb.dp4bi_mdb_project_id_update('MARS_DP4BI_DEV', 'MARSDB', true, 'MARS_DP4BI_DEV', 'MARS_DP4BI_LOAD_WH');

select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where table_name = 'MARSDB_PROJECT' order by 1;

-- Create a task to schedule the update of the views process
create or replace task MARSDB.DP4BI_UPD_PROJECT_ID_TASK 
                       WAREHOUSE = MARS_DP4BI_LOAD_WH 
                       SCHEDULE = 'USING CRON * * * * * UTC' 
                       WHEN system$stream_has_data('MARSDB.MARSDB_RAW_LOGS_STREAM')
as  
call marsdb.dp4bi_mdb_project_id_update('MARS_DP4BI_DEV', 'MARSDB', false, 'MARS_DP4BI_DEV', 'MARS_DP4BI_LOAD_WH');
show tasks;
alter task MARSDB.DP4BI_UPD_PROJECT_ID_TASK resume;