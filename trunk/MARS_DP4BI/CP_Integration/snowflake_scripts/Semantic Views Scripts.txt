CREATE OR REPLACE TABLE PUBLIC.D_DATES (
   D_DATE            DATE        NOT NULL
  ,PROJECT_ID       NUMBER      NOT NULL
  ,D_MONTH_NAME      CHAR(3) NOT NULL
  ,D_MONTH           CHAR(15) NOT NULL 
  ,D_DAY             CHAR(3) NOT NULL
  ,D_DAY_NAME        CHAR(10) NOT NULL  
  ,DAY_OF_WEEK       VARCHAR(9)  NOT NULL
  ,DAY_OF_MON        SMALLINT    NOT NULL
  ,DAY_OF_YEAR       SMALLINT    NOT NULL
  ,D_YEAR            SMALLINT    NOT NULL
  ,D_MONTH_NUM       SMALLINT    NOT NULL
  ,D_WEEK_NUM        SMALLINT    NOT NULL
  ,D_WEEK_OF_MONTH   SMALLINT NOT NULL  
  ,WEEKEND_FLAG      CHAR(1)
  ,BUSINESS_DAY_FLAG CHAR(1)
 -- ,D_WEEK            SMALLINT NOT NULL
 -- ,D_MONTH           SMALLINT NOT NULL
)
AS
  WITH CTE_MY_DATE AS (
    SELECT 
         D_DATE
        ,PROJECT_ID
    FROM
        (SELECT 
            DATEADD(DAY, SEQ4(), TO_DATE('2019-01-01')) AS D_DATE        
        FROM 
            TABLE(GENERATOR(ROWCOUNT=>1826))) DATES
    JOIN
        (SELECT DISTINCT PROJECT_ID FROM MARSDB.CFG_DATABASE_PROJECT_MAP) PROJECTS
-- Number of days after reference date in previous line
  )
  SELECT A.D_DATE
        ,A.PROJECT_ID
        ,MONTHNAME(D_DATE)
        ,TO_CHAR(D_DATE,'MMMM')
        ,DAYNAME(D_DATE)
        ,DECODE(DAYNAME(D_DATE), 'Mon','Monday', 'Tue','Tuesday','Wed','Wednesday','Thu','Thursday','Fri','Friday','Sat','Saturday','Sun','Sunday')
        ,DAYOFWEEK(D_DATE)
        ,DAY(D_DATE)
        ,DAYOFYEAR(D_DATE)
        ,YEAR(D_DATE)
        ,MONTH(D_DATE)
        ,WEEKISO(D_DATE)
        ,CAST(ROUND((DAY( D_DATE ) +6)/7,0) as VARCHAR) AS WEEK_OF_MONTH
        ,CASE WHEN DAYOFWEEK(D_DATE) IN(0,6) THEN 'Y' ELSE 'N' END AS WEEKEND_FLAG
        ,CASE WHEN WEEKEND_FLAG ='N' AND (HOLIDAY_FLAG = 'N' OR HOLIDAY_FLAG IS NULL) THEN 'Y' ELSE 'N' END AS BUSINESS_DAY_FLAG
       -- ,CASE WHEN WEEKISO(D_DATE) = 1 THEN 
    FROM 
        CTE_MY_DATE A    
    LEFT OUTER JOIN
        (SELECT 
             PROJECT_ID
            ,HOLIDAY_DATE
            ,CASE WHEN HOLIDAY_DATE IS NOT NULL THEN 'Y' ELSE 'N' END AS HOLIDAY_FLAG
            ,CASE WHEN DAYOFWEEK(HOLIDAY_DATE) NOT IN (0,6) THEN 'Y' ELSE 'N' END AS  WEEKDAY_HOLIDAY FROM MARSDB.MARSDB_HOLIDAYS) B 
    ON A.D_DATE = B.HOLIDAY_DATE AND A.PROJECT_ID = B.PROJECT_ID
   ;	

-- View to compare values between MARS and Snowflake
create or replace view PUBLIC.CTL_MARS_SF_COUNT_COMPARE_VW AS 
SELECT
     p.PROJECT_ID
    ,p.TIME_ZONE
    ,t.TABLE_SCHEMA
    ,t.TABLE_NAME    
    ,convert_timezone('UTC', NVL(p.TIME_ZONE, 'UTC'), t.LOG_CREATED_ON) AS LOG_CREATED_ON
    ,t.LOG_CREATED_ON AS LOG_CREATED_ON_UTC
    ,t.MARS_COUNT
    ,t.SF_COUNT
from
   MARSDB.CTL_MARS_SF_COUNT_COMPARE t 
   left outer join
      MARSDB.CFG_DATABASE_PROJECT_MAP c 
      on t.TABLE_SCHEMA = c.database 
   left outer join
      MARSDB.MARSDB_PROJECT p 
      on nvl(c.project_id,44) = p.project_id;   
   
-- D Case Dataset
CREATE OR REPLACE VIEW PUBLIC.D_CASE_SV AS
    SELECT 
         CA.PROJECT_ID
        ,CA.CASE_ID
        ,CA.CREATED_ON AS CASE_CREATED_DATE_TIME
        ,CA.UPDATED_ON AS CASE_UPDATED_DATE_TIME
        ,CID.EXTERNAL_CASE_ID
        --CO.DATE_OF_DEATH,
        --CO.CONSUMER_FIRST_NAME AS CASE_FIRST_NAME,
        --CO.CONSUMER_LAST_NAME AS CASE_LAST_NAME,
        --CO.CONSUMER_MIDDLE_NAME AS CASE_MIDDLE_NAME,
        --CO.CONSUMER_SSN AS CASE_SSN,
        --ADD.CONTACT_TYPE_ID AS CASE_CONTACT_TYPE_ID,
        --ADD.ADDRESS_VERIFIED AS CASE_ADDRESS_VERIFIED,
        --ADD.ADDRESS_HOUSE_CODE || ADD.ADDRESS_STREET_1 AS CASE_ADDRESS_STREET1,
        --ADD.ADDRESS_STREET_2 AS CASE_ADDRESS_STREET2,
        --ADD.ADDRESS_ZIP_FOUR AS CASE_CONTACT_ADDRESS_ZIP_FOUR,
        --ADD.ADDRESS_TYPE AS CASE_ADDRESS_TYPE,
        --ADD.ADDRESS_CITY AS CASE_ADDRESS_CITY,
        --ADD.ADDRESS_STATE AS CASE_ADDRESS_STATE,
        --ADD.ADDRESS_COUNTY AS CASE_ADDRESS_COUNTY,
        --ADD.PRIMARY_INDICATOR AS CASE_ADDRESS_PRIMARY_INDICATOR,        
        --CR.CONSUMER_EMAIL AS CONSUMER_EMAIL_ADDRESS,
        --EM.DOES_NOT_WORK_IND AS EMAIL_DOES_NOT_WORK_IND,
        --EM.PRIMARY_INDICATOR AS CASE_EMAIL_PRIMARY_INDICATOR,
        --PH.PHONE_NUMBER AS CONSUMER_PHONE_NUMBER,
        --PH.DOES_NOT_WORK_IND AS CONSUMER_PHONE_NUMBER_DOES_NOT_WORK_IND,
        --PH.PRIMARY_INDICATOR AS CASE_PHONE_PRIMARY_INDICATOR
        ,NULL AS DATE_OF_DEATH
        ,NULL AS CASE_FIRST_NAME
        ,NULL AS CASE_LAST_NAME
        ,NULL AS CASE_MIDDLE_NAME
        ,NULL AS CASE_SSN
        ,NULL AS CASE_CONTACT_TYPE_ID
        ,NULL AS CASE_ADDRESS_VERIFIED
        ,NULL AS CASE_ADDRESS_STREET1
        ,NULL AS CASE_ADDRESS_STREET2
        ,NULL AS CASE_CONTACT_ADDRESS_ZIP_FOUR
        ,NULL AS CASE_ADDRESS_TYPE
        ,NULL AS CASE_ADDRESS_CITY
        ,NULL AS CASE_ADDRESS_STATE
        ,NULL AS CASE_ADDRESS_COUNTY
        ,NULL AS CASE_ADDRESS_PRIMARY_INDICATOR
        ,NULL AS CONSUMER_EMAIL_ADDRESS
        ,NULL AS EMAIL_DOES_NOT_WORK_IND
        ,NULL AS CASE_EMAIL_PRIMARY_INDICATOR
        ,NULL AS CONSUMER_PHONE_NUMBER
        ,NULL AS CONSUMER_PHONE_NUMBER_DOES_NOT_WORK_IND
        ,NULL AS CASE_PHONE_PRIMARY_INDICATOR
    FROM 
        MARSDB.MARSDB_CASES_VW CA
    LEFT OUTER JOIN
        MARSDB.MARSDB_CASE_IDENTIFICATION_NUMBER_VW CID ON
            CA.PROJECT_ID = CID.PROJECT_ID AND
            CA.CASE_ID = CID.CASE_ID
/*    LEFT OUTER JOIN 
        MARSDB.MARSDB_CASE_CONSUMER_VW CC ON 
            CA.CASE_ID = CC.CASE_ID AND
            CA.PROJECT_ID = CC.PROJECT_ID AND 
            CC.EFFECTIVE_END_DATE IS NULL;
    LEFT OUTER JOIN         
        MARSDB.MARSDB_CONSUMER_VW CO ON
            CC.CONSUMER_ID = CO.CONSUMER_ID AND
            CC.PROJECT_ID = CO.PROJECT_ID;
    LEFT OUTER JOIN         
        ( SELECT AD.CONTACT_TYPE_ID,AD.PROJECT_ID,AD.ADDRESS_VERIFIED
         ,AD.ADDRESS_HOUSE_CODE,AD.ADDRESS_STREET_1, AD.ADDRESS_STREET_2,AD.ADDRESS_ZIP_FOUR,
         AD.ADDRESS_TYPE,AD.ADDRESS_CITY,AD.ADDRESS_STATE,AD.ADDRESS_COUNTY,AD.PRIMARY_INDICATOR,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_ADDRESS_VW AD JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON AD.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID and AD.PROJECT_ID = CNO.PROJECT_ID) ADD ON 
            CA.CASE_ID = ADD.EXTERNAL_REF_ID AND
            CA.PROJECT_ID = ADD.PROJECT_ID AND
            ADD.EXTERNAL_REF_TYPE = 'Case'
    LEFT OUTER JOIN 
            ( SELECT EML.PRIMARY_INDICATOR,EML.DOES_NOT_WORK_IND,EML.PROJECT_ID,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_EMAIL_VW EML JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON EML.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID AND EML.PROJECT_ID = CNO.PROJECT_ID) EM ON
            CA.CASE_ID = EM.EXTERNAL_REF_ID AND
            CA.PROJECT_ID = EM.PROJECT_ID AND
            EM.EXTERNAL_REF_TYPE = 'Case'
    LEFT OUTER JOIN 
    ( SELECT PHN.PHONE_NUMBER,PHN.DOES_NOT_WORK_IND,PHN.PRIMARY_INDICATOR,PHN.PROJECT_ID,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_PHONE_VW PHN JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON PHN.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID AND PHN.PROJECT_ID = CNO.PROJECT_ID) PH ON
            CA.CASE_ID = PH.EXTERNAL_REF_ID AND
            CA.PROJECT_ID = PH.PROJECT_ID AND
            PH.EXTERNAL_REF_TYPE = 'Case'
     LEFT OUTER JOIN 
        MARSDB.MARSDB_EXTERNAL_LINKS_VW LCCR ON
            CA.PROJECT_ID = LCCR.PROJECT_ID AND
            CA.CASE_ID = LCCR.INTERNAL_ID AND
            LCCR.INTERNAL_REF_TYPE = 'CASE' AND
            LCCR.EXTERNAL_REF_TYPE = 'CONTACT_RECORD' AND 
            LCCR.EFFECTIVE_END_DATE IS NULL
     LEFT OUTER JOIN 
        MARSDB.MARSDB_CONTACT_RECORD_VW CR ON
            LCCR.PROJECT_ID = CR.PROJECT_ID AND
            LCCR.EXTERNAL_REF_ID = CR.CONTACT_RECORD_ID
            */
;        
        
-- D Consumer Dataset
CREATE OR REPLACE VIEW PUBLIC.D_CONSUMER_SV AS
   SELECT 
        CO.PROJECT_ID,
        CO.CONSUMER_ID,
        CO.CONSUMER_STATUS,
        CO.CONSUMER_LAST_NAME,
        CO.CONSUMER_FIRST_NAME,
        CO.CONSUMER_MIDDLE_NAME,
        CO.CONSUMER_DATE_OF_BIRTH AS CONSUMER_DOB,
        CO.CONSUMER_SSN,
        CO.CONSUMER_TYPE,
        /* Fields not found */
       cc.CONSUMER_ROLE,
       NULL AS CONSUMER_PREFERRED_LANGUAGE,
        ADD.ADDRESS_COUNTY AS CONSUMER_COUNTY,
        ADD.ADDRESS_ZIP AS CONSUMER_ZIP_CODE,        
        CASE WHEN DATEADD(YEAR, DATEDIFF(YEARS, CO.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, CURRENT_TIMESTAMP::TIMESTAMP_NTZ), CO.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ) > CURRENT_TIMESTAMP::TIMESTAMP_NTZ
                THEN DATEDIFF(YEARS, CO.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, CURRENT_TIMESTAMP::TIMESTAMP_NTZ) -1
            ELSE DATEDIFF(YEARS, CO.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, CURRENT_TIMESTAMP::TIMESTAMP_NTZ)
        END AS CONSUMER_AGE,
        CO.GENDER_CODE AS CONSUMER_GENDER,
        ADD.ADDRESS_HOUSE_CODE || ADD.ADDRESS_STREET_1 AS CONSUMER_ADDRESS_LINE1,
        ADD.ADDRESS_STREET_2 AS CONSUMER_ADDRESS_LINE2,
        ADD.ADDRESS_CITY AS CONSUMER_CITY,
        ADD.ADDRESS_TYPE AS CONSUMER_ADDRESS_TYPE,
        ADD.ADDRESS_STATE AS CONSUMER_STATE,
        CP.PREFERENCE_ID AS CONSUMER_CORRESPONDENCE_PREFERENCE,
        ADD.ADDRESS_ZIP_FOUR AS CONSUMER_ZIP_CODE_FOUR,
        ADD.PRIMARY_INDICATOR AS CONSUMER_ADDRESS_PRIMARY_INDICATOR,
        EM.EMAIL_ADDRESS AS CONSUMER_EMAIL_ADDRESS,
        EM.EMAIL_TYPE AS CONSUMER_EMAIL_TYPE,
        EM.PRIMARY_INDICATOR AS CONSUMER_EMAIL_PRIMARY_INDICATOR,
        PH.PHONE_NUMBER AS CONSUMER_PHONE_NUMBER,
        PH.PHONE_TYPE AS CONSUMER_PHONE_TYPE,
        PH.SMS_ENABLED_IND AS SMS_ENABLED,
        PH.PRIMARY_INDICATOR AS CONSUMER_PHONE_PRIMARY_INDICATOR,
        CO.CREATED_BY AS CONSUMER_CREATED_BY,
        CC.CASE_ID
    FROM 
        MARSDB.MARSDB_CONSUMER_VW CO
    LEFT OUTER JOIN 
        MARSDB.MARSDB_COMMUNICATION_PREFERENCES_VW CP ON
            CO.CONSUMER_ID = CP.CONSUMER_ID AND
            CO.PROJECT_ID = CP.PROJECT_ID
   LEFT OUTER JOIN 
        ( SELECT AD.CONTACT_TYPE_ID,AD.PROJECT_ID,AD.ADDRESS_VERIFIED
         ,AD.ADDRESS_HOUSE_CODE,AD.ADDRESS_STREET_1, AD.ADDRESS_STREET_2,AD.ADDRESS_ZIP_FOUR,
         AD.ADDRESS_TYPE,AD.ADDRESS_CITY,AD.ADDRESS_STATE,AD.ADDRESS_COUNTY,AD.PRIMARY_INDICATOR, AD.ADDRESS_ZIP,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_ADDRESS_VW AD JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON AD.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID AND AD.PROJECT_ID = CNO.PROJECT_ID) ADD ON
            CO.CONSUMER_ID = ADD.EXTERNAL_REF_ID AND
            CO.PROJECT_ID = ADD.PROJECT_ID AND
            ADD.EXTERNAL_REF_TYPE = 'Consumer'
   LEFT OUTER JOIN 
        (SELECT EML.EMAIL_ADDRESS,EML.EMAIL_TYPE,EML.PRIMARY_INDICATOR,EML.PROJECT_ID,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_EMAIL_VW EML JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON EML.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID AND EML.PROJECT_ID = CNO.PROJECT_ID
        ) EM ON
            CO.CONSUMER_ID = EM.EXTERNAL_REF_ID AND
            CO.PROJECT_ID = EM.PROJECT_ID AND
            EM.EXTERNAL_REF_TYPE = 'Consumer'
  LEFT OUTER JOIN 
        (SELECT PHN.PHONE_NUMBER,PHN.PHONE_TYPE,PHN.SMS_ENABLED_IND,PHN.PRIMARY_INDICATOR,PHN.PROJECT_ID,CNO.EXTERNAL_REF_ID, CNO.EXTERNAL_REF_TYPE
         FROM MARSDB.MARSDB_PHONE_VW PHN JOIN  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
          ON PHN.CONTACT_TYPE_ID = CNO.CONTACT_OWNER_ID AND PHN.PROJECT_ID = CNO.PROJECT_ID) PH ON
            CO.CONSUMER_ID = PH.EXTERNAL_REF_ID AND
            CO.PROJECT_ID = PH.PROJECT_ID AND
            PH.EXTERNAL_REF_TYPE = 'Consumer'
    left outer join 
        MARSDB.MARSDB_CASE_CONSUMER_VW cc on 
            co.CONSUMER_ID = cc.CONSUMER_ID and
            co.PROJECT_ID = cc.PROJECT_ID;

-- D Contact Records Semantic View
CREATE OR REPLACE VIEW PUBLIC.D_CONTACT_RECORDS_SV AS
WITH MARSDB_CONTACT_REPEAT_SV AS
(SELECT DISTINCT * FROM (
SELECT 
  PROJECT_ID,
  CONSUMER_ID,
  CREATED_ON,
  CONTACT_RECORD_ID,
  CR_GROUP,
  REPEAT_CONTACT_FLAG,
  CASE WHEN CONSUMER_ID IS NULL THEN 1 ELSE RANK() OVER(PARTITION BY PROJECT_ID,CONSUMER_ID,CR_GROUP ORDER  BY CREATED_ON,CONTACT_RECORD_ID) END CONTACT_SEQUENCE,
  fer_indicator
FROM (
SELECT PROJECT_ID,CONSUMER_ID,CREATED_ON,CONTACT_RECORD_ID,REPEAT_CONTACT_FLAG,CASE WHEN DIFF IS NOT NULL THEN DIFF ELSE LAG(DIFF) IGNORE NULLS OVER (PARTITION BY PROJECT_ID,CONSUMER_ID ORDER BY CREATED_ON,CONTACT_RECORD_ID) END CR_GROUP,
 CASE WHEN contact_record_actions_id IS NOT NULL AND  DATEDIFF('SECOND',created_on,next_created_on) <= 604800 AND next_contact_record_actions_id IS NOT NULL THEN 'N' ELSE 'Y' END fer_indicator    
FROM(
SELECT 
    CR.PROJECT_ID,
    CONS_LINK.EXTERNAL_REF_ID CONSUMER_ID,
    CR.CONTACT_RECORD_START_TIME CREATED_ON,
    CR.CONTACT_RECORD_ID,
    CASE WHEN DATEDIFF('SECOND',LAG(CR.CONTACT_RECORD_START_TIME) OVER (PARTITION BY CR.PROJECT_ID,CONS_LINK.EXTERNAL_REF_ID ORDER BY CR.CONTACT_RECORD_START_TIME,CR.CONTACT_RECORD_ID),CR.CONTACT_RECORD_START_TIME)  <= 604800 THEN NULL ELSE CR.CONTACT_RECORD_ID END DIFF, 
    CASE WHEN DATEDIFF('SECOND',LAG(CR.CONTACT_RECORD_START_TIME) OVER (PARTITION BY CR.PROJECT_ID,CONS_LINK.EXTERNAL_REF_ID ORDER BY CR.CONTACT_RECORD_START_TIME,CR.CONTACT_RECORD_ID),CR.CONTACT_RECORD_START_TIME)  <= 604800 THEN 1 ELSE 0 END REPEAT_CONTACT_FLAG,
    LAG(CR.CONTACT_RECORD_START_TIME) OVER (PARTITION BY CR.PROJECT_ID,CONS_LINK.EXTERNAL_REF_ID ORDER BY CR.CONTACT_RECORD_START_TIME,CR.CONTACT_RECORD_ID) PRIOR_CREATE_DT,
    LEAD(CR.CONTACT_RECORD_START_TIME) IGNORE NULLS OVER (PARTITION BY CR.PROJECT_ID,CONS.CONSUMER_LAST_NAME,CONS.CONSUMER_FIRST_NAME,COALESCE(CONS.CONSUMER_MIDDLE_NAME,'X'),CONS.CONSUMER_DATE_OF_BIRTH,contact_reason,contact_action ORDER BY CR.CONTACT_RECORD_START_TIME,CR.CONTACT_RECORD_ID) next_created_on,
    LEAD(CA.contact_record_actions_id) IGNORE NULLS OVER (PARTITION BY CR.PROJECT_ID,CONS.CONSUMER_LAST_NAME,CONS.CONSUMER_FIRST_NAME,COALESCE(CONS.CONSUMER_MIDDLE_NAME,'X'),CONS.CONSUMER_DATE_OF_BIRTH,contact_reason,contact_action ORDER BY CR.CONTACT_RECORD_START_TIME,CR.CONTACT_RECORD_ID) next_contact_record_actions_id,
    ca.contact_record_actions_id
FROM 
    MARSDB.MARSDB_CONTACT_RECORD_VW AS CR 
LEFT OUTER JOIN 
    MARSDB.MARSDB_EXTERNAL_LINKS_VW CONS_LINK
        ON CR.PROJECT_ID = CONS_LINK.PROJECT_ID 
        AND CR.CONTACT_RECORD_ID = CONS_LINK.INTERNAL_ID
        AND CONS_LINK.INTERNAL_REF_TYPE = 'CONTACT_RECORD'
        AND CONS_LINK.EXTERNAL_REF_TYPE = 'CONSUMER'
        AND CONS_LINK.EFFECTIVE_END_DATE IS NULL
LEFT OUTER JOIN  MARSDB.MARSDB_CONSUMER_VW CONS
        ON CR.PROJECT_ID = CONS.PROJECT_ID 
        AND CONS.CONSUMER_ID = CONS_LINK.EXTERNAL_REF_ID  
LEFT JOIN (SELECT *
           FROM(SELECT project_id, contact_record_id,contact_record_actions_id,contact_reason,contact_action, 
                 RANK() OVER(PARTITION BY project_id,contact_record_id,contact_reason,contact_action ORDER BY contact_record_actions_id) rnk
                FROM PUBLIC.D_CONTACT_RECORD_ACTIONS_SV ca 
                WHERE contact_reason in('Appeal','Application','Change of Address','Complaint','DMI','Inbound Document Inquiry','Returned Mail')
                AND contact_action = 'Unable to resolve issue'
               )
           WHERE rnk = 1) ca ON ca.contact_record_id = cr.contact_record_id and ca.project_id = cr.project_id  
WHERE 1=1

) X ) Y ) Z
--WHERE EXISTS(SELECT 1 FROM MARS_DP4BI_DEV.PUBLIC.D_CONTACT_RECORDS_SV CR WHERE CR.CONTACT_RECORD_ID = Z.CONTACT_RECORD_ID AND CR.PROJECT_ID = Z.PROJECT_ID AND CR.CONTACT_SEQUENCE <> Z.CONTACT_SEQUENCE)
--ORDER BY CONTACT_RECORD_ID
) 
SELECT 
     CR.PROJECT_ID AS PROJECT_ID
    ,CR.CONTACT_RECORD_ID AS CONTACT_RECORD_ID    
    ,CR.CONTACT_RECORD_TYPE AS CONTACT_RECORD_TYPE
    ,CR.CONTACT_TYPE AS CONTACT_TYPE
    ,CR.CONTACT_CHANNEL_TYPE AS CONTACT_CHANNEL
    ,CR.CONTACT_RECORD_STATUS_TYPE AS CONTACT_DISPOSITION
    ,CR.CREATED_ON AS CONTACT_CREATE_DATE_TIME
    ,CR.UPDATED_ON AS CONTACT_RECORD_UPDATED_DATE_TIME
    ,CR.CONTACT_RECORD_END_TIME AS CONTACT_COMPLETE_DATE_TIME
    ,CR.CONTACT_RECORD_START_TIME AS CONTACT_START_TIME
    ,CR.CONTACT_RECORD_END_TIME AS CONTACT_END_TIME
    ,CR.WRAP_UP_TIME AS CONTACT_WRAP_UP_TIME
    ,CR.CALL_DURATION AS CALL_DURATION   
    ,CR.CREATED_BY AS CONTACT_RECORD_CREATED_BY_CRM_ID
    ,CR.CONTACT_OUTCOME AS OUTCOME_OF_CONTACT
    ,CR.LINK_REF_ID AS LINK_REFERENCE_ID
    ,CR.LINK_REF_TYPE AS LINK_REFERENCE_TYPE
    ,CR.CONTACT_RECORD_STATUS_TYPE AS CONTACT_RECORD_STATUS
    ,CR.CONSUMER_AUTHENTICATED_IND AS CONSUMER_ATHENTICATED_INDICATOR
    ,CONS.CONSUMER_ID AS CONSUMER_ID
    ,CONS.CONSUMER_STATUS AS CONSUMER_STATUS
    ,CONS.CONSUMER_LAST_NAME AS CONSUMER_LAST_NAME
    ,CONS.CONSUMER_FIRST_NAME AS CONSUMER_FIRST_NAME
    ,CONS.CONSUMER_MIDDLE_NAME AS CONSUMER_MIDDLE_NAME
    ,CONS.CONSUMER_DATE_OF_BIRTH AS CONSUMER_DOB
    ,CONS.CONSUMER_SSN AS CONSUMER_SSN
    ,CONS.CONSUMER_TYPE AS CONSUMER_TYPE
    ,NULL AS CONSUMER_PREFERRED_LANGUAGE
    ,CC.CONSUMER_ROLE AS CONSUMER_ROLE
    ,(case when dateadd(year, datediff(years, CONS.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, current_timestamp::TIMESTAMP_NTZ), CONS.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ) > current_timestamp::TIMESTAMP_NTZ
                    then datediff(years, CONS.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, current_timestamp::TIMESTAMP_NTZ) - 1
                else datediff(years, CONS.CONSUMER_DATE_OF_BIRTH::TIMESTAMP_NTZ, current_timestamp::TIMESTAMP_NTZ)
            end)::DECIMAL as CONSUMER_AGE
    ,CONS.GENDER_CODE AS CONSUMER_GENDER
    ,CONS.CREATED_BY AS CONSUMER_CREATED_BY
    ,CC.CASE_ID AS CASE_ID
    ,CID.EXTERNAL_CASE_ID
    ,ADDR.ADDRESS_COUNTY AS CONSUMER_COUNTY
    ,ADDR.ADDRESS_ZIP AS CONSUMER_ZIP_CODE
    ,CONCAT(CASE WHEN length(ADDR.ADDRESS_HOUSE_CODE) > 0 THEN CONCAT(ADDR.ADDRESS_HOUSE_CODE,',') ELSE '' END, ADDR.ADDRESS_STREET_1) AS CONSUMER_ADDRESS_LINE_1
    ,ADDR.ADDRESS_STREET_2 AS CONSUMER_ADDRESS_LINE_2
    ,ADDR.CONTACT_TYPE_ID AS CONSUMER_CITY
    ,ADDR.ADDRESS_TYPE AS CONSUMER_ADDRESS_TYPE
    ,ADDR.ADDRESS_STATE AS CONSUMER_STATE
    ,ADDR.ADDRESS_ZIP_FOUR AS CONSUMER_ZIP_CODE4
    ,CE.EMAIL_ADDRESS AS CONSUMER_EMAIL_ADDRESS
    ,CE.EMAIL_TYPE AS CONSUMER_EMAIL_TYPE
    ,CP.PHONE_NUMBER AS CONSUMER_PHONE_NUMBER
    ,CP.PHONE_TYPE AS CONSUMER_PHONE_TYPE
    ,CP.SMS_ENABLED_IND AS SMS_ENABLED
    ,NULL AS CONTACT_ADDITIONAL_COMMENTS
    ,CS.MAXIMUS_ID AS CONTACT_RECORD_CREATED_BY_MAXIMUS_ID
    ,CS.LAST_NAME AS CONTACT_RECORD_CREATED_BY_LAST_NAME
    ,CS.FIRST_NAME AS CONTACT_RECORD_CREATED_BY_FIRST_NAME
    ,CCP.CORRESPONDENCE_PREFERENCE AS CONSUMER_CORRESPONDENCE_PREFERENCE
    ,CASE WHEN (select 
                    count(*) as task_count
                from 
                    MARSDB.MARSDB_EXTERNAL_LINKS_VW TASK_LINK
                where CR.PROJECT_ID = TASK_LINK.PROJECT_ID 
                AND CR.CONTACT_RECORD_ID = TASK_LINK.INTERNAL_ID
                AND TASK_LINK.INTERNAL_REF_TYPE = 'CONTACT_RECORD'
                AND TASK_LINK.EXTERNAL_REF_TYPE = 'TASK'
               AND TASK_LINK.EFFECTIVE_END_DATE IS NULL) > 0 THEN 1 ELSE 0 END CONTACT_CREATING_TASKS_FLAG  
    ,NVL(REP.CONTACT_SEQUENCE, 1) AS CONTACT_SEQUENCE
    ,NVL(REP.REPEAT_CONTACT_FLAG, 0) AS REPEAT_CONTACT_FLAG
    --,concat('(', trim(to_varchar(to_number(CR.CONSUMER_PHONE), '000) 000-0000'))) AS CONTACT_RECORD_PHONE
    --,to_number(CR.CONSUMER_PHONE) AS CONTACT_RECORD_PHONE
    ,CR.CONSUMER_PHONE AS CONTACT_RECORD_PHONE
    ,CR.UPDATED_BY AS CONTACT_RECORD_LAST_UPDATED_BY_USER_ID
    ,NVL(REP.FER_INDICATOR,'Y') AS FER_INDICATOR 
    ,CASE WHEN (SELECT COUNT(*) FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW el JOIN MARSDB.MARSDB_CONSUMER_VW c ON el.external_ref_id = c.consumer_id AND el.project_id = c.project_id 
                WHERE el.project_id = cr.project_id AND el.internal_id != cr.contact_record_id AND c.consumer_id != cons.consumer_id
                AND el.internal_ref_type = 'CONTACT_RECORD' AND el.external_ref_type = 'CONSUMER' 
                and el.EFFECTIVE_END_DATE IS NULL
                AND c.consumer_last_name = cons.consumer_last_name AND c.consumer_first_name  = cons.consumer_first_name 
                AND COALESCE(c.consumer_middle_name,'X') = COALESCE(cons.consumer_middle_name,'X') AND c.consumer_date_of_birth = cons.consumer_date_of_birth ) > 0 THEN 'Y' ELSE 'N' END AS DUPLICATE_CONSUMER_FLAG
    
FROM 
    MARSDB.MARSDB_CONTACT_RECORD_VW AS CR 
LEFT OUTER JOIN 
    MARSDB.MARSDB_EXTERNAL_LINKS_VW CONS_LINK
        ON CR.PROJECT_ID = CONS_LINK.PROJECT_ID 
        AND CR.CONTACT_RECORD_ID = CONS_LINK.INTERNAL_ID
        AND CONS_LINK.INTERNAL_REF_TYPE = 'CONTACT_RECORD'
        AND CONS_LINK.EXTERNAL_REF_TYPE = 'CONSUMER'
        AND CONS_LINK.EFFECTIVE_END_DATE IS NULL
LEFT OUTER JOIN  MARSDB.MARSDB_CONSUMER_VW CONS
        ON CR.PROJECT_ID = CONS.PROJECT_ID 
        AND CONS.CONSUMER_ID = CONS_LINK.EXTERNAL_REF_ID
LEFT OUTER JOIN 
    MARSDB.MARSDB_EXTERNAL_LINKS_VW CASE_LINK
        ON CR.PROJECT_ID = CASE_LINK.PROJECT_ID 
        AND CR.CONTACT_RECORD_ID = CASE_LINK.INTERNAL_ID
        AND CASE_LINK.INTERNAL_REF_TYPE = 'CONTACT_RECORD'
        AND CASE_LINK.EXTERNAL_REF_TYPE = 'CASE'
        AND CASE_LINK.EFFECTIVE_END_DATE IS NULL
LEFT OUTER JOIN 
    MARSDB.MARSDB_CASES_VW CASES
        ON CR.PROJECT_ID = CASES.PROJECT_ID 
        AND CASES.CASE_ID = CASE_LINK.EXTERNAL_REF_ID        
LEFT OUTER JOIN
    MARSDB.MARSDB_CASE_CONSUMER_VW CC 
        ON CONS.CONSUMER_ID = CC.CONSUMER_ID
        AND CR.PROJECT_ID = CC.PROJECT_ID
        AND CASES.CASE_ID = CC.CASE_ID        
        --AND CC.EFFECTIVE_END_DATE IS NULL
LEFT OUTER JOIN 
    MARSDB.MARSDB_USER_VW CU
        ON to_varchar(CU.USER_ID) = CR.CREATED_BY
        AND CU.PROJECT_ID = CR.PROJECT_ID 
LEFT OUTER JOIN 
    MARSDB.MARSDB_STAFF_VW CS
        ON CS.STAFF_ID = CU.STAFF_ID         
LEFT OUTER JOIN MARSDB_CONTACT_REPEAT_SV REP
       ON CR.PROJECT_ID = REP.PROJECT_ID AND CR.CONTACT_RECORD_ID = REP.CONTACT_RECORD_ID AND CONS.CONSUMER_ID = REP.CONSUMER_ID
LEFT OUTER JOIN
        MARSDB.MARSDB_CASE_IDENTIFICATION_NUMBER_VW CID ON
            CC.PROJECT_ID = CID.PROJECT_ID AND
            CC.CASE_ID = CID.CASE_ID       
LEFT OUTER JOIN 
    (SELECT *
     FROM (SELECT  AD.CONTACT_TYPE_ID
                ,AD.PROJECT_ID
                ,AD.ADDRESS_VERIFIED
                ,AD.ADDRESS_HOUSE_CODE
                ,AD.ADDRESS_STREET_1
                ,AD.ADDRESS_STREET_2
                ,AD.ADDRESS_ZIP
                ,AD.ADDRESS_ZIP_FOUR
                ,AD.ADDRESS_TYPE
                ,AD.ADDRESS_CITY
                ,AD.ADDRESS_STATE
                ,AD.ADDRESS_COUNTY
                ,AD.PRIMARY_INDICATOR
                ,CNO.EXTERNAL_REF_ID
                ,CNO.EXTERNAL_REF_TYPE                
                ,RANK() OVER (PARTITION BY CNO.EXTERNAL_REF_ID, CT.PROJECT_ID ORDER BY DECODE(PRIMARY_INDICATOR,1,1,DECODE(UPPER(ADDRESS_TYPE),'PHYSICAL',2,3)),AD.EFFECTIVE_END_DATE DESC NULLS FIRST,AD.ADDRESS_ID) arnk
          FROM  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
            LEFT JOIN MARSDB.MARSDB_CONTACTS_VW CT ON CNO.CONTACT_OWNER_ID = CT.OWNER_ID AND CT.PROJECT_ID = CNO.PROJECT_ID AND CT.CONTACT_TYPE = 'ADDRESS'
            LEFT JOIN  MARSDB.MARSDB_ADDRESS_VW AD  ON AD.CONTACT_TYPE_ID = CT.CONTACT_TYPE_ID AND AD.PROJECT_ID = CT.PROJECT_ID 
          WHERE UPPER(CNO.EXTERNAL_REF_TYPE) = 'CONSUMER'          
          )
      WHERE arnk = 1)  AS ADDR
        ON ADDR.PROJECT_ID = CONS.PROJECT_ID 
        AND ADDR.EXTERNAL_REF_ID = CONS.CONSUMER_ID        
LEFT OUTER JOIN 
    (SELECT *
     FROM (SELECT PHN.PHONE_NUMBER,PHN.DOES_NOT_WORK_IND
                ,PHN.PHONE_TYPE
                ,PHN.SMS_ENABLED_IND
                ,PHN.PRIMARY_INDICATOR
                ,PHN.PROJECT_ID,CNO.EXTERNAL_REF_ID
                ,CT.CONTACT_TYPE_ID
                ,CNO.EXTERNAL_REF_TYPE
                ,PHN.PHONE_ID
                ,RANK() OVER (PARTITION BY CNO.EXTERNAL_REF_ID, CT.PROJECT_ID ORDER BY DECODE(PRIMARY_INDICATOR,1,1,DECODE(UPPER(PHONE_TYPE),'PRIMARY',2,'HOME',3,'CELL',4,5)), PHN.EFFECTIVE_END_DATE DESC NULLS FIRST,PHN.PHONE_ID) prnk
           FROM  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
             LEFT JOIN MARSDB.MARSDB_CONTACTS_VW CT ON CNO.CONTACT_OWNER_ID = CT.OWNER_ID AND CT.PROJECT_ID = CNO.PROJECT_ID AND CT.CONTACT_TYPE = 'PHONE'
             LEFT JOIN MARSDB.MARSDB_PHONE_VW PHN ON PHN.CONTACT_TYPE_ID = CT.CONTACT_TYPE_ID AND PHN.PROJECT_ID = CT.PROJECT_ID 
           WHERE UPPER(CNO.EXTERNAL_REF_TYPE) = 'CONSUMER')
     WHERE prnk = 1) AS CP
        ON CP.PROJECT_ID = CONS.PROJECT_ID 
        AND CP.EXTERNAL_REF_ID = CONS.CONSUMER_ID         
LEFT OUTER JOIN 
    (SELECT *
     FROM (SELECT  EML.PRIMARY_INDICATOR
                  ,EML.EMAIL_ADDRESS
                  ,EML.EMAIL_TYPE
                  ,EML.DOES_NOT_WORK_IND
                   ,EML.PROJECT_ID
                  ,CNO.EXTERNAL_REF_ID
                  ,CNO.EXTERNAL_REF_TYPE
                  ,EML.CONTACT_TYPE_ID
                  ,RANK() OVER (PARTITION BY CNO.EXTERNAL_REF_ID, CT.PROJECT_ID ORDER BY DECODE(PRIMARY_INDICATOR,1,1,DECODE(UPPER(EMAIL_TYPE),'PRIMARY',2,'OFFICE',3,4)),EML.EFFECTIVE_END_DATE DESC NULLS FIRST,EML.EMAIL_ID) ernk
           FROM  MARSDB.MARSDB_CONTACTS_OWNER_VW CNO
             LEFT JOIN MARSDB.MARSDB_CONTACTS_VW CT ON CNO.CONTACT_OWNER_ID = CT.OWNER_ID AND CT.PROJECT_ID = CNO.PROJECT_ID AND CT.CONTACT_TYPE = 'EMAIL'
             LEFT JOIN MARSDB.MARSDB_EMAIL_VW EML ON EML.CONTACT_TYPE_ID = CT.CONTACT_TYPE_ID  AND EML.PROJECT_ID = CT.PROJECT_ID 
           WHERE UPPER(CNO.EXTERNAL_REF_TYPE) = 'CONSUMER')
     WHERE ernk = 1) AS CE
        ON CE.PROJECT_ID = CONS.PROJECT_ID 
        AND CE.EXTERNAL_REF_ID = CONS.CONSUMER_ID         
LEFT OUTER JOIN 
    (SELECT *
     FROM(SELECT CPR.CONSUMER_ID AS CONSUMER_ID,
                PS.REPORT_LABEL AS CORRESPONDENCE_PREFERENCE ,
                CPR.PROJECT_ID AS PROJECT_ID,
                RANK() OVER (PARTITION BY CPR.CONSUMER_ID,CPR.PROJECT_ID ORDER BY CPR.EFFECTIVE_END_DATE DESC NULLS FIRST, PREFERENCE_ID) cprnk
          FROM MARSDB.MARSDB_COMMUNICATION_PREFERENCES_VW CPR
            JOIN MARSDB.MARSDB_MAP_ENUMS_VW ME ON CPR.VALUE_PAIR_ID_COMM_PREF = ME.VALUE_PAIR_ID AND CPR.PROJECT_ID = ME.PROJECT_ID
            JOIN MARSDB.MARSDB_ENUM_PREFERENCE_TYPE_VW PT ON ME.KEY = PT.VALUE AND CPR.PROJECT_ID = PT.PROJECT_ID 
            JOIN MARSDB.MARSDB_ENUM_PREFERENCE_SELECTION_VW PS ON ME.CHILD = PS.VALUE AND CPR.PROJECT_ID = PS.PROJECT_ID 
          WHERE PT.VALUE = 'CORRESPONDENCE' ) 
     WHERE cprnk = 1) CCP
      ON CCP.CONSUMER_ID = CONS.CONSUMER_ID 
      AND CCP.PROJECT_ID = CONS.PROJECT_ID ;
      
  SELECT * FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW el JOIN MARSDB.MARSDB_CONSUMER_VW c ON el.external_ref_id = c.consumer_id AND el.project_id = c.project_id where  c.consumer_first_name = 'Amelia' AND el.internal_ref_type = 'CONTACT_RECORD' AND el.external_ref_type = 'CONSUMER' and el.EFFECTIVE_END_DATE IS NULL;
  
      SELECT COUNT(*) FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW el JOIN MARSDB.MARSDB_CONSUMER_VW c ON el.external_ref_id = c.consumer_id AND el.project_id = c.project_id 
                WHERE el.project_id = cr.project_id AND el.internal_id != cr.contact_record_id AND c.consumer_id != cons.consumer_id
                AND el.internal_ref_type = 'CONTACT_RECORD' AND el.external_ref_type = 'CONSUMER' 
                AND c.consumer_last_name = cons.consumer_last_name AND c.consumer_first_name  = cons.consumer_first_name 
                AND COALESCE(c.consumer_middle_name,'X') = COALESCE(cons.consumer_middle_name,'X') AND c.consumer_date_of_birth = cons.consumer_date_of_birth ;

-- Reasons/Actions of the Contact Records
CREATE OR REPLACE VIEW PUBLIC.D_CONTACT_RECORD_ACTIONS_SV AS
SELECT DISTINCT
     CR.PROJECT_ID AS PROJECT_ID
    ,TRUNC(DECODE(RSN.CONTACT_RECORD_REASON_ID, NULL, CR.CONTACT_RECORD_ID, DECODE(ACTN.CONTACT_RECORD_ACTION_ID, NULL, CR.CONTACT_RECORD_ID || RSN.CONTACT_RECORD_REASON_ID, CR.CONTACT_RECORD_ID || RSN.CONTACT_RECORD_REASON_ID || ACTN.CONTACT_RECORD_ACTION_ID))) AS CONTACT_RECORD_ACTIONS_ID
    ,CR.CONTACT_RECORD_ID AS CONTACT_RECORD_ID    
    ,NVL(RSN.CONTACT_RECORD_REASON_TYPE, 'No Reason') AS CONTACT_REASON
    ,NVL(ACTN.CONTACT_RECORD_ACTION_TYPE, 'No Action') AS CONTACT_ACTION
FROM 
    MARSDB.MARSDB_CONTACT_RECORD_VW CR    
LEFT OUTER JOIN MARSDB.MARSDB_CONTACT_RECORD_REASON_VW RSN
    ON RSN.PROJECT_ID = CR.PROJECT_ID 
    AND RSN.CONTACT_RECORD_ID = CR.CONTACT_RECORD_ID
LEFT OUTER JOIN MARSDB.MARSDB_CONTACT_RECORD_ACTION_VW ACTN
    ON RSN.PROJECT_ID = ACTN.PROJECT_ID 
    AND RSN.CONTACT_RECORD_REASON_ID = ACTN.CONTACT_RECORD_REASON_ID
    AND ACTN.EFFECTIVE_END_DATE IS NULL
    ; 
    
-- Comments of the Contact Records
CREATE OR REPLACE VIEW PUBLIC.D_CONTACT_RECORD_COMMENTS_SV AS
SELECT DISTINCT
     CR.PROJECT_ID AS PROJECT_ID
    ,TRUNC(DECODE(CMNT.CONTACT_RECORD_COMMENT_ID, NULL, CR.CONTACT_RECORD_ID, CMNT.CONTACT_RECORD_COMMENT_ID || CR.CONTACT_RECORD_ID)) AS CONTACT_RECORD_COMMENTS_ID
    ,CR.CONTACT_RECORD_ID AS CONTACT_RECORD_ID    
    ,NVL(CMNT.COMMENT, 'No Comment') AS CONTACT_ADDITIONAL_COMMENTS    
FROM 
    MARSDB.MARSDB_CONTACT_RECORD_VW CR    
LEFT OUTER JOIN MARSDB.MARSDB_CONTACT_RECORD_COMMENTS_VW CMNT
    ON CMNT.PROJECT_ID = CR.PROJECT_ID 
    AND CMNT.CONTACT_RECORD_ID = CR.CONTACT_RECORD_ID    
    ;     

list @MARS_DP4BI_DEV.MARSDB.MARS_DP4BI_DEV_S3_MDB_CDC;

-- D Project Dataset
CREATE OR REPLACE VIEW PUBLIC.D_PROGRAM_SV AS
    SELECT
         PR.PROJECT_ID
        ,PR.PROJECT_NAME
        ,PR.STATE AS PROJECT_STATE
        ,PR.CONTRACT_END_DATE AS PROJECT_CONTRACT_END_DATE_TIME        
        ,PR.CONTRACT_START_DATE AS PROJECT_CONTRACT_START_DATE_TIME
        ,PR.COUNTRY AS PROJECT_COUNTRY        
        ,PR.PROGRAM_NAME AS PROJECT_PROGRAM_NAME
        ,PR.STATE_AGENCY_NAME AS PROJECT_STATE_AGENCY_NAME
        ,PR.GO_LIVE_DATE AS PROJECT_GO_LIVE_DATE
        ,PR.TIME_ZONE AS PROJECT_TIME_ZONE
    FROM
        MARSDB.MARSDB_PROJECT_VW PR;
        
-- D Staff SV
CREATE OR REPLACE VIEW PUBLIC.D_STAFF_SV AS
    SELECT 
         US.PROJECT_ID
        ,US.STAFF_ID
        ,ST.MAXIMUS_ID
        ,ST.FIRST_NAME
        ,ST.LAST_NAME
        ,US.USER_ID        
    FROM
        MARSDB.MARSDB_STAFF_VW ST
    LEFT OUTER JOIN
        MARSDB.MARSDB_USER_VW US
        ON ST.STAFF_ID = US.STAFF_ID;       

-- F Contact Records By Day Semantic View
CREATE OR REPLACE VIEW PUBLIC.F_CONTACT_RECORDS_BY_DAY_SV AS
SELECT 
     CRSV.PROJECT_ID AS PROJECT_ID
    ,D_DATE
    ,CRSV.CONSUMER_ID
    ,CRSV.CASE_ID
    ,(SELECT MAX(LOG_CREATED_ON) FROM MARSDB.MARSDB_RAW_LOGS_VW) AS LAST_UPDATED_DT    
    ,SUM(YN_REPEATED_CONTACT) REPEAT_CONTACT_COUNT_1
    ,COUNT ( DISTINCT CRSV.PROJECT_ID || CRSV.CONTACT_RECORD_ID ) AS CONTACT_RECORD_COUNT
    ,COUNT ( DISTINCT ( CASE WHEN CRSV.CONTACT_RECORD_STATUS_TYPE = 'Complete' THEN CRSV.PROJECT_ID || CRSV.CONTACT_RECORD_ID ELSE NULL END)) AS FIRST_CONTACT_RESOLUTION_COUNT
FROM
    (SELECT *
    FROM PUBLIC.D_DATES 
    WHERE D_DATE >= (SELECT MIN(TO_DATE(CREATED_ON)) from MARSDB.MARSDB_CONTACT_RECORD_VW) AND 
          D_DATE <= (SELECT MAX(TO_DATE(UPDATED_ON)) from MARSDB.MARSDB_CONTACT_RECORD_VW)) AS D
LEFT OUTER JOIN    
(SELECT DISTINCT
         CR.PROJECT_ID        
        ,CONS_LINK.EXTERNAL_REF_ID AS CONSUMER_ID        
        ,CC.CASE_ID
        ,CR.CONTACT_RECORD_ID
        ,CR.CREATED_ON
        ,CR.UPDATED_ON
        ,CR.LOG_CREATED_ON
        ,TO_DATE(NVL(CR.CREATED_ON, CR.UPDATED_ON)) CREATE_DATE
        ,CR.CONTACT_RECORD_STATUS_TYPE
        ,(CASE WHEN DATEDIFF(second, LAG(NVL(CR.CREATED_ON, CR.UPDATED_ON)) OVER (PARTITION BY CR.PROJECT_ID, CONS_LINK.EXTERNAL_REF_ID ORDER BY CR.PROJECT_ID, CONS_LINK.EXTERNAL_REF_ID, CR.CONTACT_RECORD_ID), NVL(CR.CREATED_ON, CR.UPDATED_ON)) <= 604800 
                AND DATEDIFF(second, LAG(NVL(CR.CREATED_ON, CR.UPDATED_ON)) OVER (PARTITION BY CR.PROJECT_ID, CONS_LINK.EXTERNAL_REF_ID ORDER BY CR.PROJECT_ID, CONS_LINK.EXTERNAL_REF_ID, CR.CONTACT_RECORD_ID), NVL(CR.CREATED_ON, CR.UPDATED_ON)) > 0  THEN 1 ELSE 0 END) YN_REPEATED_CONTACT
    FROM
        MARSDB.MARSDB_CONTACT_RECORD_VW CR
    LEFT OUTER JOIN 
        MARSDB.MARSDB_EXTERNAL_LINKS_VW CONS_LINK
        ON CR.PROJECT_ID = CONS_LINK.PROJECT_ID 
        AND CR.CONTACT_RECORD_ID = CONS_LINK.INTERNAL_ID
        AND CONS_LINK.INTERNAL_REF_TYPE = 'CONTACT_RECORD'
        AND CONS_LINK.EXTERNAL_REF_TYPE = 'CONSUMER'
        AND CONS_LINK.EFFECTIVE_END_DATE IS NULL
    LEFT OUTER JOIN
        MARSDB.MARSDB_CASE_CONSUMER_VW CC 
        ON CONS_LINK.EXTERNAL_REF_ID = CC.CONSUMER_ID
        AND CR.PROJECT_ID = CC.PROJECT_ID
ORDER BY 
         CR.PROJECT_ID
        ,CREATE_DATE
        ,CONS_LINK.EXTERNAL_REF_ID
        ,CR.CONTACT_RECORD_ID) CRSV
ON D.D_DATE = CRSV.CREATE_DATE
AND D.PROJECT_ID = CRSV.PROJECT_ID
WHERE 
    CRSV.PROJECT_ID IS NOT NULL
  GROUP BY 
     CRSV.PROJECT_ID
    ,D_DATE
    ,CRSV.CONSUMER_ID
    ,CRSV.CASE_ID
    ,LOG_CREATED_ON
ORDER BY     
     PROJECT_ID
    ,D_DATE
    ,CONSUMER_ID
;      

-- MW_D_COMPLAINT_INSTANCE_SV
CREATE OR REPLACE VIEW PUBLIC.MW_D_COMPLAINT_INSTANCE_SV AS
SELECT  ts.PROJECT_ID
       ,ts.TASK_ID AS complaint_id
 	   ,ts.CREATED_ON AS complaint_create_date_time	   
       ,ts.TASK_TYPE_ID AS complaint_type_id
       ,ts.DEFAULT_PRIORITY AS complaint_priority
       ,ts.SOURCE AS complaint_source
	   ,ts.task_status AS complaint_status
       ,ts.STATUS_DATE AS complaint_status_date_time
	   ,ts.TASK_INFO AS complaint_info
       ,ts.TASK_NOTES AS complaint_notes
	   ,NULL AS complaint_association
       ,ts.CREATED_BY AS complaint_created_by_user_id
       ,pr.PROJECT_ROLE_ID AS complaint_created_by_user_role
       ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN NULL ELSE ts.STAFF_ASSIGNED_TO END AS complaint_assignee_user_id
       ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN NULL ELSE satpr.PROJECT_ROLE_ID END AS complaint_assignee_user_role
       ,tt.SLA_DAYS AS complaint_sla_days       
       ,tt.SLA_DAYS_TYPE AS complaint_sla_type
       ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN NULL 
             WHEN ts.STAFF_ASSIGNED_TO IS NOT NULL THEN 'CLAIMED'
         ELSE 'UNCLAIMED' END AS complaint_claimed_status    
       ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN ts.STAFF_ASSIGNED_TO ELSE NULL END AS complaint_worked_by_user_id
       ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN satpr.PROJECT_ROLE_ID ELSE NULL END AS complaint_worked_by_user_role
       ,CASE WHEN ts.TASK_STATUS = 'Complete' THEN ts.STATUS_DATE ELSE NULL END AS complaint_complete_date_time
       ,ttw.total_time_worked AS total_time_worked
       ,exo.source_reference_type
       ,exo.source_reference_id  
       ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN 'Y' ELSE 'N' END AS complaint_flag
       ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN thesc.escalated_to_user_id ELSE NULL END AS complaint_escalated_to_user_id
       ,CASE WHEN tt.SLA_DAYS_TYPE = 'B' THEN
          (SELECT CASE WHEN (COUNT(*)-1) < 0 THEN 0 ELSE COUNT(*)-1 END
           FROM D_DATES
           WHERE d_dates.PROJECT_ID = ts.PROJECT_ID
           AND business_day_flag = 'Y'
           AND d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) 
           AND (CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END) )
         ELSE DATEDIFF('DAY',ts.CREATED_ON,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END)  END AS complaint_age
       ,tt.SLA_DAYS_TYPE AS complaint_age_type 
       ,CASE WHEN ts.TASK_STATUS IN('Complete') THEN 
          CASE WHEN tt.SLA_DAYS_TYPE = 'B' THEN 
                (SELECT CASE WHEN (COUNT(*)-1) < 0 THEN 0 ELSE COUNT(*)-1 END
                 FROM D_DATES
                 WHERE d_dates.PROJECT_ID = ts.PROJECT_ID
                 AND business_day_flag = 'Y'
                 AND d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) AND DATE_TRUNC('DAY',ts.STATUS_DATE) ) 
          ELSE DATEDIFF('DAY',ts.CREATED_ON,ts.STATUS_DATE) END 
        ELSE NULL END complaint_cycle_time 
       ,COALESCE(tdcr.SELECTION_VARCHAR,tdcrh.SELECTION_VARCHAR) AS complaint_reason
       ,COALESCE(tdca.SELECTION_VARCHAR,tdcah.SELECTION_VARCHAR) AS complaint_about 
       ,CASE WHEN ts.TASK_STATUS = 'Cancelled' THEN ts.STATUS_DATE ELSE NULL END AS complaint_cancel_date_time
       ,ts.UPDATED_ON AS complaint_update_date_time
       ,ts.TASK_DISPOSITION AS complaint_disposition
FROM (SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_worked_by,staff_assigned_to
               ,escalated_flag,staff_forward_by,source,task_info,task_notes,action_taken,task_disposition
               ,created_on,created_by,updated_on,updated_by,edit_reason,hold_reason,cancel_reason, 1 thsrank 
        FROM MARSDB.MARSDB_TASKS_VW AS ts
        UNION ALL
        SELECT *
        FROM(SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_worked_by,staff_assigned_to,
               CASE WHEN EXISTS(SELECT 1 FROM MARSDB.MARSDB_TASKS_HISTORY_VW th
                                WHERE th.TASK_ID = ths.TASK_ID AND th.PROJECT_ID = ths.PROJECT_ID
                                AND th.TASK_STATUS = 'Escalated') THEN 1 ELSE 0 END escalated_flag
               ,staff_forward_by,source,task_info,task_notes,action_taken,task_disposition
               ,created_on,created_by,updated_on,updated_by,edit_reason,hold_reason,cancel_reason
               ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
             FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
             WHERE task_status = 'Complete') ths
        WHERE thsrank = 1)  ts
 LEFT JOIN  MARSDB.CFG_TASK_TYPE tt ON  ts.TASK_TYPE_ID = tt.TASK_TYPE_ID 
 LEFT JOIN MARSDB.MARSDB_TASK_DETAIL_VW tdca ON ts.task_id = tdca.task_id AND ts.project_id = tdca.project_id AND tdca.task_field_name = 'Complaint About'
 LEFT JOIN MARSDB.MARSDB_TASK_DETAIL_VW tdcr ON ts.task_id = tdcr.task_id AND ts.project_id = tdcr.project_id AND tdcr.task_field_name = 'Reason'
 LEFT JOIN (SELECT *
            FROM (SELECT task_id, task_field_name,project_id, selection_varchar,RANK() OVER (PARTITION BY task_id,project_id ORDER BY task_detail_history_id DESC) tdcarn
                  FROM MARSDB.MARSDB_TASK_DETAIL_HISTORY_VW
                  WHERE task_field_name = 'Complaint About') r
            WHERE tdcarn = 1 ) tdcah ON ts.TASK_ID = tdcah.TASK_ID AND ts.project_id = tdcah.project_id 
 LEFT JOIN (SELECT *
            FROM (SELECT task_id, task_field_name,project_id, selection_varchar,RANK() OVER (PARTITION BY task_id,project_id ORDER BY task_detail_history_id DESC) tdcrn
                  FROM MARSDB.MARSDB_TASK_DETAIL_HISTORY_VW
                  WHERE task_field_name = 'Reason') r
            WHERE tdcrn = 1 ) tdcrh ON ts.TASK_ID = tdcrh.TASK_ID AND ts.project_id = tdcrh.project_id
 LEFT JOIN MARSDB.MARSDB_PROJECT_VW p ON p.PROJECT_ID = ts.PROJECT_ID
 LEFT JOIN MARSDB.MARSDB_USER_VW cu ON ts.CREATED_BY = TO_CHAR(cu.USER_ID)  
 LEFT JOIN (SELECT * FROM 
             (SELECT upr.user_id, upr.project_role_id, RANK() OVER (PARTITION BY upr.user_id ORDER BY upr.created_on DESC) rnk
              FROM MARSDB.MARSDB_USER_PROJECT_ROLE_VW upr 
              WHERE upr.IS_DEFAULT = 1 AND COALESCE(upr.END_DATE,CURRENT_DATE()) >= CURRENT_DATE()) 
            WHERE rnk = 1) upr ON cu.USER_ID = upr.USER_ID 
 LEFT JOIN MARSDB.MARSDB_PROJECT_ROLE_VW pr ON upr.PROJECT_ROLE_ID = pr.PROJECT_ROLE_ID AND pr.PROJECT_ID = p.PROJECT_ID
 LEFT JOIN MARSDB.MARSDB_USER_VW satu ON ts.STAFF_ASSIGNED_TO = TO_CHAR(satu.USER_ID) 
 LEFT JOIN (SELECT * FROM 
             (SELECT upr.user_id, upr.project_role_id, RANK() OVER (PARTITION BY upr.user_id ORDER BY upr.created_on DESC) rnk
              FROM MARSDB.MARSDB_USER_PROJECT_ROLE_VW upr 
              WHERE upr.IS_DEFAULT = 1 AND COALESCE(upr.END_DATE,CURRENT_DATE()) >= CURRENT_DATE()) 
            WHERE rnk = 1) satupr ON satu.USER_ID = satupr.USER_ID 
 LEFT JOIN MARSDB.MARSDB_PROJECT_ROLE_VW satpr ON satupr.PROJECT_ROLE_ID = satpr.PROJECT_ROLE_ID AND satpr.PROJECT_ID = p.PROJECT_ID
 -- getting the latest linked reference				    
 LEFT JOIN (SELECT *
             FROM(SELECT ex.PROJECT_ID,ex.INTERNAL_ID,ex.EXTERNAL_REF_ID AS source_reference_id,ex.EXTERNAL_REF_TYPE AS source_reference_type
                 		,RANK() OVER (PARTITION BY ex.PROJECT_ID,ex.INTERNAL_ID ORDER BY ex.EXTERNAL_LINK_ID DESC) exrank
	 	 		  FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW ex
			  	  WHERE UPPER(ex.INTERNAL_REF_TYPE) = 'TASK'
			      AND UPPER(ex.EXTERNAL_REF_TYPE) NOT IN('CONSUMER','CASE')
			      AND ex.EFFECTIVE_END_DATE IS NULL	) tmp
			  WHERE exrank = 1) exo ON exo.INTERNAL_ID = ts.TASK_ID AND exo.PROJECT_ID = ts.PROJECT_ID
 -- get total time worked
 LEFT JOIN (SELECT PROJECT_ID, TASK_ID, SUM(IFF(TASK_STATUS = 'In-Progress', time_elapsed, NULL)) AS total_time_worked
                FROM(SELECT PROJECT_ID,TASK_ID,TASK_STATUS,                                 
                        DATEDIFF('seconds', UPDATED_ON, COALESCE((LEAD(UPDATED_ON) OVER (PARTITION BY PROJECT_ID,TASK_ID ORDER BY PROJECT_ID, TASK_ID, UPDATED_ON, LOG_CREATED_ON)),CURRENT_DATE()) ) AS time_elapsed
                     FROM MARSDB.MARSDB_TASKS_HISTORY_VW) th
                GROUP BY PROJECT_ID, TASK_ID) ttw ON ts.TASK_ID = ttw.TASK_ID AND ts.PROJECT_ID = ttw.PROJECT_ID 
 --get escalated to/by staff
 LEFT JOIN (SELECT *
            FROM(SELECT th.TASK_ID,th.PROJECT_ID,th.TASK_HISTORY_ID,th.UPDATED_ON,th.STAFF_ASSIGNED_TO AS escalated_to_user_id,
                      task_escalated_ts,escalated_by_user_id
                      ,RANK() OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.task_history_id DESC) thrank                     
                 FROM MARSDB.MARSDB_TASKS_HISTORY_VW th
                   JOIN (SELECT *
                         FROM (SELECT the.TASK_HISTORY_ID AS escalated_hist_id, the.PROJECT_ID,the.TASK_ID, the.UPDATED_ON AS task_escalated_ts,the.UPDATED_BY AS escalated_by_user_id,                               
                                RANK() OVER (PARTITION BY the.PROJECT_ID,the.TASK_ID ORDER BY the.task_history_id DESC) esrank
                            FROM MARSDB.MARSDB_TASKS_HISTORY_VW the                               
                            WHERE the.TASK_STATUS = 'Escalated') tmp
                         WHERE esrank = 1) the ON th.TASK_ID = the.TASK_ID AND th.PROJECT_ID = the.PROJECT_ID                     
                 WHERE th.STAFF_ASSIGNED_TO IS NOT NULL
                 AND th.TASK_STATUS = 'In-Progress'             
                 AND th.TASK_HISTORY_ID > the.escalated_hist_id ) tmp
            WHERE thrank = 1) thesc ON ts.TASK_ID = thesc.TASK_ID AND ts.PROJECT_ID = thesc.PROJECT_ID    
WHERE tt.TASK_NAME = 'Review Complaint' ;

-- D Task Claim Status
CREATE OR REPLACE VIEW PUBLIC.MW_D_TASK_CLAIM_STATUS AS
SELECT 'CLAIMED' claimed_status_code
       ,'Claimed' claimed_status
UNION ALL
SELECT 'UNCLAIMED' claimed_status_code
       ,'Unclaimed' claimed_status
--UNION ALL
--SELECT 'NA' claimed_status_code
--       ,'Not Applicable' claimed_status       
;

-- D Task History
CREATE OR REPLACE VIEW PUBLIC.MW_D_TASK_HISTORY_SV AS
SELECT th.PROJECT_ID
       ,th.TASK_HISTORY_ID 
       ,DATE_TRUNC('DAY',th.CREATED_ON) AS d_date
       ,th.TASK_ID AS mw_bi_id
       ,th.TASK_ID
       ,th.CREATED_ON create_date_time
       ,th.TASK_STATUS AS task_status
       ,sato.BUSINESS_UNIT_ID
       ,sato.TEAM_ID
       ,th.UPDATED_ON AS last_update_date_time
       ,th.STATUS_DATE  AS status_date_time
       ,DATE_TRUNC('DAY',th.CREATED_ON) AS work_receipt_date
       ,CASE WHEN th.TASK_STATUS NOT IN('Complete','Cancelled') THEN 
          CASE WHEN th.STAFF_ASSIGNED_TO IS NOT NULL THEN th.UPDATED_ON ELSE NULL END ELSE thc.claim_date_time END claim_date_time   
       ,sato.team_supervisor team_supervisor_name
       ,th.STAFF_ASSIGNED_TO owner_user_id
       ,CASE WHEN th.TASK_STATUS = 'Complete' THEN th.STATUS_DATE ELSE NULL END AS complete_date_time
       ,th.UPDATED_BY last_upd_by_user_id
       ,CASE WHEN th.TASK_STATUS = 'Cancelled' THEN th.UPDATED_BY ELSE NULL END AS cancelled_by_user_id 
       ,CASE WHEN th.TASK_STATUS = 'Cancelled' THEN th.STATUS_DATE ELSE NULL END AS cancel_work_date_time 
       ,thesc.task_escalated_ts as task_escalated_date_time
       ,thesc.escalated_by_user_id
       ,thesc.escalated_to_user_id
FROM MARSDB.MARSDB_TASKS_HISTORY_VW th       
--get last claimed date if task is completed or cancelled
 LEFT JOIN (SELECT *
            FROM (SELECT th.PROJECT_ID, th.TASK_ID,th.TASK_HISTORY_ID,th.UPDATED_ON AS claim_date_time
                    ,RANK() OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.TASK_HISTORY_ID DESC) thrank
                  FROM MARSDB.MARSDB_TASKS_HISTORY_VW th                    
                  WHERE th.STAFF_ASSIGNED_TO IS NOT NULL
                  AND th.TASK_STATUS NOT IN('Cancelled','Complete')) tmp
             WHERE thrank = 1) thc  ON thc.TASK_ID = th.TASK_ID  AND thc.PROJECT_ID = th.PROJECT_ID        
--get team for staff assigned to             
  LEFT JOIN (SELECT *
                FROM(SELECT sato.USER_ID,sato.STAFF_ID,tsup.sup_user_id, tsup.team_supervisor, t.TEAM_NAME, t.TEAM_ID, t.PROJECT_ID, b.BUSINESS_UNIT_ID, b.BUSINESS_UNIT_NAME,                      
                       RANK() OVER (PARTITION BY t.PROJECT_ID,sato.USER_ID ORDER BY tu.EFFECTIVE_END_DATE DESC NULLS FIRST, tu.TEAM_USER_ID) turank 
                FROM MARSDB.MARSDB_USER_VW sato                                       
                  LEFT JOIN MARSDB.MARSDB_TEAM_USER_VW tu ON sato.USER_ID = tu.USER_ID 
                  LEFT JOIN MARSDB.MARSDB_TEAM_VW t ON tu.TEAM_ID = t.TEAM_ID 
                  LEFT JOIN MARSDB.MARSDB_BUSINESS_UNIT_VW b ON t.BUSINESS_UNIT_ID = b.BUSINESS_UNIT_ID AND t.PROJECT_ID = b.PROJECT_ID
                  LEFT JOIN (SELECT tsup.TEAM_ID, tsup.USER_ID AS sup_user_id, CONCAT(sup.FIRST_NAME,' ',sup.LAST_NAME)  team_supervisor
                             FROM MARSDB.MARSDB_TEAM_USER_VW tsup
                               JOIN MARSDB.MARSDB_USER_VW ust ON tsup.USER_ID = ust.USER_ID 
                               JOIN MARSDB.MARSDB_STAFF_VW sup ON ust.STAFF_ID = sup.STAFF_ID
                             WHERE tsup.SUPERVISOR_FLAG = 1 
                             AND tsup.EFFECTIVE_END_DATE IS NULL) tsup ON t.TEAM_ID = tsup.TEAM_ID ) tmp
               WHERE turank = 1) sato ON TO_CHAR(sato.USER_ID) = th.STAFF_ASSIGNED_TO AND sato.PROJECT_ID = th.PROJECT_ID
--get escalated to  
  LEFT JOIN (SELECT * 
             FROM (SELECT the.TASK_HISTORY_ID AS escalated_hist_id, the.PROJECT_ID,the.TASK_ID, the.UPDATED_ON AS task_escalated_ts,the.UPDATED_BY AS escalated_by_user_id,
                     escalated_to_user_id,RANK() OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.task_history_id) thrank
                   FROM MARSDB.MARSDB_TASKS_HISTORY_VW the                               
                    JOIN (SELECT th.TASK_ID, th.PROJECT_ID,th.STAFF_ASSIGNED_TO escalated_to_user_id,th.TASK_HISTORY_ID
                          FROM MARSDB.MARSDB_TASKS_HISTORY_VW th
                          WHERE th.STAFF_ASSIGNED_TO IS NOT NULL
                          AND th.TASK_STATUS = 'In-Progress') th ON the.TASK_ID = th.TASK_ID AND the.PROJECT_ID = th.PROJECT_ID AND th.TASK_HISTORY_ID > the.TASK_HISTORY_ID                   
                   WHERE the.TASK_STATUS = 'Escalated' ) tmp
             WHERE thrank = 1) thesc ON thesc.PROJECT_ID = th.PROJECT_ID AND thesc.escalated_hist_id = th.TASK_HISTORY_ID
;

-- D Task Instance
CREATE OR REPLACE VIEW PUBLIC.MW_D_TASK_INSTANCE_SV AS
WITH mw AS(
   SELECT ts.TASK_ID AS mw_bi_id      
          ,ts.CREATED_ON AS instance_start_date_time
          ,ts.CREATED_ON AS create_date_time     
          ,ts.CREATED_ON AS curr_work_receipt_date_time           
          ,CASE WHEN ts.TASK_STATUS IN('Cancelled', 'Complete') THEN ts.STATUS_DATE ELSE NULL END AS instance_end_date_time
          ,(SELECT CASE WHEN (COUNT(*)-1) < 0 THEN 0 ELSE COUNT(*)-1 END
               FROM D_DATES
               WHERE d_dates.PROJECT_ID = ts.PROJECT_ID
               AND business_day_flag = 'Y'
               AND d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) 
               AND (CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END) ) age_in_business_days     
          ,DATEDIFF('DAY',ts.CREATED_ON,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE()END) age_in_calendar_days     
          ,CASE WHEN ts.TASK_STATUS = 'Cancelled' THEN ts.UPDATED_BY ELSE NULL END AS cancelled_by_user_id     
           ,CASE WHEN ts.TASK_STATUS = 'Cancelled' THEN 'Normal' ELSE NULL END AS cancel_method
           ,ts.CANCEL_REASON AS cancel_reason
           ,CASE WHEN ts.TASK_STATUS = 'Cancelled' THEN ts.STATUS_DATE ELSE NULL END AS cancel_work_date_time          
           ,exc.case_id
           ,exclnt.client_id       
           ,CASE WHEN ts.TASK_STATUS = 'Complete' THEN ts.STATUS_DATE ELSE NULL END AS complete_date_time
           ,ts.CREATED_BY AS curr_created_by_user_id
           ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN 'Y' ELSE 'N' END AS escalated_flag
           ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN 'Escalated' ELSE 'Non Escalated' END AS escalated_flag_desc
           ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN thesc.escalated_to_user_id ELSE NULL END AS escalated_to_user_id    
           ,ts.STAFF_FORWARD_BY AS curr_forwarded_by_user_id
           ,CASE WHEN ts.STAFF_FORWARD_BY IS NOT NULL THEN 'Y' ELSE 'N' END AS forwarded_flag     
           ,sato.BUSINESS_UNIT_ID curr_business_unit_id           
           ,ts.UPDATED_BY AS curr_last_upd_by_user_id
           ,ts.UPDATED_ON AS curr_last_update_date_time
           ,CASE WHEN ts.TASK_STATUS NOT IN('Complete','Cancelled') THEN ts.STAFF_ASSIGNED_TO ELSE NULL END AS curr_owner_user_id     
           ,exo.source_reference_type
           ,exo.source_reference_id
           ,ts.STATUS_DATE AS curr_status_date_time
           ,(SELECT CASE WHEN (COUNT(*)-1) < 0 THEN 0 ELSE COUNT(*)-1 END
               FROM D_DATES
               WHERE d_dates.PROJECT_ID = ts.PROJECT_ID
               AND business_day_flag = 'Y'
               AND d_date BETWEEN DATE_TRUNC('DAY',ts.STATUS_DATE) 
               AND (CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END) ) status_age_in_bus_days                  
           ,DATEDIFF('DAY',DATE_TRUNC('DAY',ts.STATUS_DATE),CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END )  status_age_in_cal_days  
           ,ts.TASK_ID AS task_id
           ,ts.DEFAULT_PRIORITY AS task_priority          
           ,ts.task_status AS curr_task_status
           ,tt.TASK_NAME AS task_name
           ,ts.TASK_TYPE_ID
           ,sato.TEAM_ID AS curr_team_id           
           ,CASE WHEN ts.TASK_STATUS NOT IN('Complete','Cancelled') THEN
              CASE WHEN ts.STAFF_ASSIGNED_TO IS NOT NULL THEN COALESCE(ccd.curr_claim_date_time,ts.UPDATED_ON) ELSE NULL END ELSE NULL END AS curr_claim_date_time
           ,tt.SLA_DAYS AS sla_days
           ,tt.SLA_JEOPARDY_DAYS AS sla_jeopardy_days
           ,tt.SLA_DAYS_TYPE AS sla_days_type
           ,tt.UNIT_OF_WORK AS unit_of_work
           ,exdcn.dcn
            --These fields exist in the current MW implementation but cannot be mapped to CP           
           ,NULL AS parent_task_id                
           ,NULL AS source_process_id  
           ,NULL AS source_process_instance_id 
           ,NULL AS document_received_date
            --May not be needed and could be removed
           ,CURRENT_DATE() AS stg_extract_date_time
           ,CURRENT_DATE() AS stg_last_update_date_time
           ,CURRENT_DATE() AS stg_done_date_time
            --New               
           ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN thesc.escalated_by_user_id ELSE NULL END AS escalated_by_user_id                  
           ,CASE WHEN ts.ESCALATED_FLAG = 1 THEN thesc.task_escalated_ts ELSE NULL END AS task_escalated_ts     
           ,ts.PROJECT_ID AS project_id
           ,ts.SOURCE AS task_source
           ,ts.TASK_INFO AS task_info
           ,ts.TASK_NOTES AS task_notes
           ,ts.TASK_DISPOSITION AS task_disposition 
           ,tt.SLA_TARGET_DAYS AS sla_target_days   
           ,tt.OPERATIONS_GROUP AS ops_group 
           ,TT.TASK_DESCRIPTION AS task_type_description
           ,CASE WHEN ts.TASK_STATUS NOT IN('Complete','Cancelled') THEN 
              CASE WHEN ts.STAFF_ASSIGNED_TO IS NOT NULL THEN sato.owner_is_supervisor ELSE NULL END ELSE NULL END AS owner_is_supervisor
           ,sato.team_supervisor
           ,sato.team_name
           ,CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN NULL ELSE
              CASE WHEN ts.STAFF_ASSIGNED_TO IS NOT NULL THEN 'CLAIMED' ELSE 'UNCLAIMED' END END AS task_claim_status    
           ,CASE WHEN ts.TASK_STATUS IN('Complete') THEN ts.STAFF_ASSIGNED_TO ELSE NULL END staff_worked_by_user_id
           ,ttw.total_time_worked
           ,CASE WHEN ts.TASK_STATUS = 'Complete' THEN
              DATEDIFF('DAY',DATE_TRUNC('DAY',fcd.first_claim_date_time),DATE_TRUNC('DAY',ts.STATUS_DATE) ) ELSE NULL END AS total_handle_time 
           ,fcd.first_claim_date_time 
           ,sato.business_unit_name
  FROM (SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_worked_by,staff_assigned_to
               ,escalated_flag,staff_forward_by,source,task_info,task_notes,action_taken,task_disposition
               ,created_on,created_by,updated_on,updated_by,edit_reason,hold_reason,cancel_reason, 1 thsrank 
        FROM MARSDB.MARSDB_TASKS_VW AS ts
        UNION ALL
        SELECT *
        FROM(SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_worked_by,staff_assigned_to,
               CASE WHEN EXISTS(SELECT 1 FROM MARSDB.MARSDB_TASKS_HISTORY_VW th
                                WHERE th.TASK_ID = ths.TASK_ID AND th.PROJECT_ID = ths.PROJECT_ID
                                AND th.TASK_STATUS = 'Escalated') THEN 1 ELSE 0 END escalated_flag
               ,staff_forward_by,source,task_info,task_notes,action_taken,task_disposition
               ,created_on,created_by,updated_on,updated_by,edit_reason,hold_reason,cancel_reason
               ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
             FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
             WHERE task_status = 'Complete') ths
        WHERE thsrank = 1)  ts
     LEFT JOIN  MARSDB.CFG_TASK_TYPE tt ON  ts.TASK_TYPE_ID = tt.TASK_TYPE_ID           
  --get first claimed date for handle time calculation
  LEFT JOIN (SELECT *
                FROM(SELECT th.TASK_ID,th.PROJECT_ID,th.TASK_HISTORY_ID,th.UPDATED_ON AS first_claim_date_time                      
                      ,RANK() OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.task_history_id) fcdrank                     
                 FROM MARSDB.MARSDB_TASKS_HISTORY_VW th                                      
                 WHERE th.STAFF_ASSIGNED_TO IS NOT NULL
                 AND th.TASK_STATUS NOT IN('Complete','Cancelled') ) tmp
            WHERE fcdrank = 1) fcd ON ts.TASK_ID = fcd.TASK_ID AND ts.PROJECT_ID = fcd.PROJECT_ID  
  --get current claimed date
  LEFT JOIN (SELECT TASK_ID,PROJECT_ID,MAX(UPDATED_ON) curr_claim_date_time
             FROM(SELECT th.TASK_ID,th.PROJECT_ID,th.TASK_HISTORY_ID,th.UPDATED_ON, th.STAFF_ASSIGNED_TO
                    ,LAG(STAFF_ASSIGNED_TO) OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.task_history_id) prev_assigned_to
                  FROM MARSDB.MARSDB_TASKS_HISTORY_VW th                                      
                  WHERE  th.TASK_STATUS NOT IN('Complete','Cancelled'))
             WHERE ((prev_assigned_to IS NULL AND staff_assigned_to IS NOT NULL)
                OR (staff_assigned_to <> prev_assigned_to) ) 
             GROUP BY TASK_ID,PROJECT_ID) ccd ON ts.TASK_ID = ccd.TASK_ID and ts.PROJECT_ID = ccd.PROJECT_ID
  --get staff assigned to team/business unit 
  LEFT JOIN (SELECT *
                FROM(SELECT sato.USER_ID,sato.STAFF_ID,tsup.sup_user_id, tsup.team_supervisor, t.TEAM_NAME, t.TEAM_ID, t.PROJECT_ID, b.BUSINESS_UNIT_ID, b.BUSINESS_UNIT_NAME,
                       CASE WHEN sato.USER_ID = tsup.SUP_USER_ID THEN 'Supervisor' ELSE 'Non Supervisor' END owner_is_supervisor
                       ,RANK() OVER (PARTITION BY t.PROJECT_ID,sato.USER_ID ORDER BY tu.EFFECTIVE_END_DATE DESC NULLS FIRST, tu.TEAM_USER_ID) turank 
                FROM MARSDB.MARSDB_USER_VW sato                                       
                  LEFT JOIN MARSDB.MARSDB_TEAM_USER_VW tu ON sato.USER_ID = tu.USER_ID 
                  LEFT JOIN MARSDB.MARSDB_TEAM_VW t ON tu.TEAM_ID = t.TEAM_ID 
                  LEFT JOIN MARSDB.MARSDB_BUSINESS_UNIT_VW b ON t.BUSINESS_UNIT_ID = b.BUSINESS_UNIT_ID AND t.PROJECT_ID = b.PROJECT_ID
                  LEFT JOIN (SELECT tsup.TEAM_ID, tsup.USER_ID AS sup_user_id, CONCAT(sup.FIRST_NAME,' ',sup.LAST_NAME)  team_supervisor
                             FROM MARSDB.MARSDB_TEAM_USER_VW tsup
                               JOIN MARSDB.MARSDB_USER_VW ust ON tsup.USER_ID = ust.USER_ID 
                               JOIN MARSDB.MARSDB_STAFF_VW sup ON ust.STAFF_ID = sup.STAFF_ID
                             WHERE tsup.SUPERVISOR_FLAG = 1 
                             AND tsup.EFFECTIVE_END_DATE IS NULL) tsup ON t.TEAM_ID = tsup.TEAM_ID ) tmp
               WHERE turank = 1) sato ON TO_CHAR(sato.USER_ID) = ts.STAFF_ASSIGNED_TO AND sato.PROJECT_ID = ts.PROJECT_ID    
     --get escalated to/by staff
     LEFT JOIN (SELECT *
                FROM(SELECT th.TASK_ID,th.PROJECT_ID,th.TASK_HISTORY_ID,th.UPDATED_ON,th.STAFF_ASSIGNED_TO AS escalated_to_user_id,
                      task_escalated_ts,escalated_by_user_id
                      ,RANK() OVER (PARTITION BY th.PROJECT_ID,th.TASK_ID ORDER BY th.task_history_id DESC) thrank                     
                 FROM MARSDB.MARSDB_TASKS_HISTORY_VW th
                   JOIN (SELECT *
                         FROM (SELECT the.TASK_HISTORY_ID AS escalated_hist_id, the.PROJECT_ID,the.TASK_ID, the.UPDATED_ON AS task_escalated_ts,the.UPDATED_BY AS escalated_by_user_id,                               
                                RANK() OVER (PARTITION BY the.PROJECT_ID,the.TASK_ID ORDER BY the.task_history_id DESC) esrank
                            FROM MARSDB.MARSDB_TASKS_HISTORY_VW the                               
                            WHERE the.TASK_STATUS = 'Escalated') tmp
                         WHERE esrank = 1) the ON th.TASK_ID = the.TASK_ID AND th.PROJECT_ID = the.PROJECT_ID                     
                 WHERE th.STAFF_ASSIGNED_TO IS NOT NULL
                 AND th.TASK_STATUS = 'In-Progress'             
                 AND th.TASK_HISTORY_ID > the.escalated_hist_id ) tmp
            WHERE thrank = 1) thesc ON ts.TASK_ID = thesc.TASK_ID AND ts.PROJECT_ID = thesc.PROJECT_ID  
  -- get total time worked
     LEFT JOIN (SELECT PROJECT_ID, TASK_ID, SUM(IFF(TASK_STATUS = 'In-Progress', time_elapsed, NULL)) AS total_time_worked
                FROM(SELECT PROJECT_ID,TASK_ID,TASK_STATUS,                                 
                        DATEDIFF('seconds', UPDATED_ON, COALESCE((LEAD(UPDATED_ON) OVER (PARTITION BY PROJECT_ID,TASK_ID ORDER BY PROJECT_ID, TASK_ID, UPDATED_ON, LOG_CREATED_ON)),CURRENT_DATE()) ) AS time_elapsed
                     FROM MARSDB.MARSDB_TASKS_HISTORY_VW) th
                GROUP BY PROJECT_ID, TASK_ID) ttw ON ts.TASK_ID = ttw.TASK_ID AND ts.PROJECT_ID = ttw.PROJECT_ID
  -- get the latest linked case            
      LEFT JOIN (SELECT *
                 FROM(SELECT ex.PROJECT_ID,ex.INTERNAL_ID,ex.EXTERNAL_REF_ID AS case_id,RANK() OVER (PARTITION BY ex.PROJECT_ID,ex.INTERNAL_ID ORDER BY ex.EXTERNAL_LINK_ID DESC) exrnk
                      FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW ex
                      WHERE UPPER(ex.INTERNAL_REF_TYPE) = 'TASK'
                      AND UPPER(ex.EXTERNAL_REF_TYPE) = 'CASE'
                      AND ex.EFFECTIVE_END_DATE IS NULL ) tmp 
                  WHERE exrnk = 1) exc ON exc.INTERNAL_ID = ts.TASK_ID AND exc.PROJECT_ID = ts.PROJECT_ID
    -- get the latest linked client		
      LEFT JOIN (SELECT *
                 FROM(SELECT ex.PROJECT_ID,ex.INTERNAL_ID,ex.EXTERNAL_REF_ID AS client_id,RANK() OVER (PARTITION BY ex.PROJECT_ID,ex.INTERNAL_ID ORDER BY ex.EXTERNAL_LINK_ID DESC) exrnk
                      FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW ex
                      WHERE UPPER(ex.INTERNAL_REF_TYPE) = 'TASK'
                      AND UPPER(ex.EXTERNAL_REF_TYPE) = 'CONSUMER'
                      AND ex.EFFECTIVE_END_DATE IS NULL ) tmp 
                  WHERE exrnk = 1) exclnt ON exclnt.INTERNAL_ID = ts.TASK_ID AND exclnt.PROJECT_ID = ts.PROJECT_ID
    -- get the latest linked reference	
      LEFT JOIN (SELECT *
                 FROM(SELECT ex.PROJECT_ID,ex.INTERNAL_ID,ex.EXTERNAL_REF_ID AS source_reference_id,ex.EXTERNAL_REF_TYPE AS source_reference_type
                         ,RANK() OVER (PARTITION BY ex.PROJECT_ID,ex.INTERNAL_ID ORDER BY ex.EXTERNAL_LINK_ID DESC) exrnk
                      FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW ex
                      WHERE UPPER(ex.INTERNAL_REF_TYPE) = 'TASK'
                      AND UPPER(ex.EXTERNAL_REF_TYPE) NOT IN('CONSUMER','CASE')
                      AND ex.EFFECTIVE_END_DATE IS NULL ) tmp 
                  WHERE exrnk = 1) exo ON exo.INTERNAL_ID = ts.TASK_ID AND exo.PROJECT_ID = ts.PROJECT_ID                   
    -- get Document Id
      LEFT JOIN (SELECT *
                 FROM(SELECT ex.PROJECT_ID,ex.INTERNAL_ID,ex.EXTERNAL_REF_ID AS dcn,RANK() OVER (PARTITION BY ex.PROJECT_ID,ex.INTERNAL_ID ORDER BY ex.EXTERNAL_LINK_ID) exrnk
                      FROM MARSDB.MARSDB_EXTERNAL_LINKS_VW ex
                      WHERE UPPER(ex.INTERNAL_REF_TYPE) = 'TASK'
                      AND UPPER(ex.EXTERNAL_REF_TYPE) = 'INBOUND_CORRESPONDENCE'
                      AND ex.EFFECTIVE_END_DATE IS NULL ) tmp 
                  WHERE exrnk = 1) exdcn ON exdcn.INTERNAL_ID = ts.TASK_ID AND exdcn.PROJECT_ID = ts.PROJECT_ID    
 )
 SELECT mw.*    
  ,CASE WHEN mw.sla_days_type IS NULL THEN 'N'
         WHEN mw.sla_days_type = 'B' AND mw.sla_days IS NOT NULL AND mw.age_in_business_days >= mw.sla_days THEN 'Y'
         WHEN mw.sla_days_type = 'C' AND mw.sla_days IS NOT NULL AND mw.age_in_calendar_days >= mw.sla_days THEN 'Y'
    ELSE 'N' END AS sla_flag   
    ,CASE WHEN  mw.age_in_business_days <= 15 THEN '0-15'
          WHEN  mw.age_in_business_days > 15 AND mw.age_in_business_days <= 25 THEN '16-25'
          WHEN  mw.age_in_business_days > 25 AND mw.age_in_business_days <= 35 THEN '26-35'
     ELSE '36+' END AS age_in_business_days_group   
     ,CASE WHEN mw.curr_task_status NOT IN('Complete','Cancelled') THEN
        CASE WHEN mw.age_in_calendar_days < mw.sla_jeopardy_days -1 THEN 'In Compliance'
             WHEN mw.age_in_calendar_days >= mw.sla_jeopardy_days -1
               AND mw.age_in_calendar_days < mw.sla_jeopardy_days THEN '1 Day Before Jeopardy'
             WHEN mw.age_in_calendar_days >= mw.sla_jeopardy_days -1
               AND mw.age_in_calendar_days < mw.sla_days THEN 'In Jeopardy'
             WHEN mw.age_in_calendar_days >= mw.sla_days  THEN 'Exceeds SLA'
         ELSE 'No SLA' END ELSE 'No SLA' END AS inventory_sla_age_group   
     ,CASE WHEN mw.sla_days_type IS NULL THEN 'N'
           WHEN mw.sla_days_type = 'B' AND mw.sla_jeopardy_days IS NOT NULL AND mw.age_in_business_days >= mw.sla_jeopardy_days THEN 'Y'
           WHEN mw.sla_days_type = 'C' AND mw.sla_jeopardy_days IS NOT NULL AND mw.age_in_calendar_days >= mw.sla_jeopardy_days THEN 'Y'
      ELSE 'N' END AS jeopardy_flag
     ,CASE  WHEN mw.curr_task_status NOT IN('Complete','Cancelled') THEN 'Not Complete'
            WHEN mw.curr_task_status = 'Cancelled' THEN 'Not Required'
            WHEN mw.sla_days IS NULL THEN 'Not Required'
            WHEN mw.sla_days_type = 'B' AND mw.age_in_business_days > COALESCE(mw.sla_days,0) THEN 'Untimely'
            WHEN mw.sla_days_type = 'C' AND mw.age_in_calendar_days > COALESCE(mw.sla_days,0) THEN 'Untimely'  ELSE 'Timely' END AS timeliness_status
     ,CASE  WHEN mw.curr_task_status IN('Complete') THEN 
       CASE WHEN mw.sla_days_type = 'B' THEN mw.age_in_business_days
            WHEN mw.sla_days_type = 'C' THEN mw.age_in_calendar_days 
         ELSE NULL END ELSE NULL END AS task_cycle_time 
     ,CASE WHEN mw.sla_days_type = 'B' THEN mw.age_in_business_days ELSE mw.age_in_calendar_days END AS task_age
FROM mw;	

-- MW_F_COMPLAINTS_BY_DAY_SV
CREATE OR REPLACE VIEW PUBLIC.MW_F_COMPLAINTS_BY_DAY_SV AS
SELECT d_date
  ,complaint_type_id
  ,project_id
  ,SUM(creation_count) creation_count
  ,SUM(completion_count) completion_count
  ,SUM(inventory_count) inventory_count
  ,SUM(cancellation_count) cancellation_count
  ,SUM(termination_count) termination_count
FROM(
 SELECT d.d_date ,
    ts.TASK_TYPE_ID AS complaint_type_id,  
    ts.PROJECT_ID,
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 0 ELSE 1 END AS inventory_count,
    CASE WHEN d_date = DATE_TRUNC('DAY',ts.CREATED_ON) THEN 1 ELSE 0 END creation_count,
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS completion_count,
    CASE WHEN ts.TASK_STATUS = 'Cancelled' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS cancellation_count,
    CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS termination_count
FROM d_dates d
  JOIN (SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by,1 thsrank 
        FROM MARSDB.MARSDB_TASKS_VW AS ts
        UNION ALL
        SELECT *
        FROM(SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by
               ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
             FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
             WHERE task_status = 'Complete') ths
        WHERE thsrank = 1)  ts   
   ON d.PROJECT_ID = ts.PROJECT_ID AND d.d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) AND CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END  
  JOIN MARSDB.CFG_TASK_TYPE tt ON ts.TASK_TYPE_ID = tt.TASK_TYPE_ID 
WHERE tt.TASK_NAME = 'Review Complaint'  ) 
GROUP BY d_date,complaint_type_id,project_id;

-- MW_F_COMPLAINTS_INSTANCE_BY_DATE_SV
CREATE OR REPLACE VIEW PUBLIC.MW_F_COMPLAINT_INSTANCE_BY_DATE_SV AS
SELECT d_date
  ,complaint_id
  ,complaint_type_id
  ,project_id
  ,SUM(creation_count) creation_count
  ,SUM(completion_count) completion_count
  ,SUM(inventory_count) inventory_count
  ,SUM(cancellation_count) cancellation_count
  ,SUM(termination_count) termination_count
FROM(
 SELECT d.d_date ,
    ts.TASK_ID AS complaint_id,
    ts.TASK_TYPE_ID AS complaint_type_id,  
    ts.PROJECT_ID,
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 0 ELSE 1 END AS inventory_count,
    CASE WHEN d_date = DATE_TRUNC('DAY',ts.CREATED_ON) THEN 1 ELSE 0 END creation_count,
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS completion_count,
    CASE WHEN ts.TASK_STATUS = 'Cancelled' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS cancellation_count,
    CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS termination_count
FROM PUBLIC.d_dates d
  JOIN (SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by,1 thsrank 
        FROM MARSDB.MARSDB_TASKS_VW AS ts
        UNION ALL
        SELECT *
        FROM(SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by
               ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
             FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
             WHERE task_status = 'Complete') ths
        WHERE thsrank = 1)  ts   
   ON d.PROJECT_ID = ts.PROJECT_ID AND d.d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) AND CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END  
  JOIN MARSDB.CFG_TASK_TYPE tt ON ts.TASK_TYPE_ID = tt.TASK_TYPE_ID 
WHERE tt.TASK_NAME = 'Review Complaint'  ) 
GROUP BY d_date,complaint_id,complaint_type_id,project_id;

-- F Task by Day
CREATE OR REPLACE VIEW PUBLIC.MW_F_TASKS_BY_DAY_SV AS
SELECT d_date
  ,PROJECT_ID
  ,SUM(creation_count) creation_count
  ,SUM(completion_count) completion_count
  ,SUM(inventory_count) inventory_count
  ,SUM(cancellation_count) cancellation_count
  ,SUM(termination_count) termination_count
FROM(
 SELECT d.d_date ,
    ts.PROJECT_ID,  
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 0 ELSE 1 END AS inventory_count,
    CASE WHEN d_date = DATE_TRUNC('DAY',ts.CREATED_ON) THEN 1 ELSE 0 END creation_count,
    CASE WHEN ts.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS completion_count,
    CASE WHEN ts.TASK_STATUS = 'Cancelled' AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS cancellation_count,
    CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') AND d.d_date = DATE_TRUNC('DAY',ts.STATUS_DATE) THEN 1 ELSE 0 END AS termination_count
FROM PUBLIC.D_DATES d
  JOIN (SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by,1 thsrank 
        FROM MARSDB.MARSDB_TASKS_VW AS ts
        UNION ALL
        SELECT *
        FROM(SELECT project_id,task_id,task_type_id,task_status,status_date,created_on,created_by,updated_on,updated_by
               ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
             FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
             WHERE task_status = 'Complete') ths
        WHERE thsrank = 1)  ts 
     ON d.PROJECT_ID = ts.PROJECT_ID AND d.d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) AND CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END    
 )
GROUP BY d_date,PROJECT_ID;

-- F Task Instance by Day
CREATE OR REPLACE VIEW PUBLIC.MW_F_TASK_INSTANCE_BY_DAY_SV AS
SELECT d_date
  ,PROJECT_ID
  ,TASK_ID AS MW_BI_ID
  ,TASK_ID 
  ,TASK_TYPE_ID
  ,TASK_TYPE_NAME
  ,TASK_TYPE_DESCRIPTION
  ,OPERATIONS_GROUP
  ,TASK_SLA_DAYS
  ,TASK_SLA_TYPE
  ,TASK_SLA_TARGET_DAYS
  ,TASK_SLA_JEOPARDY_DAYS
  ,TASK_PRIORITY
  ,TASK_SOURCE
  ,TASK_STATUS
  ,TASK_DISPOSITION
  ,TASK_CLAIM_STATUS
  ,TEAM_SUPERVISOR
  ,SUM(creation_count) creation_count
  ,SUM(completion_count) completion_count
  ,SUM(inventory_count) inventory_count
  ,SUM(cancellation_count) cancellation_count
  ,SUM(termination_count) termination_count
  ,AGE_IN_BUSINESS_DAYS
  ,COMPLETE_DATE_TIME
  ,CANCEL_WORK_DATE_TIME
FROM(
 SELECT d.d_date 
    ,TS.TASK_ID 
    ,TS.PROJECT_ID
    ,TS.TASK_TYPE_ID
    ,TT.TASK_NAME AS TASK_TYPE_NAME
    ,TT.TASK_DESCRIPTION AS TASK_TYPE_DESCRIPTION
    ,TT.OPERATIONS_GROUP
    ,TT.SLA_DAYS AS TASK_SLA_DAYS
    ,TT.SLA_DAYS_TYPE AS TASK_SLA_TYPE
    ,TT.SLA_TARGET_DAYS AS TASK_SLA_TARGET_DAYS
    ,TT.SLA_JEOPARDY_DAYS AS TASK_SLA_JEOPARDY_DAYS
    ,TS.DEFAULT_PRIORITY TASK_PRIORITY
    ,TS.SOURCE TASK_SOURCE
    ,TS.TASK_STATUS
    ,TS.TASK_DISPOSITION
    ,TS.TEAM_SUPERVISOR
    ,CASE WHEN TS.TASK_STATUS IN('Complete','Cancelled') THEN NULL ELSE
       CASE WHEN TS.STAFF_ASSIGNED_TO IS NOT NULL THEN 'CLAIMED' ELSE 'UNCLAIMED' END END AS TASK_CLAIM_STATUS
    ,CASE WHEN TS.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',TS.STATUS_DATE) THEN 0 ELSE 1 END AS inventory_count
    ,CASE WHEN d_date = DATE_TRUNC('DAY',TS.CREATED_ON) THEN 1 ELSE 0 END creation_count
    ,CASE WHEN TS.TASK_STATUS = 'Complete' AND d.d_date = DATE_TRUNC('DAY',TS.STATUS_DATE) THEN 1 ELSE 0 END AS completion_count
    ,CASE WHEN TS.TASK_STATUS = 'Cancelled' AND d.d_date = DATE_TRUNC('DAY',TS.STATUS_DATE) THEN 1 ELSE 0 END AS cancellation_count
    ,CASE WHEN TS.TASK_STATUS IN('Complete','Cancelled') AND d.d_date = DATE_TRUNC('DAY',TS.STATUS_DATE) THEN 1 ELSE 0 END AS termination_count
    ,CASE WHEN ts.TASK_STATUS = 'Complete' THEN ts.STATUS_DATE ELSE NULL END AS complete_date_time    
    ,(SELECT CASE WHEN (COUNT(*)-1) < 0 THEN 0 ELSE COUNT(*)-1 END
      FROM D_DATES
      WHERE d_dates.PROJECT_ID = ts.PROJECT_ID
      AND d_dates.business_day_flag = 'Y'
      AND d_dates.d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) 
      AND (CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN 
            CASE WHEN d.d_date < DATE_TRUNC('DAY',ts.STATUS_DATE) THEN d.d_date ELSE DATE_TRUNC('DAY',ts.STATUS_DATE) END ELSE d.d_date END) ) age_in_business_days
    ,CASE WHEN ts.TASK_STATUS = 'Cancelled' THEN ts.STATUS_DATE ELSE NULL END AS cancel_work_date_time                
FROM PUBLIC.D_DATES d
  JOIN (SELECT ts.project_id,ts.task_id,ts.task_type_id,ts.default_priority,ts.task_status,ts.status_date,ts.staff_assigned_to,ts.source,ts.task_disposition,ts.created_on,ts.created_by,ts.updated_on,ts.updated_by,sato.team_supervisor
        FROM(SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_assigned_to,source,task_disposition,created_on,created_by,updated_on,updated_by,1 thsrank 
             FROM MARSDB.MARSDB_TASKS_VW AS ts
             UNION ALL
             SELECT *
             FROM(SELECT project_id,task_id,task_type_id,default_priority,task_status,status_date,staff_assigned_to,source,task_disposition,created_on,created_by,updated_on,updated_by
                    ,RANK() OVER (PARTITION BY ths.PROJECT_ID, ths.TASK_ID ORDER BY ths.TASK_HISTORY_ID DESC) thsrank
                  FROM MARSDB.MARSDB_TASKS_HISTORY_VW ths             
                  WHERE task_status = 'Complete') ths
             WHERE thsrank = 1)  ts           
          LEFT JOIN (SELECT *
                     FROM(SELECT sato.USER_ID,sato.STAFF_ID,tsup.sup_user_id, tsup.team_supervisor, t.TEAM_NAME, t.TEAM_ID, t.PROJECT_ID, b.BUSINESS_UNIT_ID, b.BUSINESS_UNIT_NAME,
                            CASE WHEN sato.USER_ID = tsup.SUP_USER_ID THEN 'Supervisor' ELSE 'Non Supervisor' END owner_is_supervisor
                             ,RANK() OVER (PARTITION BY t.PROJECT_ID,sato.USER_ID ORDER BY tu.EFFECTIVE_END_DATE DESC NULLS FIRST, tu.TEAM_USER_ID) turank 
                          FROM MARSDB.MARSDB_USER_VW sato                                       
                            LEFT JOIN MARSDB.MARSDB_TEAM_USER_VW tu ON sato.USER_ID = tu.USER_ID 
                            LEFT JOIN MARSDB.MARSDB_TEAM_VW t ON tu.TEAM_ID = t.TEAM_ID 
                            LEFT JOIN MARSDB.MARSDB_BUSINESS_UNIT_VW b ON t.BUSINESS_UNIT_ID = b.BUSINESS_UNIT_ID AND t.PROJECT_ID = b.PROJECT_ID
                            LEFT JOIN (SELECT tsup.TEAM_ID, tsup.USER_ID AS sup_user_id, CONCAT(sup.FIRST_NAME,' ',sup.LAST_NAME)  team_supervisor
                                       FROM MARSDB.MARSDB_TEAM_USER_VW tsup
                                         JOIN MARSDB.MARSDB_USER_VW ust ON tsup.USER_ID = ust.USER_ID 
                                         JOIN MARSDB.MARSDB_STAFF_VW sup ON ust.STAFF_ID = sup.STAFF_ID
                                       WHERE tsup.SUPERVISOR_FLAG = 1 
                                       AND tsup.EFFECTIVE_END_DATE IS NULL) tsup ON t.TEAM_ID = tsup.TEAM_ID ) tmp
                          WHERE turank = 1) sato ON TO_CHAR(sato.USER_ID) = ts.STAFF_ASSIGNED_TO AND sato.PROJECT_ID = ts.PROJECT_ID  )ts          
     ON  d.PROJECT_ID = ts.PROJECT_ID AND d.d_date BETWEEN DATE_TRUNC('DAY',ts.CREATED_ON) AND CASE WHEN ts.TASK_STATUS IN('Complete','Cancelled') THEN DATE_TRUNC('DAY',ts.STATUS_DATE) ELSE CURRENT_DATE() END    
  LEFT JOIN MARSDB.CFG_TASK_TYPE TT  ON TS.TASK_TYPE_ID = TT.TASK_TYPE_ID
 )    
GROUP BY d_date
  ,MW_BI_ID
  ,PROJECT_ID
  ,TASK_TYPE_ID
  ,TASK_TYPE_NAME
  ,TASK_TYPE_DESCRIPTION
  ,OPERATIONS_GROUP
  ,TASK_SLA_DAYS
  ,TASK_SLA_TYPE
  ,TASK_SLA_TARGET_DAYS
  ,TASK_SLA_JEOPARDY_DAYS
  ,TASK_PRIORITY
  ,TASK_SOURCE
  ,TASK_STATUS
  ,TASK_DISPOSITION
  ,TASK_CLAIM_STATUS
  ,TEAM_SUPERVISOR
  ,AGE_IN_BUSINESS_DAYS
  ,COMPLETE_DATE_TIME
  ,CANCEL_WORK_DATE_TIME;