DROP TABLE "FLHK_ETL_PROCESS_LETTERS";
--------------------------------------------------------
--  DDL FOR TABLE FLHK_ETL_PROCESS_LETTERS
DROP SEQUENCE FLHK_ETL_PROCESS_LETTERS_SEQ;
/

CREATE SEQUENCE FLHK_ETL_PROCESS_LETTERS_SEQ START WITH 1 INCREMENT BY 1;
/--------------------------------------------------------

   CREATE TABLE "FLHK_ETL_PROCESS_LETTERS" 
	(PK_ID	NUMBER	not null,
	LETTER_REQ_ID	NUMBER	not null,
	CREATE_DATE	DATE	not null,
	CREATED_BY_NAME	VARCHAR2(100 BYTE)	,
	REQUESTED_ON_DATE	DATE	not null,
	STATUS	VARCHAR2(100 BYTE)	,
	STATUS_DATE	DATE	,
	TYPE	VARCHAR2(1000 BYTE)	not null,
	CATEGORY	VARCHAR2(100 BYTE)	,
	USER_NAME	VARCHAR2(80 BYTE)	,
	SOURCE	VARCHAR2(80 BYTE)	not null,
	TRIGGERING_METHOD	VARCHAR2(3 BYTE)	not null,
	LANGUAGE	VARCHAR2(100 BYTE)	,
	DRIVER_TYPE	VARCHAR2(100 BYTE)	not null,
	DRIVER_KEY	NUMBER	not null,
	ACCOUNT_ID	NUMBER	,
	MEMBER_ID	NUMBER	,
	APP_ID	NUMBER	,
	LAST_UPDATE_DATE	DATE	,
	LAST_UPDATE_BY_NAME	VARCHAR2(100 BYTE)	,
	VALIDATED_DATE	DATE	,
	VALIDATED_OUTCOME	VARCHAR2(100 BYTE)	,
	TRANSMITTED_DATE	DATE	,
	CONFIRMED_DATE	DATE	,
	IMAGE_RECEIVED_DATE	DATE	,
	REPLACEMENT_REQUEST_ID	NUMBER	,
	CANCEL_DATE	DATE	,
	ASSD_PROCESS_LETTER_REQUEST	DATE	not null,
	ASED_PROCESS_LETTER_REQUEST	DATE	,
	ASF_PROCESS_LETTER_REQUEST	VARCHAR2(1 BYTE)	,
	ASED_RECEIVED_CONFIRMATION	DATE	,
	ASF_RECEIVED_CONFIRMATION	VARCHAR2(1 BYTE)	,
	ASSD_RECEIVED_CONFIRMATION	DATE	,
	ASED_WAIT_UNTIL_NEW_RQST	DATE	,
	ASF_WAIT_UNTIL_NEW_RQST	VARCHAR2(1 BYTE)	,
	ASSD_WAIT_UNTIL_NEW_RQST	DATE	,
	GWF_TRANSMIT	VARCHAR2(1 BYTE)	,
	GWF_NEW_LETTER_NEEDED	VARCHAR2(1 BYTE)	,
	STAGE_DONE_DATE	DATE	,
	STG_EXTRACT_DATE	DATE	,
	STG_LAST_UPDATE_DATE	DATE	,
	INSTANCE_STATUS	VARCHAR2(100 BYTE)	not null,
	INSTANCE_COMPLETE_DATE	DATE	,
	UPDATED	VARCHAR2(1 BYTE)	,
	LETTER_CODE	VARCHAR2(40 BYTE)	,
	ACCOUNT_NUMBER	NUMBER	,
	PERSON_NUMBER	NUMBER	,
	FHKC_QC	VARCHAR2(32 BYTE)	,
	FHKC_QC_USER	VARCHAR2(1000 BYTE)	,
	MAX_QC	VARCHAR2(32 BYTE)	,
	MAX_QC_USER	VARCHAR2(1000 BYTE)	,
	AGE_IN_BUSINESS_DAYS	NUMBER(18,0)	,
	AGE_IN_CALENDAR_DAYS	NUMBER(18,0)	,
	STATUS_AGE_IN_BUS_DAYS	NUMBER(18,0)	,
	STATUS_AGE_IN_CAL_DAYS	NUMBER(18,0)	,
	BATCH_ID	NUMBER(18,0)	
	); 
/
--------------------------------------------------------
--  DDL FOR INDEX LETTER_REQ_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LETTER_REQ_ID_PK" ON "FLHK_ETL_PROCESS_LETTERS" ("LETTER_REQ_ID") ;
  
  CREATE INDEX IDX_PROCESSLETTERS_BID ON FLHK_ETL_PROCESS_LETTERS (BATCH_ID);
  CREATE INDEX IDX_PROCESSLETTERS_DKEY ON FLHK_ETL_PROCESS_LETTERS (DRIVER_KEY);
  CREATE INDEX IDX_PROCESSLETTERS_AID ON FLHK_ETL_PROCESS_LETTERS (ACCOUNT_ID);
  CREATE INDEX IDX_PROCESSLETTERS_MID ON FLHK_ETL_PROCESS_LETTERS (MEMBER_ID);
  CREATE INDEX IDX_PROCESSLETTERS_APID ON FLHK_ETL_PROCESS_LETTERS (APP_ID);
  CREATE INDEX IDX_PROCESSLETTERS_RID ON FLHK_ETL_PROCESS_LETTERS (REPLACEMENT_REQUEST_ID);
  CREATE INDEX IDX_PROCESSLETTERS_ANUM ON FLHK_ETL_PROCESS_LETTERS (ACCOUNT_NUMBER);
  CREATE INDEX IDX_PROCESSLETTERS_PNUM ON FLHK_ETL_PROCESS_LETTERS (PERSON_NUMBER);
  CREATE INDEX IDX_PROCESSLETTERS_STATUS ON FLHK_ETL_PROCESS_LETTERS (STATUS);
  CREATE INDEX IDX_PROCESSLETTERS_TYPE ON FLHK_ETL_PROCESS_LETTERS (TYPE);
  CREATE INDEX IDX_PROCESSLETTERS_ISD ON FLHK_ETL_PROCESS_LETTERS (INSTANCE_COMPLETE_DATE);
  CREATE INDEX IDX_PROCESSLETTERS_ABD ON FLHK_ETL_PROCESS_LETTERS (AGE_IN_BUSINESS_DAYS);
  CREATE INDEX IDX_PROCESSLETTERS_CD ON FLHK_ETL_PROCESS_LETTERS (AGE_IN_CALENDAR_DAYS);
  CREATE INDEX IDX_PROCESSLETTERS_SAD ON FLHK_ETL_PROCESS_LETTERS (STATUS_AGE_IN_BUS_DAYS);
  CREATE INDEX IDX_PROCESSLETTERS_SCD ON FLHK_ETL_PROCESS_LETTERS (STATUS_AGE_IN_CAL_DAYS);

/
--------------------------------------------------------
--  PK FOR TABLE FLHK_ETL_PROCESS_LETTERS
--------------------------------------------------------

  ALTER TABLE "FLHK_ETL_PROCESS_LETTERS" ADD CONSTRAINT "LETTER_REQ_ID_PK" PRIMARY KEY ("LETTER_REQ_ID") ENABLE;
/
--------------------------------------------------------
--  DDL FOR TRIGGER FLHK_ETL_PROCESS_LETTERS_TRG
--------------------------------------------------------

CREATE OR REPLACE TRIGGER "FLHK_ETL_PROCESS_LETTERS_TRG" 
   BEFORE INSERT ON "FLHK_ETL_PROCESS_LETTERS" 
   FOR EACH ROW 
BEGIN  
   IF INSERTING THEN 
      IF :NEW."PK_ID" IS NULL THEN 
         SELECT FLHK_ETL_PROCESS_LETTERS_SEQ.NEXTVAL INTO :NEW."PK_ID" FROM DUAL; 
      END IF; 
   END IF; 
END;
/
ALTER TRIGGER "FLHK_ETL_PROCESS_LETTERS_TRG" ENABLE;
/
