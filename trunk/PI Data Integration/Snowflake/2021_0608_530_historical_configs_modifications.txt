
--create sp and task
CREATE or replace PROCEDURE update_tables_history ()
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  
  $$
  
var sqlCommand = `merge into public.d_pi_tables_history nh
using pi_tables_change_data m 
   on  nh.table_name = m.table_name 
   and nh.start_time = m.start_time
when matched and m.dml_type = 'U' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when matched and m.dml_type = 'D' then update 
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when not matched and m.dml_type = 'I' then insert
           (table_name, s3_sourced, active, start_time, end_time, current_flag)
    values (m.table_name, m.s3_sourced, m.active, m.start_time, m.end_time, m.current_flag);`;

snowflake.execute ({sqlText: sqlCommand});

sqlCommand = `update public.d_pi_tables_history hist
set hist.end_time = temp.real_end_time
from 
(select table_name, start_time, end_time ,
    lead (start_time) over (partition by table_name order by start_time asc) as proposed_end_time,
    case when proposed_end_time is not null and timestampdiff(seconds,end_time, proposed_end_time) <=60 then proposed_end_time else end_time end as real_end_time
from public.d_pi_tables_history) as temp
where hist.table_name = temp.table_name
and hist.start_time = temp.start_time
and hist.end_time != temp.real_end_time;
--and some time within 1 minute of now`;

snowflake.execute ({sqlText: sqlCommand});

return 0;

$$;


drop task UPDATE_D_PI_TABLES_HISTORY_DEV;
CREATE TASK UPDATE_D_PI_TABLES_HISTORY_DEV
  WAREHOUSE = 'PUREINSIGHTS_DEV_LOAD_WH'
  SCHEDULE = '1 minute' when system$stream_has_data('pi_tables_stream')
AS
 call update_tables_history ();
 
 alter task UPDATE_D_PI_TABLES_HISTORY_DEV resume;
--------------------------------------------------------


--create sp and task
CREATE or replace PROCEDURE update_unavailable_tables_history ()
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  
  $$
  
var sqlCommand = `merge into public.d_pi_project_unavailable_tables_history nh
using pi_unavailable_tables_change_data m 
   on  nh.project_id = m.project_id
   and nh.table_name = m.table_name 
   and nh.start_time = m.start_time
when matched and m.dml_type = 'U' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when matched and m.dml_type = 'D' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when not matched and m.dml_type = 'I' then insert
           (project_id, project_name, table_name,end_unavailable_date, start_time, end_time, current_flag)
    values (m.project_id, m.project_name,m.table_name, m.end_unavailable_date, m.start_time, m.end_time, m.current_flag);`;

snowflake.execute ({sqlText: sqlCommand});

sqlCommand = `update public.d_pi_project_unavailable_tables_history hist
set hist.end_time = temp.real_end_time
from 
(select project_id,table_name, start_time, end_time ,
    lead (start_time) over (partition by project_id,table_name order by start_time asc) as proposed_end_time,
    case when proposed_end_time is not null and timestampdiff(seconds,end_time, proposed_end_time) <=60 then proposed_end_time else end_time end as real_end_time
from public.d_pi_project_unavailable_tables_history) as temp
where hist.project_id = temp.project_id
and hist.table_name = temp.table_name
and hist.start_time = temp.start_time
and hist.end_time != temp.real_end_time;
--and some time within 1 minute of now`;

snowflake.execute ({sqlText: sqlCommand});

return 0;

$$;


drop task UPDATE_D_PI_UNAVAILABLE_TABLES_HISTORY_DEV;
CREATE TASK UPDATE_D_PI_UNAVAILABLE_TABLES_HISTORY_DEV
  WAREHOUSE = 'PUREINSIGHTS_DEV_LOAD_WH'
  SCHEDULE = '1 minute' when system$stream_has_data('pi_unavailable_tables_stream')
AS
 call update_unavailable_tables_history ();
 
 alter task UPDATE_D_PI_UNAVAILABLE_TABLES_HISTORY_DEV resume;
   

-----------------------------------


--create sp and task
CREATE or replace PROCEDURE update_projects_history ()
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  
  $$
  
var sqlCommand = `merge into public.d_pi_projects_history nh 
using pi_projects_change_data m 
   on  nh.projectid = m.projectid
   and nh.start_time = m.start_time
when matched and m.dml_type = 'U' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when matched and m.dml_type = 'D' then update 
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when not matched and m.dml_type = 'I' then insert
           (projectid, projectname, awsfoldername, projecttimezone, active, start_time, end_time, current_flag)
    values (m.projectid, m.projectname, m.awsfoldername, m.projecttimezone, m.active, m.start_time, m.end_time, m.current_flag);`;

snowflake.execute ({sqlText: sqlCommand});

sqlCommand = `update public.d_pi_projects_history hist
set hist.end_time = temp.real_end_time
from 
(select projectid, start_time, end_time ,
    lead (start_time) over (partition by projectid order by start_time asc) as proposed_end_time,
    case when proposed_end_time is not null and timestampdiff(seconds,end_time, proposed_end_time) <=60 then proposed_end_time else end_time end as real_end_time
from public.d_pi_projects_history) as temp
where hist.projectid = temp.projectid
and hist.start_time = temp.start_time
and hist.end_time != temp.real_end_time;
--and some time within 1 minute of now`;

snowflake.execute ({sqlText: sqlCommand});

return 0;

$$;

call update_projects_history();


drop task UPDATE_D_PI_PROJECTS_HISTORY_DEV;
CREATE TASK UPDATE_D_PI_PROJECTS_HISTORY_DEV
  WAREHOUSE = 'PUREINSIGHTS_DEV_LOAD_WH'
  SCHEDULE = '1 minute' when system$stream_has_data('pi_projects_stream')
AS
 call update_projects_history ();
 
 alter task UPDATE_D_PI_PROJECTS_HISTORY_DEV resume;
 

