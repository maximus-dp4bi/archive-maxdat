-- USE DATABASE DECISIONPOINT_UAT;
-- USE SCHEMA STAGE;
--- create or replace TABLE ONEMODEL_DAILY_RAW_HISTORY (
	EMPLOYEE_ID VARCHAR(16777216),
	NAME VARCHAR(16777216),
	STATE VARCHAR(16777216),
	CITY VARCHAR(16777216),
	LOCATION VARCHAR(16777216),
	MANAGER VARCHAR(16777216),
	US_CALENDAR VARCHAR(16777216),
	HEADCOUNT_EOP_ALL_WORKERS VARCHAR(16777216),
	INVOLUNTARY_TERMINATIONS_ALL_WORKERS VARCHAR(16777216),
	VOLUNTARY_TERMINATIONS_ALL_WORKERS VARCHAR(16777216),
	ONE_EMPLOYEE_EFFDT DATE,
	ONE_EMPLOYEE_ORIGINAL_HIRE_DATE DATE,
	ONE_EMPLOYEE_LATEST_HIRE_DATE DATE,
	ONE_EMPLOYEE_LATEST_CONVERSION_DATE DATE,
	ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE DATE,
	ONE_EMPLOYEE_TERMINATION_DATE DATE,
	ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID VARCHAR(16777216),
	ONE_EMPLOYEE_SUPPLIER VARCHAR(16777216),
	ONE_EMPLOYEE_EMAIL_ADDRESS VARCHAR(16777216),
	ONE_EMPLOYEE_LEGAL_FIRST_NAME VARCHAR(16777216),
	ONE_EMPLOYEE_LEGAL_MIDDLE_NAME VARCHAR(16777216),
	ONE_EMPLOYEE_LEGAL_LAST_NAME VARCHAR(16777216),
	EMPLOYMENT_TYPE_GROUPING VARCHAR(16777216),
	WORK_ZIP_CODE VARCHAR(16777216),
	LOCATION_ID VARCHAR(16777216),
	REMOTE_OFFICE VARCHAR(16777216),
	HOME_CITY VARCHAR(16777216),
	HOME_STATE VARCHAR(16777216),
	COST_CENTER_ID VARCHAR(16777216),
	COST_CENTER VARCHAR(16777216),
	JOB_FAMILY_GROUP VARCHAR(16777216),
	JOB_FAMILY VARCHAR(16777216),
	POSITION_TITLE VARCHAR(16777216),
	BUSINESS_TITLE VARCHAR(16777216),
	EMPLOYMENT_STATUS VARCHAR(16777216),
	ROW_HASH NUMBER(19,0),
	SNOWFLAKE_INSERT_DATETIME TIMESTAMP_NTZ(9),
	SNOWFLAKE_UPDATE_DATETIME TIMESTAMP_NTZ(9),
	INSERT_BY VARCHAR(500),
	CURRENT_RECORD NUMBER(1,0),
	AS_OF_DATE DATE
);

--create or replace view LOAD_ONEMODEL_DAILY_RAW_VW(
	EMPLOYEE_ID,
	NAME,
	STATE,
	CITY,
	LOCATION,
	MANAGER,
	US_CALENDAR,
	HEADCOUNT_EOP_ALL_WORKERS,
	INVOLUNTARY_TERMINATIONS_ALL_WORKERS,
	VOLUNTARY_TERMINATIONS_ALL_WORKERS,
	ONE_EMPLOYEE_EFFDT,
	ONE_EMPLOYEE_ORIGINAL_HIRE_DATE,
	ONE_EMPLOYEE_LATEST_HIRE_DATE,
	ONE_EMPLOYEE_LATEST_CONVERSION_DATE,
	ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE,
	ONE_EMPLOYEE_TERMINATION_DATE,
	ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID,
	ONE_EMPLOYEE_SUPPLIER,
	ONE_EMPLOYEE_EMAIL_ADDRESS,
	ONE_EMPLOYEE_LEGAL_FIRST_NAME,
	ONE_EMPLOYEE_LEGAL_MIDDLE_NAME,
	ONE_EMPLOYEE_LEGAL_LAST_NAME,
	EMPLOYMENT_TYPE_GROUPING,
	WORK_ZIP_CODE,
	LOCATION_ID,
	REMOTE_OFFICE,
	HOME_CITY,
	HOME_STATE,
	COST_CENTER_ID,
	COST_CENTER,
	JOB_FAMILY_GROUP,
	JOB_FAMILY,
	POSITION_TITLE,
	BUSINESS_TITLE,
	EMPLOYMENT_STATUS,
	ROW_HASH,
	SNOWFLAKE_INSERT_DATETIME,
	SNOWFLAKE_UPDATE_DATETIME,
	INSERT_BY,
	CURRENT_RECORD
) as 
SELECT EMPLOYEE_ID, "NAME", STATE, CITY, "LOCATION", MANAGER, US_CALENDAR, HEADCOUNT_EOP_ALL_WORKERS, INVOLUNTARY_TERMINATIONS_ALL_WORKERS, VOLUNTARY_TERMINATIONS_ALL_WORKERS, ONE_EMPLOYEE_EFFDT, ONE_EMPLOYEE_ORIGINAL_HIRE_DATE, ONE_EMPLOYEE_LATEST_HIRE_DATE, ONE_EMPLOYEE_LATEST_CONVERSION_DATE, ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE, ONE_EMPLOYEE_TERMINATION_DATE, ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID, ONE_EMPLOYEE_SUPPLIER, ONE_EMPLOYEE_EMAIL_ADDRESS, ONE_EMPLOYEE_LEGAL_FIRST_NAME, ONE_EMPLOYEE_LEGAL_MIDDLE_NAME, ONE_EMPLOYEE_LEGAL_LAST_NAME, EMPLOYMENT_TYPE_GROUPING, WORK_ZIP_CODE, LOCATION_ID, REMOTE_OFFICE, HOME_CITY, HOME_STATE, COST_CENTER_ID, COST_CENTER, JOB_FAMILY_GROUP, JOB_FAMILY, POSITION_TITLE, BUSINESS_TITLE, EMPLOYMENT_STATUS
,hash(array_to_string(array_compact(array_construct(EMPLOYEE_ID, "NAME", STATE, CITY, "LOCATION", MANAGER, US_CALENDAR, HEADCOUNT_EOP_ALL_WORKERS, INVOLUNTARY_TERMINATIONS_ALL_WORKERS, VOLUNTARY_TERMINATIONS_ALL_WORKERS, ONE_EMPLOYEE_EFFDT, ONE_EMPLOYEE_ORIGINAL_HIRE_DATE, ONE_EMPLOYEE_LATEST_HIRE_DATE, ONE_EMPLOYEE_LATEST_CONVERSION_DATE, ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE, ONE_EMPLOYEE_TERMINATION_DATE, ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID, ONE_EMPLOYEE_SUPPLIER, ONE_EMPLOYEE_EMAIL_ADDRESS, ONE_EMPLOYEE_LEGAL_FIRST_NAME, ONE_EMPLOYEE_LEGAL_MIDDLE_NAME, ONE_EMPLOYEE_LEGAL_LAST_NAME, EMPLOYMENT_TYPE_GROUPING, WORK_ZIP_CODE, LOCATION_ID, REMOTE_OFFICE, HOME_CITY, HOME_STATE, COST_CENTER_ID, COST_CENTER, JOB_FAMILY_GROUP, JOB_FAMILY, POSITION_TITLE, BUSINESS_TITLE, EMPLOYMENT_STATUS
 )),',')) AS ROW_HASH,
SYSDATE() AS SNOWFLAKE_INSERT_DATETIME,
SYSDATE() AS SNOWFLAKE_UPDATE_DATETIME,
'PI_USER_LOAD' AS INSERT_BY,
1 AS CURRENT_RECORD
FROM ONEMODEL_UAT.RAW.ONEMODEL_DAILY_RAW;


--CREATE OR REPLACE PROCEDURE "LOAD_ONEMODEL_DAILY_RAW_PROC"()
-- RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS 'declare environment varchar;                
        tempTableName varchar default ''LOAD_ONEMODEL_DAILY_RAW_HIST_TEMP'';
        tgtTableName varchar default ''ONEMODEL_DAILY_RAW_HISTORY'';
        srcTableName varchar default ''LOAD_ONEMODEL_DAILY_RAW_VW'';
        tempTableText varchar;
        mergeInsertUpdate varchar;
        mergeCloseCurrent varchar;
                
BEGIN 
                
SELECT CURRENT_DATABASE() || ''.'' || CURRENT_SCHEMA() || ''.'' INTO :environment;
      
tempTableText:= ''CREATE OR REPLACE TEMPORARY TABLE '' || :environment || :tempTableName || '' AS SELECT a.*, b.ROW_HASH TGT_ROW_HASH, b.US_CALENDAR AS TGT_US_CALENDAR FROM '' || :environment || :srcTableName || '' a 
              LEFT JOIN '' || :environment || :tgtTableName || '' b ON a.EMPLOYEE_ID = b.EMPLOYEE_ID AND b.CURRENT_RECORD = 1 
             WHERE (a.ROW_HASH != b.ROW_HASH OR a.US_CALENDAR=b.US_CALENDAR  OR b.EMPLOYEE_ID IS NULL)'';

mergeInsertUpdate:= ''MERGE INTO '' || :environment || :tgtTableName || '' tgt USING (SELECT * FROM '' || :environment || :tempTableName || '') src 
ON (tgt.EMPLOYEE_ID = src.EMPLOYEE_ID AND tgt.US_CALENDAR=src.US_CALENDAR AND tgt.CURRENT_RECORD = 1) 
                WHEN MATCHED THEN UPDATE
                    SET TGT.NAME	=	SRC.NAME,
TGT.STATE	=	SRC.STATE,
TGT.CITY	=	SRC.CITY,
TGT.LOCATION	=	SRC.LOCATION,
TGT.MANAGER	=	SRC.MANAGER,
TGT.HEADCOUNT_EOP_ALL_WORKERS	=	SRC.HEADCOUNT_EOP_ALL_WORKERS,
TGT.INVOLUNTARY_TERMINATIONS_ALL_WORKERS	=	SRC.INVOLUNTARY_TERMINATIONS_ALL_WORKERS,
TGT.VOLUNTARY_TERMINATIONS_ALL_WORKERS	=	SRC.VOLUNTARY_TERMINATIONS_ALL_WORKERS,
TGT.ONE_EMPLOYEE_EFFDT	=	SRC.ONE_EMPLOYEE_EFFDT,
TGT.ONE_EMPLOYEE_ORIGINAL_HIRE_DATE	=	SRC.ONE_EMPLOYEE_ORIGINAL_HIRE_DATE,
TGT.ONE_EMPLOYEE_LATEST_HIRE_DATE	=	SRC.ONE_EMPLOYEE_LATEST_HIRE_DATE,
TGT.ONE_EMPLOYEE_LATEST_CONVERSION_DATE	=	SRC.ONE_EMPLOYEE_LATEST_CONVERSION_DATE,
TGT.ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE	=	SRC.ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE,
TGT.ONE_EMPLOYEE_TERMINATION_DATE	=	SRC.ONE_EMPLOYEE_TERMINATION_DATE,
TGT.ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID	=	SRC.ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID,
TGT.ONE_EMPLOYEE_SUPPLIER	=	SRC.ONE_EMPLOYEE_SUPPLIER,
TGT.ONE_EMPLOYEE_EMAIL_ADDRESS	=	SRC.ONE_EMPLOYEE_EMAIL_ADDRESS,
TGT.ONE_EMPLOYEE_LEGAL_FIRST_NAME	=	SRC.ONE_EMPLOYEE_LEGAL_FIRST_NAME,
TGT.ONE_EMPLOYEE_LEGAL_MIDDLE_NAME	=	SRC.ONE_EMPLOYEE_LEGAL_MIDDLE_NAME,
TGT.ONE_EMPLOYEE_LEGAL_LAST_NAME	=	SRC.ONE_EMPLOYEE_LEGAL_LAST_NAME,
TGT.EMPLOYMENT_TYPE_GROUPING	=	SRC.EMPLOYMENT_TYPE_GROUPING,
TGT.WORK_ZIP_CODE	=	SRC.WORK_ZIP_CODE,
TGT.LOCATION_ID	=	SRC.LOCATION_ID,
TGT.REMOTE_OFFICE	=	SRC.REMOTE_OFFICE,
TGT.HOME_CITY	=	SRC.HOME_CITY,
TGT.HOME_STATE	=	SRC.HOME_STATE,
TGT.COST_CENTER_ID	=	SRC.COST_CENTER_ID,
TGT.COST_CENTER	=	SRC.COST_CENTER,
TGT.JOB_FAMILY_GROUP	=	SRC.JOB_FAMILY_GROUP,
TGT.JOB_FAMILY	=	SRC.JOB_FAMILY,
TGT.POSITION_TITLE	=	SRC.POSITION_TITLE,
TGT.BUSINESS_TITLE	=	SRC.BUSINESS_TITLE,
TGT.EMPLOYMENT_STATUS	=	SRC.EMPLOYMENT_STATUS,
TGT.SNOWFLAKE_UPDATE_DATETIME	=	SRC.SNOWFLAKE_UPDATE_DATETIME,
TGT.AS_OF_DATE=CURRENT_DATE()
                WHEN NOT MATCHED AND src.TGT_ROW_HASH != src.ROW_HASH OR src.TGT_ROW_HASH IS NULL THEN INSERT (EMPLOYEE_ID,
NAME,
STATE,
CITY,
LOCATION,
MANAGER,
US_CALENDAR,
HEADCOUNT_EOP_ALL_WORKERS,
INVOLUNTARY_TERMINATIONS_ALL_WORKERS,
VOLUNTARY_TERMINATIONS_ALL_WORKERS,
ONE_EMPLOYEE_EFFDT,
ONE_EMPLOYEE_ORIGINAL_HIRE_DATE,
ONE_EMPLOYEE_LATEST_HIRE_DATE,
ONE_EMPLOYEE_LATEST_CONVERSION_DATE,
ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE,
ONE_EMPLOYEE_TERMINATION_DATE,
ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID,
ONE_EMPLOYEE_SUPPLIER,
ONE_EMPLOYEE_EMAIL_ADDRESS,
ONE_EMPLOYEE_LEGAL_FIRST_NAME,
ONE_EMPLOYEE_LEGAL_MIDDLE_NAME,
ONE_EMPLOYEE_LEGAL_LAST_NAME,
EMPLOYMENT_TYPE_GROUPING,
WORK_ZIP_CODE,
LOCATION_ID,
REMOTE_OFFICE,
HOME_CITY,
HOME_STATE,
COST_CENTER_ID,
COST_CENTER,
JOB_FAMILY_GROUP,
JOB_FAMILY,
POSITION_TITLE,
BUSINESS_TITLE,
EMPLOYMENT_STATUS,
ROW_HASH,
SNOWFLAKE_INSERT_DATETIME,
INSERT_BY,
CURRENT_RECORD,
AS_OF_DATE
) values(
SRC.EMPLOYEE_ID,
SRC.NAME,
SRC.STATE,
SRC.CITY,
SRC.LOCATION,
SRC.MANAGER,
SRC.US_CALENDAR,
SRC.HEADCOUNT_EOP_ALL_WORKERS,
SRC.INVOLUNTARY_TERMINATIONS_ALL_WORKERS,
SRC.VOLUNTARY_TERMINATIONS_ALL_WORKERS,
SRC.ONE_EMPLOYEE_EFFDT,
SRC.ONE_EMPLOYEE_ORIGINAL_HIRE_DATE,
SRC.ONE_EMPLOYEE_LATEST_HIRE_DATE,
SRC.ONE_EMPLOYEE_LATEST_CONVERSION_DATE,
SRC.ONE_EMPLOYEE_PSEUDO_CONTINUOUS_SERVICE_DATE,
SRC.ONE_EMPLOYEE_TERMINATION_DATE,
SRC.ONE_EMPLOYEE_MANAGER_EMPLOYEE_ID,
SRC.ONE_EMPLOYEE_SUPPLIER,
SRC.ONE_EMPLOYEE_EMAIL_ADDRESS,
SRC.ONE_EMPLOYEE_LEGAL_FIRST_NAME,
SRC.ONE_EMPLOYEE_LEGAL_MIDDLE_NAME,
SRC.ONE_EMPLOYEE_LEGAL_LAST_NAME,
SRC.EMPLOYMENT_TYPE_GROUPING,
SRC.WORK_ZIP_CODE,
SRC.LOCATION_ID,
SRC.REMOTE_OFFICE,
SRC.HOME_CITY,
SRC.HOME_STATE,
SRC.COST_CENTER_ID,
SRC.COST_CENTER,
SRC.JOB_FAMILY_GROUP,
SRC.JOB_FAMILY,
SRC.POSITION_TITLE,
SRC.BUSINESS_TITLE,
SRC.EMPLOYMENT_STATUS,
SRC.ROW_HASH,
SRC.SNOWFLAKE_INSERT_DATETIME,
SRC.INSERT_BY,
SRC.CURRENT_RECORD,
CURRENT_DATE())'' ;               

mergeCloseCurrent:= ''MERGE INTO '' || :environment || :tgtTableName || '' tgt USING (SELECT * FROM '' || :environment || :tempTableName || '') src ON (tgt.EMPLOYEE_ID = src.EMPLOYEE_ID AND src.TGT_US_CALENDAR =TGT.US_CALENDAR AND tgt.CURRENT_RECORD = 1 )
                WHEN MATCHED AND src.ROW_HASH != src.TGT_ROW_HASH AND src.TGT_ROW_HASH IS NOT NULL THEN UPDATE
                    SET SNOWFLAKE_UPDATE_DATETIME = src.SNOWFLAKE_UPDATE_DATETIME
                    ,   CURRENT_RECORD = 0,  AS_OF_DATE=CURRENT_DATE()'' ;                                

EXECUTE IMMEDIATE tempTableText;
                
BEGIN TRANSACTION;

EXECUTE IMMEDIATE mergeInsertUpdate;
EXECUTE IMMEDIATE mergeCloseCurrent;
            
COMMIT;              
  RETURN ''Success'';
EXCEPTION
  WHEN OTHER THEN
  ROLLBACK;
  RETURN ''Error'';                
END';
