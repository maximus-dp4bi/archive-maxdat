use role PI_DATA_INGEST_DEV_ALERT_USER;
use warehouse PUREINSIGHTS_DEV_LOAD_DAILY_WH;
use database PUREINSIGHTS_DEV;
use schema RAW;

CREATE OR REPLACE PROCEDURE INGESTUNINGESTEDPIDATA_V2(PROJECTID VARCHAR, REINGESTFLAG BOOLEAN, INGESTALLFLAG BOOLEAN, WAITFORS3FLAG BOOLEAN, RUNFROMBASHFLAG BOOLEAN, afterTimeStr VARCHAR, beforeTimeStr VARCHAR, lookBackDays VARCHAR, tableName VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS 
$$
  
  //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";
     if (RUNFROMBASHFLAG) {
      sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG_"+PROJECTID+"';";
     }

     var setLogTableSQLCommand = sqlCommand;

     snowflake.execute ({sqlText: sqlCommand});
 
function log(projectid, object_category, object_name, status_string, msg){
    snowflake.createStatement( { sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
} 
       

function convertTZ(date, tzString) {
    return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
}

function addDays(date, days) {
  var result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}
     //get date string for today

     var today_local = new Date();
     var today = convertTZ(today_local,'America/New_York')
     var dd = String(today.getDate()).padStart(2, '0');
     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
     var yyyy = today.getFullYear();
     var hh = String(today.getHours());
     var todayDateString = yyyy + mm + dd;
  
	 if (AFTERTIMESTR && BEFORETIMESTR)
	 {
		var afterTimeString = AFTERTIMESTR;		
	    var beforeTimeString = BEFORETIMESTR;		  
	 }
	 else
	 {

	 	var lookBackDaysInt = parseInt(LOOKBACKDAYS)*-1;

	 	let startDate = new Date();		 
		startDate = addDays(today, lookBackDaysInt);

		let endDate = new Date();
	 	endDate = addDays(today, 1, 'days');

	 	var sdYear = String(startDate.getFullYear());
	    var sdMonth = String(startDate.getMonth()+1).padStart(2,'0');
	    var sdDayOfMonth = String(startDate.getDate()).padStart(2,'0');

	 	var edYear = String(endDate.getFullYear());
	    var edMonth = String(endDate.getMonth()+1).padStart(2,'0');
	    var edDayOfMonth = String(endDate.getDate()).padStart(2,'0');
	   	   
	 	var afterTimeString = sdYear + "/" + sdMonth + "/" + sdDayOfMonth + " 00:00:00";
	 	var beforeTimeString =  edYear + "/" + edMonth + "/" + edDayOfMonth + " 00:00:00";
	 
	 }
     
	 log(PROJECTID, "DATE", "NA", "SUCCEEDED", "Ingestion running for range " +afterTimeString+" to "+beforeTimeString);
	
REINGEST_SFX = ""
if (REINGESTFLAG){
REINGEST_SFX=" REINGEST";
}     
         
    
 //log start
 if (! RUNFROMBASHFLAG){
     log(PROJECTID, "INGESTION STARTED"+REINGEST_SFX, "NA", "SUCCEEDED","Starting ingestion for PI data");
 }
 
//get project fields 
    var PROJECTNAME = "";
    var AWSFOLDERNAME = "";
    var ingest_wh = "";
    var stageName = "PI_V2_" + PROJECTID;
    var truncateFlag = true;
    var sqlCommand = "select pr.projectname, pr.awsfoldername, pr.ingest_wh from public.D_PI_INGESTION_PROJECTS_VW pr where pr.projectid = '"+PROJECTID+"';";
    var stmt = snowflake.createStatement({sqlText: sqlCommand});    
     try {
            var result1 = stmt.execute();
            result1.next();
            PROJECTNAME = result1.getColumnValue(1);
            AWSFOLDERNAME = result1.getColumnValue(2);
            ingest_wh = result1.getColumnValue(3);
         }
    catch (err)  {
        log(PROJECTID, "PROJECT INFO"+REINGEST_SFX, "NA", "FAILED","Failed to get project info from project table: " + err);
        return "2";
        }    
   
   //set ingestion warehouse
     var sqlCommand = "USE WAREHOUSE "+ingest_wh +";";
     try {
     snowflake.execute ({sqlText: sqlCommand});
     } 
     catch(err){
      log(PROJECTID, "WAREHOUSE"+REINGEST_SFX, "NA", "FAILED","Failed to set project ingestion warehouse: " + err + sqlCommand);
     }
   
    //drop stage if still exists
    var blah = 0;
    sqlCommand = "call dropPIStage('" + stageName + "');";
    try { 
    snowflake.execute ({sqlText: sqlCommand}); 
    }
    catch (err){ 
      blah=1;
    }

       
    //create stage for DATA today 
    sqlCommand = "call createPIStageV2('" + AWSFOLDERNAME + "','" + stageName + "');";
    
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log(PROJECTID, "STAGE"+REINGEST_SFX, stageName, "FAILED","Failed to create stage" + stageName + " for " +AWSFOLDERNAME+ + " for "+todayDateString+ ": "+ err); 
        return "3"; 
}
    
  //get list of tables yet to be ingested today

  	if (Math.floor(Math.random() * 11) > 5)
    {
		var sortOrder = "asc";
    }
    else
    {
		var sortOrder = "desc";
    }
  
    var table_array=[];
    if (INGESTALLFLAG){
       sqlCommand = "select ta.table_name,ta.ingest_type, ta.key_string from public.D_PI_INGESTION_PROJECTS_VW pr left outer join public.d_pi_tables ta where pr.projectid = '"+PROJECTID+"' and ta.s3_sourced = true and ta.active = true and (ta.table_name = '"+TABLENAME+"' or '"+TABLENAME+"'='ALL') order by ta.table_name "+sortOrder+";"; 
    } else {
       sqlCommand = "select ta.table_name,ta.ingest_type,ta.key_string from public.D_PI_INGESTION_PROJECTS_VW pr left outer join public.d_pi_tables ta where pr.projectid = '"+PROJECTID+"' and ta.s3_sourced = true and ta.active = true and (ta.table_name = '"+TABLENAME+"' or '"+TABLENAME+"'='ALL') and not exists (select 1 from raw.ingest_pi_data_det_log dl where dl.projectid = pr.projectid and dl.object_category in ('TABLE','TABLE REINGEST') and dl.object_name = ta.table_name and dl.status_string = 'SUCCEEDED' and date(convert_timezone('UTC','America/New_York',to_timestamp(to_varchar(dl.ts)))) = date(current_timestamp())) order by ta.table_name "+sortOrder+";"; 
    }
    
    var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );
    var rs = createdSQL.execute();
    while (rs.next()) {
     var table_name = rs.getColumnValue(1);
     var table_type = rs.getColumnValue(2);
     var key_string = rs.getColumnValue(3);
     table_array.push(table_name+"|"+table_type+"|"+key_string);
    }
 
 //get list of files to ingest by table
 sqlCommand="call getFilesToIngest ('"+PROJECTID+"',null,'"+TABLENAME+"','"+stageName+"','"+afterTimeString+"','"+beforeTimeString+"',"+REINGESTFLAG+","+RUNFROMBASHFLAG+");"; 
       log(PROJECTID, "SQL2"+REINGEST_SFX, "NA", "SUCCEEDED", sqlCommand);
  try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log(PROJECTID, "FILES"+REINGEST_SFX, "NA", "FAILED","Failed to list files to be ingested" + err); 
        return "5"; 
}
 
  //ingest tables in list
  var rowCount=0;
  var stmt="";
  for (const table_info of table_array) {
  var info_array = table_info.split("|");
  var table_name = info_array[0];
  var tableIngestType = info_array[1];
  var tableKeyString = info_array[2];

    sqlCommand = "call ingestPIData_V2('"+ table_name +"','" + stageName + "','" + AWSFOLDERNAME + "','" + PROJECTID + "','" + PROJECTNAME + "',"+ truncateFlag +"," + REINGESTFLAG + ","+RUNFROMBASHFLAG+",'"+tableIngestType+"','"+tableKeyString+"');";

    try {
            snowflake.execute ({sqlText: sqlCommand});
        }
    catch (err)  {
        log(PROJECTID, "FILES"+REINGEST_SFX, "NA", "FAILED","Failed to execute procedure "+sqlCommand+": "+ err); 
        return "21"; 
	}
  }
      
//call sps
  //get list of sps
    var sp_array=[];

    sqlCommand = "select sp.sp_name,sp.schema_name from public.d_pi_ingestion_sps sp order by sp.sp_name; "; 
    var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );
    var rs = createdSQL.execute();

    while (rs.next()) {
     var sp_name = rs.getColumnValue(1);
     var schema_name = rs.getColumnValue(2)
     sp_array.push(schema_name + "." + sp_name);
    }
  
  //call sps in list
  var rowCount=0;
  var stmt="";
  for (const sp of sp_array) {
/*
     sqlCommand = "call "+ sp + "('"+PROJECTID+"',"+REINGESTFLAG+","+RUNFROMBASHFLAG+");"
     snowflake.execute ({sqlText: sqlCommand});
*/ 
  
	sp_name = sp;
  	var spNamePartArray = sp.split(".");
  
  	if(spNamePartArray[0] != sp)
  	{
  		sp_name = spNamePartArray[spNamePartArray.length - 1];
  	}
  	  
    var spSQL = snowflake.createStatement( { sqlText: `call `+ sp + `(:1,:2,:3)`, binds:[PROJECTID, REINGESTFLAG, RUNFROMBASHFLAG] } );
    var rs = spSQL.execute();

    while (rs.next()) {
     var returnVal = rs.getColumnValue(1);
    }
    
    var returnValUC = returnVal.toUpperCase();
    
    if(returnValUC == "SUCCESS")
    {
        log(PROJECTID, "SP"+REINGEST_SFX, sp_name, "SUCCEEDED","Succeeded executing stored procedure " + sp + " for projectid " + PROJECTID);
    }
    else if (returnValUC == "ERROR")
    {
		log(PROJECTID,"SP"+REINGEST_SFX, sp_name, "FAILED","Failed to execute stored procedure " + sp + " for projectid " + PROJECTID);
    }
  }    
             
    //drop stage
    sqlCommand = "call dropPIStage('" + stageName + "');";
      try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log(PROJECTID, "STAGE"+REINGEST_SFX, stageName, "FAILED","Failed to drop stage" + stageName + " for " +AWSFOLDERNAME+ + " for "+todayDateString+ ": "+ err); 
        return "5"; 
}

    log(PROJECTID, "INGESTION COMPLETED"+REINGEST_SFX, "NA", "SUCCEEDED","Succeeded ingesting PI data");
    return "0";  
$$;
