create or replace view PUBLIC.ADMIN_PI_INGESTION_STATUS_BY_PROJECT_VW as
with base as (
               select * from (
                               select dl0.projectid, dl0.ts, dd.date as status_date_est,
                               RANK() OVER (PARTITION BY dl0.projectid,dd.date ORDER BY dl0.ts asc) as row_num
                               from raw.ingest_pi_data_det_log dl0
                               join public.d_dates dd
                               on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl0.ts)))) = dd.date
                               where dl0.object_category in ('INGESTION STARTED')
                               and dd.date >= date('2021-06-01')
               ) where row_num=1
),
latest_base as (
               select * from (
                               select dl0.projectid, dl0.ts, dd.date as status_date_est,
                               RANK() OVER (PARTITION BY dl0.projectid,dd.date ORDER BY dl0.ts desc) as row_num
                               from raw.ingest_pi_data_det_log dl0
                               join public.d_dates dd
                               on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl0.ts)))) = dd.date
                               where dl0.object_category in ('INGESTION STARTED','INGESTION STARTED REINGEST')
               ) where row_num=1
),
final as (
select * from (
                               select dl1.projectid, to_timestamp_ltz(to_varchar(dl1.ts)) as status_time_ltz, dd.date as status_date_est, 
                               dl1.object_category, dl1.status_string,
                               RANK() OVER (PARTITION BY dl1.projectid,dd.date ORDER BY dl1.ts desc) as row_num
                               from raw.ingest_pi_data_det_log dl1
                               join public.d_dates dd
                               on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = dd.date
                               --and dd.date =  date(convert_timezone('America/New_York',current_timestamp()))
               ) where row_num=1
),
min_date as (
              select to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(min(dl2.ts))))) as min_date 
              from raw.ingest_pi_data_det_log dl2 
),
latest_table_failure as (
                select dl2.projectid, dd.date as status_date_est, dl2.object_name, max(dl2.ts) as ts from raw.ingest_pi_data_det_log dl2
                join public.d_dates dd
                on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl2.ts)))) = dd.date             
                where dl2.object_category in ('TABLE','TABLE REINGEST')
                and dl2.status_string = 'FAILED'
                --and date(convert_timezone('UTC','America/New_York',to_timestamp(to_varchar(dl2.ts)))) = date(current_timestamp())
                group by dl2.projectid, dd.date, dl2.object_name
),
max_table_ingest_ts as (
                select dl2.projectid, dd.date as status_date_est, max(dl2.ts) as ts from raw.ingest_pi_data_det_log dl2
                join public.d_dates dd
                on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl2.ts)))) = dd.date
                where dl2.object_category in ('TABLE','TABLE REINGEST')
                and dl2.status_string = 'SUCCEEDED'
                --and date(convert_timezone('UTC','America/New_York',to_timestamp(to_varchar(dl2.ts)))) = date(current_timestamp())
                group by dl2.projectid, dd.date
),

projects_tables_list as (
                                                   
select final.status_date_est, final.status_time_ltz, phist.projectid as projectid, phist.projectname, thist.table_name as active_table_name,uthist.table_name as unavailable_table_name
from final

left outer join public.d_pi_projects_history phist
on final.projectid = phist.projectid
and final.status_time_ltz >= phist.start_time
and timestampadd(minute,1,final.status_time_ltz) <= phist.end_time
and phist.active = true

left outer join public.d_pi_tables_history thist
on final.status_time_ltz >= thist.start_time
and timestampadd(minute,1,final.status_time_ltz) <= thist.end_time
and thist.active = true
and thist.s3_sourced = true
                                                   
left outer join public.d_pi_project_unavailable_tables_history uthist
on final.projectid = uthist.project_id
and thist.table_name = uthist.table_name
and final.status_time_ltz >= uthist.start_time
and timestampadd(minute,1,final.status_time_ltz) <= uthist.end_time
and (uthist.end_unavailable_date is null or uthist.end_unavailable_date >= final.status_date_est)
),
table_ingested_count as (
                         select dl1.projectid, ptlist.status_date_est as status_date,
                         count(distinct dl1.object_name) as nmbr_tables_ingested
                         from raw.ingest_pi_data_det_log dl1
                         join base
                         on dl1.projectid = base.projectid
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = base.status_date_est
                         join projects_tables_list ptlist
                         on dl1.projectid = ptlist.projectid
                         and dl1.object_name = ptlist.active_table_name
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = ptlist.status_date_est
  left outer join latest_table_failure fail
                on dl1.projectid = fail.projectid
                and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = fail.status_date_est
                and dl1.object_name = fail.object_name
                         where dl1.object_category in ('TABLE','TABLE REINGEST') 
                         and dl1.status_string = 'SUCCEEDED'
                         and dl1.ts >= base.ts
  and (fail.ts is null or dl1.ts > fail.ts)
                         and ptlist.projectid is not null
                         and ptlist.active_table_name is not null
                         and ptlist.unavailable_table_name is null         
                         group by 1,2
),
table_ingested_zero_count as (
                         select dl1.projectid, ptlist.status_date_est as status_date,
                         count(distinct dl1.object_name) as nmbr_tables_ingested_zero
                         from raw.ingest_pi_data_det_log dl1
                         join base
                         on dl1.projectid = base.projectid
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = base.status_date_est
                         join projects_tables_list ptlist
                         on dl1.projectid = ptlist.projectid
                         and dl1.object_name = ptlist.active_table_name
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = ptlist.status_date_est
  left outer join latest_table_failure fail
                on dl1.projectid = fail.projectid
  and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = fail.status_date_est
                and dl1.object_name = fail.object_name
                         where dl1.object_category in ('TABLE','TABLE REINGEST') 
                         and dl1.status_string = 'WARNING'
                         and dl1.msg like '%has 0 records%'
                         and dl1.ts >= base.ts
                         and (fail.ts is null or dl1.ts > fail.ts)
                         and ptlist.projectid is not null
                         and ptlist.active_table_name is not null
                         and ptlist.unavailable_table_name is null         
                         group by 1,2
),
table_configured_count as (
                           select ptlist.projectid, ptlist.status_date_est as status_date,count(*) as nmbr_tables_configured 
                           from projects_tables_list ptlist
                           where ptlist.projectid is not null
                           and ptlist.active_table_name is not null
                           and ptlist.unavailable_table_name is null
                           group by 1,2
),
table_unavailable_count as (
                           select pr.projectid, dd.date as status_date, count(ptlist.unavailable_table_name) as nmbr_tables_unavailable 
                           from public.d_pi_projects pr 
                           join public.d_dates dd
                           join min_date md
                           left outer join projects_tables_list ptlist
                           on pr.projectid = ptlist.projectid 
                           and dd.date = ptlist.status_date_est
                           and ptlist.projectid is not null
                           and ptlist.active_table_name is not null
                           and ptlist.unavailable_table_name is not null
                           where pr.active = true
                           and dd.date >= md.min_date
                           group by 1,2
),
sp_list as (
select final.status_date_est, final.status_time_ltz, phist.projectid as projectid,sphist.sp_name as sp_name
from final
  left outer join public.d_pi_projects_history phist
on final.projectid = phist.projectid
and final.status_time_ltz >= phist.start_time
and timestampadd(minute,1,final.status_time_ltz) <= phist.end_time
and phist.active = true
  left outer join public.d_pi_ingestion_sps_history sphist
on final.status_time_ltz >= sphist.start_time
and timestampadd(minute,1,final.status_time_ltz) <= sphist.end_time
and sphist.active = true

),
sp_configured_count as (
  select splist.projectid, splist.status_date_est as status_date_est,count(*) as nmbr_sps_configured 
                           from sp_list splist
                           where splist.projectid is not null
                           and splist.sp_name is not null
                           group by 1,2
),
sp_completed_count as (
 select dl1.projectid, splist.status_date_est as status_date_est,
                         count(distinct dl1.object_name) as nmbr_sps_completed
                         from raw.ingest_pi_data_det_log dl1
                         join latest_base as base
                         on dl1.projectid = base.projectid
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = base.status_date_est
                         join sp_list splist
                         on dl1.projectid = splist.projectid
                         and dl1.object_name = splist.sp_name
                         and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = splist.status_date_est
      left outer join max_table_ingest_ts max_table
  on dl1.projectid = max_table.projectid 
  and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = max_table.status_date_est
                         where dl1.object_category in ('SP','SP REINGEST') 
                         and dl1.status_string = 'SUCCEEDED'
                         and dl1.ts >= base.ts
                         and dl1.ts >= max_table.ts
                         and splist.projectid is not null
                         and splist.sp_name is not null         
                         group by 1,2
),
sp_runs as (
  select * from (
                  select dl1.projectid, dl1.object_name, dl1.status_string, 
                         convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts))) as status_time, high_base.status_date_est,
                         RANK() OVER (PARTITION BY dl1.object_name,high_base.status_date_est ORDER BY dl1.ts desc) as row_num
                         from raw.ingest_pi_data_det_log dl1
                         join (select status_date_est,max(ts) as ts from base group by status_date_est) high_base
                         on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = high_base.status_date_est
                         where object_category = 'SP'
                         and projectid = 'ALL'
                         --and dl1.ts >= high_base.ts
               ) where row_num=1
  
  ),
    data_found_time as (
 select * from (
                  select dl1.projectid, dl1.object_name, dl1.status_string, 
                         convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts))) as status_time_est, high_base.status_date_est,
                         RANK() OVER (PARTITION BY dl1.projectid,high_base.status_date_est ORDER BY dl1.ts desc) as row_num
                         from raw.ingest_pi_data_det_log dl1
                         join (select status_date_est,max(ts) as ts from base group by status_date_est) high_base
                         on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl1.ts)))) = high_base.status_date_est
                         where object_name = '_SUCCESS FILE'
                         and status_string = 'SUCCEEDED'
                         --and dl1.ts >= high_base.ts
               ) where row_num=1
  
  ),
zero_means_done as (
select projectid, status_date_est, zero_means_done from admin_pi_ingestion_zero_means_done_by_project_by_date_vw
)

select results.projectid, results.projectname,        
       table_configured_count.nmbr_tables_configured as tables_available,
       table_ingested_count.nmbr_tables_ingested as tables_ingested,
       ifnull(table_ingested_zero_count.nmbr_tables_ingested_zero,0) as tables_ingested_zero_records,
       table_unavailable_count.nmbr_tables_unavailable as tables_unavailable,
       ifnull(sp_configured_count.nmbr_sps_configured,0) as stored_procedures_configured,
       ifnull(sp_completed_count.nmbr_sps_completed,0) as stored_procedures_completed,
       results.status,  
       data_found_time.status_time_est as data_available_time,
       results.status_time, results.status_date
from 
     (select relevant.projectid, relevant.projectname,
      case 
           when relevant.status_string = 'FAILED' and relevant.object_category not like '%REINGEST'
           then 'INGESTION FAILED'

           when relevant.status_string = 'FAILED' and relevant.object_category like '%REINGEST'
           then 'RE-INGESTION FAILED'

           when relevant.object_category = 'INGESTION STARTED' then 'INGESTION STARTED'
           when relevant.object_category = 'INGESTION STARTED REINGEST' then 'RE-INGESTION STARTED'
           when relevant.object_category = 'INGESTION COMPLETED' and relevant.status_string = 'SUCCEEDED'
           and relevant.zero_means_done = 0
           and not exists (select 1 from raw.ingest_PI_data_det_log dl5
                           join base on dl5.projectid = base.projectid
                           and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.status_string = 'WARNING'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'INGESTION COMPLETED'
             when relevant.object_category = 'INGESTION COMPLETED REINGEST' and relevant.status_string = 'SUCCEEDED'
             and relevant.zero_means_done = 0
             and not exists (select 1 from raw.ingest_PI_data_det_log dl5
                           join base on dl5.projectid = base.projectid
                           and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.status_string = 'WARNING'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'RE-INGESTION COMPLETED'      
      
      
            when relevant.object_category = 'INGESTION COMPLETED' and relevant.status_string = 'SUCCEEDED'
            and relevant.zero_means_done = 0
            and exists (select 1 from raw.ingest_PI_data_det_log dl5
                           join base on dl5.projectid = base.projectid
                           and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.status_string = 'WARNING'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'INGESTION COMPLETED WITH WARNINGS'
             when relevant.object_category = 'INGESTION COMPLETED REINGEST' and relevant.status_string = 'SUCCEEDED'
              and relevant.zero_means_done = 0
             and exists (select 1 from raw.ingest_PI_data_det_log dl5
                           join base on dl5.projectid = base.projectid
                           and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.status_string = 'WARNING'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'RE-INGESTION COMPLETED WITH WARNINGS'        
      
           when relevant.object_category = 'INGESTION COMPLETED' and relevant.status_string = 'SUCCEEDED'
           and relevant.zero_means_done != 0
          then 'INGESTION COMPLETED WITH ERRORS'
      
          when relevant.object_category = 'INGESTION COMPLETED REINGEST' and relevant.status_string = 'SUCCEEDED'
          and relevant.zero_means_done != 0
          then 'RE-INGESTION COMPLETED WITH ERRORS'
     
             
             when relevant.object_category = 'S3 DATA' and relevant.status_string = 'WAITING' 
             and not exists (select 1 from raw.ingest_PI_data_det_log dl5
                             join base on dl5.projectid = base.projectid
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.object_category = 'INGESTION STARTED REINGEST'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'INGESTION WAITING FOR S3 DATA'
               
             when relevant.object_category = 'S3 DATA' and relevant.status_string = 'WAITING' 
             and exists (select 1 from raw.ingest_PI_data_det_log dl5
                             join base on dl5.projectid = base.projectid
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.object_category = 'INGESTION STARTED REINGEST'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'RE-INGESTION WAITING FOR S3 DATA'        
      
             when relevant.object_category not in ('INGESTION STARTED','INGESTION COMPLETED') and relevant.status_string != 'WAITING'
             and not exists (select 1 from raw.ingest_PI_data_det_log dl5
                             join base on dl5.projectid = base.projectid
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.object_category = 'INGESTION STARTED REINGEST'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'INGESTION IN-PROCESS'
             
             when relevant.object_category not in ('INGESTION STARTED','INGESTION COMPLETED') and relevant.status_string != 'WAITING'
             and exists (select 1 from raw.ingest_PI_data_det_log dl5
                             join base on dl5.projectid = base.projectid
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts)))) = base.status_date_est
                             where dl5.projectid = relevant.projectid
                             and dl5.object_category = 'INGESTION STARTED REINGEST'
                             and dl5.ts >= base.ts
                             and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl5.ts))))= relevant.status_date )
             then 'RE-INGESTION IN-PROCESS'     
      else 'INGESTION STATUS UNKOWN'
      
      end as status,
      status_time, status_date 

     from (
           SELECT pr.projectname,dl2.*,  
           convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl2.ts))) as status_time,
           dd.date as status_date, zero_means_done.zero_means_done,
           RANK() OVER (PARTITION BY dl2.projectid,dd.date ORDER BY dl2.ts desc) as row_num  
           FROM raw.ingest_pi_data_det_log dl2
           join public.d_pi_projects pr
           on dl2.projectid = pr.projectid
           join base
           on dl2.projectid = base.projectid
           and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl2.ts)))) = base.status_date_est
           join public.d_dates dd
           on to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl2.ts)))) = dd.date
           join zero_means_done on pr.projectid = zero_means_done.projectid 
           and zero_means_done.status_date_est = dd.date
       where dl2.ts >= base.ts
          ) relevant
     where row_num = 1

     union all

     select pr.projectid, pr.projectname,
            'INGESTION NOT YET STARTED' as status,
            convert_timezone('America/New_York',current_timestamp) as status_time, 
            date (convert_timezone('America/New_York',current_timestamp)) as status_date
     from public.d_pi_projects pr
     left outer join base
     on pr.projectid = base.projectid
      and base.status_date_est = date(convert_timezone('America/New_York',current_timestamp())) 
     where pr.active = true
     and not exists
                    (select 1 from raw.ingest_PI_data_det_log dl3
                              where dl3.projectid = pr.projectid
                              and dl3.object_category = 'INGESTION STARTED'
                              and dl3.ts >= base.ts
                              and date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl3.ts)))) = 
                                  date(convert_timezone('America/New_York',current_timestamp()))  )
     )results
left outer join
table_ingested_count
on results.projectid = table_ingested_count.projectid
and results.status_date = table_ingested_count.status_date
left outer join
table_configured_count
on results.projectid = table_configured_count.projectid
and results.status_date = table_configured_count.status_date
left outer join
table_unavailable_count
on results.projectid = table_unavailable_count.projectid
and results.status_date = table_unavailable_count.status_date
left outer join
table_ingested_zero_count
on results.projectid = table_ingested_zero_count.projectid
and results.status_date = table_ingested_zero_count.status_date
left outer join sp_configured_count 
on results.projectid = sp_configured_count.projectid
and results.status_date = sp_configured_count.status_date_est
left outer join sp_completed_count 
on results.projectid = sp_completed_count.projectid
and results.status_date = sp_completed_count.status_date_est
left outer join data_found_time
on results.projectid = data_found_time.projectid
and results.status_date = data_found_time.status_date_est
union all
select 'ALL', 'NA' as projectname, null,null,null,null, 1,1,'SP ' || sp.object_name || ' ' || sp.status_string as status, null, sp.status_time, sp.status_date_est
from sp_runs sp
;