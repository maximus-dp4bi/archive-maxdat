


--VW and SP
create or replace view STAGE.PI_GROUPS_MEMBERSHIP_CHANGE_DATA as
with clean_stream as
(select * from stage.pi_groups_membership_stream strm
 where 

 (strm.METADATA$ACTION = 'INSERT'
 and METADATA$ISUPDATE = 'FALSE'
 and not exists (select 1 from stage.pi_groups_membership_stream strm2
                 where strm2.METADATA$ACTION = 'DELETE'
                 and strm2.METADATA$ISUPDATE = 'FALSE'
                 and strm2.projectid = strm.projectid
                 and strm2.projectname = strm.projectname
                 and equal_null(strm2.programid, strm.programid)
                 and equal_null(strm2.programname, strm.programname)
                 and strm2.raw = strm.raw)
 ) or

 (strm.METADATA$ACTION = 'DELETE'
 and METADATA$ISUPDATE = 'FALSE'
 and not exists (select 1 from stage.pi_groups_membership_stream strm2
                 where strm2.METADATA$ACTION = 'INSERT'
                 and strm2.METADATA$ISUPDATE = 'FALSE'
                 and strm2.projectid = strm.projectid
                 and strm2.projectname = strm.projectname
                 and equal_null(strm2.programid, strm.programid)
                 and equal_null(strm2.programname, strm.programname)
                 and strm2.raw = strm.raw)

 ) or
 (strm.METADATA$ISUPDATE = 'TRUE'
 )
 
)

select projectid, projectname, programid, programname, raw, start_time, end_time, current_flag, 'I' as dml_type
from (select projectid, projectname, programid, programname, raw, ingestiondatetime as start_time,
      lag(ingestiondatetime) over (partition by projectid, projectname, programid, programname, raw order by ingestiondatetime desc) as end_time_raw,
      case when end_time_raw is null then 
'9999-12-31'::timestamp_ntz else end_time_raw end as end_time,
      case when end_time_raw is null then 1 else 0 end as current_flag
      from (select projectid, projectname, programid, programname, raw, ingestiondatetime
            from clean_stream
            where metadata$action = 'INSERT'
            and metadata$isupdate = 'FALSE'))
union
select projectid, projectname, programid, programname, raw, start_time, end_time, current_flag, dml_type
from (select projectid, projectname, programid, programname, raw, ingestiondatetime as start_time,
      lag(ingestiondatetime) over (partition by projectid, projectname, programid, programname, raw order by ingestiondatetime desc) as end_time_raw,
      case when end_time_raw is null then 
'9999-12-31'::timestamp_ntz else end_time_raw end as end_time,
      case when end_time_raw is null then 1 else 0 end as current_flag,dml_type
      from (-- Identify data to insert into nation_history table
        select projectid, projectname, programid, programname, raw, ingestiondatetime, 'I' as dml_type
        from clean_stream
        where metadata$action = 'INSERT'
        and metadata$isupdate = 'TRUE'
union
select projectid, projectname, programid, programname, raw, start_time, 'U' as dml_type
from stage.d_pi_groups_membership_history
where projectid || projectname || programid || programname || raw in (select distinct projectid || projectname || programid || programname || raw 
                             from clean_stream
                             where metadata$action = 'INSERT'
                             and metadata$isupdate = 'TRUE')
        and current_flag = 1))
union

select str.projectid, str.projectname, str.programid, str.programname, str.raw, hist.start_time, current_timestamp()::timestamp_ntz, null, 'D'
from stage.d_pi_groups_membership_history hist
inner join clean_stream str
on hist.projectid = str.projectid
and hist.projectname = str.projectname
and equal_null(hist.programid, str.programid)
and equal_null(hist.programname,str.programname)
and hist.raw = str.raw
where str.metadata$action = 'DELETE'
and str.metadata$isupdate = 'FALSE'
and hist.current_flag = 1;


  CREATE or replace PROCEDURE stage.update_groups_membership_daily_snapshot(projectId varchar, reIngestFlag Boolean, runFromBashFlag Boolean)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$
  

  
  //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";
     if (RUNFROMBASHFLAG) {
      sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG_"+PROJECTID+"';";
     }
     snowflake.execute ({sqlText: sqlCommand});
 
function log(projectid, object_category, object_name, status_string, msg){
    snowflake.createStatement( { sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
} 
  
 
REINGEST_SFX = "";
if (REINGESTFLAG){
REINGEST_SFX=" REINGEST";
}     
  
if (PROJECTID == ""){
PROJECTID = "ALL";
}  
  
var sqlCommand = `merge into stage.d_pi_groups_membership_history nh
using stage.pi_groups_membership_change_data m 
   on  nh.projectid = m.projectid
   and nh.projectname = m.projectname
   and equal_null(nh.programid, m.programid)
   and equal_null(nh.programname,m.programname)
   and nh.raw = m.raw
   and nh.start_time = m.start_time
when matched and m.dml_type = 'U' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when matched and m.dml_type = 'D' then update 
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when not matched and m.dml_type = 'I' then insert
           (projectid, projectname, programid, programname, raw, start_time, end_time, current_flag)
    values (m.projectid, m.projectname, m.programid, m.programname, m.raw, m.start_time, m.end_time, m.current_flag)`;

try {
snowflake.execute ({sqlText: sqlCommand});
}
catch (err){
log(PROJECTID, "SP"+REINGEST_SFX, "UPDATE_GROUPS_MEMBERSHIP_DAILY_SNAPSHOT", "FAILED","SP failed to update groups membership snapshot: "+ err); 
return 1;
}

sqlCommand = `update stage.d_pi_groups_membership_history hist
set hist.end_time = temp.real_end_time
from 
(select projectid, projectname, programid, programname, raw, start_time, end_time,
    lead (start_time) over (partition by projectid, projectname, programid, programname, raw order by start_time asc) as proposed_end_time,
    case when proposed_end_time is not null and timestampdiff(seconds,end_time, proposed_end_time) <=60 then proposed_end_time else end_time end as real_end_time
from stage.d_pi_groups_membership_history) as temp
where hist.projectid = temp.projectid
and hist.projectname = temp.projectname
and equal_null(hist.programid, temp.programid)
and equal_null(hist.programname, temp.programname)
and hist.raw = temp.raw
and hist.start_time = temp.start_time
and hist.end_time != temp.real_end_time;
--and some time within 1 minute of now`;

try {
snowflake.execute ({sqlText: sqlCommand});
}
catch (err){
log(PROJECTID, "SP"+REINGEST_SFX, "UPDATE_GROUPS_MEMBERSHIP_DAILY_SNAPSHOT", "FAILED","SP failed to update groups membership snapshot(2): "+ err); 
return 1;
}

//config objects
var sqlCommand = `merge into stage.d_pi_configuration_objects_history nh
using stage.pi_configuration_objects_change_data m 
   on  nh.projectid = m.projectid
   and nh.projectname = m.projectname
   and equal_null(nh.programid, m.programid)
   and equal_null(nh.programname,m.programname)
   and nh.raw = m.raw
   and nh.start_time = m.start_time
when matched and m.dml_type = 'U' then update
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when matched and m.dml_type = 'D' then update 
    set nh.end_time = m.end_time,
        nh.current_flag = 0
when not matched and m.dml_type = 'I' then insert
           (projectid, projectname, programid, programname, raw, start_time, end_time, current_flag)
    values (m.projectid, m.projectname, m.programid, m.programname, m.raw, m.start_time, m.end_time, m.current_flag)`;

try{
snowflake.execute ({sqlText: sqlCommand});
}
catch (err){
log(PROJECTID, "SP"+REINGEST_SFX, "UPDATE_GROUPS_MEMBERSHIP_DAILY_SNAPSHOT", "FAILED","SP failed to update groups membership snapshot(3): "+ err); 
return 1;
}


sqlCommand = `update stage.d_pi_configuration_objects_history hist
set hist.end_time = temp.real_end_time
from 
(select projectid, projectname, programid, programname, raw, start_time, end_time,
    lead (start_time) over (partition by projectid, projectname, programid, programname, raw order by start_time asc) as proposed_end_time,
    case when proposed_end_time is not null and timestampdiff(seconds,end_time, proposed_end_time) <=60 then proposed_end_time else end_time end as real_end_time
from stage.d_pi_configuration_objects_history) as temp
where hist.projectid = temp.projectid
and hist.projectname = temp.projectname
and equal_null(hist.programid, temp.programid)
and equal_null(hist.programname, temp.programname)
and hist.raw = temp.raw
and hist.start_time = temp.start_time
and hist.end_time != temp.real_end_time;
--and some time within 1 minute of now`;

try {
snowflake.execute ({sqlText: sqlCommand});
}
catch (err){
log(PROJECTID, "SP"+REINGEST_SFX, "UPDATE_GROUPS_MEMBERSHIP_DAILY_SNAPSHOT", "FAILED","SP failed to update groups membership snapshot(4): "+ err); 
return 1;
}

log(PROJECTID, "SP"+REINGEST_SFX, "UPDATE_GROUPS_MEMBERSHIP_DAILY_SNAPSHOT", "SUCCEEDED","SP succeeded updating groups membership snapshot."); 
return 0;
$$;
  