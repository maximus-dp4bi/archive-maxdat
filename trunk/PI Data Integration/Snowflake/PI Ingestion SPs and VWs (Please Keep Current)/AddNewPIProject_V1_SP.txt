use role PI_DATA_INGEST_UAT_ALERT_USER;
use warehouse PUREINSIGHTS_UAT_LOAD_DAILY_WH;
use database PUREINSIGHTS_UAT;
use schema RAW;

CREATE or replace PROCEDURE AddNewPIProject(projectid VARCHAR, projectname VARCHAR, AWSFOLDERNAME VARCHAR, PROJECTTIMEZONE VARCHAR,ACTIVE BOOLEAN,INGEST_WH VARCHAR, PROJECTCHARGECODE VARCHAR, PROJECTCHARGECODENAME VARCHAR)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$



//set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'PI_DATA_CHECK_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
     
function log(msg){
    snowflake.createStatement( { sqlText: `call do_log(:1)`, binds:[msg] } ).execute();
} 

  //add to projects table
  var sqlCommand = "call insertPIProject('" + PROJECTID +"','" + PROJECTNAME + "','" + AWSFOLDERNAME +  "','"+PROJECTTIMEZONE+ "'," + ACTIVE + ",'"+INGEST_WH+"','"+PROJECTCHARGECODE+"','"+PROJECTCHARGECODENAME+"');";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed configure projects table for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  //add to unavailable tables table
  sqlCommand = "call configurePIUnavailableTables('" + PROJECTID + "');";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to configure unavailable tables table for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  //test if this project has been ingested today already
  var ingestCount=0;
  sqlCommand = "select count(*) from raw.ingest_pi_data_det_log dl where dl.projectid = '" + PROJECTID + "' and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl.ts)))) = to_date(convert_timezone('America/New_York',current_timestamp()))";
    var stmt = snowflake.createStatement({sqlText: sqlCommand});    
  try {
            var result1 = stmt.execute();
            result1.next();
            ingestCount = result1.getColumnValue(1); 
         }
    catch (err)  {
        log("Failed to count previous ingestions for projectid " + PROJECTID + ": "+ err);
        return "1";
        }
  
  
  
  
  
  //run initial ingestion or reingestion
  if (ingestCount == 0){
       sqlCommand = "call ingestUningestedPIData('"+PROJECTID+"',false,false,false,false);";
  } else {
       sqlCommand = "call ingestUningestedPIData('"+PROJECTID+"',true,false,false,false);";
}
try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to run initial ingestion for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  return "0";
  
  $$;