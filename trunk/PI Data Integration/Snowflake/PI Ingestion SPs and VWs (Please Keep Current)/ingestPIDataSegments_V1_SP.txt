  CREATE or replace PROCEDURE INGESTPIDATASEGMENTS_V2 (TABLENAME VARCHAR, STAGENAME VARCHAR, AWSFOLDERNAME VARCHAR,PROJECTID VARCHAR,PROJECTNAME VARCHAR, TRUNCATEFLAG BOOLEAN, REINGESTFLAG BOOLEAN,runFromBashFlag Boolean)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$  
      

REINGEST_SFX = ""
if (REINGESTFLAG){
REINGEST_SFX=" REINGEST";
} 

    //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";
     if (RUNFROMBASHFLAG) {
      sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG_"+PROJECTID+"';";
     }
     snowflake.execute ({sqlText: sqlCommand});
     
function log(projectid, object_category,object_name, status_string, msg){
    snowflake.createStatement( { sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
} 
   

var TABLENAME = 'segments';

     //default stage
     var stageName = STAGENAME;
     if (! stageName){
        stageName = 'PUREINSIGHTS_S3_2';
     } 
     
var LOG_CATEGORY="TABLE";
if (REINGESTFLAG){
   LOG_CATEGORY="TABLE REINGEST";
}     

    //truncate table
   if (TRUNCATEFLAG) {
    //sqlCommand = "truncate table raw."+TABLENAME+";";
    //sqlCommand = "CALL truncateTable('" + TABLENAME + "','" + PROJECTID + "');";
    sqlCommand = "delete from raw."+TABLENAME+" where projectid = '" + PROJECTID + "';";
    
    
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log(PROJECTID, LOG_CATEGORY, TABLENAME, "FAILED", "Failed to truncate table " +TABLENAME+ " for projectid " + PROJECTID + ": "+ err);   // Return a success/error indicator.
        return "1";
        }
    }
    //ingest date from parquet file    
    //var sqlCommand = "copy into raw.segments (projectid, projectname, ingestionDateTime, raw) from (select '" + PROJECTID + "','" + PROJECTNAME + "',sysdate(), parse_json(cast('{' || 'audioMuted:\"'|| $1:audioMuted || '\",' || 'conference:\"'|| $1:conference || '\",' || 'conversationId:\"'|| $1:conversationId || '\",' || 'disconnecttype:\"'|| $1:disconnecttype || '\",' || 'participantid:\"'|| $1:participantid || '\",' || 'queueId:\"'|| $1:queueId || '\",' || 'segmentduration:\"'|| $1:segmentduration || '\",' || 'segmentEndTime:\"'|| $1:segmentEndTime || '\",' || 'segmentStartTime:\"'|| $1:segmentStartTime || '\",' || 'segmenttype:\"'|| $1:segmenttype || '\",' || 'sessionId:\"'|| $1:sessionId || '\",' || 'subject:\"'|| $1:subject || '\",' || 'wrapupCode:\"' || $1:wrapupCode || '\"}' as variant)) from @" + stageName + "/segments/) PATTERN='.*.parquet' FILE_FORMAT = (TYPE= 'PARQUET') FORCE=TRUE;";
    var sqlCommand = "copy into raw.segments (projectid, projectname, ingestionDateTime, raw) from (select '" + PROJECTID + "','" + PROJECTNAME + "',convert_timezone('UTC','America/New_York',sysdate()), parse_json(cast('{' || 'errorCode:\"'|| $1:errorCode || '\",' || 'audioMuted:\"'|| $1:audioMuted || '\",' || 'conference:\"'|| $1:conference || '\",' || 'conversationId:\"'|| $1:conversationId || '\",' || 'disconnecttype:\"'|| $1:disconnecttype || '\",' || 'participantid:\"'|| $1:participantid || '\",' || 'queueId:\"'|| $1:queueId || '\",' || 'segmentduration:\"'|| $1:segmentduration || '\",' || 'segmentEndTime:\"'|| $1:segmentEndTime || '\",' || 'segmentStartTime:\"'|| $1:segmentStartTime || '\",' || 'segmenttype:\"'|| $1:segmenttype || '\",' || 'sessionId:\"'|| $1:sessionId || '\",' || 'subject:\"'|| $1:subject || '\",' || 'wrapupCode:\"' || $1:wrapupCode || '\"}' as variant)) from @" + stageName + "/segments/) PATTERN='.*.parquet' FILE_FORMAT = (TYPE= 'PARQUET') FORCE=TRUE;";

try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log(PROJECTID,LOG_CATEGORY, TABLENAME, "FAILED","Failed to load table " + TABLENAME + " for projectid " + PROJECTID + ": "+ err);
        
        return "1";
        }
        
     //generate warning if 0 records for any table not listed in unavailable tables table
     sqlCommand = "select case when not exists (select 1 from public.d_pi_project_unavailable_tables ua where ua.project_id = '" + PROJECTID + "' and ua.table_name = '" + TABLENAME + "' and ((ua.end_unavailable_date is null) or (ua.end_unavailable_date >= current_date()))) then count(*) else 1 end from raw." + TABLENAME + " rw where rw.projectid = '" + PROJECTID + "';"; 
     try {
            stmt = snowflake.createStatement({sqlText: sqlCommand});
            var result1 = stmt.execute();
            result1.next();
            rowCount = result1.getColumnValue(1); 
         }
     catch (err)  {
        log(PROJECTID, "TABLE ROW COUNT"+REINGEST_SFX, TABLENAME, "FAILED","Failed to count records after ingestion: "+ err);
        return "1";
        }

        log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"INFO","rowcount: " + rowCount); 
        
     if (rowCount < 1) {
       log(PROJECTID,"TABLE"+REINGEST_SFX,TABLENAME,"WARNING","Table " + TABLENAME + " has 0 records though it is configured as an available table for this project."); 
}        
        
        
  log(PROJECTID, LOG_CATEGORY, TABLENAME, "SUCCEEDED","Succeeded loading table " + TABLENAME + " for projectid " + PROJECTID);      
  return "0";
  

  $$;            
  