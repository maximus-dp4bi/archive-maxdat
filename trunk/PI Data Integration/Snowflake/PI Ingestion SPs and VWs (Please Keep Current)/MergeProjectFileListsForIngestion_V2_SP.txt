use role PI_DATA_INGEST_DEV_ALERT_USER;
use warehouse PUREINSIGHTS_DEV_LOAD_DAILY_WH;
use database PUREINSIGHTS_DEV;
use schema RAW;

CREATE OR REPLACE PROCEDURE MergeProjectFileListsForIngestion(reIngestFlag Boolean)
	RETURNS VARCHAR(16777216)
	LANGUAGE JAVASCRIPT
	EXECUTE AS CALLER
	AS 
	$$  

 	//set logging on

 	var sqlCommand = "set do_log = true;";
   	snowflake.execute ({sqlText: sqlCommand});

   	sqlCommand = "set log_table = 'INGEST_PI_DATA_DET_LOG';";
   	snowflake.execute ({sqlText: sqlCommand});
 
	function log(projectid, object_category, object_name, status_string, msg)
	{
    	snowflake.createStatement( { sqlText: `call do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
	} 
       
	function convertTZ(date, tzString)
	{
    	return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
	}

  	//get date string for today

  	var today_local = new Date();
   	var today = convertTZ(today_local,'America/New_York');
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = today.getFullYear();
    var hh = String(today.getHours());
    var todayDateString = yyyy + mm + dd;

	REINGEST_SFX = ""
	if (REINGESTFLAG)
	{
		REINGEST_SFX=" REINGEST";
	}         

	var logTable = "pi_files_to_ingest";

	var project_array=[];
	var sqlCommand = "select projectid from public.D_PI_INGESTION_PROJECTS_VW;"
	var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );

	var rs = createdSQL.execute();

	while (rs.next()) 
	{
     	var projectid = rs.getColumnValue(1);
     	project_array.push(projectid);
    }
  
  	for (const projectid of project_array) 
  	{
		//merge into main file list log table
    	sqlCommand = `MERGE INTO `+ logTable +` USING (select * from `+logTable+`_`+ projectid +` WHERE ingest_end_timestamp IS NOT NULL) s
                      ON 
                      `+ logTable +`.projectid = s.projectid AND 
                      `+ logTable +`.tablename = s.tablename AND 
                      `+ logTable +`.filename = s.filename AND 
                      `+ logTable +`.file_timestamp = s.file_timestamp
                      WHEN MATCHED THEN
                      UPDATE SET 
                      `+ logTable +`.ingest_start_timestamp = s.ingest_start_timestamp,
                      `+ logTable +`.ingest_end_timestamp = s.ingest_end_timestamp,
                      `+ logTable +`.status = s.status,
                      `+ logTable +`.status_msg = s.status_msg,
                      `+ logTable +`.status_timestamp = s.status_timestamp
                      WHEN NOT MATCHED THEN
                      INSERT (projectid, programid, tablename, filename, file_timestamp, ingest_start_timestamp, ingest_end_timestamp, status, status_msg, status_timestamp)
                      VALUES (s.projectid, s.programid, s.tablename, s.filename, s.file_timestamp, s.ingest_start_timestamp, s.ingest_end_timestamp, s.status, s.status_msg, status_timestamp);`;
    
    	try 
    	{
        	snowflake.execute({sqlText: sqlCommand});
        }
    	catch (err)  
    	{
        	log(projectid, "LOG"+REINGEST_SFX, "NA", "FAILED","Failed to insert files to ingest log into main log for project " + projectid +  ": "+ err); 
        	return "3"; 
    	}
    	
    	sqlCommand = `delete from raw.`+logTable+`_`+ projectid +`;`;
    	
    	try 
    	{
        	snowflake.execute({sqlText: sqlCommand});
        }
    	catch (err)  
    	{
        	log(projectid, "LOG"+REINGEST_SFX, "NA", "FAILED","Failed to insert files to ingest log into main log for project " + projectid +  ": "+ err); 
        	return "5"; 
    	}
    	
    	
	 }     
	return "0";
	$$;
