CREATE OR REPLACE PROCEDURE "S_PI_SESSION_CONTACT_SUMMARY_LOAD"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS $$ 
 //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'RAW.INGEST_PI_DATA_DET_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
function log(projectid, object_category, object_name, status_string, msg){
    snowflake.createStatement( { sqlText: `call raw.do_log_det(:1, :2, :3, :4, :5)`, binds:[projectid, object_category, object_name, status_string, msg] } ).execute();
}
//log("ingesting data")
  try {
      var command = "CREATE OR REPLACE TABLE STAGE.S_PI_SESSION_CONTACT_SUMMARY AS with a11(prior_mediatype,prior_transferred, prior_transfertopurpose, prior_username,next_username, conversationid, sessionid, projectid, purpose, sessionindex, sessioncount, originatingdirection, direction, abandoned, transferred, monitoringduration, flowout, agentanswered, mediatype, userhandled, disconnecttype, transfertopurpose, username) as (select lag(mediatype) over (partition by conversationid order by sessionindex) as prior_mediatype,      lag(transferred) over (partition by conversationid order by sessionindex) as prior_transferred,      lag(transfertopurpose) over (partition by conversationid order by sessionindex) as prior_transfertopurpose,      lag(username) over (partition by conversationid order by sessionindex) as prior_username,      lead(username, 1) over (partition by conversationid order by sessionindex) as next_username,      conversationid, sessionid, projectid, purpose, sessionindex, sessioncount, originatingdirection, direction, abandoned, transferred, monitoringduration, flowout, agentanswered, mediatype, userhandled, disconnecttype, transfertopurpose, username from PUBLIC.F_PI_SESSION_SUMMARY_VW ) , a12(conversationid, first_endpoint, contractual_firstqueue) as (select c11.conversationid, c11.first_endpoint, c12.queuename from  (select conversationId, min(sessionIndex) as first_endpoint from  (select lead(username) over (partition by conversationid order by sessionindex) as next_username, conversationid, sessionindex, userhandled, mediatype, direction, originatingdirection, username, totalagenttalkduration, sessioncount   from PUBLIC.F_PI_SESSION_SUMMARY_VW ) where      (userhandled = 1 and mediatype = 'voice' and direction = 'outbound' and originatingdirection = 'inbound' and nvl(next_username, '') != username) and totalagenttalkduration > 0      or originatingdirection = 'outbound' and direction = 'outbound'     or direction = 'inbound' and userhandled = 1      or sessionindex = sessioncount  group by 1) c11 inner join (select conversationid, queuename, sessionindex from PUBLIC.F_PI_SESSION_SUMMARY_VW ) c12 on c11.conversationid = c12.conversationid and c11.first_endpoint = c12.sessionindex) , a13(conversationid, first_queue_index, firstqueue) as (select f11.conversationid, f11.first_queue_index, f12.queuename from   (     select conversationid, min(sessionindex) as first_queue_index from PUBLIC.F_PI_SESSION_SUMMARY_VW where purpose = 'acd'   group by 1) f11 inner join (select conversationid, queuename, sessionindex from PUBLIC.F_PI_SESSION_SUMMARY_VW ) f12 on f11.conversationid = f12.conversationid and f11.first_queue_index = f12.sessionindex ) SELECT a14.conversationid, a14.sessionid, a14.projectid, a14.first_endpoint, a14.contractual_firstqueue, a14.firstqueue, case when a14.sessiontype = 'Transfer Sessions' then 'Transfer' when a14.sessiontype = 'Inbound Sessions' then 'Inbound' when a14.sessiontype = 'Courtesy Callback Sessions' then 'Courtesy Callback' when a14.sessiontype = 'Outbound Sessions' then 'Outbound' when a14.sessiontype = 'Outbound Callback Sessions' then 'Outbound Callback' when a14.sessiontype = 'Agent Scheduled Callback Sessions' then 'Agent Scheduled Callback' when a14.sessiontype = 'IVR Sessions' then 'IVR' else 'N/A' end as contacttype , a14.sessiontype  from ( select a11.projectid, a11.conversationid, a11.sessionid, a11.sessionIndex,a12.first_endpoint,a12.contractual_firstqueue, a13.firstqueue, case when purpose = 'ivr' then 'IVR Sessions' when a11.purpose = 'user' and a11.originatingdirection = 'inbound' and a11.direction = 'outbound' then 'Wrong Outbound Sessions'  when a11.originatingdirection = 'outbound' and a11.direction = 'outbound' and a11.userhandled = 1 and a11.mediatype = 'voice' then 'Outbound Sessions' when a11.sessionIndex > a12.first_endpoint and a11.originatingdirection = 'outbound'  and a11.mediatype = 'callback' and agentanswered = 1 then 'Outbound Callback Screen Sessions' when a11.sessionIndex > a12.first_endpoint and a11.originatingdirection = 'outbound'and (a11.mediatype = 'callback' or (a11.mediatype = 'voice' and a11.direction = 'outbound')) then 'Outbound Callback Sessions' when a11.originatingdirection = 'outbound' and a11.direction = 'inbound' then 'Transfer Sessions' when a11.sessionindex != sessioncount and a11.abandoned = 1 and a11.disconnecttype != 'peer' then 'Cancel Abandon Sessions' when a11.purpose = 'user'and monitoringduration > 0 then 'Monitoring Sessions'  when a11.flowout = 1 and a11.purpose = 'acd' then 'Inbound Flowout Sessions' when a11.originatingdirection = 'inbound' and a11.sessionIndex <= a12.first_endpoint and a11.mediatype = 'callback' and a11.agentanswered = 1 then 'Courtesy Callback Screen Sessions' when a11.originatingdirection = 'inbound' and a11.sessionIndex <= a12.first_endpoint and (a11.mediatype = 'callback' or (mediatype = 'voice' and a11.direction = 'outbound')) then 'Courtesy Callback Sessions' when a11.originatingdirection = 'inbound' and a11.sessionIndex <= a12.first_endpoint and a11.mediatype = 'voice' and a11.purpose != 'callback' then 'Inbound Sessions' when a11.sessionIndex > a12.first_endpoint and a11.mediatype = 'callback' and a11.agentanswered = 1 then 'Agent Scheduled Callback Screen Sessions' when a11.sessionIndex > a12.first_endpoint and (a11.mediatype = 'callback' or (a11.mediatype = 'voice' and a11.direction = 'outbound')) then 'Agent Scheduled Callback Sessions' when a11.purpose = 'voicemail' then 'Voicemail Sessions'  when a11.purpose = 'agent' and a11.username = a11.prior_username and a11.direction = 'outbound' and prior_mediatype = 'voice' then 'Agent Followup Sessions'  when a11.sessionIndex > a12.first_endpoint and mediatype = 'voice' then 'Transfer Sessions'  else 'N/A' end as sessionType from a11 left outer join a12 on a11.conversationid = a12.conversationid left outer join a13 on a11.conversationid = a13.conversationid)a14;"
      var stmt = snowflake.createStatement( {sqlText: command } );
      var rs = stmt.execute();    
      }
    catch (err)  {
  log("ALL", "SP", "S_PI_SESSION_CONTACT_SUMMARY_LOAD", "FAILED", "SP failed to load S_PI_SESSION_CONTACT_SUMMARY for ALL projects: "+ err);
        return "1";
        }
      log("ALL", "SP", "S_PI_SESSION_CONTACT_SUMMARY_LOAD", "SUCCEEDED", "SP succeeded to load S_PI_SESSION_CONTACT_SUMMARY for ALL projects");   
  return "0";  
  $$;
  
grant select on view PUBLIC.F_PI_SESSION_SUMMARY_VW TO ROLE PI_Data_Ingest_XXX_Alert_User;