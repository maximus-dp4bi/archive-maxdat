
drop procedure ConfigurePIUnavailableTables(VARCHAR,VARCHAR);
CREATE or replace PROCEDURE ConfigurePIUnavailableTables(projectid VARCHAR)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  
  $$
  //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'PI_DATA_CHECK_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
     
function log(msg){
    snowflake.createStatement( { sqlText: `call do_log(:1)`, binds:[msg] } ).execute();
}  

function convertTZ(date, tzString) {
    return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
}


log("Beginning configuration sp");
     //get date string for today
     var today_local = new Date();
     var today = convertTZ(today_local,'America/New_York')
     var dd = String(today.getDate()).padStart(2, '0');
     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
     var yyyy = today.getFullYear();
     var hh = String(today.getHours());
     var todayDateString = yyyy + mm + dd;

//get project fields 
    var PROJECTNAME = "";
    var AWSFOLDERNAME = "";
    var stageName = "PI_DATA_CHECK_STAGE_" + PROJECTID;
    var truncateFlag = true;
    var sqlCommand = "select pr.projectname, pr.awsfoldername from public.d_pi_projects pr where pr.projectid = '"+PROJECTID+"';";
    var stmt = snowflake.createStatement({sqlText: sqlCommand});    
     try {
            var result1 = stmt.execute();
            result1.next();
            PROJECTNAME = result1.getColumnValue(1);
            AWSFOLDERNAME = result1.getColumnValue(2);
         }
    catch (err)  {
        log("Failed to get project info from project table for project "+ PROJECTID + ": " + err);
        return "failed to get project info";
        }    
    
    //drop stage if still exists
    var blah = 0;
    sqlCommand = "call dropPIStage('" + stageName + "');";
    try { 
    snowflake.execute ({sqlText: sqlCommand}); 
    }
    catch (err){ 
      blah=1;
    }

       
    //create stage for today's data
    sqlCommand = "call createPIStage('" + AWSFOLDERNAME + "','" + stageName + "','" + todayDateString + "');";
    
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to create stage" + stageName + " for " +AWSFOLDERNAME+ + " for "+todayDateString+ ": "+ err); 
        return "failed to create stage"; 
}
  
    
    
    
    sqlCommand = "list @"+ stageName + " pattern='.*/_SUCCESS';";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("ERROR listing _SUCCESS files for project " + PROJECTID + ": "+ err); 
        return "failed to list _SUCCESS files";
        }

    var table_list = "";
    var sql_inserts = new Array();
    sqlCommand = "select table_name from d_pi_tables ta where ta.active = true and ta.s3_sourced = true and not exists (select \"name\" FROM table(result_scan(last_query_id())) where contains(\"name\",ta.table_name));";
    var stmt = snowflake.createStatement({sqlText: sqlCommand});    
     try {
            var result1 = stmt.execute();
            var tablename = "";
            while (result1.next()){
                tablename = result1.getColumnValue(1);
                table_list += ", "+ tablename;
                sql_inserts.push("call insertPIUnavailableTables('" + tablename + "','" + PROJECTID + "','" + PROJECTNAME + "')");
            }
            
         }
    catch (err)  {
        log("ERROR listing missing tables for project "+PROJECTID +": "+ err);
        return "failed to list missing tables";
        }    
    
  //if (table_list !=""){
   log("INFO: S3 _SUCCESS file does not exist for the following tables for project "+PROJECTID+": "+table_list);
  
  //}
  
  //delete existing entries from unavailable tables table
     sqlCommand = "delete from public.d_pi_project_unavailable_tables where project_id = '" + PROJECTID + "';";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to truncate d_pi_project_unavailable_tables for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     

  
  
  //insert into unavalable tables table
  
  for (i = 0; i < sql_inserts.length; i++) {
        try {
            snowflake.execute (
                {sqlText: sql_inserts[i]}
            );
        }
    catch (err)  {
        log("Failed to run insert statement " + sql_inserts[i] +": "+ err); 
        return "1"; 
}
}
  
      //drop stage
    sqlCommand = "call dropPIStage('" + stageName + "');";
      try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to drop stage" + stageName +": "+ err); 
        return "failed to drop stage"; 
}
  
  return "No S3 _SUCCESS file for the following tables for project " + PROJECTID + ": "+table_list;
  $$;
  
  
  drop procedure insertUnavailableTables(varchar,varchar,varchar);
CREATE or replace PROCEDURE insertPIUnavailableTables(tableName VARCHAR, projectid VARCHAR, projectname VARCHAR)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$
  
    //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'PI_DATA_CHECK_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
     
function log(msg){
    snowflake.createStatement( { sqlText: `call do_log(:1)`, binds:[msg] } ).execute();
}  


    //truncate table
   sqlCommand = "delete from public.d_pi_project_unavailable_tables where project_id = '" + PROJECTID + "' and table_name = '" + TABLENAME + "';";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to truncate d_pi_project_unavailable_tables for table " +TABLENAME+ " for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     

    //insert new row 
    var sqlCommand = "insert into public.d_pi_project_unavailable_tables values ('" + PROJECTID +"','" + PROJECTNAME + "','" + TABLENAME + "',null,current_timestamp());";

try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to load new row into d_pi_project_unavailable tables fr table " + TABLENAME + " for projectid " + PROJECTID + ": "+ err);
        return "1";
        }        

        log("Succeeded loading new row into d_pi_prject_unavailable_tables for table " + TABLENAME + " for projectid " + PROJECTID);
  return "0";  
  $$;    
  

CREATE or replace PROCEDURE insertPIProject(projectid VARCHAR, projectname VARCHAR, AWSFOLDERNAME VARCHAR, PROJECTTIMEZONE VARCHAR,ACTIVE BOOLEAN)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$
  
    //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'PI_DATA_CHECK_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
     
function log(msg){
    snowflake.createStatement( { sqlText: `call do_log(:1)`, binds:[msg] } ).execute();
}  


    //truncate table
   sqlCommand = "delete from public.d_pi_projects where projectid = '" + PROJECTID + "';";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to truncate d_pi_projects table for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     

    //insert new row 
    var sqlCommand = "insert into public.d_pi_projects values ('" + PROJECTID +"','" + PROJECTNAME + "','" + AWSFOLDERNAME +  "','"+PROJECTTIMEZONE+ "'," + ACTIVE + ",current_timestamp());";

try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to load new row into d_pi_projects fr table for projectid " + PROJECTID + ": "+ err);
        return "1";
        }        

        log("Succeeded loading new row into d_pi_projects for projectid " + PROJECTID);
  return "0";  
  $$; 
;



CREATE or replace PROCEDURE AddNewPIProject(projectid VARCHAR, projectname VARCHAR, AWSFOLDERNAME VARCHAR, PROJECTTIMEZONE VARCHAR,ACTIVE BOOLEAN)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$

//set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});
     sqlCommand = "set log_table = 'PI_DATA_CHECK_LOG';";
     snowflake.execute ({sqlText: sqlCommand});
     
function log(msg){
    snowflake.createStatement( { sqlText: `call do_log(:1)`, binds:[msg] } ).execute();
} 

  //add to projects table
  var sqlCommand = "call insertPIProject('" + PROJECTID +"','" + PROJECTNAME + "','" + AWSFOLDERNAME +  "','"+PROJECTTIMEZONE+ "'," + ACTIVE + ");";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed configure projects table for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  //add to unavailable tables table
  sqlCommand = "call configurePIUnavailableTables('" + PROJECTID + "');";
    try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to configure unavailable tables table for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  //test if this project has been ingested today already
  var ingestCount=0;
  sqlCommand = "select count(*) from raw.ingest_pi_data_det_log dl where dl.projectid = '" + PROJECTID + "' and to_date(convert_timezone('America/New_York',to_timestamp_ltz(to_varchar(dl.ts)))) = to_date(convert_timezone('America/New_York',current_timestamp()))";
    var stmt = snowflake.createStatement({sqlText: sqlCommand});    
  try {
            var result1 = stmt.execute();
            result1.next();
            ingestCount = result1.getColumnValue(1); 
         }
    catch (err)  {
        log("Failed to count previous ingestions for projectid " + PROJECTID + ": "+ err);
        return "1";
        }
  
  
  
  
  
  //run initial ingestion or reingestion
  if (ingestCount == 0){
       sqlCommand = "call ingestUningestedPIData('"+PROJECTID+"',false,false,false);";
  } else {
       sqlCommand = "call ingestUningestedPIData('"+PROJECTID+"',true,false,false);";
}
try {
            snowflake.execute (
                {sqlText: sqlCommand}
            );
        }
    catch (err)  {
        log("Failed to run initial ingestion for projectid " + PROJECTID + ": "+ err); 
        return "1";
        }     
  
  return "0";
  $$;


  
  
  create or replace procedure do_log(msg varchar) 
   RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
 $$
 //see if we should log - checks for do_log = true session variable
 try{
    var foo = snowflake.createStatement( { sqlText: `select $do_log` } ).execute();
 } catch (ERROR){
    return; //swallow the error, variable not set so don't log
 }
 foo.next();
 if (foo.getColumnValue(1)==true){ //if the value is anything other than true, don't log
    try{
        snowflake.createStatement( { sqlText: `create table identifier ($log_table) if not exists (ts number, msg string)`} ).execute();
        snowflake.createStatement( { sqlText: `insert into identifier ($log_table) values (:1, :2)`, binds:[Date.now(), MSG] } ).execute();
    } catch (ERROR){
        throw ERROR;
    }
 }
 $$;


  
  --call addnewpiproject('9999','SANDBOX','609601d6-469f-4f96-b26c-4cea42ceeff4','America/New_York',false);
  --modify error handling so it does not continue on to next step if a step fails
  --modify so that if run more than once, it REINGESTS
  
  --grant all on public.d_pi_config tables to alert ingest users
  
  
 