USE DATABASE PUREINSIGHTS_UAT;
USE SCHEMA PUBLIC; --.F_IVR_FLOW_OUTCOME_VW source

SELECT * FROM F_IVR_FLOW_OUTCOME_VW;

create or replace view F_IVR_FLOW_OUTCOME_VW(
	PROJECTID,
	PROJECTNAME,
	PROGRAMID,
	PROGRAMNAME,
	CONVERSATIONID,
	IVR_KEY,
	INDEX,
	SET_PARTICIPANT_VALUE,
	STAGE,
	IVR_END_POINT,
	IVR_END_POINT_NAME,
	PRIOR_INDEX,
	PRIOR_INDEX_NAME,
	NEXT_INDEX,
	NEXT_INDEX_NAME,
	MENU_ID,
	MENU_NAME,
	PARENT_MENU_ID,
	PARENT_MENU_NAME,
	IS_SELF_SERVICE_FLAG,
	EFFECTIVE_START_DT,
	EFFECTIVE_END_DT
) AS WITH ct AS (SELECT rt.projectid,rt.projectname,rt.programid,rt.programname,rt.conversationid,rt.ivr_key,INDEX,value AS SET_PARTICIPANT_VALUE,STAGE,
last_value(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS IVR_END_POINT,
last_value(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS IVR_END_POINT_NAME,
LAG(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX,
LAG(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_NAME,
LEAD(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS NEXT_INDEX,
LEAD(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS NEXT_INDEX_NAME,
MENU_ID,
MENU_NAME,
PARENT_MENU_ID,
PARENT_MENU_NAME,
IS_SELF_SERVICE_FLAG,
EFFECTIVE_START_DT,
EFFECTIVE_END_DT,
CONVERSATION_START_DT FROM  (SELECT * FROM 
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as IVR_KEY,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  CASE when substr(rt.RAW:value, 0,2)='||' THEN substr(rt.RAW:value,3,LENGTH(rt.RAW:value)) ELSE rt.RAW:value END AS col
   from RAW.CONVERSATION_ATTRIBUTES rt
  where rt.RAW:key like ('IVR%')
)x,  lateral split_to_table(COL, '||'))rt
join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  --left join RAW.participants rp
  --on rt.projectid = rp.projectid  and rt.participantId =rp.RAW:participantId
  LEFT JOIN PUBLIC.D_IVR_MENU_INFO m
  ON pr.projectID = m.projectId
and rt.ivr_key = m.IVR_KEY
AND rt.value=m.SET_PARTICIPANT_VALUE
LEFT JOIN (SELECT DISTINCT PROJECTID,RAW:conversationID AS conversationID,DATE(RAW:conversationStartTime) AS CONVERSATION_START_DT FROM RAW.SESSION_SUMMARY) SS ON RT.PROJECTID=SS.PROJECTID 
AND RT.CONVERSATIONID=SS.conversationID)
SELECT A1.projectid,
A1.projectname,
A1.programid,
A1.programname,
A1.conversationid,
A1.ivr_key,
A1.INDEX,
A1.SET_PARTICIPANT_VALUE,
A1.STAGE,
NVL(Q1.PRIOR_INDEX_STG,A1.IVR_END_POINT) AS IVR_END_POINT,
NVL(Q1.PRIOR_participant_value_STG,A1.IVR_END_POINT_NAME) AS IVR_END_POINT_NAME,
NVL(CAST (A1.PRIOR_INDEX AS varchar),'N/A') PRIOR_INDEX,
NVL(A1.PRIOR_INDEX_NAME,'N/A') PRIOR_INDEX_NAME,
NVL(CAST (A1.NEXT_INDEX AS varchar),'N/A') NEXT_INDEX,
NVL(A1.NEXT_INDEX_NAME,'N/A') NEXT_INDEX_NAME,
A1.MENU_ID,
A1.MENU_NAME,
A1.PARENT_MENU_ID,
A1.PARENT_MENU_NAME,
A1.IS_SELF_SERVICE_FLAG,
A1.EFFECTIVE_START_DT,
A1.EFFECTIVE_END_DT,
A1.CONVERSATION_START_DT
FROM Ct A1 LEFT OUTER JOIN
(SELECT * FROM (SELECT *, RANK() OVER (PARTITION BY PROJECTID, conversationid,IVR_KEY ORDER BY INDEX) AS RNK
FROM (SELECT CT.PROJECTID,CT.CONVERSATIONID,CT.IVR_KEY,INDEX, CT.SET_PARTICIPANT_VALUE,STAGE,LAG(index) OVER (PARTITION BY Ct.conversationid,IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_STG  
,LAG(set_participant_value) OVER (PARTITION BY Ct.conversationid,IVR_KEY ORDER BY INDEX) AS PRIOR_participant_value_STG
FROM ct 
)WHERE UPPER(STAGE)='QUEUE') WHERE RNK=1) Q1
ON A1.projectID = Q1.projectId
AND A1.CONVERSATIONID=Q1.CONVERSATIONID
and A1.ivr_key = Q1.IVR_KEY
ORDER BY PROJECTID, CONVERSATIONID,IVR_KEY,INDEX;