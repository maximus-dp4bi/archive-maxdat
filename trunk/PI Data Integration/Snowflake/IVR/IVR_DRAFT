SELECT *
FROM PUREINSIGHTS_UAT."PUBLIC".D_PI_INTRADAY_CFG ;

select
c.PI_USER
,hex_decode_string(to_varchar(decrypt_raw(as_binary(get(PI_PASS, 'ciphertext')), sha2_binary('6z=j\P{a$/*+Q4=.',256), as_binary(get(PI_PASS, 'iv')), null, 'AES-GCM', as_binary(get(PI_PASS, 'tag'))))) as PI_PASS
,c.PROJECT_ID
,c.PROJECT_NAME
,c.PI_CONN
from PUBLIC.D_PI_INTRADAY_CFG c;


SELECT COUNT(*)
FROM PUREINSIGHTS_PRD.PUBLIC.F_PI_WFM_SCHEDULE_ACTIVITY_SUMMARY_VW  ; -- 682


SELECT DISTINCT PI_TABLE_NAME 
FROM PUREINSIGHTS_UAT.PUBLIC.D_PI_INTRADAY_EXEC_LOG 
ORDER BY 1;



SELECT DISTINCT KEY
FROM PUREINSIGHTS_DEV."PUBLIC".D_PI_CONVERSATION_ATTRIBUTES_VW 
WHERE UPPER(KEY) LIKE '%IVR%'
ORDER BY 1;


SELECT  PROJECTNAME, COUNT(*)
FROM PUREINSIGHTS_UAT.PUBLIC.F_PI_WFM_PLANNING_GROUP_AGENTS_VW
GROUP BY PROJECTNAME ;

SELECT *
FROM PUREINSIGHTS_DEV."PUBLIC".D_IVR_MENU_INFO;

USE DATABASE MARS_DP4BI_DEV;

SELECT *
FROM MARS_DP4BI_UAT.MARSDB.MARSDB_PROJECT;

SELECT *
FROM DECISIONPOINT_DEV.CONNECTIONPOINT.MARSDB_PROJECTS ;


SELECT *
FROM PUREINSIGHTS_DEV."PUBLIC".D_PI_PROJECTS 
WHERE ACTIVE=1;

USE DATABASE PUREINSIGHTS_DEV;


with ca3 as (select distinct
projectId,
projectName,
programId,
programName,
conversationid,
value as IVR_KEY,
participantEndTime,
participantEndDate,
projectParticipantEndTime,
projectParticipantEndDate,
participantid,
participantName,
participantStartTime,
participantStartDate,
projectParticipantStartTime,
projectParticipantStartDate,
purpose,
userId
from
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as key,
  cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId,
  cast (rt.RAW:value as VARCHAR(255)) as col
  from RAW.CONVERSATION_ATTRIBUTES rt
  join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  left join RAW.participants rp
  on rt.projectid = rp.projectid
  and rt.RAW:participantId =rp.RAW:participantId
 --where participantstartdate between add_months(last_day(current_date())+1, -1) and current_date() - 1
  where key like ('IVR%')
),  lateral split_to_table(COL, '||')
where VALUE <> '')
  select si.PROJECTID,
si.PROJECTNAME,
si.PROGRAMID,
si.PROGRAMNAME,
si.IVR_KEY,
ca3.participantEndTime,
ca3.participantEndDate,
ca3.projectParticipantEndTime,
ca3.projectParticipantEndDate,
ca3.participantid,
ca3.participantName,
ca3.participantStartTime,
ca3.participantStartDate,
ca3.projectParticipantStartTime,
ca3.projectParticipantStartDate
--cast(ca3.value as varchar(50)) as value
from PUBLIC.D_IVR_MENU_INFO si
LEFT JOIN CA3
on ca3.projectID = si.projectId
and ca3.IVR_KEY = si.IVR_KEY;


with ca3 as (select distinct
projectId,
projectName,
programId,
programName,
conversationid,
value as IVR_KEY,
participantEndTime,
participantEndDate,
projectParticipantEndTime,
projectParticipantEndDate,
participantid,
participantName,
participantStartTime,
participantStartDate,
projectParticipantStartTime,
projectParticipantStartDate,
purpose,
userId
from
select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as key,
  cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId,
  cast rt.RAW:value as KEY_VAL
  from RAW.CONVERSATION_ATTRIBUTES rt
  join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  left join RAW.participants rp
  on rt.projectid = rp.projectid
  and rt.RAW:participantId =rp.RAW:participantId
 --where participantstartdate between add_months(last_day(current_date())+1, -1) and current_date() - 1
  where key like ('IVR%')
,  lateral flatten(INPUT=>split(key_val,'||'))
where VALUE <> '')
  select si.PROJECTID,
si.PROJECTNAME,
si.PROGRAMID,
si.PROGRAMNAME,
si.IVR_KEY,
ca3.participantEndTime,
ca3.participantEndDate,
ca3.projectParticipantEndTime,
ca3.projectParticipantEndDate,
ca3.participantid,
ca3.participantName,
ca3.participantStartTime,
ca3.participantStartDate,
ca3.projectParticipantStartTime,
ca3.projectParticipantStartDate,
cast(ca3.value as varchar(50)) as value
from PUBLIC.D_IVR_MENU_INFO si
LEFT JOIN CA3
on ca3.projectID = si.projectId
and ca3.IVR_KEY = si.IVR_KEY;

-- working copy SG

with ca3 as (select distinct
projectId,
projectName,
programId,
programName,
conversationid,
KEY AS IVR_KEY,
value as IVR_KEY_VAL,
INDEX,
participantEndTime,
participantEndDate,
projectParticipantEndTime,
projectParticipantEndDate,
participantid,
participantName,
participantStartTime,
participantStartDate,
projectParticipantStartTime,
projectParticipantStartDate,
purpose,
userId
from
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as key,
  cast (rt.RAW:value as VARCHAR(255)) as col, 
  cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId
  from RAW.CONVERSATION_ATTRIBUTES rt
  join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  left join RAW.participants rp
  on rt.projectid = rp.projectid
  and rt.RAW:participantId =rp.RAW:participantId
 --where participantstartdate between add_months(last_day(current_date())+1, -1) and current_date() - 1
  where rt.RAW:key like ('IVR%')
),  lateral split_to_table(COL, '||')
--TABLE(FLATTEN(input=>STRTOK_TO_ARRAY(COL,'||'))) f
where VALUE <> '')
  select ca3.PROJECTID,
ca3.PROJECTNAME,
ca3.PROGRAMID,
ca3.PROGRAMNAME,
ca3.conversationid,
ca3.IVR_KEY,
CA3.INDEX,
ca3.IVR_KEY_VAL,
ca3.participantEndTime,
ca3.participantEndDate,
ca3.projectParticipantEndTime,
ca3.projectParticipantEndDate,
ca3.participantid,
ca3.participantName,
ca3.participantStartTime,
ca3.participantStartDate,
ca3.projectParticipantStartTime,
ca3.projectParticipantStartDate
--cast(ca3.value as varchar(50)) as value
FROM CA3
ORDER BY ca3.PROJECTID, ca3.conversationid, ca3.ivr_key
/*on ca3.projectID = si.projectId
and ca3.IVR_KEY = si.IVR_KEY*/;


SELECT KEY, c.VALUE, value
 from PUBLIC.D_PI_CONVERSATION_ATTRIBUTES_VW WHERE key like ('IVR%'), LATERAL flatten(INPUT=>split(value,'||')) c
 

SELECT X.CONVERSATIONID, X.KEY, Y.VALUE,SEQ,INDEX
from PUBLIC.D_PI_CONVERSATION_ATTRIBUTES_VW X
,  lateral split_to_table(VALUE, '||')Y
WHERE X.key LIKE 'IVR%'
--AND X.CONVERSATIONID ='a3f74d1e-540c-4db2-b655-5e05411035e6'
ORDER BY  X.CONVERSATIONID, X.KEY, SEQ,INDEX
;
 
 a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	1	2022-06-28T16:38:16.927Z
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	3	Benificiary Helpline Language Menu
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	4	Benificiary Helpline Main Menu
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	5	MI Enrolls Main Menu
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	6	MI Enrolls Transfer To CSRMIEB_MIENROLLS_Voice
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	8	MI Enrolls Welcome Entry
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	2	MI Enrolls Call Center Open
a3f74d1e-540c-4db2-b655-5e05411035e6	IVR_MIEBS_01	7	MI_EBS_EnglishLanguag

2022-06-28T16:38:16.927Z||Benificiary Helpline Language Menu||MI_EBS_EnglishLanguag||Benificiary Helpline Main Menu||MI Enrolls Welcome Entry||MI Enrolls Main Menu||MI Enrolls Call Center Open||MI Enrolls Transfer To CSRMIEB_MIENROLLS_Voice
;




SELECT
	table_schema,
	table_name AS view_name,
	view_definition,
	created AS create_date,
	last_altered AS modify_date,
	COMMENT AS description
FROM
	information_schema.views
WHERE
	table_schema != 'INFORMATION_SCHEMA'
	AND UPPER(VIEW_DEFINITION) LIKE '%ROW_NUMBER%'
ORDER BY
	table_schema,
	table_name; 



select t.table_schema, 
       t.table_name,
       column_name,
       t.table_type 
from information_schema.tables t
inner join information_schema.columns c on 
       c.table_schema = t.table_schema and c.table_name = t.table_name
where t.table_type = 'BASE TABLE'
      and column_name LIKE '%STATE_PROVIDER_ID%'
     AND T.table_schema='MARSDB'
order by t.table_schema, 
       t.table_name;
      
SELECT X.CONVERSATIONID, X.KEY, Y.VALUE,SEQ,INDEX
FROM RAW.CONVERSATION_ATTRIBUTES X
--PUBLIC.D_PI_CONVERSATION_ATTRIBUTES_VW X 
  join PUBLIC.D_PI_PROJECTS pr
  on x.projectId = pr.projectId
  left join RAW.participants rp
  on x.projectid = rp.projectid
  and x.RAW:participantId =rp.RAW:participantId
,  lateral split_to_table(VALUE, '||')Y
WHERE X.key LIKE 'IVR%'
--AND X.CONVERSATIONID ='a3f74d1e-540c-4db2-b655-5e05411035e6'
ORDER BY  X.CONVERSATIONID, X.KEY, SEQ,INDEX
;

SELECT *
FROM 
(SELECT rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as key,    
  cast (rt.RAW:value as VARCHAR(255)) as VALUE,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid
from PUREINSIGHTS_DEV.RAW.CONVERSATION_ATTRIBUTES rt
WHERE rt.RAW:key LIKE 'IVR%'),
lateral split_to_table(value, '||')Y;

USE DATABASE PUREINSIGHTS_UAT;
USE SCHEMA PUBLIC;

create or replace table D_IVR_MENU_INFO
(PROJECTID	Int,
PROJECTNAME	Varchar(255),
PROGRAMID	Int,	
PROGRAMNAME	Varchar,	
IVR_KEY	Varchar(255),
SET_PARTICIPANT_VALUE	Varchar(255),
MENU_ID	Varchar(255),
MENU_NAME	Varchar(255),
PARENT_MENU_ID	Varchar(255),
PARENT_MENU_NAME	Varchar(255),
IS_SELF_SERVICE_FLAG	Varchar(1),
STAGE	Varchar(255),
EFFECTIVE_START_DT	date,	
EFFECTIVE_END_DT	date);

--CREATE OR REPLACE VIEW F_IVR_FLOW_OUTCOME_VW AS

WITH ST AS (SELECT 'QUEUE' AS STAGE,  )
SELECT *,
LAG(SET_PARTICIPANT_VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX,
FROM (select projectid,projectname,programid,programname,conversationid,ivr_key,INDEX,value AS SET_PARTICIPANT_VALUE,
CASE WHEN INDEX=6 THEN 'QUEUE' ELSE STAGE END AS STAGE,
last_value(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS IVR_END_POINT,
last_value(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS IVR_END_POINT_NAME,
LAG(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX,
LAG(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_NAME,
LEAD(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS NEXT_INDEX,
LEAD(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS NEXT_INDEX_NAME,
MENU_ID,
MENU_NAME,
PARENT_MENU_ID,
PARENT_MENU_NAME,
IS_SELF_SERVICE_FLAG,
EFFECTIVE_START_DT,
EFFECTIVE_END_DT
from
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as IVR_KEY,
  cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId,
  cast (rt.RAW:value as VARCHAR(255)) as col,
  m.STAGE,
  m.MENU_ID,
  m.MENU_NAME,
  m.PARENT_MENU_ID,
  m.PARENT_MENU_NAME,
  m.IS_SELF_SERVICE_FLAG,
  m.EFFECTIVE_START_DT,
  m.EFFECTIVE_END_DT
  from RAW.CONVERSATION_ATTRIBUTES rt
  join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  left join RAW.participants rp
  on rt.projectid = rp.projectid
  and rt.RAW:participantId =rp.RAW:participantId
  LEFT JOIN PUBLIC.D_IVR_MENU_INFO m
  ON pr.projectID = m.projectId
and rt.RAW:key = m.IVR_KEY
where rt.RAW:key like ('IVR%')
)x,  lateral split_to_table(COL, '||')
ORDER BY conversationid, IVR_KEY,INDEX);


SELECT * FROM  PUREINSIGHTS_UAT.PUBLIC.F_IVR_FLOW_OUTCOME_VW ;

SELECT *
FROM MARS_DP4BI_DEV.MARSDB.MARSDB_PROJECT ;

SELECT *
FROM PUREINSIGHTS_PRD."PUBLIC".D_PI_PROJECTS ORDER BY PROJECTNAME ;

SELECT *
FROM DECISIONPOINT_PRD."PUBLIC".D_PROJECT_DATES_SV;

SELECT *
FROM PUREINSIGHTS_PRD.PUBLIC.QUEUE;

WITH CTE AS (select projectid,projectname,programid,programname,conversationid,ivr_key,INDEX,value AS SET_PARTICIPANT_VALUE,STAGE,
last_value(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS IVR_END_POINT,
last_value(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS IVR_END_POINT_NAME,
LAG(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX,
LAG(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_NAME,
LEAD(index) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS NEXT_INDEX,
LEAD(VALUE) OVER (PARTITION BY conversationid, IVR_KEY ORDER BY INDEX) AS NEXT_INDEX_NAME,
MENU_ID,
MENU_NAME,
PARENT_MENU_ID,
PARENT_MENU_NAME,
IS_SELF_SERVICE_FLAG,
EFFECTIVE_START_DT,
EFFECTIVE_END_DT
from
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as IVR_KEY,
  cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId,
  cast (rt.RAW:value as VARCHAR(255)) as col,
  m.STAGE,
  m.MENU_ID,
  m.MENU_NAME,
  m.PARENT_MENU_ID,
  m.PARENT_MENU_NAME,
  m.IS_SELF_SERVICE_FLAG,
  m.EFFECTIVE_START_DT,
  m.EFFECTIVE_END_DT
  from RAW.CONVERSATION_ATTRIBUTES rt
  join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  left join RAW.participants rp
  on rt.projectid = rp.projectid
  and rt.RAW:participantId =rp.RAW:participantId
  LEFT JOIN PUBLIC.D_IVR_MENU_INFO m
  ON pr.projectID = m.projectId
and rt.RAW:key = m.IVR_KEY
where rt.RAW:key like ('IVR%')
)x,  lateral split_to_table(COL, '||'))
SELECT * FROM CTE
ORDER BY conversationid, IVR_KEY,INDEX;


cast (rp.RAW:participantEndTime as DATETIME) as participantEndTime,
  cast (rp.RAW:participantEndTime as DATE) as participantEndDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME)) as projectParticipantEndTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantEndTime as DATETIME))) as projectParticipantEndDate,
  cast (rp.RAW:participantName as VARCHAR(255)) as participantName,
  cast (rp.RAW:participantStartTime as DATETIME) as participantStartTime,
  cast (rp.RAW:participantStartTime as DATE) as participantStartDate,
  convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME)) as projectParticipantStartTime,
  to_date(convert_timezone('UTC',pr.projectTimezone,cast (rp.RAW:participantStartTime as DATETIME))) as projectParticipantStartDate,
  cast (rp.RAW:purpose as VARCHAR(255)) as purpose,
  cast (rp.RAW:userId as VARCHAR(255)) as userId,
  m.STAGE,
  m.MENU_ID,
  m.MENU_NAME,
  m.PARENT_MENU_ID,
  m.PARENT_MENU_NAME,
  m.IS_SELF_SERVICE_FLAG,
  m.EFFECTIVE_START_DT,
  m.EFFECTIVE_END_DT

USE DATABASE PUREINSIGHTS_UAT;
USE SCHEMA PUBLIC;
SELECT * FROM F_IVR_FLOW_OUTCOME_VW;
CREATE OR REPLACE VIEW F_IVR_FLOW_OUTCOME_VW AS   
WITH ct AS (SELECT rt.projectid,rt.projectname,rt.programid,rt.programname,rt.conversationid,rt.ivr_key,INDEX,value AS SET_PARTICIPANT_VALUE,STAGE,
last_value(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS IVR_END_POINT,
last_value(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS IVR_END_POINT_NAME,
LAG(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX,
LAG(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_NAME,
LEAD(index) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS NEXT_INDEX,
LEAD(VALUE) OVER (PARTITION BY rt.conversationid, rt.IVR_KEY ORDER BY INDEX) AS NEXT_INDEX_NAME,
MENU_ID,
MENU_NAME,
PARENT_MENU_ID,
PARENT_MENU_NAME,
IS_SELF_SERVICE_FLAG,
EFFECTIVE_START_DT,
EFFECTIVE_END_DT FROM  (SELECT * FROM 
(select
  rt.projectId as projectId,
  rt.projectName as projectName,
  rt.programId as programId,
  rt.programName as programName,
  cast (rt.RAW:conversationId as VARCHAR(255)) as conversationId,
  cast (rt.RAW:key as VARCHAR(255)) as IVR_KEY,
  cast (rt.RAW:participantId as VARCHAR(255)) as participantid,
  cast (rt.RAW:value as VARCHAR(255)) as col
  from RAW.CONVERSATION_ATTRIBUTES rt
  where rt.RAW:key like ('IVR%')
)x,  lateral split_to_table(COL, '||'))rt
join PUBLIC.D_PI_PROJECTS pr
  on rt.projectId = pr.projectId
  --left join RAW.participants rp
  --on rt.projectid = rp.projectid  and rt.participantId =rp.RAW:participantId
  LEFT JOIN PUBLIC.D_IVR_MENU_INFO m
  ON pr.projectID = m.projectId
and rt.ivr_key = m.IVR_KEY
AND rt.value=m.SET_PARTICIPANT_VALUE)
SELECT A1.projectid,
A1.projectname,
A1.programid,
A1.programname,
A1.conversationid,
A1.ivr_key,
A1.INDEX,
A1.SET_PARTICIPANT_VALUE,
A1.STAGE,
NVL(Q1.PRIOR_INDEX_STG,A1.IVR_END_POINT) AS IVR_END_POINT,
NVL(Q1.PRIOR_participant_value_STG,A1.IVR_END_POINT_NAME) AS IVR_END_POINT_NAME,
A1.PRIOR_INDEX AS PRIOR_INDEX,
A1.PRIOR_INDEX_NAME,
A1.NEXT_INDEX,
A1.NEXT_INDEX_NAME,
A1.MENU_ID,
A1.MENU_NAME,
A1.PARENT_MENU_ID,
A1.PARENT_MENU_NAME,
A1.IS_SELF_SERVICE_FLAG,
A1.EFFECTIVE_START_DT,
A1.EFFECTIVE_END_DT
FROM Ct A1 LEFT OUTER JOIN
(SELECT * FROM (SELECT *, RANK() OVER (PARTITION BY PROJECTID, conversationid,IVR_KEY ORDER BY INDEX) AS RNK
FROM (SELECT CT.PROJECTID,CT.CONVERSATIONID,CT.IVR_KEY,INDEX, CT.SET_PARTICIPANT_VALUE,STAGE,LAG(index) OVER (PARTITION BY Ct.conversationid,IVR_KEY ORDER BY INDEX) AS PRIOR_INDEX_STG  
,LAG(set_participant_value) OVER (PARTITION BY Ct.conversationid,IVR_KEY ORDER BY INDEX) AS PRIOR_participant_value_STG
FROM ct 
)WHERE UPPER(STAGE)='QUEUE') WHERE RNK=1) Q1
ON A1.projectID = Q1.projectId
AND A1.CONVERSATIONID=Q1.CONVERSATIONID
and A1.ivr_key = Q1.IVR_KEY
ORDER BY PROJECTID, CONVERSATIONID,IVR_KEY,INDEX;


