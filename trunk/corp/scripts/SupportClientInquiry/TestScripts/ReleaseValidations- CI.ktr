<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>ReleaseValidations- CI</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <directory>&#47;</directory>
    <parameters>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <created_user>-</created_user>
  <created_date>2013&#47;04&#47;26 09:53:50.844</created_date>
  <modified_user>-</modified_user>
  <modified_date>2013&#47;04&#47;26 09:53:50.844</modified_date>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>MAXDAT_VAL</name>
    <server/>
    <type>ORACLE</type>
    <access>JNDI</access>
    <database>${DB_MAXDAT_JNDI_VAL}</database>
    <port>1521</port>
    <username/>
    <password>Encrypted </password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>1521</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>Table Input - Contact Attr Validations</from><to>Text file output</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>Table Input - Contact Attr Validations</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>MAXDAT_VAL</connection>
    <sql>SELECT * FROM (
select &apos;AV01&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV02&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_contact_type_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV03&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_type &apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV04&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  parent_record_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where parent_record_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV05&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  tracking_number&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where tracking_number is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV06&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_worker_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV07&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_worker_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV08&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV09&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV10&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV11&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  complete_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where complete_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV12&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_start_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_start_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV13&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_end_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_end_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV14&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_contact_group_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV15&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_group&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_group is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV16&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_language_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV17&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  language&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where language is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV18&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  translation_req&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV19&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_latest_note_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_latest_note_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV20&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  note_category&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_category is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV21&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  note_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_type is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV22&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  note_source&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_source is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV23&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_field1&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field1 is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV24&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_field2&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field2 is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV25&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_field3&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field3 is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV26&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_field4&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field4 is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV27&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_field5&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field5 is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV28&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  assd_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV29&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  ased_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV30&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  aspb_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV31&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  assd_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV32&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  ased_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV33&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  asf_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV34&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  asf_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV35&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  asf_cancel_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV36&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  gwf_work_identified&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where gwf_work_identified is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV37&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  instance_status&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV38&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  cancel_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV39&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_update_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV40&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  last_update_by_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV41&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  last_update_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV42&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  contact_record_link_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV43&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  client_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where client_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV44&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  case_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where case_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV45&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV46&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV47&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV48&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV49&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_event_type_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_type_cd is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV50&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  supp_event_context&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_context is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV51&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_action&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_action is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION  -- Changed from EVENT_ACTION_CATEGORY
select &apos;AV52&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  manual_action_category&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where manual_action_category is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV53&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_ref_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_id is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV54&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  event_ref_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_type is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV55&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  program_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV56&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  program_subtype&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV57&apos; as test_num, &apos;Attributes 1 - At least one non-null value:  note_present&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is not null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV58&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  contact_record_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV59&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_contact_type_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV60&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  contact_type &apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV61&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  parent_record_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where parent_record_id is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV62&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  tracking_number&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where tracking_number is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV63&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_worker_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV64&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_worker_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV65&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV66&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV67&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV68&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  complete_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where complete_dt is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV69&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_start_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_start_dt is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV70&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_end_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_end_dt is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV71&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_contact_group_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV72&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_group&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_group is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV73&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_language_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV74&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  language&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where language is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV75&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  translation_req&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV76&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  supp_latest_note_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_latest_note_id is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV77&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  note_category&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_category is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV78&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  note_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_type is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV79&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  note_source&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_source is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV80&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field1&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field1 is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV81&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field2&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field2 is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV82&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field3&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field3 is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV83&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field4&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field4 is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV84&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  contact_record_field5&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_field5 is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV85&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  assd_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV86&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  ased_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV87&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  aspb_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV88&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  assd_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV89&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  ased_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV90&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  asf_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV91&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  asf_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV92&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  asf_cancel_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV93&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  gwf_work_identified&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where gwf_work_identified is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV94&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  instance_status&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV95&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  cancel_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV96&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_update_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV97&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  last_update_by_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV98&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  last_update_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV99&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  contact_record_link_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV100&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  client_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where client_id is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV101&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  case_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where case_id is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV102&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  event_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV103&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  supp_event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV104&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV105&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Required Attribute:  event_create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV106&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  supp_event_type_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_type_cd is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV107&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  supp_event_context&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_context is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV108&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  event_action&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_action is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION  -- Changed from EVENT_ACTION_CATEGORY
select &apos;AV109&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  manual_action_category&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where manual_action_category is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV110&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  event_ref_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_id is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV111&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  event_ref_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_ref_type is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV112&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  program_type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV113&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  program_subtype&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV114&apos; as test_num, &apos;Attributes 2 - Zero Result Tests - Optional Attribute:  note_present&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is null) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV115&apos; as test_num, &apos;Attributes 3 - Only Valid Values:  Translation Required&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where translation_req is not null and translation_req  in (&apos;Y&apos;,&apos;N&apos;)) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV116&apos; as test_num, &apos;Attributes 3 - Only Valid Values:  Note Present&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where note_present is not null and note_present  in (&apos;Y&apos;,&apos;N&apos;)) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV117&apos; as test_num, &apos;Attributes 3 - Only Valid Values:  Instance Status&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status not in (&apos;Active&apos;, &apos;Complete&apos;)) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV118&apos; as test_num, &apos;Attributes 3 - Only Valid Values:  Program Type&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_type is not null and program_type  in (&apos;Medicaid&apos;)) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION -- Changed from SUBPROGRAM_TYPE
select &apos;AV119&apos; as test_num, &apos;Attributes 3 - Only Valid Values:  Program Subtype&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where program_subtype is not null and program_subtype  in (&apos;Illinois Health Connect&apos;,
&apos;Integrated Care Program&apos;,
&apos;Voluntary Managed Care&apos;)) then &apos;PASS&apos; else &apos;FAIL&apos; end as test_result from dual
UNION
select &apos;AV120&apos; as test_num, &apos;Attributes 4 - Required Not Null:  contact_record_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_record_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV121&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_contact_type_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_type_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV122&apos; as test_num, &apos;Attributes 4 - Required Not Null:  contact_type &apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where contact_type  is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV123&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_worker_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV124&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_worker_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_worker_name is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV125&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV126&apos; as test_num, &apos;Attributes 4 - Required Not Null:  created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV127&apos; as test_num, &apos;Attributes 4 - Required Not Null:  create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where create_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV128&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_contact_group_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_contact_group_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV129&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_language_cd&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_language_cd is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV130&apos; as test_num, &apos;Attributes 4 - Required Not Null:  asf_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV131&apos; as test_num, &apos;Attributes 4 - Required Not Null:  asf_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV132&apos; as test_num, &apos;Attributes 4 - Required Not Null:  asf_cancel_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV133&apos; as test_num, &apos;Attributes 4 - Required Not Null:  assd_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV134&apos; as test_num, &apos;Attributes 4 - Required Not Null:  instance_status&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where instance_status is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV135&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_update_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where supp_update_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV136&apos; as test_num, &apos;Attributes 4 - Required Not Null:  last_update_by_name&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_by_name is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV137&apos; as test_num, &apos;Attributes 4 - Required Not Null:  last_update_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where last_update_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV138&apos; as test_num, &apos;Attributes 4 - Required Not Null:  contact_record_link_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_dtl where contact_record_link_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV139&apos; as test_num, &apos;Attributes 4 - Required Not Null:  event_id&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_id is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV140&apos; as test_num, &apos;Attributes 4 - Required Not Null:  supp_event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where supp_event_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV141&apos; as test_num, &apos;Attributes 4 - Required Not Null:  event_created_by&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_created_by is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV142&apos; as test_num, &apos;Attributes 4 - Required Not Null:  event_create_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry_event where event_create_dt is null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV143&apos; as test_num, &apos;Attributes 5 - ASSD Not Null with ASED Not Null:  assd_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null and ased_handle_contact is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV144&apos; as test_num, &apos;Attributes 5 - ASSD Not Null with ASED Not Null:  assd_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null and ased_create_route_work is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV145&apos; as test_num, &apos;Attributes 6 - ASSD Not Null with ASF = Y:  assd_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_handle_contact is null and asf_handle_contact = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV146&apos; as test_num, &apos;Attributes 6 - ASSD Not Null with ASF = Y:  assd_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where assd_create_route_work is null and asf_create_route_work = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV147&apos; as test_num, &apos;Attributes 7 - ASED Not Null with ASF = Y:  ased_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null and asf_handle_contact = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV148&apos; as test_num, &apos;Attributes 7 - ASED Not Null with ASF = Y:  ased_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_create_route_work is null and asf_create_route_work = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV149&apos; as test_num, &apos;Attributes 7 - ASED Not Null with ASF = Y:  cancel_dt&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where cancel_dt is null and asf_cancel_contact = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV150&apos; as test_num, &apos;Attributes 8 - ASED Not Null with ASPB Not Null:  ased_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where ased_handle_contact is null and aspb_handle_contact is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV151&apos; as test_num, &apos;Attributes 9 - ASPB Not Null with ASF = Y:  aspb_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null and asf_handle_contact = &apos;Y&apos;) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV152&apos; as test_num, &apos;Attributes 10 - ASPB Not Null with ASED Not Null:  aspb_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where aspb_handle_contact is null and ased_handle_contact is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV153&apos; as test_num, &apos;Attributes 11 - ASF = N with ASED Null:  asf_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact = &apos;N&apos; and ased_handle_contact is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV154&apos; as test_num, &apos;Attributes 11 - ASF = N with ASED Null:  asf_create_route_work&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_create_route_work = &apos;N&apos; and ased_create_route_work is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV155&apos; as test_num, &apos;Attributes 11 - ASF = N with ASED Null:  asf_cancel_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_cancel_contact = &apos;N&apos; and cancel_dt is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
UNION
select &apos;AV156&apos; as test_num, &apos;Attributes 12 - ASF = N with ASPB Null:  asf_handle_contact&apos; as test_name, case when exists(select 1 from corp_etl_client_inquiry where asf_handle_contact = &apos;N&apos; and aspb_handle_contact is not null) then &apos;FAIL&apos; else &apos;PASS&apos; end as test_result from dual
) ORDER BY 1
</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>123</xloc>
      <yloc>36</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Text file output</name>
    <type>TextFileOutput</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <separator>;</separator>
    <enclosure>&quot;</enclosure>
    <enclosure_forced>N</enclosure_forced>
    <enclosure_fix_disabled>N</enclosure_fix_disabled>
    <header>Y</header>
    <footer>N</footer>
    <format>DOS</format>
    <compression>None</compression>
    <encoding/>
    <endedLine/>
    <fileNameInField>N</fileNameInField>
    <fileNameField/>
    <create_parent_folder>N</create_parent_folder>
    <file>
      <name>C:\Kettle\ETL\ETL_LOG_DIRECTORY\ILClientInquiryValidation</name>
      <is_command>N</is_command>
      <servlet_output>N</servlet_output>
      <do_not_open_new_file_init>N</do_not_open_new_file_init>
      <extention>txt</extention>
      <append>N</append>
      <split>N</split>
      <haspartno>N</haspartno>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <SpecifyFormat>Y</SpecifyFormat>
      <date_time_format>yyyyMMddHHmmss</date_time_format>
      <add_to_result_filenames>Y</add_to_result_filenames>
      <pad>N</pad>
      <fast_dump>N</fast_dump>
      <splitevery>0</splitevery>
    </file>
    <fields>
    </fields>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>329</xloc>
      <yloc>36</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
