// Created by Soundra Rangarajulu
// use below for debug logging of code
// mention table you want to use and it will create it dynamically
//set log_table = 'PAIEB_DEBUG_LOG';
//set do_log = true;
//call do_log('what happened');
//select * from PAIEB_DEBUG_LOG
// use do_log with vars for error and comment
// call do_log('C',1,'Test',10,'what is this world');
// call do_log('E',2,'Job',10,'Error comment');

//call setVars();
//call startJob('ingest');
//call endJob('ingest')
//select * from currvars;
//select * from paieb_job_ctrl;

CREATE OR REPLACE PROCEDURE "CONTROL"."DO_LOG"("TYPE" VARCHAR(1), "JOBID" float(32), "JOBNAME" VARCHAR(50), "ROWID" float(32), "MSG" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS 
$$
if (TYPE=="E") {
    try{
        snowflake.createStatement( { sqlText: `call CONTROL.do_error_log(:1,:2,:3,:4)`, binds:[JOBID, JOBNAME, ROWID, MSG] } ).execute();
    } catch (ERROR){
        throw ERROR;
    }
} else if (TYPE=="C") {
        snowflake.createStatement( { sqlText: `call control.do_comment_log(:1,:2,:3,:4)`, binds:[JOBID, JOBNAME, ROWID, MSG] } ).execute();
} else {
        snowflake.createStatement( { sqlText: `call control.do_log(:1)`, binds:[MSG] } ).execute();
}
$$;

CREATE OR REPLACE PROCEDURE "CONTROL"."DO_ERROR_LOG"("JOBID" float, "JOBNAME" VARCHAR(1000), "ROWID" float, "MSG" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '
     try{
        snowflake.createStatement( { sqlText: `insert into "CONTROL"."PAIEB_ERROR_LOG"(jobid, jobname, error_rowid, error_comment) values (:1, :2,:3,:4)`, binds:[JOBID, JOBNAME, ROWID, MSG] } ).execute();
    } catch (ERROR){
        throw ERROR;
    }
  ';

CREATE OR REPLACE PROCEDURE "DO_COMMENT_LOG"("JOBID" float, "JOBNAME" VARCHAR(1000), "ROWID" float, "MSG" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '
    try{
        snowflake.createStatement( { sqlText: `insert into "CONTROL"."PAIEB_COMMENT_LOG"(jobid, jobname, comment_rowid, commentS) values (:1, :2,:3,:4)`, binds:[JOBID, JOBNAME, ROWID, MSG] } ).execute();
    } catch (ERROR){
        throw ERROR;
    }
 ';

CREATE OR REPLACE PROCEDURE "CONTROL"."DO_LOG"("MSG" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS $$
 //see if we should log - checks for do_log = true session variable
 try{
    var foo = snowflake.createStatement( { sqlText: `select $do_log` } ).execute();
 } catch (ERROR){
    return; //swallow the error, variable not set so don''t log
 }
 foo.next();
 if (foo.getColumnValue(1)==true){ //if the value is anything other than true, don''t log
    try{
        
        //snowflake.createStatement( { sqlText: `create table identifier (control.$log_table) if not exists (create_ntz TIMESTAMP default to_timestamp_ntz(current_timestamp), msg string)`} ).execute();
        snowflake.createStatement( { sqlText: `call control.do_comment_log(0,'DEBUG',0,:1)`, binds:[MSG] } ).execute();
    } catch (ERROR){
        throw ERROR;
    }
 }
 $$;


create or replace procedure "CONTROL".setVars()
returns float
language javascript
execute as caller
as
$$
// log
snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();


function log(msg){
    snowflake.createStatement( { sqlText: `call "CONTROL".do_log(:1)`, binds:[msg] } ).execute();
} 

snowflake.createStatement( { sqlText: `create or replace transient table "CONTROL".currvars(current_job_id number(32), ingestion_start_time timestamp, ingestion_end_time timestamp)`} ).execute();

try {
snowflake.createStatement( { sqlText: `delete from "CONTROL".currvars`} ).execute();
}
catch (err) {
        log( "Failed to create jobid "+ err); 
        return 4;
}

log('after temp table');

//insert if it doesnt exist
try {
snowflake.createStatement( { sqlText: `insert into "CONTROL".currvars(current_job_id) (SELECT control.PAIEB_JOB_SEQ.nextval)`} ).execute();
}
catch (err) {
        log( "Failed to create jobid "+ err); 
        return 4;
}

return 0;
$$;

create or replace procedure control.startJob("JOBNAME" varchar(50))
returns float
language javascript
execute as caller
as

$$
// log
//snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();

try {
   res = snowflake.createStatement({sqlText: `select current_job_id from control.currvars limit 1`}).execute();
   }
catch (err)  {
        log( "Failed to create jobid "+ err); 
        return 4;
}
  res.next();
  var jobid = res.getColumnValue(1);

function log(msg){
    snowflake.createStatement( { sqlText: `call "CONTROL".do_comment_log(:1, :2, :3,:4)`, binds:[jobid, JOBNAME, 0, msg] } ).execute();
} 

    try{
    snowflake.createStatement( { sqlText: `insert into "CONTROL".PAIEB_JOB_CTRL(jobid, jobname, status, starttime) (select :1, :2, 'STARTED', sysdate() from "CONTROL".currvars limit 1) `,binds:[jobid, JOBNAME] } ).execute();
        }
    catch (err)  {
        log( "Failed to create jobid "+ err); 
        return 4;
        }
log('Started job '+ jobid + ' for ' + JOBNAME);

return 0;        

$$
;


create or replace procedure control.endJob("JOBNAME" varchar(50))
returns float
language javascript
execute as caller
as

$$
// log
snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();

try {
   res = snowflake.createStatement({sqlText: `select current_job_id from control.currvars limit 1`}).execute();
   }
catch (err)  {
        log( "Failed to create jobid "+ err); 
        return 4;
}
  res.next();
  var jobid = res.getColumnValue(1);

function log(msg){
    snowflake.createStatement( { sqlText: `call "CONTROL".do_comment_log(:1, :2, :3,:4)`, binds:[jobid, JOBNAME, 0, msg] } ).execute();
} 

//log("before insert");

    try{
    snowflake.createStatement( { sqlText: `insert into "CONTROL".PAIEB_JOB_CTRL(jobid, jobname, status, starttime) (select :1, :2, 'COMPLETED', sysdate() from "CONTROL".currvars limit 1) `,binds:[jobid, JOBNAME] } ).execute();
        }
    catch (err)  {
        log( "Failed to create jobid "+ err); 
        return 4;
        }
log('Completed job '+ jobid + ' for ' + JOBNAME);

return 0;        

$$
;

create or replace procedure control.create_views("SNOWFLAKE_SCHEMA_NAME" varchar(100), "TARGET_SCHEMA_NAME" varchar(100), "TARGET_VIEW_SUFFIX" varchar(20))
returns float
language javascript
execute as caller
as

$$
// log
//snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();

 snowflake.createStatement( { sqlText: `call "CONTROL".setVars();` } ).execute();
 snowflake.createStatement( { sqlText: `call "CONTROL".startJob('CREATE_VIEWS'); `} ).execute();

function log(msg){
    snowflake.createStatement( { sqlText: `call control.do_log(:1)`, binds:[msg] } ).execute();
} 

    var table_array=[];
    sqlCommand = "select ta.source_table_name from control.paieb_migration_tables_list ta where source_table_owner = '"+TARGET_SCHEMA_NAME + "' and create_ats_view_flag = 1 and ta.source_table_name in (select table_name from information_schema.tables it where it.table_schema =  '"+SNOWFLAKE_SCHEMA_NAME + "' and table_type = 'BASE TABLE') ;"; 
    log(sqlCommand);
    
    var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );
    var rs = createdSQL.execute();
    while (rs.next()) {
     var source_table_name = rs.getColumnValue(1);
     var target_view_name = TARGET_SCHEMA_NAME +"." + source_table_name + TARGET_VIEW_SUFFIX;
 
		sqlCommand = "create or replace view " + target_view_name +  " " + " as (select * from " + SNOWFLAKE_SCHEMA_NAME + "." + source_table_name + " );";
		//log(sqlCommand);

		try {
            snowflake.createStatement( { sqlText: sqlCommand } ).execute();
		}
		catch (err) {
			log( "Failed to create view "+ target_view_name + " " + err); 
			return 4;
		}
    }

snowflake.createStatement( { sqlText: `call control.endJob('CREATE_VIEWS'); `} ).execute();
return 0;
$$
;


//call control.create_raw_tables('RAW','_RAW','Y');

create or replace procedure control.create_raw_tables("TARGET_SCHEMA_NAME" varchar(100), "TARGET_TABLE_SUFFIX" varchar(20), "REPLACE_FLAG" varchar(1))
returns float
language javascript
execute as caller
as

$$
// log
snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();

 snowflake.createStatement( { sqlText: `call "CONTROL".setVars();` } ).execute();
 snowflake.createStatement( { sqlText: `call "CONTROL".startJob('CREATE_RAW_TABLES'); `} ).execute();

function log(msg){
    snowflake.createStatement( { sqlText: `call control.do_log(:1)`, binds:[msg] } ).execute();
} 

    var table_array=[];
    sqlCommand = "select ta.source_table_name from control.paieb_AWSdms_tables_list ta where create_raw_flag = 1 ;"; 
    log(sqlCommand);
    
    var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );
    var rs = createdSQL.execute();
    while (rs.next()) {
     var source_table_name = rs.getColumnValue(1);
     var target_view_name = TARGET_SCHEMA_NAME +"." + source_table_name + TARGET_TABLE_SUFFIX;
 
		if (REPLACE_FLAG == 'Y' || REPLACE_FLAG == 'y') {
            sqlCommand = "create or replace table ";        
        } else {
            sqlCommand = "create table if not exists ";        
        }
        sqlCommand = sqlCommand + target_view_name +  " " + " ( table_name varchar2(100), fullpath varchar2(200), filename varchar2(200), ingestion_ntz timestamp_ntz(9), cdc_flag varchar2(1), raw variant , committimestamp varchar2(100), commit_ntz timestamp_ntz(9));";

        log(sqlCommand);

		try {
            snowflake.createStatement( { sqlText: sqlCommand } ).execute();
		}
		catch (err) {
			log( "Failed to create raw table "+ target_view_name + " " + err); 
			return 4;
		}
    }

snowflake.createStatement( { sqlText: `call control.endJob('CREATE_RAW_TABLES'); `} ).execute();
return 0;
$$
;


create or replace procedure control.create_rawtime_tables("DATE" INTEGER, "TARGET_SCHEMA_NAME" varchar(100), "TARGET_TABLE_SUFFIX" varchar(20), "REPLACE_FLAG" varchar(1))
returns float
language javascript
execute as caller  
as

$$
// log
snowflake.createStatement( { sqlText: `set log_table = 'PAIEB_DEBUG_LOG'`} ).execute();
snowflake.createStatement( { sqlText: `set do_log = true;`} ).execute();

 snowflake.createStatement( { sqlText: `call "CONTROL".setVars();` } ).execute();
 snowflake.createStatement( { sqlText: `call "CONTROL".startJob('CREATE_RAW_TABLES'); `} ).execute();

function log(msg){
    snowflake.createStatement( { sqlText: `call control.do_log(:1)`, binds:[msg] } ).execute();
} 

for (let i = 1; i <= 24; i++) {
	
     var target_view_name = TARGET_SCHEMA_NAME +"._" + DATE + i.toString().padStart(2,'0')  + TARGET_TABLE_SUFFIX;
 	log(target_view_name);
 	
	if (REPLACE_FLAG == 'Y' || REPLACE_FLAG == 'y') {
            sqlCommand = "create or replace table ";        
        } else {
            sqlCommand = "create table if not exists ";        
        }
        sqlCommand = sqlCommand + target_view_name +  " " + " ( table_name varchar2(100), fullpath varchar2(200), filename varchar2(200), ingestion_ntz timestamp_ntz(9), cdc_flag varchar2(1), raw variant , committimestamp varchar2(100), commit_ntz timestamp_ntz(9));";

        log(sqlCommand);

		try {
            snowflake.createStatement( { sqlText: sqlCommand } ).execute();
		}
		catch (err) {
			log( "Failed to create raw table "+ target_view_name + " " + err); 
			return 4;
		}
    }

snowflake.createStatement( { sqlText: `call control.endJob('CREATE_RAW_TABLES'); `} ).execute();
return 0;
$$
;
