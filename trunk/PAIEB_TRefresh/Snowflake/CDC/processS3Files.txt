  CREATE or replace PROCEDURE control.processS3File(tableName varchar, stageName varchar, awsfolder varchar)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS CALLER
  AS
  $$
  
  //set logging on
     var sqlCommand = "set do_log = true;";
     snowflake.execute ({sqlText: sqlCommand});

var vjobname = "processS3files";

// snowflake.createStatement( { sqlText: `call control.setVars();` } ).execute();
try {
   res = snowflake.createStatement({sqlText: `select current_job_id from control.currvars limit 1`}).execute();
   }
catch (err)  {
        log( "Failed to create jobid "+ err); 
        return 4;
}
res.next();
var vjobid = res.getColumnValue(1);

snowflake.createStatement( { sqlText: `call control.startJob(:1); `, binds:[vjobname] } ).execute();

function log(rowid, msg){
    snowflake.createStatement( { sqlText: `call control.do_log(:1, :2, :3, :4, :5)`, binds:['C', vjobid, vjobname, rowid,  msg] } ).execute();
} 


function logerr(rowid, msg){
    snowflake.createStatement( { sqlText: `call control.do_log(:1, :2, :3, :4, :5)`, binds:['E', vjobid, vjobname, rowid,  msg] } ).execute();
} 
       

function convertTZ(date, tzString) {
    return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
}

     //get date string for today
     var today_local = new Date();
     var today = convertTZ(today_local,'America/New_York')
     var dd = String(today.getDate()).padStart(2, '0');
     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
     var yyyy = today.getFullYear();
     var hh = String(today.getHours());
     var todayDateString = yyyy + mm + dd;

REINGEST_SFX = ""

//awsfolder = "/SOURCE_FOLDER/TMP/PA_IEE_DEV/"
//MAXEB_DP4BI_PAIEB_DEV_S3
//set STARTTIME =  '2022/06/23 19:03:00';
//set ENDTIME = '2022/07/01 01:00:00';

//select fullpath, filename from (select fullpath, filename, row_number() over(order by last_modified_ntz desc) rown from control.paieb_s3_files_to_ingest pf 
//                where processed = 0 and pf.table_name = 'CLIENT' 
//                ) where rown = 1 order by last_modified_ntz

if (TABLENAME == 'ALL') {
sqlCommand = "select table_name, fullpath, filename from (select table_name, fullpath, filename, filename_num, row_number() over(partition by fullpath order by last_modified_ntz desc) rown from control.paieb_s3_files_to_ingest pf \
                where processed = 0 and jobid = "+vjobid+" \
                ) where rown = 1 order by filename_num;";
        log(1, sqlCommand);
}
else {
sqlCommand = "select table_name, fullpath, filename from (select table_name, fullpath, filename,  filename_num, row_number() over(partition by fullpath order by last_modified_ntz desc) rown from control.paieb_s3_files_to_ingest pf \
                where processed = 0 and pf.table_name = '"+TABLENAME+"' and jobid = "+vjobid+" \
                ) where rown = 1 order by filename_num;";
        log(1, sqlCommand);
}
    var createdSQL = snowflake.createStatement( { sqlText: sqlCommand } );
    var rs = createdSQL.execute();
    while (rs.next()) {
    var filetablename = rs.getColumnValue(1);
     var fullpath = rs.getColumnValue(2);
     var filename = rs.getColumnValue(3);
     //var rawtablename = TABLENAME + '_raw';
     var rawtablename = 'awsdms_cdc_raw';
     var filepk = '';
     
     sqlCommand = "select primary_key_column from control.paieb_awsdms_tables_list where upper(source_table_name) = upper('"+filetablename+"') limit 1;";
     log(1, sqlCommand);
     try {
                res = snowflake.execute (
                    {sqlText: sqlCommand}
                    );
                res.next();
                filepk = res.getColumnValue(1);
     }
     catch {
                logerr(  0, "Failed to get PK for  " + filename + " for table "+TABLENAME+": "+ err); 
                continue;     
     }

     log(1, 'filepk = ' + filepk);
     if (filepk == '') {
       sqlCommand = "copy into RAW."+rawtablename+" (ingestion_ntz, source_table_name, fullpath, filename, cdc_flag, committimestamp, jobid, operation, commit_num, commit_ntz, raw) from \
              (select convert_timezone('UTC','America/New_York',sysdate()) \
          ,'"+filetablename+"' , '"+fullpath+"', '"+filename+"', 'Y'\
          , $1:COMMITTIMESTAMP::VARCHAR committimestamp \
          , "+vjobid+" \
          , $1:Op::VARCHAR operation \
          , to_number(to_char(TO_timestamp($1:COMMITTIMESTAMP::VARCHAR, 'YYYY-MM-DD HH24:MI:SS.SSSSSS'),'YYYYMMDDHH24MISS')) as commit_num \
          , TO_timestamp($1:COMMITTIMESTAMP::VARCHAR, 'YYYY-MM-DD HH24:MI:SS.SSSSSS') as commit_ntz \
          , * from @"+STAGENAME+AWSFOLDER+filetablename+"/"+filename+") \
          FILE_FORMAT = (TYPE= 'PARQUET') FORCE=TRUE;";
          log(1, sqlCommand);
     }
     else {
       sqlCommand = "copy into RAW."+rawtablename+" (ingestion_ntz, source_table_name, fullpath, filename, cdc_flag, committimestamp, jobid, primary_key, pk_id, operation, commit_num, commit_ntz, raw) from \
              (select convert_timezone('UTC','America/New_York',sysdate()) \
          ,'"+filetablename+"' , '"+fullpath+"', '"+filename+"', 'Y'\
          , $1:COMMITTIMESTAMP::VARCHAR committimestamp\
          , "+vjobid+" \
          , '"+filepk+"' primary_key , $1:"+filepk+"::NUMBER pk_id \
          , $1:Op::VARCHAR operation \
          , to_number(to_char(TO_timestamp($1:COMMITTIMESTAMP::VARCHAR, 'YYYY-MM-DD HH24:MI:SS.SSSSSS'),'YYYYMMDDHH24MISS')) as commit_num \
          , TO_timestamp($1:COMMITTIMESTAMP::VARCHAR, 'YYYY-MM-DD HH24:MI:SS.SSSSSS') as commit_ntz \
          , * from @"+STAGENAME+AWSFOLDER+filetablename+"/"+filename+") \
          FILE_FORMAT = (TYPE= 'PARQUET') FORCE=TRUE;";
          log(1, sqlCommand);
     }

        try {
                snowflake.execute (
                    {sqlText: sqlCommand}
                );
              sqlCommand = `
              insert into control.paieb_Awsdms_copy_log(file, status, rows_parsed, rows_loaded, error_limit, errors_Seen, first_error, first_error_line, first_error_character, first_error_column_name, create_timestamp) 
              (
                select $1 as file, $2 as status, $3 as rows_parsed, $4 as rows_loaded, $5 as error_limit, $6 as errors_Seen, $7 as first_error, $8 as first_error_line, $9 as first_error_character, $10 as first_error_column_name, sysdate() from table(result_scan(last_query_id()))
              );`;
                try {
                    snowflake.execute (
                    {sqlText: sqlCommand});
                }
                catch {
                    continue; 
                }
            }
        catch (err)  {
            logerr(  0, "Failed to Load " + filename + " for table "+TABLENAME+": "+ err); 
            continue;
            log(0, "Failed to Load file " || err);
            }

 
        log(0, "before update of paieb_s3_files_to_ingest");
            sqlCommand = "update control.paieb_s3_files_to_ingest set processed = 1 where fullpath = '"+fullpath+"' and filename = '"+filename+"';";
            try {
                    snowflake.execute (
                        {sqlText: sqlCommand}
                    );
                }
            catch (err)  {
                logerr(  0, "Failed to update processed for  " + filename + " for table "+TABLENAME+": "+ err); 
                continue;
                }
     }

 snowflake.createStatement( { sqlText: `call control.endJob(:1); `, binds:[vjobname] } ).execute();

    return "0";  
  $$;
                