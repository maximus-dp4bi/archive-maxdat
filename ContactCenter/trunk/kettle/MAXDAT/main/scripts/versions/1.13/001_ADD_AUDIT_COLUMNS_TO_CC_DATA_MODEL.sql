--CC_A_SCHEDULE Table
ALTER TABLE CC_A_SCHEDULE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_A_SCHEDULE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_A_SCHEDULE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_A_SCHEDULE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_A_SCHEDULE Trigger
DROP TRIGGER BIU_CC_A_SCHEDULE;

CREATE OR REPLACE TRIGGER BIU_CC_A_SCHEDULE 
  BEFORE INSERT OR UPDATE ON CC_A_SCHEDULE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.SCHEDULE_ID IS NULL THEN 
      SELECT SEQ_CC_A_SCHEDULE.NEXTVAL INTO :NEW.SCHEDULE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_A_SCHEDULE ENABLE;

--CC_A_SCHEDULED_JOB Table
ALTER TABLE CC_A_SCHEDULED_JOB ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_A_SCHEDULED_JOB ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_A_SCHEDULED_JOB ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_A_SCHEDULED_JOB ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_A_SCHEDULED_JOB Trigger
DROP TRIGGER BIU_CC_A_SCHEDULED_JOB;

CREATE OR REPLACE TRIGGER BIU_CC_A_SCHEDULED_JOB 
  BEFORE INSERT OR UPDATE ON CC_A_SCHEDULED_JOB 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.SCHEDULED_JOB_ID IS NULL THEN 
      SELECT SEQ_CC_A_SCHEDULED_JOB.NEXTVAL INTO :NEW.SCHEDULED_JOB_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_A_SCHEDULED_JOB ENABLE;

--CC_C_CONTACT_QUEUE Table
ALTER TABLE CC_C_CONTACT_QUEUE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_C_CONTACT_QUEUE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_C_CONTACT_QUEUE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_C_CONTACT_QUEUE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_CONTACT_QUEUE Trigger

DROP TRIGGER BIU_CC_C_CONTACT_QUEUE;

CREATE OR REPLACE TRIGGER BIU_CC_C_CONTACT_QUEUE 
  BEFORE INSERT OR UPDATE ON CC_C_CONTACT_QUEUE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.C_CONTACT_QUEUE_ID IS NULL THEN 
      SELECT SEQ_CC_C_CONTACT_QUEUE.NEXTVAL INTO :NEW.C_CONTACT_QUEUE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_C_CONTACT_QUEUE ENABLE;

--CC_C_FILTER Table
ALTER TABLE CC_C_FILTER ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_C_FILTER ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_C_FILTER ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_C_FILTER ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_FILTER Trigger
DROP TRIGGER BIU_CC_C_FILTER;

CREATE OR REPLACE TRIGGER BIU_CC_C_FILTER 
  BEFORE INSERT OR UPDATE ON CC_C_FILTER 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.FILTER_ID IS NULL THEN 
      SELECT SEQ_CC_C_FILTER.NEXTVAL INTO :NEW.FILTER_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_C_FILTER ENABLE;

--CC_C_LOOKUP Table
ALTER TABLE CC_C_LOOKUP ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_C_LOOKUP ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_C_LOOKUP ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_C_LOOKUP ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_LOOKUP Trigger
DROP TRIGGER BIU_CC_C_LOOKUP;

CREATE OR REPLACE TRIGGER BIU_CC_C_LOOKUP 
  BEFORE INSERT OR UPDATE ON CC_C_LOOKUP 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.LOOKUP_ID IS NULL THEN 
      SELECT SEQ_CC_C_LOOKUP.NEXTVAL INTO :NEW.LOOKUP_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_C_LOOKUP ENABLE;

--CC_C_PROJECT_CONFIG Table
ALTER TABLE CC_C_PROJECT_CONFIG ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_C_PROJECT_CONFIG ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_C_PROJECT_CONFIG ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_C_PROJECT_CONFIG ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_PROJECT_CONFIG Trigger
DROP TRIGGER BIU_CC_C_PROJECT_CONFIG;

CREATE OR REPLACE TRIGGER BIU_CC_C_PROJECT_CONFIG 
  BEFORE INSERT OR UPDATE ON CC_C_PROJECT_CONFIG 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.PROJECT_CONFIG_ID IS NULL THEN 
      SELECT SEQ_CC_C_PROJECT_CONFIG.NEXTVAL INTO :NEW.PROJECT_CONFIG_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_C_PROJECT_CONFIG ENABLE;

--CC_C_UNIT_OF_WORK Table
ALTER TABLE CC_C_UNIT_OF_WORK ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_C_UNIT_OF_WORK ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_C_UNIT_OF_WORK ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_C_UNIT_OF_WORK ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_UNIT_OF_WORK Trigger
DROP TRIGGER BIU_CC_C_UNIT_OF_WORK;

CREATE OR REPLACE TRIGGER BIU_CC_C_UNIT_OF_WORK 
  BEFORE INSERT OR UPDATE ON CC_C_UNIT_OF_WORK 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.UNIT_OF_WORK_ID IS NULL THEN 
      SELECT SEQ_CC_C_UNIT_OF_WORK.NEXTVAL INTO :NEW.UNIT_OF_WORK_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_C_UNIT_OF_WORK ENABLE;

--CC_D_ACTIVITY_TYPE Table
ALTER TABLE CC_D_ACTIVITY_TYPE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_ACTIVITY_TYPE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_ACTIVITY_TYPE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_ACTIVITY_TYPE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_ACTIVITY_TYPE Trigger
DROP TRIGGER BI_CC_D_ACTIVITY_TYPE;

CREATE OR REPLACE TRIGGER BIU_CC_D_ACTIVITY_TYPE 
  BEFORE INSERT OR UPDATE ON CC_D_ACTIVITY_TYPE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_ACTIVITY_TYPE_ID IS NULL THEN 
      SELECT SEQ_CC_D_ACTIVITY_TYPE.NEXTVAL INTO :NEW.D_ACTIVITY_TYPE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_ACTIVITY_TYPE ENABLE;

--CC_D_ACTIVITY_TYPE View
CREATE OR REPLACE VIEW CC_D_ACTIVITY_TYPE_SV AS
SELECT CC_D_ACTIVITY_TYPE.* FROM CC_D_ACTIVITY_TYPE;

--CC_D_AGENT Table
ALTER TABLE CC_D_AGENT ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_AGENT ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_AGENT ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_AGENT ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_AGENT Trigger
DROP TRIGGER BI_CC_D_AGENT;

CREATE OR REPLACE TRIGGER BIU_CC_D_AGENT 
  BEFORE INSERT OR UPDATE ON CC_D_AGENT 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_AGENT_ID IS NULL THEN 
      SELECT SEQ_CC_D_AGENT.NEXTVAL INTO :NEW.D_AGENT_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_AGENT ENABLE;

--CC_D_AGENT View
CREATE OR REPLACE VIEW CC_D_AGENT_SV AS
SELECT CC_D_AGENT.* FROM CC_D_AGENT;

--CC_D_CONTACT_QUEUE Table
ALTER TABLE CC_D_CONTACT_QUEUE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_CONTACT_QUEUE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_CONTACT_QUEUE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_CONTACT_QUEUE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_CONTACT_QUEUE Trigger
DROP TRIGGER BI_CC_D_CONTACT_QUEUE;

CREATE OR REPLACE TRIGGER BIU_CC_D_CONTACT_QUEUE 
  BEFORE INSERT OR UPDATE ON CC_D_CONTACT_QUEUE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_CONTACT_QUEUE_ID IS NULL THEN 
      SELECT SEQ_CC_D_CONTACT_QUEUE.NEXTVAL INTO :NEW.D_CONTACT_QUEUE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_CONTACT_QUEUE ENABLE;

--CC_D_CONTACT_QUEUE View
CREATE OR REPLACE VIEW CC_D_CONTACT_QUEUE_SV AS
SELECT CC_D_CONTACT_QUEUE.* FROM CC_D_CONTACT_QUEUE;

--CC_D_COUNTRY Table
ALTER TABLE CC_D_COUNTRY ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_COUNTRY ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_COUNTRY ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_COUNTRY ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_COUNTRY Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_COUNTRY 
  BEFORE INSERT OR UPDATE ON CC_D_COUNTRY 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_COUNTRY ENABLE;

--CC_D_DISTRICT Table
ALTER TABLE CC_D_DISTRICT ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_DISTRICT ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_DISTRICT ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_DISTRICT ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_DISTRICT Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_DISTRICT 
  BEFORE INSERT OR UPDATE ON CC_D_DISTRICT 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_DISTRICT ENABLE;

--CC_D_GEOGRAPHY_MASTER Table
ALTER TABLE CC_D_GEOGRAPHY_MASTER ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_GEOGRAPHY_MASTER ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_GEOGRAPHY_MASTER ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_GEOGRAPHY_MASTER ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_GEOGRAPHY_MASTER Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_GEOGRAPHY_MASTER 
  BEFORE INSERT OR UPDATE ON CC_D_GEOGRAPHY_MASTER 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_GEOGRAPHY_MASTER ENABLE;

--CC_D_GEOGRAPHY_MASTER View
CREATE OR REPLACE VIEW CC_D_GEOGRAPHY_MASTER_SV AS
SELECT CC_D_GEOGRAPHY_MASTER.* FROM CC_D_GEOGRAPHY_MASTER;

--CC_D_GROUP Table
ALTER TABLE CC_D_GROUP ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_GROUP ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_GROUP ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_GROUP ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_GROUP Trigger
DROP TRIGGER BI_CC_D_GROUP;

CREATE OR REPLACE TRIGGER BIU_CC_D_GROUP 
  BEFORE INSERT OR UPDATE ON CC_D_GROUP 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_GROUP_ID IS NULL THEN 
      SELECT SEQ_CC_D_GROUP.NEXTVAL INTO :NEW.D_GROUP_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_GROUP ENABLE;

--CC_D_GROUP View
CREATE OR REPLACE VIEW CC_D_GROUP_SV AS
SELECT CC_D_GROUP.* FROM CC_D_GROUP;

--CC_D_IVR_SELF_SERVICE_PATH Table
ALTER TABLE CC_D_IVR_SELF_SERVICE_PATH ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_IVR_SELF_SERVICE_PATH ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_IVR_SELF_SERVICE_PATH ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_IVR_SELF_SERVICE_PATH ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_IVR_SELF_SERVICE_PATH Trigger
DROP TRIGGER BI_CC_D_IVR_SELF_SVC_PATH;

CREATE OR REPLACE TRIGGER BIU_CC_D_IVR_SELF_SVC_PATH 
  BEFORE INSERT OR UPDATE ON CC_D_IVR_SELF_SERVICE_PATH 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_IVR_SELF_SERVICE_PATH_ID IS NULL THEN 
      SELECT SEQ_CC_D_IVR_SELF_SERVICE_PATH.NEXTVAL INTO :NEW.D_IVR_SELF_SERVICE_PATH_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_IVR_SELF_SVC_PATH ENABLE;

--CC_D_IVR_SELF_SERVICE_PATH View
CREATE OR REPLACE VIEW CC_D_IVR_SELF_SERVICE_PATH_SV AS
SELECT CC_D_IVR_SELF_SERVICE_PATH.* FROM CC_D_IVR_SELF_SERVICE_PATH;

--CC_D_PROD_PLANNING_TARGET Table
ALTER TABLE CC_D_PROD_PLANNING_TARGET ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_PROD_PLANNING_TARGET ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_PROD_PLANNING_TARGET ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_PROD_PLANNING_TARGET ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_PROD_PLANNING_TARGET Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_PROD_PLANNING_TARGET 
  BEFORE INSERT OR UPDATE ON CC_D_PROD_PLANNING_TARGET 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_PROD_PLANNING_TARGET ENABLE;

--CC_D_PROGRAM Table
ALTER TABLE CC_D_PROGRAM ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_PROGRAM ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_PROGRAM ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_PROGRAM ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_PROGRAM Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_PROGRAM 
  BEFORE INSERT OR UPDATE ON CC_D_PROGRAM 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_PROGRAM ENABLE;

--CC_D_PROGRAM View
CREATE OR REPLACE VIEW CC_D_PROGRAM_SV AS
SELECT CC_D_PROGRAM.* FROM CC_D_PROGRAM;

--CC_D_PROJECT Table
ALTER TABLE CC_D_PROJECT ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_PROJECT ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_PROJECT ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_PROJECT ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_PROJECT Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_PROJECT 
  BEFORE INSERT OR UPDATE ON CC_D_PROJECT 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_PROJECT ENABLE;

--CC_D_PROJECT View
CREATE OR REPLACE VIEW CC_D_PROJECT_SV AS
SELECT CC_D_PROJECT.* FROM CC_D_PROJECT;

--CC_D_PROJECT_TARGETS Table
ALTER TABLE CC_D_PROJECT_TARGETS ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_PROJECT_TARGETS ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_PROJECT_TARGETS ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_PROJECT_TARGETS ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_PROJECT_TARGETS Trigger
DROP TRIGGER BI_CC_D_PROJECT_TARGETS;

CREATE OR REPLACE TRIGGER BIU_CC_D_PROJECT_TARGETS 
  BEFORE INSERT OR UPDATE ON CC_D_PROJECT_TARGETS 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_PROJECT_TARGETS_ID IS NULL THEN 
      SELECT SEQ_CC_D_PROJECT_TARGETS.NEXTVAL INTO :NEW.D_PROJECT_TARGETS_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_PROJECT_TARGETS ENABLE;

--CC_D_PROJECT_TARGETS View
CREATE OR REPLACE VIEW CC_D_PROJECT_TARGETS_SV AS
SELECT CC_D_PROJECT_TARGETS.* FROM CC_D_PROJECT_TARGETS;

--CC_D_REGION Table
ALTER TABLE CC_D_REGION ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_REGION ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_REGION ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_REGION ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_REGION Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_REGION 
  BEFORE INSERT OR UPDATE ON CC_D_REGION 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_REGION ENABLE;

--CC_D_SITE Table
ALTER TABLE CC_D_SITE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_SITE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_SITE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_SITE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_SITE Trigger
DROP TRIGGER BI_CC_D_SITE;

CREATE OR REPLACE TRIGGER BIU_CC_D_SITE 
  BEFORE INSERT OR UPDATE ON CC_D_SITE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.D_SITE_ID IS NULL THEN 
      SELECT SEQ_CC_D_SITE.NEXTVAL INTO :NEW.D_SITE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_SITE ENABLE;

--CC_D_SITE View
CREATE OR REPLACE VIEW CC_D_SITE_SV AS
SELECT CC_D_SITE.* FROM CC_D_SITE;

--CC_D_STATE Table
ALTER TABLE CC_D_STATE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_STATE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_STATE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_STATE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_STATE Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_STATE 
  BEFORE INSERT OR UPDATE ON CC_D_STATE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_STATE ENABLE;

--CC_C_CONTACT_QUEUE Table
ALTER TABLE CC_D_TARGET ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_TARGET ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_TARGET ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_TARGET ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_C_CONTACT_QUEUE Trigger
CREATE OR REPLACE TRIGGER BIU_CC_D_TARGET 
  BEFORE INSERT OR UPDATE ON CC_D_TARGET 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_TARGET ENABLE;

--CC_D_UNIT_OF_WORK Table
ALTER TABLE CC_D_UNIT_OF_WORK ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_D_UNIT_OF_WORK ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_D_UNIT_OF_WORK ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_D_UNIT_OF_WORK ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_D_UNIT_OF_WORK Trigger
DROP TRIGGER BI_CC_D_UNIT_OF_WORK;

CREATE OR REPLACE TRIGGER BIU_CC_D_UNIT_OF_WORK 
  BEFORE INSERT OR UPDATE ON CC_D_UNIT_OF_WORK 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.UOW_ID IS NULL THEN 
      SELECT SEQ_CC_D_UNIT_OF_WORK.NEXTVAL INTO :NEW.UOW_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_D_UNIT_OF_WORK ENABLE;

--CC_D_UNIT_OF_WORK View
CREATE OR REPLACE VIEW CC_D_UNIT_OF_WORK_SV AS
SELECT CC_D_UNIT_OF_WORK.* FROM CC_D_UNIT_OF_WORK;

--CC_F_ACTUALS_QUEUE_INTERVAL Table
ALTER TABLE CC_F_ACTUALS_QUEUE_INTERVAL ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_F_ACTUALS_QUEUE_INTERVAL ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_F_ACTUALS_QUEUE_INTERVAL ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_F_ACTUALS_QUEUE_INTERVAL ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_F_ACTUALS_QUEUE_INTERVAL Trigger
DROP TRIGGER BI_CC_F_ACTUALS_Q_INTERVAL;

CREATE OR REPLACE TRIGGER BIU_CC_F_ACTUALS_Q_INTERVAL 
  BEFORE INSERT OR UPDATE ON CC_F_ACTUALS_QUEUE_INTERVAL 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.F_CALL_CENTER_ACTLS_INTRVL_ID IS NULL THEN 
      SELECT SEQ_CC_F_ACTUALS_Q_INTERVAL.NEXTVAL INTO :NEW.F_CALL_CENTER_ACTLS_INTRVL_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_F_ACTUALS_Q_INTERVAL ENABLE;

--CC_F_ACTUALS_QUEUE_INTERVAL View
CREATE OR REPLACE VIEW CC_F_ACTUALS_QUEUE_INTERVAL_SV AS
SELECT CC_F_ACTUALS_QUEUE_INTERVAL.* FROM CC_F_ACTUALS_QUEUE_INTERVAL;

--CC_S_CONTACT_QUEUE Table
ALTER TABLE CC_S_CONTACT_QUEUE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_S_CONTACT_QUEUE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_S_CONTACT_QUEUE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_S_CONTACT_QUEUE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_S_CONTACT_QUEUE Trigger
DROP TRIGGER BIU_CC_S_CONTACT_QUEUE;

CREATE OR REPLACE TRIGGER BIU_CC_S_CONTACT_QUEUE 
  BEFORE INSERT OR UPDATE ON CC_S_CONTACT_QUEUE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.CONTACT_QUEUE_ID IS NULL THEN 
      SELECT SEQ_CC_S_CONTACT_QUEUE.NEXTVAL INTO :NEW.CONTACT_QUEUE_ID FROM DUAL;
    END IF;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_S_CONTACT_QUEUE ENABLE;

--CC_S_IVR_SELF_SERVICE_PATH Table
ALTER TABLE CC_S_IVR_SELF_SERVICE_PATH ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_S_IVR_SELF_SERVICE_PATH ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_S_IVR_SELF_SERVICE_PATH ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_S_IVR_SELF_SERVICE_PATH ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_S_IVR_SELF_SERVICE_PATH Trigger
CREATE OR REPLACE TRIGGER BIU_CC_S_IVR_SELF_SERVICE_PATH 
  BEFORE INSERT OR UPDATE ON CC_S_IVR_SELF_SERVICE_PATH 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_S_IVR_SELF_SERVICE_PATH ENABLE;

--CC_S_IVR_SELF_SERVICE_USAGE Table
ALTER TABLE CC_S_IVR_SELF_SERVICE_USAGE ADD (ROW_INSERTED_DT DATE);
ALTER TABLE CC_S_IVR_SELF_SERVICE_USAGE ADD (ROW_INSERTED_BY VARCHAR2(30));
ALTER TABLE CC_S_IVR_SELF_SERVICE_USAGE ADD (ROW_UPDATED_DT DATE);
ALTER TABLE CC_S_IVR_SELF_SERVICE_USAGE ADD (ROW_UPDATED_BY VARCHAR2(30));

--CC_S_IVR_SELF_SERVICE_USAGE Trigger
CREATE OR REPLACE TRIGGER BIU_CC_S_IVR_SELF_SVC_USAGE 
  BEFORE INSERT OR UPDATE ON CC_S_IVR_SELF_SERVICE_USAGE 
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
  END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;
/
ALTER TRIGGER BIU_CC_S_IVR_SELF_SVC_USAGE ENABLE;

INSERT INTO CC_L_PATCH_LOG ( PATCH_VERSION , SCRIPT_SEQUENCE , SCRIPT_NAME)
VALUES ('1.13.0','001','001_ADD_AUDIT_COLUMNS_TO_CC_DATA_MODEL');

COMMIT;
