<project name="Test" default="test" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Build MAXDAT Contact Center ETL Deployment Package
    </description>
	
	<dirname property="projectdir" file="build.xml"/>
	<property name="project" value="MAXDAT"/>
	<property name="version" value="0.1"/>
	
	<!-- get build dependencies -->
	<import file="..\common_build.xml"/>
	
	<!-- check if running dev environment -->
	<condition property="env.dev">
		<equals arg1="${env}" arg2="dev"/>
	</condition>
	
	<property file="main/conf/build.properties"/>
	
	<propcop name="db.username" from="db.${env}.username"/>
	<propcop name="db.password" from="db.${env}.password"/>
	<propcop name="db.test.username" from="db.${env}.test.username"/>
	<propcop name="db.test.password" from="db.${env}.test.password"/>
	<propcop name="db.type" from="db.${env}.type"/>
	<propcop name="db.driver" from="db.${env}.driver"/>
	<propcop name="db.url" from="db.${env}.url"/>
	<propcop name="db.server" from="db.${env}.server"/>
	<propcop name="db.database" from="db.${env}.database"/>
	<propcop name="db.port" from="db.${env}.port"/>

	<!-- directory to tests -->
	<property name="testdir" value="test"/>

	<target name="clean">
        <delete dir="build"/>
    </target>
	
		
	<target name="create-build" depends="clean">
		<mkdir dir="build"/>
		<mkdir dir="build/db"/>
		<mkdir dir="build/kettle"/>
		<mkdir dir="build/logs/tests"/>
		<mkdir dir="build/logs/db"/>
		<!--
		<mkdir dir="build/test-scripts"/>
		<mkdir dir="build/project"/>
		-->
	</target>


	<target name="package" depends="create-build"> <!-- depends="test" -->

		<copy todir="build/kettle/main" preservelastmodified="true">
			<fileset dir="main">
				<includesfile name="conf/${project}/main.includesfile" />
			</fileset>
		</copy>
		<copy todir="build/kettle/implementation/${project}" preservelastmodified="true">
			<fileset dir="implementation/${project}">
				<includesfile name="conf/${project}/implementation.includesfile" />
			</fileset>
		</copy>
		<!-- include the main createdb and grant scripts 
		<copy todir="build/db/scripts" preservelastmodified="true">
			<fileset dir="main/scripts/createdb"/>
			<fileset dir="main/scripts/grant"/>
		</copy>-->
		<!-- include any main version-related scripts-->
		<copy todir="build/db" preservelastmodified="true" failonerror="false">
			<fileset dir="main/scripts/versions/${version}"/>
		</copy>
		<!-- include any project specific scripts -->
		<copy todir="build/db" preservelastmodified="true" flatten="true">
			<fileset dir="main/scripts">
				<includesfile name="conf/${project}/db.includesfile" />
			</fileset>
		</copy>
		<copy todir="build/db" preservelastmodified="true" failonerror="false">
			<fileset dir="implementation/${project}/scripts/versions/${version}"/>
		</copy>
		<copy todir="build/kettle/test" preservelastmodified="true">
			<fileset dir="test">
				<includesfile name="conf/${project}/test.includesfile" />
			</fileset>
		</copy>
		
		<!--  remove windows eof characters in prep for deployment to unix 
		<fixcrlf srcdir="build" includes="**/*"
			 eol="lf" eof="remove" />
		-->
		
		<tstamp> 
            <format property="today" pattern="yyyyMMdd"/> 
        </tstamp> 
		
		<zip destfile="build/DB_${project}_${today}_[developer]_v${version}.zip">
			<fileset dir="build/db"/>
		</zip>

		<zip destfile="build/AS_${project}_${today}_[developer]_v${version}.zip">
			<fileset dir="build/kettle"/>
		</zip>


	</target>


	<target name="create-test-scripts" depends="create-build" if="env.dev">
		<copy todir="build/test-scripts">
			<fileset dir="test/scripts"/>
		</copy>
		
		<copy overwrite="true" file="main/scripts/drop_dimensional_tables_sequences_triggers_views.sql" tofile="build/test-scripts/drop_test_dimensional_tables_sequences_triggers_views.sql"/>
		<copy overwrite="true" file="main/scripts/drop_staging_tables_sequences_triggers_views.sql" tofile="build/test-scripts/drop_test_staging_tables_sequences_triggers_views.sql"/>
		
		<!-- Due to conflicting delimeters, we need to split the create scripts into two files each: one with triggers and the other with everything else-->
		<!-- The regular expressions below rely on the assumption that all triggers are grouped together at the bottom of the source create script(s) -->
		<copy overwrite="true" file="main/scripts/createdb/create_staging_tables_sequences_triggers.sql" tofile="build/test-scripts/create_test_staging_tables_sequences_views.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_staging_tables_sequences_triggers.sql" tofile="build/test-scripts/create_test_staging_triggers.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_dimensional_tables_sequences_triggers_views.sql" tofile="build/test-scripts/create_test_dimensional_tables_sequences_views.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_dimensional_tables_sequences_triggers_views.sql" tofile="build/test-scripts/create_test_dimensional_triggers.sql"/>
		
		<replaceregexp file="build/test-scripts/create_test_staging_tables_sequences_views.sql" match="CREATE OR REPLACE TRIGGER.*" replace="" flags="s" />
		<replaceregexp file="build/test-scripts/create_test_staging_triggers.sql" match="^(.*?)CREATE OR REPLACE TRIGGER" replace="CREATE OR REPLACE TRIGGER" flags="s" />
		<replaceregexp file="build/test-scripts/create_test_dimensional_tables_sequences_views.sql" match="CREATE OR REPLACE TRIGGER.*" replace="" flags="s" />
		<replaceregexp file="build/test-scripts/create_test_dimensional_triggers.sql" match="^(.*?)CREATE OR REPLACE TRIGGER" replace="CREATE OR REPLACE TRIGGER" flags="s" />
		
		<replace dir="build/test-scripts" token="PROJECTUSER" value="TESTPROJECTUSER">
			<exclude name = "**/*user*"/>
			<exclude name = "**/*drop*"/>
		</replace>

		<replace dir="build/test-scripts" token="ENABLE;" value="ENABLE /"/>
		<replace dir="build/test-scripts" token="PROJ_STG" value="TEST"/>
		<replace dir="build/test-scripts" token="PROJ_DIM" value="TEST"/>
	</target>
	
	<target name="create-test-database" depends="init, create-test-scripts" if="env.dev">	
		<echo message="${db.url}"/>

		<sql driver="${db.driver}" url="${db.url}" userid="${db.test.username}" password="${db.test.password}" onerror="continue" print="true" classpathref="classpath.db" output="build/logs/db/test-drop-tables-sequences.log">
			<transaction  src="build/test-scripts/drop_test_dimensional_tables_sequences_triggers_views.sql" />
			<transaction  src="build/test-scripts/drop_test_staging_tables_sequences_triggers_views.sql" />
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.test.username}" password="${db.test.password}" onerror="continue" print="true" delimiter=";" classpathref="classpath.db" output="build/logs/db/test-create-tables-sequences-views.log">
			<transaction  src="build/test-scripts/create_test_staging_tables_sequences_views.sql" />
			<transaction  src="build/test-scripts/create_test_dimensional_tables_sequences_views.sql" />
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.test.username}" password="${db.test.password}" onerror="continue" print="true" delimiter="/" classpathref="classpath.db" output="build/logs/db/test-create-triggers.log">
			<transaction  src="build/test-scripts/create_test_staging_triggers.sql" />
			<transaction  src="build/test-scripts/create_test_dimensional_triggers.sql" />
		</sql> 
	</target>

	<target name="create-scripts" depends="create-build">
		<copy overwrite="true" file="main/scripts/drop_dimensional_tables_sequences_triggers_views.sql" tofile="build/scripts/drop_dimensional_tables_sequences_triggers_views.sql"/>
		<copy overwrite="true" file="main/scripts/drop_staging_tables_sequences_triggers_views.sql" tofile="build/scripts/drop_staging_tables_sequences_triggers_views.sql"/>
		
		<!-- Due to conflicting delimeters, we need to split the create scripts into two files each: one with triggers and the other with everything else-->
		<!-- The regular expressions below rely on the assumption that all triggers are grouped together at the bottom of the source create script(s) -->
		<copy overwrite="true" file="main/scripts/createdb/create_staging_tables_sequences_triggers.sql" tofile="build/scripts/create_staging_tables_sequences_views.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_staging_tables_sequences_triggers.sql" tofile="build/scripts/create_staging_triggers.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_dimensional_tables_sequences_triggers_views.sql" tofile="build/scripts/create_dimensional_tables_sequences_views.sql"/>
		<copy overwrite="true" file="main/scripts/createdb/create_dimensional_tables_sequences_triggers_views.sql" tofile="build/scripts/create_dimensional_triggers.sql"/>
		
		<replaceregexp file="build/scripts/create_staging_tables_sequences_views.sql" match="CREATE OR REPLACE TRIGGER.*" replace="" flags="s" />
		<replaceregexp file="build/scripts/create_staging_triggers.sql" match="^(.*?)CREATE OR REPLACE TRIGGER" replace="CREATE OR REPLACE TRIGGER" flags="s" />
		<replaceregexp file="build/scripts/create_dimensional_tables_sequences_views.sql" match="CREATE OR REPLACE TRIGGER.*" replace="" flags="s" />
		<replaceregexp file="build/scripts/create_dimensional_triggers.sql" match="^(.*?)CREATE OR REPLACE TRIGGER" replace="CREATE OR REPLACE TRIGGER" flags="s" />

		<replace dir="build/scripts" token="ENABLE;" value="ENABLE /"/>
	</target>
	
	<target name="create-database" depends="init, create-scripts">
		<echo message="${db.url}"/>

		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" classpathref="classpath.db" output="build/logs/db/drop-tables-sequences.log">
			<transaction  src="build/scripts/drop_dimensional_tables_sequences_triggers_views.sql" />
			<transaction  src="build/scripts/drop_staging_tables_sequences_triggers_views.sql" />
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" delimiter=";" classpathref="classpath.db" output="build/logs/db/create-tables-sequences-views.log">
			<transaction  src="build/scripts/create_staging_tables_sequences_views.sql" />
			<transaction  src="build/scripts/create_dimensional_tables_sequences_views.sql" />
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" delimiter="/" classpathref="classpath.db" output="build/logs/db/create-triggers.log">
			<transaction  src="build/scripts/create_staging_triggers.sql" />
			<transaction  src="build/scripts/create_dimensional_triggers.sql" />
		</sql> 
	</target>

	<target name="create-tables" depends="init">
		<echo message="${db.url}"/>

		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" classpathref="classpath.db" output="build/logs/db/drop-create.log">
			<transaction  src="scripts/create_staging_tables.sql"/>
			<transaction  src="scripts/create_dimensional_tables.sql"/>
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" delimiter="/" classpathref="classpath.db" output="build/logs/db/create-triggers.log">
			<transaction  src="scripts/create_staging_triggers.sql"/>
			<transaction  src="scripts/create_dimensional_triggers.sql"/>
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" onerror="continue" print="true" classpathref="classpath.db" output="build/logs/db/insert-dimensions.log">
			<transaction  src="scripts/insert_d_date.sql"/>
			<transaction  src="scripts/insert_unknown_dimensions.sql"/>
			<transaction  src="scripts/insert_d_project.sql"/>
		</sql>
	</target>
	
</project>
