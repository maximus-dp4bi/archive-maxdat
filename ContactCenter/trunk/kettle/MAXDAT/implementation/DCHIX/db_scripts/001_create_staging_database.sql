CREATE TABLE CC_A_ADHOC_JOB 
    ( 
     ADHOC_JOB_ID NUMBER  NOT NULL , 
     ADHOC_JOB_TYPE VARCHAR2 (50)  NOT NULL , 
     START_DATETIME_PARAM VARCHAR2 (50)  NOT NULL , 
     END_DATETIME_PARAM VARCHAR2 (50)  NOT NULL , 
     CREATION_DATE DATE  NOT NULL , 
     IS_PENDING CHAR (1) DEFAULT '1'  NOT NULL , 
     IS_RUNNING CHAR (1) DEFAULT '0'  NOT NULL , 
     JOB_START_DATE DATE , 
     JOB_END_DATE DATE , 
     SUCCESS CHAR (1) DEFAULT '0' ,
     REPORTING_PERIOD_TYPE_PARAM VARCHAR(50),
     ACD_SOURCE VARCHAR2(30), 
     WFM_SOURCE VARCHAR2(100)
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_A_ADHOC_JOB 
    ADD CONSTRAINT CC_A_ADHOC_JOB_PK PRIMARY KEY ( ADHOC_JOB_ID ) ;



CREATE TABLE CC_A_SCHEDULE 
    ( 
     SCHEDULE_ID NUMBER  NOT NULL , 
     JOB_TYPE VARCHAR2 (50)  NOT NULL , 
     EXECUTION_TIME VARCHAR2 (50)  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_A_SCHEDULE 
    ADD CONSTRAINT REGEX_CHECK_EXECUTION_TIME 
    CHECK (REGEXP_LIKE(EXECUTION_TIME,'^([01][0-9]|2[0-3]):00:00$','i'))
;


ALTER TABLE CC_A_SCHEDULE 
    ADD CONSTRAINT CC_A_SCHEDULE_PK PRIMARY KEY ( SCHEDULE_ID ) ;


ALTER TABLE CC_A_SCHEDULE 
    ADD CONSTRAINT CC_A_SCHEDULE__UN UNIQUE ( EXECUTION_TIME ) ;



CREATE TABLE CC_A_SCHEDULED_JOB 
    ( 
     SCHEDULED_JOB_ID NUMBER  NOT NULL , 
     SCHEDULED_JOB_TYPE VARCHAR2 (50)  NOT NULL , 
     START_DATETIME_PARAM VARCHAR2 (50)  NOT NULL , 
     END_DATETIME_PARAM VARCHAR2 (50)  NOT NULL , 
     JOB_START_DATE DATE  NOT NULL , 
     JOB_END_DATE DATE , 
     IS_RUNNING CHAR (1) DEFAULT '0'  NOT NULL , 
     SUCCESS CHAR (1) DEFAULT '0' , 
     DATA_VALIDATION VARCHAR2 (50) DEFAULT 'NOT_TESTED' CHECK ( DATA_VALIDATION IN ('FAILURE', 'NOT_TESTED', 'SUCCESS')) 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_A_SCHEDULED_JOB 
    ADD CONSTRAINT CC_A_ADHOC_JOBv1_PK PRIMARY KEY ( SCHEDULED_JOB_ID ) ;


ALTER TABLE CC_A_SCHEDULED_JOB 
    ADD CONSTRAINT CC_A_SCHEDULED_JOB__UN UNIQUE ( JOB_START_DATE ) ;
    

CREATE TABLE CC_A_SOURCE_LKUP
  (CC_SRLKUP_ID    NUMBER NOT NULL,
   PROJECT_NAME       VARCHAR2(30) NOT NULL,
   ACD_SOURCE  VARCHAR2(30) NOT NULL,
   WFM_SOURCE      VARCHAR2(30) NOT NULL,
   START_DATE DATE,
   END_DATE   DATE,
   ROW_INSERTED_DT DATE NOT NULL,
   ROW_UPDATED_DT DATE NOT NULL,
   ROW_INSERTED_BY VARCHAR2(30) NOT NULL,
   ROW_UPDATED_BY VARCHAR2(30) NOT NULL)
TABLESPACE MAXDAT_DATA;    



CREATE TABLE CC_C_ACTIVITY_TYPE 
    ( 
     ACTIVITY_TYPE_ID NUMBER (19)  NOT NULL , 
     ACTIVITY_TYPE_NAME VARCHAR2 (100)  NOT NULL , 
     ACTIVITY_TYPE_DESCRIPTION VARCHAR2 (1000) , 
     ACTIVITY_TYPE_CATEGORY VARCHAR2 (50) , 
     IS_PAID_FLAG CHAR (1) , 
     IS_AVAILABLE_FLAG CHAR (1) , 
     IS_READY_FLAG CHAR (1) , 
     IS_ABSENCE_FLAG CHAR (1) , 
     EXTRACT_DT DATE  NOT NULL , 
     LAST_UPDATE_DT DATE  NOT NULL , 
     LAST_UPDATE_BY VARCHAR2 (30)  NOT NULL , 
     RECORD_EFF_DT DATE  NOT NULL , 
     RECORD_END_DT DATE  NOT NULL ,
     SCHEDULED_TO_WORK CHAR (1),
     IS_PRODUCTIVE CHAR (1)
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_C_ACTIVITY_TYPE 
    ADD CONSTRAINT CC_C_ACTIVITY_TYPE_PK PRIMARY KEY ( ACTIVITY_TYPE_ID ) ;


ALTER TABLE CC_C_ACTIVITY_TYPE 
    ADD CONSTRAINT CC_C_ACTIVITY_TYPE__UN UNIQUE ( ACTIVITY_TYPE_NAME ) ;
       



CREATE TABLE CC_C_CONTACT_QUEUE 
    ( 
     C_CONTACT_QUEUE_ID NUMBER (19)  NOT NULL , 
     QUEUE_NUMBER NUMBER (19)  NOT NULL , 
     QUEUE_NAME VARCHAR2 (100) , 
     QUEUE_TYPE VARCHAR2 (50) , 
     SERVICE_PERCENT NUMBER , 
     SERVICE_SECONDS NUMBER , 
     INTERVAL_MINUTES NUMBER , 
     UNIT_OF_WORK_NAME VARCHAR2 (50)  NOT NULL , 
     PROJECT_NAME VARCHAR2 (50)  NOT NULL , 
     PROGRAM_NAME VARCHAR2 (50)  NOT NULL , 
     REGION_NAME VARCHAR2 (50)  NOT NULL , 
     STATE_NAME VARCHAR2 (50)  NOT NULL , 
     PROVINCE_NAME VARCHAR2 (50)  NOT NULL , 
     DISTRICT_NAME VARCHAR2 (50)  NOT NULL , 
     COUNTRY_NAME VARCHAR2 (50)  NOT NULL , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_C_CONTACT_QUEUE__IDXv1 ON CC_C_CONTACT_QUEUE 
    ( 
     QUEUE_NUMBER ASC , 
     RECORD_EFF_DT DESC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_C_CONTACT_QUEUE__IDXv2 ON CC_C_CONTACT_QUEUE 
    ( 
     QUEUE_NUMBER ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_C_CONTACT_QUEUE 
    ADD CONSTRAINT CC_C_CONTACT_QUEUEv1_PK PRIMARY KEY ( C_CONTACT_QUEUE_ID ) ;



CREATE TABLE CC_C_FILTER 
    ( 
     FILTER_ID NUMBER (19)  NOT NULL , 
     FILTER_TYPE VARCHAR2 (40)  NOT NULL , 
     VALUE VARCHAR2 (50) 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_C_FILTER__IDXv1 ON CC_C_FILTER 
    ( 
     FILTER_TYPE ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_C_FILTER 
    ADD CONSTRAINT CC_C_FILTER_PK PRIMARY KEY ( FILTER_ID ) ;


ALTER TABLE CC_C_FILTER 
    ADD CONSTRAINT CC_C_FILTER__UN UNIQUE ( FILTER_TYPE , VALUE ) ;



CREATE TABLE CC_C_LOOKUP 
    ( 
     LOOKUP_ID NUMBER (19)  NOT NULL , 
     LOOKUP_TYPE VARCHAR2 (40)  NOT NULL , 
     LOOKUP_KEY VARCHAR2 (50)  NOT NULL , 
     LOOKUP_VALUE VARCHAR2 (50) 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_C_LOOKUP 
    ADD CONSTRAINT CC_C_LOOKUP_PK PRIMARY KEY ( LOOKUP_ID ) ;


ALTER TABLE CC_C_LOOKUP 
    ADD CONSTRAINT CC_C_LOOKUP__UN UNIQUE ( LOOKUP_TYPE , LOOKUP_KEY ) ;



CREATE TABLE CC_C_PROJECT_CONFIG 
    ( 
     PROJECT_CONFIG_ID NUMBER (19)  NOT NULL , 
     PROJECT_NAME VARCHAR2 (50)  NOT NULL , 
     PROGRAM_NAME VARCHAR2 (50)  NOT NULL , 
     REGION_NAME VARCHAR2 (50)  NOT NULL , 
     STATE_NAME VARCHAR2 (50)  NOT NULL , 
     PROVINCE_NAME VARCHAR2 (50)  NOT NULL , 
     DISTRICT_NAME VARCHAR2 (50)  NOT NULL , 
     COUNTRY_NAME VARCHAR2 (50)  NOT NULL , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_C_PROJECT_CONFIG 
    ADD CONSTRAINT CC_C_PROJECT_CONFIG_PK PRIMARY KEY ( PROJECT_CONFIG_ID ) ;


ALTER TABLE CC_C_PROJECT_CONFIG 
    ADD CONSTRAINT CC_S_PROJECT_SITE_CONFIG__UN UNIQUE ( PROJECT_NAME , PROGRAM_NAME , RECORD_EFF_DT ) ;



CREATE TABLE CC_C_UNIT_OF_WORK 
    ( 
     UNIT_OF_WORK_ID NUMBER (19)  NOT NULL , 
     UNIT_OF_WORK_NAME VARCHAR2 (50)  NOT NULL , 
     UNIT_OF_WORK_CATEGORY VARCHAR2 (50) , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_C_UNIT_OF_WORK__IDX ON CC_C_UNIT_OF_WORK 
    ( 
     UNIT_OF_WORK_NAME ASC , 
     RECORD_EFF_DT ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_C_UNIT_OF_WORK 
    ADD CONSTRAINT CC_C_UNIT_OF_WORK_PK PRIMARY KEY ( UNIT_OF_WORK_ID ) ;


ALTER TABLE CC_C_UNIT_OF_WORK 
    ADD CONSTRAINT CC_C_UNIT_OF_WORK__UN UNIQUE ( UNIT_OF_WORK_NAME , RECORD_EFF_DT ) ;



CREATE TABLE CC_L_ERROR 
    ( 
     ID NUMBER (19)  NOT NULL , 
     MESSAGE VARCHAR2 (4000) , 
     ERROR_FILE_PATH VARCHAR2 (255 BYTE) , 
     ERROR_DATE DATE , 
     JOB_NAME VARCHAR2 (255 BYTE) , 
     TRANSFORM_NAME VARCHAR2 (255 BYTE) 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_L_ERROR 
    ADD CONSTRAINT CC_L_ERROR_PK PRIMARY KEY ( ID ) ;



CREATE TABLE CC_L_PATCH_LOG 
    ( 
     PATCH_LOG_ID NUMBER (19)  NOT NULL , 
     PATCH_VERSION VARCHAR2 (30)  NOT NULL , 
     SCRIPT_SEQUENCE NUMBER (7)  NOT NULL , 
     SCRIPT_NAME VARCHAR2 (255)  NOT NULL , 
     SCRIPT_RUN_DATE DATE DEFAULT SYSDATE  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_L_PATCH_LOG 
    ADD CONSTRAINT CC_L_PATCH_LOG_PK PRIMARY KEY ( PATCH_LOG_ID ) ;


ALTER TABLE CC_L_PATCH_LOG 
    ADD CONSTRAINT CC_L_PATCH_LOG__UN UNIQUE ( PATCH_VERSION , SCRIPT_NAME ) ;


ALTER TABLE CC_L_PATCH_LOG 
    ADD CONSTRAINT CC_L_PATCH_LOG__UNv1 UNIQUE ( PATCH_VERSION , SCRIPT_SEQUENCE ) ;



CREATE TABLE CC_L_TRANSFORMATION 
    ( 
     ID_BATCH NUMBER (19)  NOT NULL , 
     CHANNEL_ID VARCHAR2 (255 BYTE) , 
     TRANSNAME VARCHAR2 (255 BYTE) , 
     STATUS VARCHAR2 (15 BYTE) , 
     LINES_READ NUMBER (19) , 
     LINES_WRITTEN NUMBER (19) , 
     LINES_UPDATED NUMBER (19) , 
     LINES_INPUT NUMBER (19) , 
     LINES_OUTPUT NUMBER (19) , 
     LINES_REJECTED NUMBER (19) , 
     ERRORS NUMBER (19) , 
     STARTDATE DATE , 
     ENDDATE DATE , 
     LOGDATE DATE , 
     DEPDATE DATE , 
     REPLAYDATE DATE , 
     LOG_FIELD CLOB 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE UNIQUE INDEX CC_L_TRANSFORMATION_IDX1 ON CC_L_TRANSFORMATION 
    ( 
     ID_BATCH ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_L_TRANSFORMATION_IDX2 ON CC_L_TRANSFORMATION 
    ( 
     ERRORS ASC , 
     STATUS ASC , 
     TRANSNAME ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_L_TRANSFORMATION 
    ADD CONSTRAINT CC_L_TRANSFORMATION_PK PRIMARY KEY ( ID_BATCH ) ;
    


CREATE TABLE CC_S_ACD_AGENT_ACTIVITY 
    ( 
     ACD_AGENT_ACTIVITY_ID NUMBER (19)  NOT NULL , 
     AGENT_CALLS_DT DATE  NOT NULL , 
     AGENT_ID NUMBER (19)  NOT NULL , 
     LOGIN_SECONDS NUMBER (10,2) DEFAULT 0  NOT NULL , 
     EXTERNAL_SECONDS NUMBER (10,2) DEFAULT 0  NOT NULL , 
     INTERNAL_SECONDS NUMBER (10,2) DEFAULT 0  NOT NULL , 
     IDLE_SECONDS NUMBER (10,2) DEFAULT 0  NOT NULL , 
     NOT_READY_SECONDS NUMBER (10,2) DEFAULT 0  NOT NULL , 
     TALK_SECONDS NUMBER (10,2)  NOT NULL , 
     HOLD_SECONDS NUMBER (10,2)  NOT NULL , 
     WRAP_SECONDS NUMBER (10,2)  NOT NULL , 
     RING_SECONDS NUMBER (10,2)  NOT NULL , 
     HANDLE_CALLS_COUNT NUMBER (10) DEFAULT 0  NOT NULL , 
     HANDLE_TIME_SECONDS NUMBER (10,2) DEFAULT 0 NOT NULL ,
     EXTERNAL_CALLS_COUNT NUMBER (10) DEFAULT 0  NOT NULL , 
     INTERNAL_CALLS_COUNT NUMBER (10) DEFAULT 0  NOT NULL , 
     FIRST_LOGIN DATE,
     LAST_LOGOUT DATE,
     EXTRACT_DT DATE  NOT NULL , 
     LAST_UPDATE_DT DATE  NOT NULL , 
     LAST_UPDATE_BY VARCHAR2 (30)  NOT NULL
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE UNIQUE INDEX CC_S_ACD_AGENT_ACTIVITY_IDX ON CC_S_ACD_AGENT_ACTIVITY 
    ( 
     ACD_AGENT_ACTIVITY_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE UNIQUE INDEX CC_S_ACD_AGENT_ACTIVITY_IDX2 ON CC_S_ACD_AGENT_ACTIVITY 
    ( 
     AGENT_ID ASC , 
     AGENT_CALLS_DT DESC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_ACD_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_ACD_AGENT_ACTIVITY_PK PRIMARY KEY ( ACD_AGENT_ACTIVITY_ID ) ;


ALTER TABLE CC_S_ACD_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_ACD_AGENT_ACTIVITY_UN UNIQUE ( AGENT_CALLS_DT , AGENT_ID ) ;



CREATE TABLE CC_S_ACD_INTERVAL 
    ( 
     ACD_INTERVAL_ID NUMBER (19)  NOT NULL , 
     INTERVAL_DATE DATE DEFAULT SYSDATE  NOT NULL , 
     CONTACT_QUEUE_ID NUMBER (19)  NOT NULL , 
     INTERVAL_ID NUMBER (19)  NOT NULL , 
     AGENT_ID NUMBER (19)  NOT NULL , 
     CONTACTS_OFFERED NUMBER (7) DEFAULT 0  NOT NULL , 
     RAW_CONTACTS_OFFERED NUMBER (7) DEFAULT 0 NOT NULL,
     CONTACTS_HANDLED NUMBER (7) DEFAULT 0  NOT NULL , 
     CONTACTS_ABANDONED NUMBER (7) DEFAULT 0  NOT NULL , 
     MIN_HANDLE_TIME NUMBER (11,2) DEFAULT NULL , 
     MAX_HANDLE_TIME NUMBER (11,2) DEFAULT NULL , 
     MEAN_HANDLE_TIME NUMBER (11,2) DEFAULT NULL , 
     MEDIAN_HANDLE_TIME NUMBER (11,2) DEFAULT NULL , 
     STDDEV_HANDLE_TIME NUMBER (11,2) DEFAULT NULL , 
     MIN_SPEED_TO_HANDLE NUMBER (11,2) DEFAULT NULL , 
     MAX_SPEED_TO_HANDLE NUMBER (11,2) DEFAULT NULL , 
     MEAN_SPEED_TO_HANDLE NUMBER (11,2) DEFAULT 0NULL , 
     MEDIAN_SPEED_TO_HANDLE NUMBER (11,2) DEFAULT NULL , 
     STDDEV_SPEED_TO_HANDLE NUMBER (11,2) DEFAULT NULL , 
     MIN_SPEED_OF_ANSWER NUMBER (11,2) DEFAULT NULL , 
     MAX_SPEED_OF_ANSWER NUMBER (11,2) DEFAULT NULL , 
     MEAN_SPEED_OF_ANSWER NUMBER (11,2) DEFAULT NULL , 
     MEDIAN_SPEED_OF_ANSWER NUMBER (11,2) DEFAULT NULL , 
     STDDEV_SPEED_OF_ANSWER NUMBER (11,2) DEFAULT NULL , 
     SPEED_OF_ANSWER_PERIOD_1 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_2 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_3 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_4 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_5 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_6 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_7 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_8 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_9 NUMBER (7) DEFAULT 0  NOT NULL , 
     SPEED_OF_ANSWER_PERIOD_10 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_1 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_2 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_3 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_4 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_5 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_6 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_7 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_8 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_9 NUMBER (7) DEFAULT 0  NOT NULL , 
     CALLS_ABANDONED_PERIOD_10 NUMBER (7) DEFAULT 0  NOT NULL , 
     CONTACTS_TRANSFERRED NUMBER (7) DEFAULT NULL , 
     OUTFLOW_CONTACTS NUMBER (7) DEFAULT 0  NOT NULL , 
     ANSWER_WAIT_TIME_TOTAL NUMBER (12,2) DEFAULT 0  NOT NULL , 
     ABANDON_TIME_TOTAL NUMBER (12,2) DEFAULT 0  NOT NULL , 
     TALK_TIME_TOTAL NUMBER (12,2) DEFAULT 0  NOT NULL , 
     AFTER_CALL_WORK_TIME_TOTAL NUMBER (12,2) DEFAULT 0  NOT NULL , 
     SERVICE_LEVEL_ANSWERED_PERCENT NUMBER (5,2) DEFAULT 0  NOT NULL , 
     SERVICE_LEVEL_ANSWERED_COUNT NUMBER (7) DEFAULT 0  NOT NULL , 
     SERVICE_LEVEL_ABANDONED NUMBER (5,2) DEFAULT 0 , 
     CALLS_ON_HOLD NUMBER (7) DEFAULT NULL , 
     HOLD_TIME_TOTAL NUMBER (12,2) DEFAULT 0  NOT NULL , 
     CALL_TYPE VARCHAR2 (200) , 
     EXTRACT_DT DATE DEFAULT SYSDATE  NOT NULL , 
     LAST_UPDATE_DT DATE DEFAULT SYSDATE  NOT NULL , 
     LAST_UPDATE_BY VARCHAR2 (30)  NOT NULL ,
     MAX_ABANDON_TIME NUMBER DEFAULT NULL ,
     MAX_CALLS_QUEUED NUMBER (7) DEFAULT NULL,
     ABANDON_THRESHOLD NUMBER(7) DEFAULT NULL, 
     SHORT_CALLS NUMBER(7) DEFAULT NULL,
     CALLS_ANSWERED NUMBER(7,0),
     CALLS_RONA NUMBER(7,0) DEFAULT NULL,
     INCOMPLETE_CALLS NUMBER (7) DEFAULT NULL
     ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_S_ACD_INT_CC_S_CNTCT_Q_FK ON CC_S_ACD_INTERVAL 
    ( 
     CONTACT_QUEUE_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_S_ACD_INT_CC_S_INTERVAL_FK ON CC_S_ACD_INTERVAL 
    ( 
     ACD_INTERVAL_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_S_ACD_INT_CC_S_AGENT_FK ON CC_S_ACD_INTERVAL 
    ( 
     AGENT_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_ACD_INTERVAL 
    ADD CONSTRAINT CC_S_ACD_INTERVAL_PK PRIMARY KEY ( ACD_INTERVAL_ID ) ;


ALTER TABLE CC_S_ACD_INTERVAL 
    ADD CONSTRAINT CC_S_ACD_INTERVAL__UN UNIQUE ( INTERVAL_DATE , CONTACT_QUEUE_ID , INTERVAL_ID , AGENT_ID ) ;



CREATE TABLE CC_S_ACD_INTERVAL_PERIOD 
    ( 
     ACD_INTERVAL_PERIOD_ID NUMBER (19)  NOT NULL , 
     PERIOD_TYPE VARCHAR2 (50)  NOT NULL CHECK ( PERIOD_TYPE IN ('CALLS_ABANDONED', 'SPEED_OF_ANSWER')) , 
     PERIOD_1_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_1_UPPER_BOUND >= 0) , 
     PERIOD_2_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_2_UPPER_BOUND >= 0) , 
     PERIOD_3_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_3_UPPER_BOUND >= 0) , 
     PERIOD_4_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_4_UPPER_BOUND >= 0) , 
     PERIOD_5_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_5_UPPER_BOUND >= 0) , 
     PERIOD_6_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_6_UPPER_BOUND >= 0) , 
     PERIOD_7_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_7_UPPER_BOUND >= 0) , 
     PERIOD_8_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_8_UPPER_BOUND >= 0) , 
     PERIOD_9_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_9_UPPER_BOUND >= 0) , 
     PERIOD_10_UPPER_BOUND NUMBER (5) DEFAULT 0  NOT NULL CHECK ( PERIOD_10_UPPER_BOUND >= 0) , 
     EXTRACT_DT DATE  NOT NULL , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_S_ACD_INTERVAL_PERIOD 
    ADD CONSTRAINT CC_S_ACD_INTERVAL_PERIOD_PK PRIMARY KEY ( ACD_INTERVAL_PERIOD_ID ) ;


ALTER TABLE CC_S_ACD_INTERVAL_PERIOD 
    ADD CONSTRAINT CC_S_INTERVAL_PERIOD__UN UNIQUE ( PERIOD_TYPE , RECORD_EFF_DT , PERIOD_1_UPPER_BOUND , PERIOD_2_UPPER_BOUND , PERIOD_3_UPPER_BOUND , PERIOD_4_UPPER_BOUND , PERIOD_5_UPPER_BOUND , PERIOD_6_UPPER_BOUND , PERIOD_7_UPPER_BOUND , PERIOD_8_UPPER_BOUND , PERIOD_9_UPPER_BOUND , PERIOD_10_UPPER_BOUND ) ;



CREATE TABLE CC_S_AGENT 
    ( 
     AGENT_ID NUMBER (19)  NOT NULL , 
     LOGIN_ID NVARCHAR2 (100)  NOT NULL , 
     PROJECT_CONFIG_ID NUMBER (19)  NOT NULL , 
     FIRST_NAME VARCHAR2 (50)  NOT NULL , 
     LAST_NAME VARCHAR2 (50)  NOT NULL , 
     MIDDLE_INITIAL VARCHAR2 (20) , 
     JOB_TITLE VARCHAR2 (50)  NOT NULL , 
     LANGUAGE VARCHAR2 (50)  NOT NULL , 
     SITE_NAME VARCHAR2 (50)  NOT NULL , 
     SITE_DESCRIPTION VARCHAR2(200) NOT NULL,
     HOURLY_RATE NUMBER (5,2) DEFAULT 0  NOT NULL , 
     RATE_CURRENCY VARCHAR2 (3)  NOT NULL , 
     AGENT_GROUP VARCHAR2 (50) , 
     EXTRACT_DT DATE  NOT NULL , 
     HIRE_DATE DATE , 
     TERMINATION_DATE DATE , 
     LAST_UPDATE_DT DATE  NOT NULL , 
     LAST_UPDATE_BY VARCHAR2 (30)  NOT NULL , 
     RECORD_EFF_DT DATE , 
     RECORD_END_DT DATE 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_S_AGENT 
    ADD CONSTRAINT CC_S_AGENT_REC_DATE_CK 
    CHECK (RECORD_EFF_DT <= RECORD_END_DT)
;

CREATE UNIQUE INDEX CC_S_AGENT__IDX ON CC_S_AGENT 
    ( 
     AGENT_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE UNIQUE INDEX CC_S_AGENT__IDX2 ON CC_S_AGENT 
    ( 
     LOGIN_ID ASC , 
     RECORD_EFF_DT DESC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_S_AGENT__IDXv4 ON CC_S_AGENT 
    ( 
     PROJECT_CONFIG_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_AGENT 
    ADD CONSTRAINT CC_S_AGENT_PK PRIMARY KEY ( AGENT_ID ) ;


ALTER TABLE CC_S_AGENT 
    ADD CONSTRAINT CC_S_AGENT_UN UNIQUE ( LOGIN_ID , RECORD_EFF_DT ) ;


CREATE TABLE CC_S_AGENT_SUPERVISOR 
    ( 
     AGENT_SUPERVISOR_ID NUMBER (19)  NOT NULL , 
     AGENT_ID NUMBER (19)  NOT NULL , 
     SUPERVISOR_AGENT_ID NUMBER (19)  NOT NULL , 
     EXTRACT_DT DATE  NOT NULL , 
     RECORD_EFF_DT DATE  NOT NULL , 
     RECORD_END_DT DATE  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_S_AGENT_SUPERVISOR 
    ADD CONSTRAINT CC_S_AGENT_SPRVSR_REC_DT_CK 
    CHECK (RECORD_EFF_DT <= RECORD_END_DT)
;


COMMENT ON TABLE CC_S_AGENT_SUPERVISOR IS 'This staging table stores the different superiors of a given agent.  e.g. a record for the agent''s manager, a record for the agent''s supervisor, etc...'
;

CREATE UNIQUE INDEX CC_S_AGENT_SUPERVISOR__IDX ON CC_S_AGENT_SUPERVISOR 
    ( 
     AGENT_SUPERVISOR_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE UNIQUE INDEX CC_S_AGENT_SUPERVISOR__IDX2 ON CC_S_AGENT_SUPERVISOR 
    ( 
     AGENT_ID ASC , 
     SUPERVISOR_AGENT_ID ASC , 
     RECORD_EFF_DT DESC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_AGENT_SUPERVISOR 
    ADD CONSTRAINT CC_S_AGENT_SUPERVISOR_PK PRIMARY KEY ( AGENT_SUPERVISOR_ID ) ;


ALTER TABLE CC_S_AGENT_SUPERVISOR 
    ADD CONSTRAINT CC_S_AGENT_SUPERVISOR_UN UNIQUE ( AGENT_ID , SUPERVISOR_AGENT_ID , RECORD_EFF_DT ) ;




CREATE TABLE CC_S_CONTACT_QUEUE 
    ( 
     CONTACT_QUEUE_ID NUMBER (19)  NOT NULL , 
     QUEUE_NUMBER NUMBER (19)  NOT NULL , 
     PROJECT_CONFIG_ID NUMBER (19)  NOT NULL , 
     QUEUE_NAME VARCHAR2 (50)  NOT NULL , 
     SOURCE_QUEUE NUMBER (19)  NOT NULL , 
     QUEUE_TYPE VARCHAR2 (50)  NOT NULL , 
     SERVICE_PERCENT NUMBER (3) DEFAULT 0  NOT NULL , 
     SERVICE_SECONDS NUMBER (5) DEFAULT 0  NOT NULL , 
     QUEUE_GROUP NUMBER (4)  NOT NULL , 
     INTERVAL_MINUTES NUMBER (2)  NOT NULL , 
     AVG_SPEED_ANSR_INTRVL_PRIOD_ID NUMBER (19)  NOT NULL , 
     CALLS_ABANDOND_INTRVL_PRIOD_ID NUMBER (19)  NOT NULL , 
     UNIT_OF_WORK_ID NUMBER (19)  NOT NULL , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_S_CONTACT_QUEUE__IDXv2 ON CC_S_CONTACT_QUEUE 
    ( 
     PROJECT_CONFIG_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_S_CONTACT_QUEUE_PK PRIMARY KEY ( CONTACT_QUEUE_ID ) ;


ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_S_CONTACT_QUEUE__UN UNIQUE ( QUEUE_NUMBER , RECORD_EFF_DT ) ;


CREATE TABLE CC_S_INTERVAL 
    ( 
     INTERVAL_ID NUMBER (19)  NOT NULL , 
     INTERVAL_START_DATE DATE  NOT NULL , 
     INTERVAL_END_DATE DATE  NOT NULL , 
     INTERVAL_SECONDS NUMBER (4) DEFAULT 1800  NOT NULL CHECK ( INTERVAL_SECONDS IN (900, 1800, 3600)) , 
     RECORD_EFF_DT DATE DEFAULT to_date('1900/01/01', 'yyyy/mm/dd')  NOT NULL , 
     RECORD_END_DT DATE DEFAULT to_date('2999/12/31', 'yyyy/mm/dd')  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE INDEX CC_S_INTERVAL__IDX1 ON CC_S_INTERVAL 
    ( 
     INTERVAL_START_DATE ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;
CREATE INDEX CC_S_INTERVAL__IDX2 ON CC_S_INTERVAL 
    ( 
     INTERVAL_END_DATE ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_INTERVAL 
    ADD CONSTRAINT CC_S_INTERVAL_PK PRIMARY KEY ( INTERVAL_ID ) ;


ALTER TABLE CC_S_INTERVAL 
    ADD CONSTRAINT CC_S_INTERVAL__UN UNIQUE ( INTERVAL_START_DATE , INTERVAL_END_DATE ) ;


CREATE TABLE CC_S_TIMEZONEAM 
    ( 
     ID NUMBER (19)  NOT NULL , 
     TIMEZONE VARCHAR2 (50 BYTE) , 
     STARTTIME DATE , 
     ENDTIME DATE , 
     BIAS NUMBER 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;



ALTER TABLE CC_S_TIMEZONEAM 
    ADD CONSTRAINT CC_S_TIMEZONEAM_PK PRIMARY KEY ( ID ) ;


CREATE TABLE CC_S_AGENT_GROUP ( 	
	AGENT_GROUP_ID NUMBER(19,0),
	AGENT_ID NUMBER(19,0), 
	GROUP_ID NUMBER(19,0), 
	GROUP_NAME VARCHAR2(50 BYTE),
	RECORD_EFF_DT DATE, 
	RECORD_END_DT DATE,
	EXTRACT_DT DATE, 
	LAST_UPDATE_DT DATE, 
	LAST_UPDATE_BY VARCHAR2(30 BYTE)
);



CREATE TABLE CC_S_AGENT_ACTIVITY 
    ( 
     AGENT_ACTIVITY_ID NUMBER (19)  NOT NULL , 
     AGENT_ID NUMBER (19)  NOT NULL , 
     ACTIVITY_TYPE_ID NUMBER (19)  NOT NULL , 
     ACTIVITY_DURATION_SECONDS NUMBER (15,2) DEFAULT 0  NOT NULL , 
     ACTIVITY_DT DATE  NOT NULL , 
     EXTRACT_DT DATE  NOT NULL , 
     LAST_UPDATE_DT DATE  NOT NULL , 
     LAST_UPDATE_BY VARCHAR2 (30)  NOT NULL 
    ) 
        TABLESPACE MAXDAT_DATA 
        LOGGING 
;


CREATE UNIQUE INDEX CC_S_AGENT_ACTIVITY_IDX ON CC_S_AGENT_ACTIVITY 
    ( 
     AGENT_ACTIVITY_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

CREATE INDEX CC_S_AGENT_ACTIVITY_IDX3 ON CC_S_AGENT_ACTIVITY 
    ( 
     ACTIVITY_TYPE_ID ASC 
    ) 
    TABLESPACE MAXDAT_INDX 
    LOGGING 
;

ALTER TABLE CC_S_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_AGENT_ACTIVITY_PK PRIMARY KEY ( AGENT_ACTIVITY_ID ) ;


CREATE TABLE CORP_ETL_JOB_STATISTICS 
    ( 
     JOB_ID NUMBER  NOT NULL , 
     JOB_NAME VARCHAR2 (80 BYTE)  NOT NULL , 
     JOB_STATUS_CD VARCHAR2 (20 BYTE)  NOT NULL , 
     FILE_NAME VARCHAR2 (512 BYTE) , 
     RECORD_COUNT NUMBER , 
     PROCESSED_COUNT NUMBER , 
     ERROR_COUNT NUMBER , 
     WARNING_COUNT NUMBER , 
     RECORD_INSERTED_COUNT NUMBER , 
     RECORD_UPDATED_COUNT NUMBER , 
     JOB_START_DATE DATE , 
     JOB_END_DATE DATE , 
     PARENT_JOB_ID NUMBER 
    ) 
    LOGGING 
;

ALTER TABLE CORP_ETL_JOB_STATISTICS 
    ADD CONSTRAINT CORP_ETL_JOB_STATISTICS_PK PRIMARY KEY ( JOB_ID ) ;


CREATE TABLE CC_A_LIST_LKUP
  (CC_CELL_ID    number not null,
   NAME       varchar2(30) not null,
   LIST_TYPE  varchar2(100) not null,
   VALUE      varchar2(100) not null,
   OUT_VAR    varchar2(500),
   REF_TYPE   varchar2(100),
   REF_ID     number(38),
   START_DATE date,
   END_DATE   date,
   COMMENTS   varchar2(4000),
   CREATED_TS date not null,
   UPDATED_TS date not null)
TABLESPACE MAXDAT_DATA;

COMMENT ON TABLE CC_A_LIST_LKUP is 'Used to create list of values to used when pulling data for savvion';

COMMENT ON COLUMN CC_A_LIST_LKUP.NAME is 'LIST(lookup rule name for list of values)/IFTHEN(IF VALUE THEN OUT_VAR)/ID(REFERENCE AND ID)';
COMMENT ON COLUMN CC_A_LIST_LKUP.VALUE is 'Either a list or reference value - Secondary lookup value';
COMMENT ON COLUMN CC_A_LIST_LKUP.OUT_VAR is 'Value to be extracted from table';
COMMENT ON COLUMN CC_A_LIST_LKUP.REF_TYPE is 'Table name if ref id is prim key';
COMMENT ON COLUMN CC_A_LIST_LKUP.REF_ID is 'Prim key when ref_type has table name';
COMMENT ON COLUMN CC_A_LIST_LKUP.START_DATE is 'used to turn on value';
COMMENT ON COLUMN CC_A_LIST_LKUP.END_DATE is 'Used to turn off value';

ALTER TABLE CC_A_LIST_LKUP add CONSTRAINT CC_A_LIST_LKUP_PK PRIMARY KEY (CC_CELL_ID)
USING INDEX TABLESPACE MAXDAT_INDX;

ALTER TABLE CC_A_LIST_LKUP add CONSTRAINT CC_A_LIST_LKUP_UK UNIQUE (NAME,LIST_TYPE,VALUE)
USING INDEX TABLESPACE MAXDAT_INDX;

GRANT SELECT ON CC_A_LIST_LKUP TO MAXDAT_READ_ONLY; 


CREATE TABLE CC_A_LIST_LKUP_HIST
  (CC_CELL_HISTORY_ID number not null,
   HIST_TYPE       varchar2(100),
   CC_CELL_ID         number not null,
   NAME            varchar2(30) not null,
   LIST_TYPE       varchar2(100) not null,
   VALUE           varchar2(100) not null,
   OUT_VAR         varchar2(500),
   REF_TYPE        varchar2(100),
   REF_ID          number(38),
   START_DATE      date,
   END_DATE        date,
   COMMENTS        varchar2(4000),
   CREATED_TS      date not null,
   UPDATED_TS      date not null,
   HIST_CREATED_TS date not null,
   HIST_USER       varchar2(4000),
   HIST_UPDATED_TS date not null)
TABLESPACE MAXDAT_DATA;

ALTER TABLE CC_A_LIST_LKUP_HIST add CONSTRAINT CC_A_LIST_LKUP_HIST_PK PRIMARY KEY (CC_CELL_HISTORY_ID)
USING INDEX TABLESPACE MAXDAT_INDX;


ALTER TABLE CC_S_AGENT_GROUP ADD CONSTRAINT CC_S_AGENT_GROUP_AGENT_FK FOREIGN KEY (AGENT_ID)
	  REFERENCES CC_S_AGENT (AGENT_ID) ENABLE;

ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_C_CNTCT_Q_CC_C_PRJCT_CFG_FK FOREIGN KEY 
    ( 
     PROJECT_CONFIG_ID
    ) 
    REFERENCES CC_C_PROJECT_CONFIG 
    ( 
     PROJECT_CONFIG_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_ACD_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_ACD_AGT_ACT_CC_S_AGT_FK FOREIGN KEY 
    ( 
     AGENT_ID
    ) 
    REFERENCES CC_S_AGENT 
    ( 
     AGENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_ACD_INTERVAL 
    ADD CONSTRAINT CC_S_ACD_INTRVL_CC_S_AGENT_FK FOREIGN KEY 
    ( 
     AGENT_ID
    ) 
    REFERENCES CC_S_AGENT 
    ( 
     AGENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_ACD_INTERVAL 
    ADD CONSTRAINT CC_S_ACD_INTRVL_CC_S_CNTCTQ_FK FOREIGN KEY 
    ( 
     CONTACT_QUEUE_ID
    ) 
    REFERENCES CC_S_CONTACT_QUEUE 
    ( 
     CONTACT_QUEUE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_ACD_INTERVAL 
    ADD CONSTRAINT CC_S_ACD_INTRVL_CC_S_INTRVL_FK FOREIGN KEY 
    ( 
     INTERVAL_ID
    ) 
    REFERENCES CC_S_INTERVAL 
    ( 
     INTERVAL_ID
    ) 
    NOT DEFERRABLE 
;



ALTER TABLE CC_S_AGENT 
    ADD CONSTRAINT CC_S_AGENT_CC_C_PRJ_CONFIG_FK FOREIGN KEY 
    ( 
     PROJECT_CONFIG_ID
    ) 
    REFERENCES CC_C_PROJECT_CONFIG 
    ( 
     PROJECT_CONFIG_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_AGT_ACT_CC_C_ACT_TYPE_FK FOREIGN KEY 
    ( 
     ACTIVITY_TYPE_ID
    ) 
    REFERENCES CC_C_ACTIVITY_TYPE 
    ( 
     ACTIVITY_TYPE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_AGENT_ACTIVITY 
    ADD CONSTRAINT CC_S_AGT_ACT_CC_S_AGT_FK FOREIGN KEY 
    ( 
     AGENT_ID
    ) 
    REFERENCES CC_S_AGENT 
    ( 
     AGENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_AGENT_SUPERVISOR 
    ADD CONSTRAINT CC_S_AGT_SUP_CC_S_AGT_FK FOREIGN KEY 
    ( 
     SUPERVISOR_AGENT_ID
    ) 
    REFERENCES CC_S_AGENT 
    ( 
     AGENT_ID
    ) 
    NOT DEFERRABLE 
;



ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_S_CNTCT_Q_CC_C_UOW_FK FOREIGN KEY 
    ( 
     UNIT_OF_WORK_ID
    ) 
    REFERENCES CC_C_UNIT_OF_WORK 
    ( 
     UNIT_OF_WORK_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_S_CNTCT_Q_CC_S_ABN_PRIOD_FK FOREIGN KEY 
    ( 
     CALLS_ABANDOND_INTRVL_PRIOD_ID
    ) 
    REFERENCES CC_S_ACD_INTERVAL_PERIOD 
    ( 
     ACD_INTERVAL_PERIOD_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CC_S_CONTACT_QUEUE 
    ADD CONSTRAINT CC_S_CNTCT_Q_CC_S_ASA_PRIOD_FK FOREIGN KEY 
    ( 
     AVG_SPEED_ANSR_INTRVL_PRIOD_ID
    ) 
    REFERENCES CC_S_ACD_INTERVAL_PERIOD 
    ( 
     ACD_INTERVAL_PERIOD_ID
    ) 
    NOT DEFERRABLE 
;


CREATE OR REPLACE VIEW CC_S_AGENT_SV AS
SELECT CC_S_AGENT.* FROM CC_S_AGENT ;


CREATE SEQUENCE SEQ_CC_SRLKUP_ID;	
  
CREATE SEQUENCE  SEQ_CC_S_AGENT_GROUP MINVALUE 1 MAXVALUE 9999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE SEQUENCE SEQ_CC_D_COUNTRY START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_CC_D_REGION START WITH 3 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_CC_D_DISTRICT START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_CC_D_PROVINCE START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_CC_D_STATE START WITH 3 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20 ;

CREATE SEQUENCE SEQ_CC_A_ADHOC_JOB 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_A_SCHEDULE 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_A_SCHEDULED_JOB 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_ACTIVITY_TYPE 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_CONTACT_QUEUE 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_FILTER 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_LOOKUP 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_PROJECT_CONFIG 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_C_UNIT_OF_WORK 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_L_ERROR 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_L_PATCH_LOG 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_ACD_AGENT_ACTIVITY 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_ACD_INTERVAL 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_ACD_INTERVAL_PERIOD 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_AGENT 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_AGENT_SUPERVISOR 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_APPRVD_EXCPTN 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_CONTACT_QUEUE 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_GROUP 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_INTERVAL 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;


CREATE SEQUENCE SEQ_CC_S_PROJECT 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_SITE 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_CC_S_AGENT_ACTIVITY 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE SEQ_JOB_ID 
    START WITH 1 
    INCREMENT BY 1 
    MAXVALUE 99999999999999999999 
    MINVALUE 1 
    CACHE 20 
;

CREATE SEQUENCE CC_CELL_HISTORY_SEQ;

CREATE SEQUENCE SEQ_CC_CELL_ID;

CREATE OR REPLACE TRIGGER "BIU_CC_A_SOURCE_LKUP" 
  BEFORE INSERT OR UPDATE ON CC_A_SOURCE_LKUP 
  FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.CC_SRLKUP_ID IS NULL THEN 
  SELECT SEQ_CC_SRLKUP_ID.NEXTVAL INTO :NEW.CC_SRLKUP_ID FROM DUAL;
    :NEW.ROW_INSERTED_DT := SYSDATE;
    :NEW.ROW_INSERTED_BY := USER; 
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END IF;
    :NEW.ROW_UPDATED_DT := SYSDATE;
    :NEW.ROW_UPDATED_BY := USER; 
END;  
/

CREATE OR REPLACE TRIGGER BIU_CC_S_AGENT_GROUP
    BEFORE INSERT OR UPDATE ON CC_S_AGENT_GROUP 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.AGENT_GROUP_ID IS NULL THEN 
	SELECT SEQ_CC_S_AGENT_GROUP.NEXTVAL INTO :NEW.AGENT_GROUP_ID FROM DUAL;
END IF;
IF INSERTING THEN 
	:NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATE_BY := USER;
END;
/
ALTER TRIGGER BIU_CC_S_AGENT_GROUP ENABLE;


CREATE OR REPLACE TRIGGER BIU_CC_A_ADHOC_JOB 
    BEFORE INSERT OR UPDATE ON CC_A_ADHOC_JOB 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.ADHOC_JOB_ID IS NULL THEN 
          SELECT SEQ_CC_A_ADHOC_JOB.NEXTVAL INTO :NEW.ADHOC_JOB_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.CREATION_DATE := SYSDATE;
END IF;
END;  
/

ALTER TRIGGER BIU_CC_A_ADHOC_JOB ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_A_SCHEDULE 
    BEFORE INSERT ON CC_A_SCHEDULE 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.SCHEDULE_ID IS NULL THEN 
          SELECT SEQ_CC_A_SCHEDULE.NEXTVAL INTO :NEW.SCHEDULE_ID FROM DUAL;
END IF;
END;  
/


CREATE OR REPLACE TRIGGER BIU_CC_A_SCHEDULED_JOB 
    BEFORE INSERT OR UPDATE ON CC_A_SCHEDULED_JOB 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.SCHEDULED_JOB_ID IS NULL THEN 
          SELECT SEQ_CC_A_SCHEDULED_JOB.NEXTVAL INTO :NEW.SCHEDULED_JOB_ID FROM DUAL;
END IF;
IF INSERTING THEN
  	:NEW.JOB_START_DATE := SYSDATE;
END IF;
END; 
 
/

ALTER TRIGGER BIU_CC_A_SCHEDULED_JOB ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_C_ACTIVITY_TYPE 
    BEFORE INSERT OR UPDATE ON CC_C_ACTIVITY_TYPE 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.ACTIVITY_TYPE_ID IS NULL THEN 
          SELECT SEQ_CC_C_ACTIVITY_TYPE.NEXTVAL INTO :NEW.ACTIVITY_TYPE_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATE_BY := USER;
END; 
/

ALTER TRIGGER BIU_CC_C_ACTIVITY_TYPE ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_C_CONTACT_QUEUE 
    BEFORE INSERT OR UPDATE ON CC_C_CONTACT_QUEUE 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.C_CONTACT_QUEUE_ID IS NULL THEN 
  SELECT SEQ_CC_C_CONTACT_QUEUE.NEXTVAL INTO :NEW.C_CONTACT_QUEUE_ID FROM DUAL;
END IF;
IF INSERTING AND :NEW.QUEUE_NUMBER IS NULL THEN 
  :NEW.QUEUE_NUMBER := :NEW.C_CONTACT_QUEUE_ID;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_C_CONTACT_QUEUE ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_C_FILTER 
    BEFORE INSERT OR UPDATE ON CC_C_FILTER 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.FILTER_ID IS NULL THEN 
          SELECT SEQ_CC_C_FILTER.NEXTVAL INTO :NEW.FILTER_ID FROM DUAL;
END IF;
END;  
/


CREATE OR REPLACE TRIGGER BIU_CC_C_LOOKUP 
    BEFORE INSERT OR UPDATE ON CC_C_LOOKUP 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.LOOKUP_ID IS NULL THEN 
          SELECT SEQ_CC_C_LOOKUP.NEXTVAL INTO :NEW.LOOKUP_ID FROM DUAL;
END IF;
END;  
/


CREATE OR REPLACE TRIGGER BIU_CC_C_PROJECT_CONFIG 
    BEFORE INSERT OR UPDATE ON CC_C_PROJECT_CONFIG 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.PROJECT_CONFIG_ID IS NULL THEN 
          SELECT SEQ_CC_C_PROJECT_CONFIG.NEXTVAL INTO :NEW.PROJECT_CONFIG_ID FROM DUAL;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_C_PROJECT_CONFIG ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_C_UNIT_OF_WORK 
    BEFORE INSERT OR UPDATE ON CC_C_UNIT_OF_WORK 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.UNIT_OF_WORK_ID IS NULL THEN 
          SELECT SEQ_CC_C_UNIT_OF_WORK.NEXTVAL INTO :NEW.UNIT_OF_WORK_ID FROM DUAL;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_C_UNIT_OF_WORK ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_L_PATCH_LOG 
    BEFORE INSERT OR UPDATE ON CC_L_PATCH_LOG 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.PATCH_LOG_ID IS NULL THEN 
  SELECT SEQ_CC_L_PATCH_LOG.NEXTVAL INTO :NEW.PATCH_LOG_ID FROM DUAL;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_L_PATCH_LOG ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_ACD_AGENT_ACTIVITY 
    BEFORE INSERT OR UPDATE ON CC_S_ACD_AGENT_ACTIVITY 
    FOR EACH ROW 
BEGIN
IF INSERTING AND :NEW.ACD_AGENT_ACTIVITY_ID IS NULL THEN 
          SELECT SEQ_CC_S_ACD_AGENT_ACTIVITY.NEXTVAL INTO :NEW.ACD_AGENT_ACTIVITY_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATE_BY := USER;
END; 
/

ALTER TRIGGER BIU_CC_S_ACD_AGENT_ACTIVITY ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_ACD_INTERVAL 
    BEFORE INSERT OR UPDATE ON CC_S_ACD_INTERVAL 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.ACD_INTERVAL_ID IS NULL THEN 
          SELECT SEQ_CC_S_ACD_INTERVAL.NEXTVAL INTO :NEW.ACD_INTERVAL_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
IF :NEW.LAST_UPDATE_BY IS NULL THEN 
          :NEW.LAST_UPDATE_BY := USER;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
END; 
/

ALTER TRIGGER BIU_CC_S_ACD_INTERVAL ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_ACD_INTERVAL_PERIOD 
    BEFORE INSERT OR UPDATE ON CC_S_ACD_INTERVAL_PERIOD 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.ACD_INTERVAL_PERIOD_ID IS NULL THEN 
          SELECT SEQ_CC_S_ACD_INTERVAL_PERIOD.NEXTVAL INTO :NEW.ACD_INTERVAL_PERIOD_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_S_ACD_INTERVAL_PERIOD ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_AGENT 
    BEFORE INSERT OR UPDATE ON CC_S_AGENT 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.AGENT_ID IS NULL THEN 
          SELECT SEQ_CC_S_AGENT.NEXTVAL INTO :NEW.AGENT_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATE_BY := USER;
END; 
/

ALTER TRIGGER BIU_CC_S_AGENT ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_AGENT_SUPERVISOR 
    BEFORE INSERT OR UPDATE ON CC_S_AGENT_SUPERVISOR 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.AGENT_SUPERVISOR_ID IS NULL THEN 
          SELECT SEQ_CC_S_AGENT_SUPERVISOR.NEXTVAL INTO :NEW.AGENT_SUPERVISOR_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_S_AGENT_SUPERVISOR ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_CONTACT_QUEUE 
    BEFORE INSERT OR UPDATE ON CC_S_CONTACT_QUEUE 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.CONTACT_QUEUE_ID IS NULL THEN 
          SELECT SEQ_CC_S_CONTACT_QUEUE.NEXTVAL INTO :NEW.CONTACT_QUEUE_ID FROM DUAL;
END IF;
END; 
/

ALTER TRIGGER BIU_CC_S_CONTACT_QUEUE ENABLE; 


CREATE OR REPLACE TRIGGER BIU_CC_S_INTERVAL 
    BEFORE INSERT OR UPDATE ON CC_S_INTERVAL 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.INTERVAL_ID IS NULL THEN 
          SELECT SEQ_CC_S_INTERVAL.NEXTVAL INTO :NEW.INTERVAL_ID FROM DUAL;
END IF;
END;  
/

ALTER TRIGGER BIU_CC_S_INTERVAL ENABLE; 

CREATE OR REPLACE TRIGGER BIU_CC_S_AGENT_ACTIVITY 
    BEFORE INSERT OR UPDATE ON CC_S_AGENT_ACTIVITY 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.AGENT_ACTIVITY_ID IS NULL THEN 
          SELECT SEQ_CC_S_AGENT_ACTIVITY.NEXTVAL INTO :NEW.AGENT_ACTIVITY_ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.EXTRACT_DT := SYSDATE;
END IF;
:NEW.LAST_UPDATE_DT := SYSDATE;
:NEW.LAST_UPDATE_BY := USER;
END; 
/

ALTER TRIGGER BIU_CC_S_AGENT_ACTIVITY ENABLE; 


CREATE OR REPLACE TRIGGER BI_CC_L_ERROR 
    BEFORE INSERT ON CC_L_ERROR 
    FOR EACH ROW 
BEGIN 
IF INSERTING AND :NEW.ID IS NULL THEN 
          SELECT SEQ_CC_L_ERROR.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
IF INSERTING THEN 
          :NEW.ERROR_DATE := SYSDATE;
END IF;
END; 
/

ALTER TRIGGER BI_CC_L_ERROR ENABLE; 

CREATE OR REPLACE TRIGGER TRG_BIU_CC_A_LIST_LKUP
BEFORE INSERT OR UPDATE ON CC_A_LIST_LKUP
FOR EACH ROW
BEGIN
  if inserting then
    if :new.CC_CELL_ID is null then
      :new.CC_CELL_ID := SEQ_CC_CELL_ID.nextval;
    end if;
    if :new.CREATED_TS is null then
      :new.CREATED_TS := sysdate;
    end if;
  end if;
  :new.UPDATED_TS := sysdate;
end;
/


CREATE OR REPLACE TRIGGER TRG_ADIU_CC_A_LIST_LKUP
AFTER INSERT OR UPDATE OR DELETE ON CC_A_LIST_LKUP
FOR EACH ROW
BEGIN

  if inserting then
    insert into CC_A_LIST_LKUP_HIST
      (CC_CELL_HISTORY_ID,
       HIST_TYPE,
       CC_CELL_ID,
       NAME,
       LIST_TYPE,
       VALUE,
       OUT_VAR,
       REF_TYPE,
       REF_ID,
       START_DATE,
       END_DATE,
       COMMENTS,
       CREATED_TS,
       UPDATED_TS,
       HIST_CREATED_TS,
       HIST_USER,
       HIST_UPDATED_TS)
    values
      (CC_CELL_HISTORY_SEQ.nextval,
       'INSERT',
       :new.CC_CELL_ID,
       :new.NAME,
       :new.LIST_TYPE,
       :new.VALUE,
       :new.OUT_VAR,
       :new.REF_TYPE,
       :new.REF_ID,
       :new.START_DATE, 
       :new.END_DATE,
       :new.COMMENTS,
       :new.CREATED_TS,
       :new.UPDATED_TS,
       sysdate,
       user,
       sysdate);
  end if;
  
  if updating then
    insert into CC_A_LIST_LKUP_HIST 
      (CC_CELL_HISTORY_ID,
       HIST_TYPE,
       CC_CELL_ID,
       NAME,
       LIST_TYPE,
       VALUE,
       OUT_VAR,
       REF_TYPE,
       REF_ID,
       START_DATE,
       END_DATE,
       COMMENTS,
       CREATED_TS,
       UPDATED_TS,
       HIST_CREATED_TS,
       HIST_USER,
       HIST_UPDATED_TS)
    values
      (CC_CELL_HISTORY_SEQ.nextval,
       'UPDATE',
       :old.CC_CELL_ID,
       :old.name,
       :old.LIST_TYPE,
       :old.value,
       :old.OUT_VAR,
       :old.REF_TYPE,
       :old.REF_ID,
       :old.START_DATE,
       :old.END_DATE,
       :old.COMMENTS,
       :old.CREATED_TS,
       :old.UPDATED_TS,
       sysdate,
       user,
       sysdate);
       
  end if;
  
  if deleting then
    insert into CC_A_LIST_LKUP_HIST
      (CC_CELL_HISTORY_ID,
       HIST_TYPE,
       CC_CELL_ID,
       NAME,
       LIST_TYPE,
       VALUE,
       OUT_VAR,
       REF_TYPE,
       REF_ID,
       START_DATE,
       END_DATE,
       COMMENTS,
       CREATED_TS,
       UPDATED_TS,
       HIST_CREATED_TS,
       HIST_USER,
       HIST_UPDATED_TS)
    values
      (CC_CELL_HISTORY_SEQ.nextval,
       'DELETE',
       :old.CC_CELL_ID,
       :old.name,
       :old.LIST_TYPE,
       :old.value,
       :old.OUT_VAR,
       :old.REF_TYPE,
       :old.REF_ID,
       :old.START_DATE,
       :old.END_DATE,
       :old.COMMENTS,
       :old.CREATED_TS,
       :old.UPDATED_TS,
       sysdate,
       user,
       sysdate);
  end if;
  
end;
/

