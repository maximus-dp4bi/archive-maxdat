-- Lookup tables

CREATE TABLE CC_C_SURVEY_LKUP
  (
    PROJECT_NAME       VARCHAR2(100) NOT NULL,
    PROGRAM_NAME       VARCHAR2(100) NOT NULL,
    SUB_PROGRAM_CODE       NUMBER (19) NOT NULL,
    SUB_PROGRAM_NAME   VARCHAR2(100) NOT NULL,
    CREATE_DATE                 DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATE_DATE            DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATED_BY 		VARCHAR2(30)NOT NULL
  ) ;
  
  ALTER TABLE CC_C_SURVEY_LKUP ADD CONSTRAINT CC_C_SURVEY_LKUP_UN UNIQUE
    (
      PROJECT_NAME, SUB_PROGRAM_CODE
    )
    ;
    
  CREATE OR REPLACE TRIGGER BIU_CC_C_SURVEY_LKUP
      BEFORE INSERT OR UPDATE ON CC_C_SURVEY_LKUP
      FOR EACH ROW 
  BEGIN 
  IF INSERTING THEN 
            :NEW.CREATE_DATE := SYSDATE;
  END IF;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
  :NEW.LAST_UPDATED_BY := USER;
  END; 
  /  
  
  
CREATE TABLE CC_C_QUESTION_TYPE_LKUP
  (
    QUESTION_TYPE_ID       NUMBER NOT NULL,
    QUESTION_TYPE          VARCHAR2(500) NOT NULL,
    CREATE_DATE                 DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATE_DATE            DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATED_BY 		VARCHAR2(30)NOT NULL
  ) ;
  
 ALTER TABLE CC_C_QUESTION_TYPE_LKUP ADD CONSTRAINT CC_C_QUESTION_TYPE_LKUP_PK PRIMARY KEY
    (
      QUESTION_TYPE_ID
    ) ; 
    
  CREATE OR REPLACE TRIGGER BIU_CC_C_QUESTION_TYPE_LKUP
      BEFORE INSERT OR UPDATE ON CC_C_QUESTION_TYPE_LKUP
      FOR EACH ROW 
  BEGIN 
  IF INSERTING THEN 
            :NEW.CREATE_DATE := SYSDATE;
  END IF;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
  :NEW.LAST_UPDATED_BY := USER;
  END; 
  / 
  
 CREATE TABLE CC_C_QUESTION_ANSWER_LKUP
  (
    QUESTION_TYPE_ID       NUMBER NOT NULL,
    QUESTION_TYPE          VARCHAR2(500) NOT NULL,
    QUESTION_REPORT_LABEL  VARCHAR2(500) NOT NULL,
    ANSWER_REPORT_LABEL    VARCHAR2(100) NOT NULL,
    QUESTION_ORDER         NUMBER NOT NULL,
    ANSWER_ORDER           NUMBER NOT NULL,
    CREATE_DATE            DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATE_DATE       DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATED_BY        VARCHAR2(30)NOT NULL,
    CONSTRAINT CC_C_QUESTION_ANSWER_LKUP_FK FOREIGN KEY (QUESTION_TYPE_ID)
    REFERENCES CC_C_QUESTION_TYPE_LKUP(QUESTION_TYPE_ID)
  ) ;
  

 CREATE OR REPLACE TRIGGER BIU_CC_C_QUESTION_ANSWER
      BEFORE INSERT OR UPDATE ON CC_C_QUESTION_ANSWER_LKUP
      FOR EACH ROW 
  BEGIN 
  IF INSERTING THEN 
            :NEW.CREATE_DATE := SYSDATE;
  END IF;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
  :NEW.LAST_UPDATED_BY := USER;
  END; 
  /  
 
-- Staging table 
  
CREATE TABLE CC_S_CALLER_SURVEY_DATA
  (  
    S_CALLER_SURVEY_ID 		NUMBER (19) NOT NULL , -- DP generated sequence for PK
    SURVEY_DT                   DATE NOT NULL ,
    DATETIME                    DATE NOT NULL ,
    AGENT_EMP_ID                VARCHAR2(50) NOT NULL,
    S_AGENT_ID                  NUMBER (19),
    AGENT_LOGIN_ID              VARCHAR2(100),
    PROJECT_NAME                VARCHAR2(100) NOT NULL,
    SUB_PROGRAM_CODE            NUMBER (19) NOT NULL ,
    SURVEY_COMPLETE             VARCHAR2(1),
    SURVEY_QUESTION             VARCHAR2(500),
    ANSWER                      VARCHAR2(100),
    CREATE_DATE                 DATE DEFAULT SYSDATE NOT NULL,
    LAST_UPDATE_DATE            DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATED_BY 		VARCHAR2(30) NOT NULL
  )  ;

CREATE INDEX CC_S_CALLER_SURVEY_DATA_IDX1 ON CC_S_CALLER_SURVEY_DATA
      (
        DATETIME ASC
      ) ;  
      
  CREATE INDEX CC_S_CALLER_SURVEY_DATA_IDX2 ON CC_S_CALLER_SURVEY_DATA
      (
        AGENT_EMP_ID ASC
      ) ;     
  CREATE INDEX CC_S_CALLER_SURVEY_DATA_IDX3 ON CC_S_CALLER_SURVEY_DATA
      (
        S_AGENT_ID ASC
      ) ;    
  CREATE INDEX CC_S_CALLER_SURVEY_DATA_IDX4 ON CC_S_CALLER_SURVEY_DATA
      (
        AGENT_LOGIN_ID ASC
      ) ;    
      
  CREATE INDEX CC_S_CALLER_SURVEY_DATA_IDX5 ON CC_S_CALLER_SURVEY_DATA
      (
        SURVEY_DT ASC
      ) ;   
      
  ALTER TABLE CC_S_CALLER_SURVEY_DATA ADD CONSTRAINT CC_S_CALLER_SURVEY_DATA_UN UNIQUE
    (
      DATETIME, AGENT_EMP_ID, S_AGENT_ID, PROJECT_NAME, SUB_PROGRAM_CODE, SURVEY_QUESTION, ANSWER
    )
    ;    
      
  ALTER TABLE CC_S_CALLER_SURVEY_DATA ADD CONSTRAINT CC_S_CALLER_SURVEY_DATA_PK PRIMARY KEY
    (
      S_CALLER_SURVEY_ID
    ) ;    
      
  ALTER TABLE CC_S_CALLER_SURVEY_DATA ADD CONSTRAINT CC_S_CALR_SURVY_DATA_AGT_FK FOREIGN KEY ( S_AGENT_ID ) REFERENCES CC_S_AGENT ( AGENT_ID ) NOT DEFERRABLE ; 
  
  
CREATE TABLE CC_F_CALLER_SURVEY_DATA
  (  
    F_CALLER_SURVEY_ID 		NUMBER (19) NOT NULL , -- DP generated sequence for PK
    SURVEY_DT                   DATE NOT NULL,
    DATETIME                    DATE NOT NULL ,
    D_DATE_ID                   NUMBER (19) NOT NULL ,
    AGENT_EMP_ID                VARCHAR2(50) NOT NULL,
    D_AGENT_ID                  NUMBER (19) ,
    AGENT_LOGIN_ID              VARCHAR2(100),
    QUESTION_TYPE_ID            NUMBER (19) ,
    PROJECT_NAME                VARCHAR2(100) NOT NULL,
    SUB_PROGRAM_CODE            NUMBER (19) NOT NULL ,
    SURVEY_COMPLETE             VARCHAR2(1),
    SURVEY_QUESTION             VARCHAR2(500),
    ANSWER                      VARCHAR2(100),
    CREATE_DATE                 DATE DEFAULT SYSDATE NOT NULL,
    LAST_UPDATE_DATE            DATE DEFAULT SYSDATE NOT NULL ,
    LAST_UPDATED_BY 		VARCHAR2(30) NOT NULL
  );
  
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX1 ON CC_F_CALLER_SURVEY_DATA
      (
        D_DATE_ID ASC
      ) ;  
      
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX2 ON CC_F_CALLER_SURVEY_DATA
      (
        DATETIME ASC
      ) ;     
      
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX3 ON CC_F_CALLER_SURVEY_DATA
      (
        AGENT_LOGIN_ID ASC
      ) ;     
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX4 ON CC_F_CALLER_SURVEY_DATA
      (
        D_AGENT_ID ASC
      ) ;    
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX5 ON CC_F_CALLER_SURVEY_DATA
      (
        AGENT_EMP_ID ASC
      ) ;    
  
  CREATE INDEX CC_F_CALLER_SURVEY_DATA_IDX6 ON CC_F_CALLER_SURVEY_DATA
        (
          SURVEY_DT ASC
      ) ; 
      
  ALTER TABLE CC_F_CALLER_SURVEY_DATA ADD CONSTRAINT CC_F_CALLER_SURVEY_DATA_UN UNIQUE
    (
      DATETIME, AGENT_EMP_ID, D_AGENT_ID, PROJECT_NAME, SUB_PROGRAM_CODE, SURVEY_QUESTION, ANSWER
    )
    ;      
      
  ALTER TABLE CC_F_CALLER_SURVEY_DATA ADD CONSTRAINT CC_F_CALLER_SURVEY_DATA_PK PRIMARY KEY
    (
      F_CALLER_SURVEY_ID
    ) ;    
      
  ALTER TABLE CC_F_CALLER_SURVEY_DATA ADD CONSTRAINT CC_F_CALR_SURVY_DATA_AGT_FK FOREIGN KEY ( D_AGENT_ID ) REFERENCES CC_D_AGENT ( D_AGENT_ID ) NOT DEFERRABLE ; 
 
  ALTER TABLE CC_F_CALLER_SURVEY_DATA ADD CONSTRAINT CC_F_CALR_SURVY_DATA_LKUP_FK FOREIGN KEY ( QUESTION_TYPE_ID ) REFERENCES CC_C_QUESTION_TYPE_LKUP ( QUESTION_TYPE_ID ) NOT DEFERRABLE ; 
  
    CREATE SEQUENCE SEQ_CC_S_CALLER_SURVEY_DATA START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20;
    CREATE SEQUENCE SEQ_CC_F_CALLER_SURVEY_DATA START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999 MINVALUE 1 CACHE 20;
    
    CREATE OR REPLACE TRIGGER BIU_CC_S_CALLER_SURVEY_DATA
        BEFORE INSERT OR UPDATE ON CC_S_CALLER_SURVEY_DATA
        FOR EACH ROW 
    BEGIN 
    IF INSERTING AND :NEW.S_CALLER_SURVEY_ID IS NULL THEN 
              SELECT SEQ_CC_S_CALLER_SURVEY_DATA.NEXTVAL INTO :NEW.S_CALLER_SURVEY_ID FROM DUAL;
    END IF;
    IF INSERTING THEN 
              :NEW.CREATE_DATE := SYSDATE;
    END IF;
    :NEW.LAST_UPDATE_DATE := SYSDATE;
    :NEW.LAST_UPDATED_BY := USER;
    END; 
  /  
    
    CREATE OR REPLACE TRIGGER BIU_CC_F_CALLER_SURVEY_DATA
        BEFORE INSERT OR UPDATE ON CC_F_CALLER_SURVEY_DATA
        FOR EACH ROW 
    BEGIN 
    IF INSERTING AND :NEW.F_CALLER_SURVEY_ID IS NULL THEN 
              SELECT SEQ_CC_F_CALLER_SURVEY_DATA.NEXTVAL INTO :NEW.F_CALLER_SURVEY_ID FROM DUAL;
    END IF;
    IF INSERTING THEN 
              :NEW.CREATE_DATE := SYSDATE;
    END IF;
    :NEW.LAST_UPDATE_DATE := SYSDATE;
    :NEW.LAST_UPDATED_BY := USER;
    END; 
  / 
  
  -- Semantic views:
  
CREATE OR REPLACE VIEW CC_C_SURVEY_LKUP_SV AS 
SELECT * FROM CC_C_SURVEY_LKUP;
  
  
CREATE OR REPLACE VIEW CC_F_CALLER_SURVEY_DATA_SV AS
SELECT  
F_CALLER_SURVEY_ID 	
,SURVEY_DT
,DATETIME            
,D_DATE_ID           
,D_AGENT_ID     
,(SELECT PROJECT_ID FROM CC_D_PROJECT WHERE PROJECT_NAME = F.PROJECT_NAME) D_PROJECT_ID
,(SELECT PROGRAM_ID FROM CC_D_PROGRAM WHERE PROGRAM_NAME = C.PROGRAM_NAME) D_PROGRAM_ID
,AGENT_EMP_ID
,AGENT_LOGIN_ID   
,QUESTION_TYPE_ID
,F.PROJECT_NAME 
,PROGRAM_NAME
,F.SUB_PROGRAM_CODE   
,SUB_PROGRAM_NAME
,COALESCE (SURVEY_COMPLETE, 'N')     SURVEY_COMPLETE
,SURVEY_QUESTION     
,ANSWER              
,F.CREATE_DATE         
,F.LAST_UPDATE_DATE    
,F.LAST_UPDATED_BY 	
FROM CC_F_CALLER_SURVEY_DATA  F
LEFT OUTER JOIN CC_C_SURVEY_LKUP_SV C ON F.PROJECT_NAME = C.PROJECT_NAME AND F.SUB_PROGRAM_CODE = C.SUB_PROGRAM_CODE;


  
GRANT SELECT ON CC_F_CALLER_SURVEY_DATA_SV TO MAXDAT_READ_ONLY; 

CREATE OR REPLACE VIEW CC_C_QUESTION_ANSWER_LKUP_SV AS
SELECT * FROM CC_C_QUESTION_ANSWER_LKUP;

GRANT SELECT ON CC_C_QUESTION_ANSWER_LKUP_SV TO MAXDAT_READ_ONLY; 