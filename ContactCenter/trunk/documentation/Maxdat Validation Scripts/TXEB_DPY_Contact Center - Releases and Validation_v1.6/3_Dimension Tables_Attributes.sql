select 'Dimension Tables 1' as test_num, 'Non-null:  D_ACTIVITY_TYPE_ID' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where D_ACTIVITY_TYPE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 2' as test_num, 'Non-null:  ACTIVITY_TYPE_NAME' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where ACTIVITY_TYPE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 3' as test_num, 'Non-null:  ACTIVITY_TYPE_DESC' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where ACTIVITY_TYPE_DESC is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 4' as test_num, 'Non-null:  ACTIVITY_TYPE_CATEGORY' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where ACTIVITY_TYPE_CATEGORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 5' as test_num, 'Non-null:  IS_PAID_FLAG' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where IS_PAID_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 6' as test_num, 'Non-null:  IS_AVAILABLE_FLAG' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where IS_AVAILABLE_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 7' as test_num, 'Non-null:  IS_READY_FLAG' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where IS_READY_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 8' as test_num, 'Non-null:  IS_ABSENCE_FLAG' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where IS_ABSENCE_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 9' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 10' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 11' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_ACTIVITY_TYPE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 12' as test_num, 'Non-null:  D_AGENT_ID' as test_name, case when exists(select 1 from CC_D_AGENT where D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 13' as test_num, 'Non-null:  LOGIN_ID' as test_name, case when exists(select 1 from CC_D_AGENT where LOGIN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 14' as test_num, 'Non-null:  FIRST_NAME' as test_name, case when exists(select 1 from CC_D_AGENT where FIRST_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 15' as test_num, 'Non-null:  MIDDLE_INITIAL' as test_name, case when exists(select 1 from CC_D_AGENT where MIDDLE_INITIAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 16' as test_num, 'Non-null:  LAST_NAME' as test_name, case when exists(select 1 from CC_D_AGENT where LAST_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 17' as test_num, 'Non-null:  JOB_TITLE' as test_name, case when exists(select 1 from CC_D_AGENT where JOB_TITLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 18' as test_num, 'Non-null:  LANGUAGE' as test_name, case when exists(select 1 from CC_D_AGENT where LANGUAGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 19' as test_num, 'Non-null:  SITE_NAME' as test_name, case when exists(select 1 from CC_D_AGENT where SITE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 20' as test_num, 'Non-null:  HOURLY_RATE' as test_name, case when exists(select 1 from CC_D_AGENT where HOURLY_RATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 21' as test_num, 'Non-null:  RATE_CURRENCY' as test_name, case when exists(select 1 from CC_D_AGENT where RATE_CURRENCY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 22' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_AGENT where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 23' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_AGENT where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 24' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_AGENT where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 25' as test_num, 'Non-null:  D_CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where D_CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 26' as test_num, 'Non-null:  QUEUE_NUMBER' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where QUEUE_NUMBER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 27' as test_num, 'Non-null:  QUEUE_NAME' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where QUEUE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 28' as test_num, 'Non-null:  SOURCE_QUEUE' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SOURCE_QUEUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 29' as test_num, 'Non-null:  QUEUE_TYPE' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where QUEUE_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 30' as test_num, 'Non-null:  SERVICE_PERCENT' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SERVICE_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 31' as test_num, 'Non-null:  SERVICE_SECONDS' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SERVICE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 32' as test_num, 'Non-null:  QUEUE_GROUP' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where QUEUE_GROUP is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 33' as test_num, 'Non-null:  INTERVAL_MINUTES' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where INTERVAL_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 34' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_1_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_1_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 35' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_2_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_2_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 36' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_3_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_3_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 37' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_4_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_4_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 38' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_5_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_5_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 39' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_6_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_6_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 40' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_7_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_7_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 41' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_8_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_8_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 42' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_9_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_9_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 43' as test_num, 'Non-null:  SPEED_ANSWER_PERIOD_10_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where SPEED_ANSWER_PERIOD_10_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 44' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_1_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_1_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 45' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_2_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_2_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 46' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_3_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_3_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 47' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_4_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_4_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 48' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_5_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_5_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 49' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_6_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_6_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 50' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_7_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_7_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 51' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_8_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_8_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 52' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_9_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_9_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 53' as test_num, 'Non-null:  CALLS_ABNDONED_PERIOD_10_BOUND' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where CALLS_ABNDONED_PERIOD_10_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 54' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 55' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 56' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_CONTACT_QUEUE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 57' as test_num, 'Non-null:  COUNTRY_ID' as test_name, case when exists(select 1 from CC_D_COUNTRY where COUNTRY_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 58' as test_num, 'Non-null:  COUNTRY_NAME' as test_name, case when exists(select 1 from CC_D_COUNTRY where COUNTRY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 59' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_D_DATES where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 60' as test_num, 'Non-null:  D_DATE' as test_name, case when exists(select 1 from CC_D_DATES where D_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 61' as test_num, 'Non-null:  D_MONTH' as test_name, case when exists(select 1 from CC_D_DATES where D_MONTH is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 62' as test_num, 'Non-null:  D_MONTH_NAME' as test_name, case when exists(select 1 from CC_D_DATES where D_MONTH_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 63' as test_num, 'Non-null:  D_DAY' as test_name, case when exists(select 1 from CC_D_DATES where D_DAY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 64' as test_num, 'Non-null:  D_DAY_NAME' as test_name, case when exists(select 1 from CC_D_DATES where D_DAY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 65' as test_num, 'Non-null:  D_DAY_OF_WEEK' as test_name, case when exists(select 1 from CC_D_DATES where D_DAY_OF_WEEK is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 66' as test_num, 'Non-null:  D_DAY_OF_MONTH' as test_name, case when exists(select 1 from CC_D_DATES where D_DAY_OF_MONTH is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 67' as test_num, 'Non-null:  D_DAY_OF_YEAR' as test_name, case when exists(select 1 from CC_D_DATES where D_DAY_OF_YEAR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 68' as test_num, 'Non-null:  D_YEAR' as test_name, case when exists(select 1 from CC_D_DATES where D_YEAR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 69' as test_num, 'Non-null:  D_MONTH_NUM' as test_name, case when exists(select 1 from CC_D_DATES where D_MONTH_NUM is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 70' as test_num, 'Non-null:  D_WEEK_OF_YEAR' as test_name, case when exists(select 1 from CC_D_DATES where D_WEEK_OF_YEAR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 71' as test_num, 'Non-null:  D_WEEK_OF_MONTH' as test_name, case when exists(select 1 from CC_D_DATES where D_WEEK_OF_MONTH is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 72' as test_num, 'Non-null:  WEEKEND_FLAG' as test_name, case when exists(select 1 from CC_D_DATES where WEEKEND_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 73' as test_num, 'Non-null:  DISTRICT_ID' as test_name, case when exists(select 1 from CC_D_DISTRICT where DISTRICT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 74' as test_num, 'Non-null:  DISTRICT_NAME' as test_name, case when exists(select 1 from CC_D_DISTRICT where DISTRICT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 75' as test_num, 'Non-null:  D_FORECAST_NOTES_ID' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where D_FORECAST_NOTES_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 76' as test_num, 'Non-null:  PRODUCTION_PLAN_HORIZON_ID' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where PRODUCTION_PLAN_HORIZON_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 77' as test_num, 'Non-null:  NOTE_TYPE' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where NOTE_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 78' as test_num, 'Non-null:  NOTE_TEXT' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where NOTE_TEXT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 79' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 80' as test_num, 'Non-null:  CREATE_BY' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where CREATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 81' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 82' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_D_FORECAST_NOTES where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 83' as test_num, 'Non-null:  GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 84' as test_num, 'Non-null:  GEOGRAPHY_NAME' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where GEOGRAPHY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 85' as test_num, 'Non-null:  COUNTRY_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where COUNTRY_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 86' as test_num, 'Non-null:  STATE_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where STATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 87' as test_num, 'Non-null:  PROVINCE_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where PROVINCE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 88' as test_num, 'Non-null:  DISTRICT_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where DISTRICT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 89' as test_num, 'Non-null:  REGION_ID' as test_name, case when exists(select 1 from CC_D_GEOGRAPHY_MASTER where REGION_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 90' as test_num, 'Non-null:  D_GROUP_ID' as test_name, case when exists(select 1 from CC_D_GROUP where D_GROUP_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 91' as test_num, 'Non-null:  GROUP_NAME' as test_name, case when exists(select 1 from CC_D_GROUP where GROUP_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 92' as test_num, 'Non-null:  GROUP_DESCRIPTION' as test_name, case when exists(select 1 from CC_D_GROUP where GROUP_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 93' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_GROUP where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 94' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_GROUP where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 95' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_GROUP where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 96' as test_num, 'Non-null:  D_INTERVAL_ID' as test_name, case when exists(select 1 from CC_D_INTERVAL where D_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 97' as test_num, 'Non-null:  INTERVAL_START_DATE' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_START_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 98' as test_num, 'Non-null:  INTERVAL_END_DATE' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 99' as test_num, 'Non-null:  AM_PM' as test_name, case when exists(select 1 from CC_D_INTERVAL where AM_PM is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 100' as test_num, 'Non-null:  INTERVAL_START_HOUR' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_START_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 101' as test_num, 'Non-null:  INTERVAL_START_MINUTE' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_START_MINUTE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 102' as test_num, 'Non-null:  INTERVAL_END_HOUR' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_END_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 103' as test_num, 'Non-null:  INTERVAL_END_MINUTE' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_END_MINUTE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 104' as test_num, 'Non-null:  INTERVAL_SECONDS' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 105' as test_num, 'Non-null:  INTERVAL_START_TIME_OF_DAY12' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_START_TIME_OF_DAY12 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 106' as test_num, 'Non-null:  INTERVAL_START_TIME_OF_DAY24' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_START_TIME_OF_DAY24 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 107' as test_num, 'Non-null:  INTERVAL_END_TIME_OF_DAY12' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_END_TIME_OF_DAY12 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 108' as test_num, 'Non-null:  INTERVAL_END_TIME_OF_DAY24' as test_name, case when exists(select 1 from CC_D_INTERVAL where INTERVAL_END_TIME_OF_DAY24 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 109' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_INTERVAL where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 110' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_INTERVAL where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 111' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_INTERVAL where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 112' as test_num, 'Non-null:  D_IVR_SELF_SERVICE_PATH_ID' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where D_IVR_SELF_SERVICE_PATH_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 113' as test_num, 'Non-null:  CODE' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where CODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 114' as test_num, 'Non-null:  DESCRIPTION' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 115' as test_num, 'Non-null:  BEGIN_NODE' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where BEGIN_NODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 116' as test_num, 'Non-null:  END_NODE' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where END_NODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 117' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 118' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 119' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_IVR_SELF_SERVICE_PATH where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 120' as test_num, 'Non-null:  PRODUCTION_PLAN_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PRODUCTION_PLAN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 121' as test_num, 'Non-null:  PLAN_TYPE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PLAN_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 122' as test_num, 'Non-null:  PRODUCTION_PLAN_NAME' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PRODUCTION_PLAN_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 123' as test_num, 'Non-null:  PRODUCTION_PLAN_DESCRIPTION' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PRODUCTION_PLAN_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 124' as test_num, 'Non-null:  PROJECT_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 125' as test_num, 'Non-null:  PROGRAM_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 126' as test_num, 'Non-null:  GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 127' as test_num, 'Non-null:  EFFECTIVE_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where EFFECTIVE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 128' as test_num, 'Non-null:  END_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 129' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 130' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 131' as test_num, 'Non-null:  PRODUCTION_PLAN_HRZN_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where PRODUCTION_PLAN_HRZN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 132' as test_num, 'Non-null:  PRODUCTION_PLAN_ID' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where PRODUCTION_PLAN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 133' as test_num, 'Non-null:  HORIZON_START_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where HORIZON_START_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 134' as test_num, 'Non-null:  HORIZON_START_HOUR' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where HORIZON_START_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 135' as test_num, 'Non-null:  HORIZON_END_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where HORIZON_END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 136' as test_num, 'Non-null:  HORIZON_END_HOUR' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where HORIZON_END_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 137' as test_num, 'Non-null:  INITIAL_VERSION' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where INITIAL_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 138' as test_num, 'Non-null:  FINAL_VERSION' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where FINAL_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 139' as test_num, 'Non-null:  FORECAST_LAST_MODIFIED_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where FORECAST_LAST_MODIFIED_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 140' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 141' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_D_PRODUCTION_PLAN_HORIZON where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 142' as test_num, 'Non-null:  D_PROD_PLANNING_TARGET_ID' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where D_PROD_PLANNING_TARGET_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 143' as test_num, 'Non-null:  D_PROJECT_ID' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where D_PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 144' as test_num, 'Non-null:  D_TARGET_ID' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where D_TARGET_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 145' as test_num, 'Non-null:  TARGET_VALUE' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where TARGET_VALUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 146' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 147' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 148' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_PROD_PLANNING_TARGET where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 149' as test_num, 'Non-null:  PROGRAM_ID' as test_name, case when exists(select 1 from CC_D_PROGRAM where PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 150' as test_num, 'Non-null:  PROGRAM_NAME' as test_name, case when exists(select 1 from CC_D_PROGRAM where PROGRAM_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 151' as test_num, 'Non-null:  PROJECT_ID' as test_name, case when exists(select 1 from CC_D_PROJECT where PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 152' as test_num, 'Non-null:  PROJECT_NAME' as test_name, case when exists(select 1 from CC_D_PROJECT where PROJECT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 153' as test_num, 'Non-null:  SEGMENT_ID' as test_name, case when exists(select 1 from CC_D_PROJECT where SEGMENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 154' as test_num, 'Non-null:  D_PROJECT_TARGETS_ID' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where D_PROJECT_TARGETS_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 155' as test_num, 'Non-null:  PROJECT_ID' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 156' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 157' as test_num, 'Non-null:  AVERAGE_HANDLE_TIME_TARGET' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where AVERAGE_HANDLE_TIME_TARGET is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 158' as test_num, 'Non-null:  UTILIZATION_TARGET' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where UTILIZATION_TARGET is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 159' as test_num, 'Non-null:  COST_PER_CALL_TARGET' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where COST_PER_CALL_TARGET is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 160' as test_num, 'Non-null:  OCCUPANCY_TARGET' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where OCCUPANCY_TARGET is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 161' as test_num, 'Non-null:  LABOR_COST_PER_CALL_TARGET' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where LABOR_COST_PER_CALL_TARGET is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 162' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 163' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_PROJECT_TARGETS where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 164' as test_num, 'Non-null:  PROVINCE_ID' as test_name, case when exists(select 1 from CC_D_PROVINCE where PROVINCE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 165' as test_num, 'Non-null:  PROVINCE_NAME' as test_name, case when exists(select 1 from CC_D_PROVINCE where PROVINCE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 166' as test_num, 'Non-null:  REGION_ID' as test_name, case when exists(select 1 from CC_D_REGION where REGION_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 167' as test_num, 'Non-null:  REGION_NAME' as test_name, case when exists(select 1 from CC_D_REGION where REGION_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 168' as test_num, 'Non-null:  D_SITE_ID' as test_name, case when exists(select 1 from CC_D_SITE where D_SITE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 169' as test_num, 'Non-null:  SITE_NAME' as test_name, case when exists(select 1 from CC_D_SITE where SITE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 170' as test_num, 'Non-null:  SITE_DESCRIPTION' as test_name, case when exists(select 1 from CC_D_SITE where SITE_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 171' as test_num, 'Non-null:  VERSION' as test_name, case when exists(select 1 from CC_D_SITE where VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 172' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_D_SITE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 173' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_D_SITE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 174' as test_num, 'Non-null:  STATE_ID' as test_name, case when exists(select 1 from CC_D_STATE where STATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 175' as test_num, 'Non-null:  STATE_NAME' as test_name, case when exists(select 1 from CC_D_STATE where STATE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 176' as test_num, 'Non-null:  D_TARGET_ID' as test_name, case when exists(select 1 from CC_D_TARGET where D_TARGET_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 177' as test_num, 'Non-null:  TARGET_NAME' as test_name, case when exists(select 1 from CC_D_TARGET where TARGET_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 178' as test_num, 'Non-null:  TARGET_DESCRIPTION' as test_name, case when exists(select 1 from CC_D_TARGET where TARGET_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 179' as test_num, 'Non-null:  UOW_ID' as test_name, case when exists(select 1 from CC_D_UNIT_OF_WORK where UOW_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 180' as test_num, 'Non-null:  UNIT_OF_WORK_NAME' as test_name, case when exists(select 1 from CC_D_UNIT_OF_WORK where UNIT_OF_WORK_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 181' as test_num, 'Non-null:  PRODUCTION_PLAN_ID' as test_name, case when exists(select 1 from CC_D_UNIT_OF_WORK where PRODUCTION_PLAN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 182' as test_num, 'Non-null:  HOURLY_FLAG' as test_name, case when exists(select 1 from CC_D_UNIT_OF_WORK where HOURLY_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Dimension Tables 183' as test_num, 'Non-null:  HANDLE_TIME_UNIT' as test_name, case when exists(select 1 from CC_D_UNIT_OF_WORK where HANDLE_TIME_UNIT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
