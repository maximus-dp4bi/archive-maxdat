select 'Fact Tables 1' as test_num, 'Non-null:  F_ACTUALS_IVR_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where F_ACTUALS_IVR_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 2' as test_num, 'Non-null:  D_PROJECT_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 3' as test_num, 'Non-null:  D_PROGRAM_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 4' as test_num, 'Non-null:  D_GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 5' as test_num, 'Non-null:  D_UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 6' as test_num, 'Non-null:  D_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 7' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 8' as test_num, 'Non-null:  CONTACTS_CREATED' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where CONTACTS_CREATED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 9' as test_num, 'Non-null:  CONTACTS_OFFERED_TO_ACD' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where CONTACTS_OFFERED_TO_ACD is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 10' as test_num, 'Non-null:  CONTACTS_CONTAINED_IN_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where CONTACTS_CONTAINED_IN_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 11' as test_num, 'Non-null:  MIN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where MIN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 12' as test_num, 'Non-null:  MAX_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where MAX_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 13' as test_num, 'Non-null:  MEAN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where MEAN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 14' as test_num, 'Non-null:  MEDIAN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where MEDIAN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 15' as test_num, 'Non-null:  STDDEV_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where STDDEV_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 16' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 17' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_F_ACTUALS_IVR_INTERVAL where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 18' as test_num, 'Non-null:  F_CALL_CENTER_ACTLS_INTRVL_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where F_CALL_CENTER_ACTLS_INTRVL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 19' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 20' as test_num, 'Non-null:  D_PROJECT_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 21' as test_num, 'Non-null:  D_PROGRAM_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 22' as test_num, 'Non-null:  D_GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 23' as test_num, 'Non-null:  D_UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 24' as test_num, 'Non-null:  D_CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 25' as test_num, 'Non-null:  D_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 26' as test_num, 'Non-null:  D_AGENT_ID' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 27' as test_num, 'Non-null:  CONTACTS_RECEIVED_FROM_IVR' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_RECEIVED_FROM_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 28' as test_num, 'Non-null:  CONTACTS_OFFERED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_OFFERED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 29' as test_num, 'Non-null:  CONTACTS_HANDLED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_HANDLED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 30' as test_num, 'Non-null:  CONTACTS_ABANDONED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 31' as test_num, 'Non-null:  MIN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MIN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 32' as test_num, 'Non-null:  MAX_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MAX_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 33' as test_num, 'Non-null:  MEAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 34' as test_num, 'Non-null:  MEDIAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEDIAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 35' as test_num, 'Non-null:  STDDEV_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where STDDEV_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 36' as test_num, 'Non-null:  MIN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MIN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 37' as test_num, 'Non-null:  MAX_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MAX_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 38' as test_num, 'Non-null:  MEAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 39' as test_num, 'Non-null:  MEDIAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEDIAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 40' as test_num, 'Non-null:  STDDEV_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where STDDEV_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 41' as test_num, 'Non-null:  MIN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MIN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 42' as test_num, 'Non-null:  MAX_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MAX_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 43' as test_num, 'Non-null:  MEAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 44' as test_num, 'Non-null:  MEDIAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEDIAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 45' as test_num, 'Non-null:  STDDEV_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where STDDEV_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 46' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_1' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_1 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 47' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_2' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 48' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_3' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_3 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 49' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_4' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_4 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 50' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_5' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_5 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 51' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_6' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_6 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 52' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_7' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_7 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 53' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_8' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_8 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 54' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_9' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_9 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 55' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_10' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SPEED_OF_ANSWER_PERIOD_10 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 56' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_1' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_1 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 57' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_2' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 58' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_3' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_3 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 59' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_4' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_4 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 60' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_5' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_5 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 61' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_6' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_6 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 62' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_7' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_7 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 63' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_8' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_8 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 64' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_9' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_9 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 65' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_10' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ABANDONED_PERIOD_10 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 66' as test_num, 'Non-null:  LABOR_MINUTES_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where LABOR_MINUTES_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 67' as test_num, 'Non-null:  LABOR_MINUTES_AVAILABLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where LABOR_MINUTES_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 68' as test_num, 'Non-null:  LABOR_MINUTES_WAITING' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where LABOR_MINUTES_WAITING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 69' as test_num, 'Non-null:  HEADCOUNT_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where HEADCOUNT_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 70' as test_num, 'Non-null:  HEADCOUNT_AVAILABLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where HEADCOUNT_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 71' as test_num, 'Non-null:  HEADCOUNT_UNAVAILABLE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where HEADCOUNT_UNAVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 72' as test_num, 'Non-null:  CONTACT_INVENTORY' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACT_INVENTORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 73' as test_num, 'Non-null:  CONTACT_INVENTORY_JEOPARDY' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACT_INVENTORY_JEOPARDY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 74' as test_num, 'Non-null:  MIN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MIN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 75' as test_num, 'Non-null:  MAX_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MAX_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 76' as test_num, 'Non-null:  MEAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 77' as test_num, 'Non-null:  MEDIAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where MEDIAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 78' as test_num, 'Non-null:  STDDEV_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where STDDEV_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 79' as test_num, 'Non-null:  CONTACTS_TRANSFERRED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 80' as test_num, 'Non-null:  OUTFLOW_CONTACTS' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where OUTFLOW_CONTACTS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 81' as test_num, 'Non-null:  ANSWER_WAIT_TIME_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where ANSWER_WAIT_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 82' as test_num, 'Non-null:  ABANDON_TIME_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where ABANDON_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 83' as test_num, 'Non-null:  TALK_TIME_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where TALK_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 84' as test_num, 'Non-null:  AFTER_CALL_WORK_TIME_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where AFTER_CALL_WORK_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 85' as test_num, 'Non-null:  SERVICE_LEVEL_ANSWERED_PERCENT' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SERVICE_LEVEL_ANSWERED_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 86' as test_num, 'Non-null:  SERVICE_LEVEL_ANSWERED_COUNT' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SERVICE_LEVEL_ANSWERED_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 87' as test_num, 'Non-null:  SERVICE_LEVEL_ABANDONED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SERVICE_LEVEL_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 88' as test_num, 'Non-null:  CALLS_ON_HOLD' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ON_HOLD is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 89' as test_num, 'Non-null:  HOLD_TIME_TOTAL' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where HOLD_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 90' as test_num, 'Non-null:  SHORT_ABANDONS' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where SHORT_ABANDONS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 91' as test_num, 'Non-null:  CONTACTS_BLOCKED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CONTACTS_BLOCKED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 92' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 93' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 94' as test_num, 'Non-null:  ICR_DEFAULT_ROUTED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where ICR_DEFAULT_ROUTED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 95' as test_num, 'Non-null:  NETWORK_DEFAULT_ROUTED' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where NETWORK_DEFAULT_ROUTED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 96' as test_num, 'Non-null:  RETURN_BUSY' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where RETURN_BUSY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 97' as test_num, 'Non-null:  CALLS_RONA' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_RONA is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 98' as test_num, 'Non-null:  RETURN_RELEASE' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where RETURN_RELEASE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 99' as test_num, 'Non-null:  CALLS_ROUTED_NON_AGENT' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where CALLS_ROUTED_NON_AGENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 100' as test_num, 'Non-null:  ERROR_COUNT' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where ERROR_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 101' as test_num, 'Non-null:  AGENT_ERROR_COUNT' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where AGENT_ERROR_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 102' as test_num, 'Non-null:  RETURN_RING' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where RETURN_RING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 103' as test_num, 'Non-null:  INCOMPLETE_CALLS' as test_name, case when exists(select 1 from CC_F_ACTUALS_QUEUE_INTERVAL where INCOMPLETE_CALLS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 104' as test_num, 'Non-null:  F_AGENT_ACTIVITY_BY_DATE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where F_AGENT_ACTIVITY_BY_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 105' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 106' as test_num, 'Non-null:  D_AGENT_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 107' as test_num, 'Non-null:  D_ACTIVITY_TYPE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_ACTIVITY_TYPE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 108' as test_num, 'Non-null:  D_PROGRAM_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 109' as test_num, 'Non-null:  D_GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 110' as test_num, 'Non-null:  D_GROUP_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_GROUP_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 111' as test_num, 'Non-null:  D_PROJECT_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 112' as test_num, 'Non-null:  D_SITE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where D_SITE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 113' as test_num, 'Non-null:  ACTIVITY_MINUTES' as test_name, case when exists(select 1 from CC_F_AGENT_ACTIVITY_BY_DATE where ACTIVITY_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 114' as test_num, 'Non-null:  F_AGENT_BY_DATE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where F_AGENT_BY_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 115' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 116' as test_num, 'Non-null:  D_AGENT_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 117' as test_num, 'Non-null:  SUPERVISOR_D_AGENT_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where SUPERVISOR_D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 118' as test_num, 'Non-null:  MANAGER_D_AGENT_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where MANAGER_D_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 119' as test_num, 'Non-null:  D_PROJECT_TARGETS_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_PROJECT_TARGETS_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 120' as test_num, 'Non-null:  D_PROGRAM_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 121' as test_num, 'Non-null:  D_GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 122' as test_num, 'Non-null:  D_GROUP_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_GROUP_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 123' as test_num, 'Non-null:  D_SITE_ID' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where D_SITE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 124' as test_num, 'Non-null:  HANDLE_CALLS_COUNT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where HANDLE_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 125' as test_num, 'Non-null:  HANDLE_TIME_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where HANDLE_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 126' as test_num, 'Non-null:  INTERNAL_CALLS_COUNT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where INTERNAL_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 127' as test_num, 'Non-null:  INTERNAL_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where INTERNAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 128' as test_num, 'Non-null:  EXTERNAL_CALLS_COUNT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where EXTERNAL_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 129' as test_num, 'Non-null:  EXTERNAL_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where EXTERNAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 130' as test_num, 'Non-null:  HOLD_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where HOLD_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 131' as test_num, 'Non-null:  RING_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where RING_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 132' as test_num, 'Non-null:  TALK_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 133' as test_num, 'Non-null:  WRAP_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where WRAP_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 134' as test_num, 'Non-null:  FIRST_LOGIN' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where FIRST_LOGIN is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 135' as test_num, 'Non-null:  LAST_LOGOUT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where LAST_LOGOUT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 136' as test_num, 'Non-null:  LOGIN_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where LOGIN_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 137' as test_num, 'Non-null:  SCHEDULED_SHIFT_MINUTES' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where SCHEDULED_SHIFT_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 138' as test_num, 'Non-null:  ACTUAL_SHIFT_MINUTES' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where ACTUAL_SHIFT_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 139' as test_num, 'Non-null:  ACTUAL_OVERTIME_MINUTES' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where ACTUAL_OVERTIME_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 140' as test_num, 'Non-null:  IDLE_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where IDLE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 141' as test_num, 'Non-null:  NOT_READY_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where NOT_READY_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 142' as test_num, 'Non-null:  TALK_RESERVE_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where TALK_RESERVE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 143' as test_num, 'Non-null:  PREDICTIVE_TALK_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where PREDICTIVE_TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 144' as test_num, 'Non-null:  PREVIEW_TALK_SECONDS' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where PREVIEW_TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 145' as test_num, 'Non-null:  PREDICTIVE_CALLS_COUNT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where PREDICTIVE_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 146' as test_num, 'Non-null:  PREVIEW_CALLS_COUNT' as test_name, case when exists(select 1 from CC_F_AGENT_BY_DATE where PREVIEW_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 147' as test_num, 'Non-null:  F_FORECAST_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where F_FORECAST_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 148' as test_num, 'Non-null:  D_PRODUCTION_PLAN_HORIZON_ID' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where D_PRODUCTION_PLAN_HORIZON_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 149' as test_num, 'Non-null:  D_UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where D_UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 150' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 151' as test_num, 'Non-null:  D_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where D_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 152' as test_num, 'Non-null:  FORECAST_VERSION' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where FORECAST_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 153' as test_num, 'Non-null:  CONTACTS_CREATED' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACTS_CREATED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 154' as test_num, 'Non-null:  CONTACTS_OFFERED' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACTS_OFFERED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 155' as test_num, 'Non-null:  CONTACTS_HANDLED' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACTS_HANDLED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 156' as test_num, 'Non-null:  MIN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MIN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 157' as test_num, 'Non-null:  MAX_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MAX_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 158' as test_num, 'Non-null:  MEAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 159' as test_num, 'Non-null:  MEDIAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEDIAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 160' as test_num, 'Non-null:  STDDEV_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where STDDEV_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 161' as test_num, 'Non-null:  MIN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MIN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 162' as test_num, 'Non-null:  MAX_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MAX_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 163' as test_num, 'Non-null:  MEAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 164' as test_num, 'Non-null:  MEDIAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEDIAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 165' as test_num, 'Non-null:  STDDEV_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where STDDEV_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 166' as test_num, 'Non-null:  CONTACTS_ABANDONED' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACTS_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 167' as test_num, 'Non-null:  CONTACT_INVENTORY' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACT_INVENTORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 168' as test_num, 'Non-null:  MIN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MIN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 169' as test_num, 'Non-null:  MAX_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MAX_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 170' as test_num, 'Non-null:  MEAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 171' as test_num, 'Non-null:  MEDIAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEDIAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 172' as test_num, 'Non-null:  STDDEV_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where STDDEV_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 173' as test_num, 'Non-null:  MIN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MIN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 174' as test_num, 'Non-null:  MAX_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MAX_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 175' as test_num, 'Non-null:  MEAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 176' as test_num, 'Non-null:  MEDIAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where MEDIAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 177' as test_num, 'Non-null:  CONTACT_INVENTORY_JEOPARDY' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CONTACT_INVENTORY_JEOPARDY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 178' as test_num, 'Non-null:  STDDEV_HANDLE_TIME' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where STDDEV_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 179' as test_num, 'Non-null:  LABOR_MINUTES_TOTAL' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where LABOR_MINUTES_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 180' as test_num, 'Non-null:  LABOR_MINUTES_AVAILABLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where LABOR_MINUTES_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 181' as test_num, 'Non-null:  LABOR_MINUTES_WAITING' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where LABOR_MINUTES_WAITING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 182' as test_num, 'Non-null:  HEADCOUNT_TOTAL' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where HEADCOUNT_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 183' as test_num, 'Non-null:  HEADCOUNT_AVAILABLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where HEADCOUNT_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 184' as test_num, 'Non-null:  HEADCOUNT_UNAVAILABLE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where HEADCOUNT_UNAVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 185' as test_num, 'Non-null:  SRVC_LEVEL_ANSWERED_PERCENT' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where SRVC_LEVEL_ANSWERED_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 186' as test_num, 'Non-null:  SRVC_LEVEL_ANSWERED_PERCENT_2' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where SRVC_LEVEL_ANSWERED_PERCENT_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 187' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 188' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_F_FORECAST_INTERVAL where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 189' as test_num, 'Non-null:  IVR_SELF_SERVICE_USAGE_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where IVR_SELF_SERVICE_USAGE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 190' as test_num, 'Non-null:  D_PROJECT_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_PROJECT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 191' as test_num, 'Non-null:  D_PROGRAM_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_PROGRAM_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 192' as test_num, 'Non-null:  D_GEOGRAPHY_MASTER_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_GEOGRAPHY_MASTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 193' as test_num, 'Non-null:  D_UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 194' as test_num, 'Non-null:  D_INTERVAL_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 195' as test_num, 'Non-null:  D_DATE_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_DATE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 196' as test_num, 'Non-null:  D_IVR_SELF_SERVICE_PATH_ID' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where D_IVR_SELF_SERVICE_PATH_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 197' as test_num, 'Non-null:  CONTACTS_ENTERING' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where CONTACTS_ENTERING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 198' as test_num, 'Non-null:  CONTACTS_TRANSFERRED' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where CONTACTS_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 199' as test_num, 'Non-null:  CONTACTS_COMPLETED' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where CONTACTS_COMPLETED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 200' as test_num, 'Non-null:  MINUTES_IN_IVR_TRANSFERRED' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where MINUTES_IN_IVR_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 201' as test_num, 'Non-null:  MINUTES_IN_IVR_COMPLETED' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where MINUTES_IN_IVR_COMPLETED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 202' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Fact Tables 203' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_F_IVR_SELF_SERVICE_USAGE where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
