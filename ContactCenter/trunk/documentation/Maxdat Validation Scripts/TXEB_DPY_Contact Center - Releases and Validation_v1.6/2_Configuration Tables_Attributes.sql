select 'Configuration Tables 1' as test_num, 'Non-null:  ACTIVITY_TYPE_ID' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where ACTIVITY_TYPE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 2' as test_num, 'Non-null:  ACTIVITY_TYPE_NAME' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where ACTIVITY_TYPE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 3' as test_num, 'Non-null:  ACTIVITY_TYPE_DESCRIPTION' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where ACTIVITY_TYPE_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 4' as test_num, 'Non-null:  ACTIVITY_TYPE_CATEGORY' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where ACTIVITY_TYPE_CATEGORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 5' as test_num, 'Non-null:  IS_PAID_FLAG' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where IS_PAID_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 6' as test_num, 'Non-null:  IS_AVAILABLE_FLAG' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where IS_AVAILABLE_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 7' as test_num, 'Non-null:  IS_READY_FLAG' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where IS_READY_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 8' as test_num, 'Non-null:  IS_ABSENCE_FLAG' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where IS_ABSENCE_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 9' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 10' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 11' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 12' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 13' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_C_ACTIVITY_TYPE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 14' as test_num, 'Non-null:  C_CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where C_CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 15' as test_num, 'Non-null:  QUEUE_NUMBER' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where QUEUE_NUMBER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 16' as test_num, 'Non-null:  QUEUE_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where QUEUE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 17' as test_num, 'Non-null:  QUEUE_TYPE' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where QUEUE_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 18' as test_num, 'Non-null:  SERVICE_PERCENT' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where SERVICE_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 19' as test_num, 'Non-null:  SERVICE_SECONDS' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where SERVICE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 20' as test_num, 'Non-null:  UNIT_OF_WORK_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where UNIT_OF_WORK_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 21' as test_num, 'Non-null:  PROJECT_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where PROJECT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 22' as test_num, 'Non-null:  PROGRAM_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where PROGRAM_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 23' as test_num, 'Non-null:  REGION_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where REGION_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 24' as test_num, 'Non-null:  STATE_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where STATE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 25' as test_num, 'Non-null:  PROVINCE_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where PROVINCE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 26' as test_num, 'Non-null:  DISTRICT_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where DISTRICT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 27' as test_num, 'Non-null:  COUNTRY_NAME' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where COUNTRY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 28' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 29' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_C_CONTACT_QUEUE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 30' as test_num, 'Non-null:  FILTER_ID' as test_name, case when exists(select 1 from CC_C_FILTER where FILTER_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 31' as test_num, 'Non-null:  FILTER_TYPE' as test_name, case when exists(select 1 from CC_C_FILTER where FILTER_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 32' as test_num, 'Non-null:  VALUE' as test_name, case when exists(select 1 from CC_C_FILTER where VALUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 33' as test_num, 'Non-null:  LOOKUP_ID' as test_name, case when exists(select 1 from CC_C_LOOKUP where LOOKUP_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 34' as test_num, 'Non-null:  LOOKUP_TYPE' as test_name, case when exists(select 1 from CC_C_LOOKUP where LOOKUP_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 35' as test_num, 'Non-null:  LOOKUP_KEY' as test_name, case when exists(select 1 from CC_C_LOOKUP where LOOKUP_KEY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 36' as test_num, 'Non-null:  LOOKUP_VALUE' as test_name, case when exists(select 1 from CC_C_LOOKUP where LOOKUP_VALUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 37' as test_num, 'Non-null:  PROJECT_CONFIG_ID' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where PROJECT_CONFIG_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 38' as test_num, 'Non-null:  PROJECT_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where PROJECT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 39' as test_num, 'Non-null:  PROGRAM_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where PROGRAM_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 40' as test_num, 'Non-null:  REGION_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where REGION_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 41' as test_num, 'Non-null:  STATE_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where STATE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 42' as test_num, 'Non-null:  PROVINCE_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where PROVINCE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 43' as test_num, 'Non-null:  DISTRICT_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where DISTRICT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 44' as test_num, 'Non-null:  COUNTRY_NAME' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where COUNTRY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 45' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 46' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_C_PROJECT_CONFIG where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 47' as test_num, 'Non-null:  UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_C_UNIT_OF_WORK where UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 48' as test_num, 'Non-null:  UNIT_OF_WORK_NAME' as test_name, case when exists(select 1 from CC_C_UNIT_OF_WORK where UNIT_OF_WORK_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 49' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_C_UNIT_OF_WORK where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Configuration Tables 50' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_C_UNIT_OF_WORK where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
