select 'Staging Tables 1' as test_num, 'Non-null:  ACD_AGENT_ACTIVITY_ID' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where ACD_AGENT_ACTIVITY_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 2' as test_num, 'Non-null:  AGENT_CALLS_DT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where AGENT_CALLS_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 3' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 4' as test_num, 'Non-null:  LOGIN_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where LOGIN_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 5' as test_num, 'Non-null:  EXTERNAL_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where EXTERNAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 6' as test_num, 'Non-null:  INTERNAL_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where INTERNAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 7' as test_num, 'Non-null:  IDLE_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where IDLE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 8' as test_num, 'Non-null:  NOT_READY_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where NOT_READY_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 9' as test_num, 'Non-null:  ACD_TALK_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where ACD_TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 10' as test_num, 'Non-null:  HOLD_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where HOLD_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 11' as test_num, 'Non-null:  AFTER_CALL_WORK_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where AFTER_CALL_WORK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 12' as test_num, 'Non-null:  TALK_RESERVE_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where TALK_RESERVE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 13' as test_num, 'Non-null:  RING_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where RING_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 14' as test_num, 'Non-null:  PREDICTIVE_TALK_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where PREDICTIVE_TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 15' as test_num, 'Non-null:  PREVIEW_TALK_SECONDS' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where PREVIEW_TALK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 16' as test_num, 'Non-null:  ACD_CALLS_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where ACD_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 17' as test_num, 'Non-null:  EXTERNAL_CALLS_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where EXTERNAL_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 18' as test_num, 'Non-null:  INTERNAL_CALLS_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where INTERNAL_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 19' as test_num, 'Non-null:  PREDICTIVE_CALLS_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where PREDICTIVE_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 20' as test_num, 'Non-null:  PREVIEW_CALLS_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where PREVIEW_CALLS_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 21' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 22' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 23' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_ACD_AGENT_ACTIVITY where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 24' as test_num, 'Non-null:  ACD_INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where ACD_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 25' as test_num, 'Non-null:  INTERVAL_DATE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where INTERVAL_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 26' as test_num, 'Non-null:  CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 27' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 28' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 29' as test_num, 'Non-null:  CONTACTS_RECEIVED_FROM_IVR' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_RECEIVED_FROM_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 30' as test_num, 'Non-null:  CONTACTS_OFFERED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_OFFERED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 31' as test_num, 'Non-null:  CONTACTS_HANDLED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_HANDLED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 32' as test_num, 'Non-null:  CONTACTS_ABANDONED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 33' as test_num, 'Non-null:  MIN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MIN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 34' as test_num, 'Non-null:  MAX_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MAX_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 35' as test_num, 'Non-null:  MEAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 36' as test_num, 'Non-null:  MEDIAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEDIAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 37' as test_num, 'Non-null:  STDDEV_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where STDDEV_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 38' as test_num, 'Non-null:  MIN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MIN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 39' as test_num, 'Non-null:  MAX_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MAX_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 40' as test_num, 'Non-null:  MEAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 41' as test_num, 'Non-null:  MEDIAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEDIAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 42' as test_num, 'Non-null:  STDDEV_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where STDDEV_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 43' as test_num, 'Non-null:  MIN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MIN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 44' as test_num, 'Non-null:  MAX_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MAX_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 45' as test_num, 'Non-null:  MEAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 46' as test_num, 'Non-null:  MEDIAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEDIAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 47' as test_num, 'Non-null:  STDDEV_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where STDDEV_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 48' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_1' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_1 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 49' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_2' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 50' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_3' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_3 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 51' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_4' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_4 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 52' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_5' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_5 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 53' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_6' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_6 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 54' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_7' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_7 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 55' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_8' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_8 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 56' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_9' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_9 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 57' as test_num, 'Non-null:  SPEED_OF_ANSWER_PERIOD_10' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SPEED_OF_ANSWER_PERIOD_10 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 58' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_1' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_1 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 59' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_2' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 60' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_3' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_3 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 61' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_4' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_4 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 62' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_5' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_5 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 63' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_6' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_6 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 64' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_7' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_7 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 65' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_8' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_8 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 66' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_9' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_9 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 67' as test_num, 'Non-null:  CALLS_ABANDONED_PERIOD_10' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ABANDONED_PERIOD_10 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 68' as test_num, 'Non-null:  LABOR_MINUTES_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where LABOR_MINUTES_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 69' as test_num, 'Non-null:  LABOR_MINUTES_WAITING' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where LABOR_MINUTES_WAITING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 70' as test_num, 'Non-null:  HEADCOUNT_AVAILABLE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where HEADCOUNT_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 71' as test_num, 'Non-null:  CONTACT_INVENTORY' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACT_INVENTORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 72' as test_num, 'Non-null:  CONTACT_INVENTORY_JEOPARDY' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACT_INVENTORY_JEOPARDY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 73' as test_num, 'Non-null:  CONTACT_INVENTORY_AGE_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACT_INVENTORY_AGE_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 74' as test_num, 'Non-null:  MIN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MIN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 75' as test_num, 'Non-null:  MAX_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MAX_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 76' as test_num, 'Non-null:  MEAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 77' as test_num, 'Non-null:  MEDIAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where MEDIAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 78' as test_num, 'Non-null:  STDDEV_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where STDDEV_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 79' as test_num, 'Non-null:  CONTACTS_TRANSFERRED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 80' as test_num, 'Non-null:  OUTFLOW_CONTACTS' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where OUTFLOW_CONTACTS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 81' as test_num, 'Non-null:  ANSWER_WAIT_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where ANSWER_WAIT_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 82' as test_num, 'Non-null:  ABANDON_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where ABANDON_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 83' as test_num, 'Non-null:  TALK_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where TALK_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 84' as test_num, 'Non-null:  AFTER_CALL_WORK_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where AFTER_CALL_WORK_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 85' as test_num, 'Non-null:  SERVICE_LEVEL_ANSWERED_PERCENT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SERVICE_LEVEL_ANSWERED_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 86' as test_num, 'Non-null:  SERVICE_LEVEL_ANSWERED_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SERVICE_LEVEL_ANSWERED_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 87' as test_num, 'Non-null:  SERVICE_LEVEL_ABANDONED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SERVICE_LEVEL_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 88' as test_num, 'Non-null:  CALLS_ON_HOLD' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ON_HOLD is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 89' as test_num, 'Non-null:  HOLD_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where HOLD_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 90' as test_num, 'Non-null:  IVR_TIME_TOTAL' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where IVR_TIME_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 91' as test_num, 'Non-null:  SHORT_ABANDONS' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where SHORT_ABANDONS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 92' as test_num, 'Non-null:  CONTACTS_BLOCKED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CONTACTS_BLOCKED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 93' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 94' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 95' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 96' as test_num, 'Non-null:  ICR_DEFAULT_ROUTED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where ICR_DEFAULT_ROUTED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 97' as test_num, 'Non-null:  NETWORK_DEFAULT_ROUTED' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where NETWORK_DEFAULT_ROUTED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 98' as test_num, 'Non-null:  RETURN_BUSY' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where RETURN_BUSY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 99' as test_num, 'Non-null:  CALLS_RONA' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_RONA is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 100' as test_num, 'Non-null:  RETURN_RELEASE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where RETURN_RELEASE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 101' as test_num, 'Non-null:  CALLS_ROUTED_NON_AGENT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where CALLS_ROUTED_NON_AGENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 102' as test_num, 'Non-null:  ERROR_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where ERROR_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 103' as test_num, 'Non-null:  AGENT_ERROR_COUNT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where AGENT_ERROR_COUNT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 104' as test_num, 'Non-null:  RETURN_RING' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where RETURN_RING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 105' as test_num, 'Non-null:  INCOMPLETE_CALLS' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL where INCOMPLETE_CALLS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 106' as test_num, 'Non-null:  ACD_INTERVAL_PERIOD_ID' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where ACD_INTERVAL_PERIOD_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 107' as test_num, 'Non-null:  PERIOD_TYPE' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 108' as test_num, 'Non-null:  PERIOD_1_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_1_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 109' as test_num, 'Non-null:  PERIOD_2_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_2_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 110' as test_num, 'Non-null:  PERIOD_3_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_3_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 111' as test_num, 'Non-null:  PERIOD_4_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_4_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 112' as test_num, 'Non-null:  PERIOD_5_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_5_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 113' as test_num, 'Non-null:  PERIOD_6_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_6_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 114' as test_num, 'Non-null:  PERIOD_7_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_7_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 115' as test_num, 'Non-null:  PERIOD_8_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_8_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 116' as test_num, 'Non-null:  PERIOD_9_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_9_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 117' as test_num, 'Non-null:  PERIOD_10_UPPER_BOUND' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where PERIOD_10_UPPER_BOUND is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 118' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 119' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 120' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_ACD_INTERVAL_PERIOD where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 121' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_AGENT where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 122' as test_num, 'Non-null:  LOGIN_ID' as test_name, case when exists(select 1 from CC_S_AGENT where LOGIN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 123' as test_num, 'Non-null:  PROJECT_CONFIG_ID' as test_name, case when exists(select 1 from CC_S_AGENT where PROJECT_CONFIG_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 124' as test_num, 'Non-null:  FIRST_NAME' as test_name, case when exists(select 1 from CC_S_AGENT where FIRST_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 125' as test_num, 'Non-null:  LAST_NAME' as test_name, case when exists(select 1 from CC_S_AGENT where LAST_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 126' as test_num, 'Non-null:  MIDDLE_INITIAL' as test_name, case when exists(select 1 from CC_S_AGENT where MIDDLE_INITIAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 127' as test_num, 'Non-null:  JOB_TITLE' as test_name, case when exists(select 1 from CC_S_AGENT where JOB_TITLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 128' as test_num, 'Non-null:  LANGUAGE' as test_name, case when exists(select 1 from CC_S_AGENT where LANGUAGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 129' as test_num, 'Non-null:  SITE_NAME' as test_name, case when exists(select 1 from CC_S_AGENT where SITE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 130' as test_num, 'Non-null:  HOURLY_RATE' as test_name, case when exists(select 1 from CC_S_AGENT where HOURLY_RATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 131' as test_num, 'Non-null:  RATE_CURRENCY' as test_name, case when exists(select 1 from CC_S_AGENT where RATE_CURRENCY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 132' as test_num, 'Non-null:  AGENT_GROUP' as test_name, case when exists(select 1 from CC_S_AGENT where AGENT_GROUP is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 133' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_AGENT where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 134' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_AGENT where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 135' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_AGENT where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 136' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_AGENT where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 137' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_AGENT where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 138' as test_num, 'Non-null:  AGENT_ABSENCE_ID' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where AGENT_ABSENCE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 139' as test_num, 'Non-null:  ABSENCE_DATE' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where ABSENCE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 140' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 141' as test_num, 'Non-null:  ACTIVITY_TYPE_ID' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where ACTIVITY_TYPE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 142' as test_num, 'Non-null:  ABSENCE_MINUTES' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where ABSENCE_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 143' as test_num, 'Non-null:  ABSENCE_START_TIME' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where ABSENCE_START_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 144' as test_num, 'Non-null:  ABSENCE_END_TIME' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where ABSENCE_END_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 145' as test_num, 'Non-null:  IS_PLANNED_FLAG' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where IS_PLANNED_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 146' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 147' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 148' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_AGENT_ABSENCE where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 149' as test_num, 'Non-null:  AGENT_SUPERVISOR_ID' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where AGENT_SUPERVISOR_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 150' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 151' as test_num, 'Non-null:  SUPERVISOR_AGENT_ID' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where SUPERVISOR_AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 152' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 153' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 154' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_AGENT_SUPERVISOR where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 155' as test_num, 'Non-null:  AGENT_WORK_DAY_ID' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where AGENT_WORK_DAY_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 156' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 157' as test_num, 'Non-null:  WORK_DATE' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where WORK_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 158' as test_num, 'Non-null:  FIRST_LOGIN' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where FIRST_LOGIN is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 159' as test_num, 'Non-null:  LAST_LOGOUT' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where LAST_LOGOUT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 160' as test_num, 'Non-null:  SCHEDULED_SHIFT_MINUTES' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where SCHEDULED_SHIFT_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 161' as test_num, 'Non-null:  ACTUAL_SHIFT_MINUTES' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where ACTUAL_SHIFT_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 162' as test_num, 'Non-null:  ACTUAL_OVERTIME_MINUTES' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where ACTUAL_OVERTIME_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 163' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 164' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 165' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_AGENT_WORK_DAY where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 166' as test_num, 'Non-null:  CALL_DETAIL_ID' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_DETAIL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 167' as test_num, 'Non-null:  CALL_SEGMENT_ID' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_SEGMENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 168' as test_num, 'Non-null:  CALL_DATE' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 169' as test_num, 'Non-null:  CALL_TYPE' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 170' as test_num, 'Non-null:  SOURCE_CALL_ID' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where SOURCE_CALL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 171' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 172' as test_num, 'Non-null:  DNIS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where DNIS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 173' as test_num, 'Non-null:  DISPOSITION' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where DISPOSITION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 174' as test_num, 'Non-null:  CALL_SEGMENT_END_DT' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_SEGMENT_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 175' as test_num, 'Non-null:  QUEUE_NAME' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where QUEUE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 176' as test_num, 'Non-null:  LANGUAGE' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where LANGUAGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 177' as test_num, 'Non-null:  ANI_PHONE_NUMBER' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where ANI_PHONE_NUMBER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 178' as test_num, 'Non-null:  QUEUE_TIME_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where QUEUE_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 179' as test_num, 'Non-null:  RING_TIME_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where RING_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 180' as test_num, 'Non-null:  HOLD_TIME_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where HOLD_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 181' as test_num, 'Non-null:  AFTER_CALL_WORK_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where AFTER_CALL_WORK_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 182' as test_num, 'Non-null:  TALK_TIME_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where TALK_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 183' as test_num, 'Non-null:  IVR_TIME_SECONDS' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where IVR_TIME_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 184' as test_num, 'Non-null:  XFERRED_OUT_FLAG' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where XFERRED_OUT_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 185' as test_num, 'Non-null:  VOICEMAIL_FLAG' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where VOICEMAIL_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 186' as test_num, 'Non-null:  CALL_ABANDONED_FLAG' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where CALL_ABANDONED_FLAG is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 187' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 188' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 189' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 190' as test_num, 'Non-null:  TRANSFER_TO' as test_name, case when exists(select 1 from CC_S_CALL_DETAIL where TRANSFER_TO is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 191' as test_num, 'Non-null:  CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 192' as test_num, 'Non-null:  QUEUE_NUMBER' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where QUEUE_NUMBER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 193' as test_num, 'Non-null:  PROJECT_CONFIG_ID' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where PROJECT_CONFIG_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 194' as test_num, 'Non-null:  QUEUE_NAME' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where QUEUE_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 195' as test_num, 'Non-null:  SOURCE_QUEUE' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where SOURCE_QUEUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 196' as test_num, 'Non-null:  QUEUE_TYPE' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where QUEUE_TYPE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 197' as test_num, 'Non-null:  SERVICE_PERCENT' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where SERVICE_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 198' as test_num, 'Non-null:  SERVICE_SECONDS' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where SERVICE_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 199' as test_num, 'Non-null:  QUEUE_GROUP' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where QUEUE_GROUP is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 200' as test_num, 'Non-null:  INTERVAL_MINUTES' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where INTERVAL_MINUTES is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 201' as test_num, 'Non-null:  AVG_SPEED_ANSR_INTRVL_PRIOD_ID' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where AVG_SPEED_ANSR_INTRVL_PRIOD_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 202' as test_num, 'Non-null:  CALLS_ABANDOND_INTRVL_PRIOD_ID' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where CALLS_ABANDOND_INTRVL_PRIOD_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 203' as test_num, 'Non-null:  UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 204' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 205' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_CONTACT_QUEUE where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 206' as test_num, 'Non-null:  FCST_INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where FCST_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 207' as test_num, 'Non-null:  PRODUCTION_PLAN_HORIZON_ID' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where PRODUCTION_PLAN_HORIZON_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 208' as test_num, 'Non-null:  UNIT_OF_WORK_ID' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where UNIT_OF_WORK_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 209' as test_num, 'Non-null:  INTERVAL_DATE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where INTERVAL_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 210' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 211' as test_num, 'Non-null:  FORECAST_VERSION' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where FORECAST_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 212' as test_num, 'Non-null:  CONTACTS_CREATED' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACTS_CREATED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 213' as test_num, 'Non-null:  CONTACTS_OFFERED' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACTS_OFFERED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 214' as test_num, 'Non-null:  CONTACTS_HANDLED' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACTS_HANDLED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 215' as test_num, 'Non-null:  MIN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MIN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 216' as test_num, 'Non-null:  MAX_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MAX_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 217' as test_num, 'Non-null:  MEAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 218' as test_num, 'Non-null:  MEDIAN_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEDIAN_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 219' as test_num, 'Non-null:  STDDEV_SPEED_TO_HANDLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where STDDEV_SPEED_TO_HANDLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 220' as test_num, 'Non-null:  MIN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MIN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 221' as test_num, 'Non-null:  MAX_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MAX_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 222' as test_num, 'Non-null:  MEAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 223' as test_num, 'Non-null:  MEDIAN_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEDIAN_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 224' as test_num, 'Non-null:  STDDEV_SPEED_OF_ANSWER' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where STDDEV_SPEED_OF_ANSWER is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 225' as test_num, 'Non-null:  CONTACTS_ABANDONED' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACTS_ABANDONED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 226' as test_num, 'Non-null:  CONTACT_INVENTORY' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACT_INVENTORY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 227' as test_num, 'Non-null:  MIN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MIN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 228' as test_num, 'Non-null:  MAX_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MAX_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 229' as test_num, 'Non-null:  MEAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 230' as test_num, 'Non-null:  MEDIAN_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEDIAN_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 231' as test_num, 'Non-null:  STDDEV_CONTACT_INVENTORY_AGE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where STDDEV_CONTACT_INVENTORY_AGE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 232' as test_num, 'Non-null:  MIN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MIN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 233' as test_num, 'Non-null:  MAX_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MAX_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 234' as test_num, 'Non-null:  MEAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 235' as test_num, 'Non-null:  MEDIAN_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where MEDIAN_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 236' as test_num, 'Non-null:  CONTACT_INVENTORY_JEOPARDY' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where CONTACT_INVENTORY_JEOPARDY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 237' as test_num, 'Non-null:  STDDEV_HANDLE_TIME' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where STDDEV_HANDLE_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 238' as test_num, 'Non-null:  LABOR_MINUTES_TOTAL' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where LABOR_MINUTES_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 239' as test_num, 'Non-null:  LABOR_MINUTES_AVAILABLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where LABOR_MINUTES_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 240' as test_num, 'Non-null:  LABOR_MINUTES_WAITING' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where LABOR_MINUTES_WAITING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 241' as test_num, 'Non-null:  HEADCOUNT_TOTAL' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where HEADCOUNT_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 242' as test_num, 'Non-null:  HEADCOUNT_AVAILABLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where HEADCOUNT_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 243' as test_num, 'Non-null:  HEADCOUNT_UNAVAILABLE' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where HEADCOUNT_UNAVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 244' as test_num, 'Non-null:  SRVC_LEVEL_ANSWERED_PERCENT' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where SRVC_LEVEL_ANSWERED_PERCENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 245' as test_num, 'Non-null:  SRVC_LEVEL_ANSWERED_PERCENT_2' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where SRVC_LEVEL_ANSWERED_PERCENT_2 is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 246' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 247' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 248' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_FCST_INTERVAL where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 249' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 250' as test_num, 'Non-null:  INTERVAL_START_DATE' as test_name, case when exists(select 1 from CC_S_INTERVAL where INTERVAL_START_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 251' as test_num, 'Non-null:  INTERVAL_END_DATE' as test_name, case when exists(select 1 from CC_S_INTERVAL where INTERVAL_END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 252' as test_num, 'Non-null:  INTERVAL_SECONDS' as test_name, case when exists(select 1 from CC_S_INTERVAL where INTERVAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 253' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_INTERVAL where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 254' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_INTERVAL where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 255' as test_num, 'Non-null:  IVR_INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where IVR_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 256' as test_num, 'Non-null:  PROJECT_CONFIG_ID' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where PROJECT_CONFIG_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 257' as test_num, 'Non-null:  INTERVAL_DATE' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where INTERVAL_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 258' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 259' as test_num, 'Non-null:  CONTACTS_CREATED' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where CONTACTS_CREATED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 260' as test_num, 'Non-null:  CONTACTS_OFFERED_TO_ACD' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where CONTACTS_OFFERED_TO_ACD is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 261' as test_num, 'Non-null:  CONTACTS_CONTAINED_IN_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where CONTACTS_CONTAINED_IN_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 262' as test_num, 'Non-null:  MIN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where MIN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 263' as test_num, 'Non-null:  MAX_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where MAX_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 264' as test_num, 'Non-null:  MEAN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where MEAN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 265' as test_num, 'Non-null:  MEDIAN_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where MEDIAN_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 266' as test_num, 'Non-null:  STDDEV_TIME_IN_THE_IVR' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where STDDEV_TIME_IN_THE_IVR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 267' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 268' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 269' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_IVR_INTERVAL where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 270' as test_num, 'Non-null:  IVR_SELF_SERVICE_PATH_ID' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where IVR_SELF_SERVICE_PATH_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 271' as test_num, 'Non-null:  CODE' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where CODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 272' as test_num, 'Non-null:  DESCRIPTION' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 273' as test_num, 'Non-null:  BEGIN_NODE' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where BEGIN_NODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 274' as test_num, 'Non-null:  END_NODE' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where END_NODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 275' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 276' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_PATH where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 277' as test_num, 'Non-null:  IVR_SELF_SERVICE_USAGE_ID' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where IVR_SELF_SERVICE_USAGE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 278' as test_num, 'Non-null:  PROJECT_CONFIG_ID' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where PROJECT_CONFIG_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 279' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 280' as test_num, 'Non-null:  IVR_SELF_SERVICE_PATH_ID' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where IVR_SELF_SERVICE_PATH_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 281' as test_num, 'Non-null:  CONTACTS_ENTERING' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where CONTACTS_ENTERING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 282' as test_num, 'Non-null:  CONTACTS_TRANSFERRED' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where CONTACTS_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 283' as test_num, 'Non-null:  CONTACTS_COMPLETED' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where CONTACTS_COMPLETED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 284' as test_num, 'Non-null:  MINUTES_IN_IVR_TRANSFERRED' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where MINUTES_IN_IVR_TRANSFERRED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 285' as test_num, 'Non-null:  MINUTES_IN_IVR_COMPLETED' as test_name, case when exists(select 1 from CC_S_IVR_SELF_SERVICE_USAGE where MINUTES_IN_IVR_COMPLETED is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 286' as test_num, 'Non-null:  PRODUCTION_PLAN_ID' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where PRODUCTION_PLAN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 287' as test_num, 'Non-null:  PRODUCTION_PLAN_NAME' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where PRODUCTION_PLAN_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 288' as test_num, 'Non-null:  PRODUCTION_PLAN_DESCRIPTION' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where PRODUCTION_PLAN_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 289' as test_num, 'Non-null:  PROGRAM_NAME' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where PROGRAM_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 290' as test_num, 'Non-null:  PROJECT_NAME' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where PROJECT_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 291' as test_num, 'Non-null:  GEOGRAPHY_NAME' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where GEOGRAPHY_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 292' as test_num, 'Non-null:  EFFECTIVE_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where EFFECTIVE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 293' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 294' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 295' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 296' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 297' as test_num, 'Non-null:  PRODUCTION_PLAN_HORIZON_ID' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where PRODUCTION_PLAN_HORIZON_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 298' as test_num, 'Non-null:  PRODUCTION_PLAN_ID' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where PRODUCTION_PLAN_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 299' as test_num, 'Non-null:  HORIZON_START_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_START_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 300' as test_num, 'Non-null:  HORIZON_START_HOUR' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_START_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 301' as test_num, 'Non-null:  HORIZON_END_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 302' as test_num, 'Non-null:  HORIZON_END_HOUR' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_END_HOUR is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 303' as test_num, 'Non-null:  HORIZON_NAME' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_NAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 304' as test_num, 'Non-null:  HORIZON_DESCRIPTION' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where HORIZON_DESCRIPTION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 305' as test_num, 'Non-null:  INITIAL_VERSION' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where INITIAL_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 306' as test_num, 'Non-null:  FINAL_VERSION' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where FINAL_VERSION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 307' as test_num, 'Non-null:  CREATE_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where CREATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 308' as test_num, 'Non-null:  LAST_UPDATE_DATE' as test_name, case when exists(select 1 from CC_S_PRODUCTION_PLAN_HORIZON where LAST_UPDATE_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 309' as test_num, 'Non-null:  ID' as test_name, case when exists(select 1 from CC_S_TIMEZONEAM where ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 310' as test_num, 'Non-null:  TIMEZONE' as test_name, case when exists(select 1 from CC_S_TIMEZONEAM where TIMEZONE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 311' as test_num, 'Non-null:  STARTTIME' as test_name, case when exists(select 1 from CC_S_TIMEZONEAM where STARTTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 312' as test_num, 'Non-null:  ENDTIME' as test_name, case when exists(select 1 from CC_S_TIMEZONEAM where ENDTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 313' as test_num, 'Non-null:  BIAS' as test_name, case when exists(select 1 from CC_S_TIMEZONEAM where BIAS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 314' as test_num, 'Non-null:  EMPLOYEEID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where EMPLOYEEID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 315' as test_num, 'Non-null:  STARTTIME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where STARTTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 316' as test_num, 'Non-null:  ENDTIME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ENDTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 317' as test_num, 'Non-null:  LOGINID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where LOGINID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 318' as test_num, 'Non-null:  ACTIVITYID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ACTIVITYID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 319' as test_num, 'Non-null:  ACTIVITYCATEGORYNAME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ACTIVITYCATEGORYNAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 320' as test_num, 'Non-null:  ACTIVITYNAME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ACTIVITYNAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 321' as test_num, 'Non-null:  TIMEENTRYEVENTID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where TIMEENTRYEVENTID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 322' as test_num, 'Non-null:  ISPAID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ISPAID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 323' as test_num, 'Non-null:  ORGANIZATIONID' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ORGANIZATIONID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 324' as test_num, 'Non-null:  ORGANIZATIONNAME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where ORGANIZATIONNAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 325' as test_num, 'Non-null:  TIMEZONE' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where TIMEZONE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 326' as test_num, 'Non-null:  LOCAL_STARTTIME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where LOCAL_STARTTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 327' as test_num, 'Non-null:  LOCAL_ENDTIME' as test_name, case when exists(select 1 from CC_S_TMP_ACTUALEVENTTIMELINE where LOCAL_ENDTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 328' as test_num, 'Non-null:  DATETIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where DATETIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 329' as test_num, 'Non-null:  SKILLTARGETID' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where SKILLTARGETID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 330' as test_num, 'Non-null:  TIMEZONE' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where TIMEZONE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 331' as test_num, 'Non-null:  LOGGEDONTIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where LOGGEDONTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 332' as test_num, 'Non-null:  AVAILTIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where AVAILTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 333' as test_num, 'Non-null:  NOTREADYTIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where NOTREADYTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 334' as test_num, 'Non-null:  TALKOTHERTIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_INTERVAL where TALKOTHERTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 335' as test_num, 'Non-null:  SKILLTARGETID' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_LOGOUT where SKILLTARGETID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 336' as test_num, 'Non-null:  LOGOUTDATETIME' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_LOGOUT where LOGOUTDATETIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 337' as test_num, 'Non-null:  TIMEZONE' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_LOGOUT where TIMEZONE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 338' as test_num, 'Non-null:  LOGINDURATION' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_LOGOUT where LOGINDURATION is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 339' as test_num, 'Non-null:  REASONCODE' as test_name, case when exists(select 1 from CC_S_TMP_CISCO_AGENT_LOGOUT where REASONCODE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 340' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 341' as test_num, 'Non-null:  INTERVAL_START_DATE' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where INTERVAL_START_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 342' as test_num, 'Non-null:  INTERVAL_END_DATE' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where INTERVAL_END_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 343' as test_num, 'Non-null:  INTERVAL_SECONDS' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where INTERVAL_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 344' as test_num, 'Non-null:  RECORD_EFF_DT' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where RECORD_EFF_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 345' as test_num, 'Non-null:  RECORD_END_DT' as test_name, case when exists(select 1 from CC_S_TMP_INTERVAL where RECORD_END_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 346' as test_num, 'Non-null:  ID' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 347' as test_num, 'Non-null:  CLIENT' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where CLIENT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 348' as test_num, 'Non-null:  STEPTIME' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where STEPTIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 349' as test_num, 'Non-null:  CONNID' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where CONNID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 350' as test_num, 'Non-null:  SESSIONID' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where SESSIONID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 351' as test_num, 'Non-null:  STEPNAME' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where STEPNAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 352' as test_num, 'Non-null:  STEPVALUE' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where STEPVALUE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 353' as test_num, 'Non-null:  NODENAME' as test_name, case when exists(select 1 from CC_S_TMP_IVR_STEP where NODENAME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 354' as test_num, 'Non-null:  WFM_AGENT_ACTIVITY_ID' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where WFM_AGENT_ACTIVITY_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 355' as test_num, 'Non-null:  AGENT_ID' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where AGENT_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 356' as test_num, 'Non-null:  ACTIVITY_TYPE_ID' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where ACTIVITY_TYPE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 357' as test_num, 'Non-null:  ACTIVITY_START_TIME' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where ACTIVITY_START_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 358' as test_num, 'Non-null:  ACTIVITY_END_TIME' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where ACTIVITY_END_TIME is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 359' as test_num, 'Non-null:  ACTIVITY_DURATION_SECONDS' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where ACTIVITY_DURATION_SECONDS is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 360' as test_num, 'Non-null:  ACTIVITY_DT' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where ACTIVITY_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 361' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 362' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 363' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_WFM_AGENT_ACTIVITY where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 364' as test_num, 'Non-null:  WFM_INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where WFM_INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 365' as test_num, 'Non-null:  INTERVAL_DATE' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where INTERVAL_DATE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 366' as test_num, 'Non-null:  CONTACT_QUEUE_ID' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where CONTACT_QUEUE_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 367' as test_num, 'Non-null:  INTERVAL_ID' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where INTERVAL_ID is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 368' as test_num, 'Non-null:  LABOR_MINUTES_TOTAL' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where LABOR_MINUTES_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 369' as test_num, 'Non-null:  LABOR_MINUTES_WAITING' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where LABOR_MINUTES_WAITING is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 370' as test_num, 'Non-null:  LABOR_MINUTES_AVAILABLE' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where LABOR_MINUTES_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 371' as test_num, 'Non-null:  HEADCOUNT_TOTAL' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where HEADCOUNT_TOTAL is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 372' as test_num, 'Non-null:  HEADCOUNT_AVAILABLE' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where HEADCOUNT_AVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 373' as test_num, 'Non-null:  HEADCOUNT_UNAVAILABLE' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where HEADCOUNT_UNAVAILABLE is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 374' as test_num, 'Non-null:  EXTRACT_DT' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where EXTRACT_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 375' as test_num, 'Non-null:  LAST_UPDATE_DT' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where LAST_UPDATE_DT is not null) then 'PASS' else 'FAIL' end as test_result from dual;
select 'Staging Tables 376' as test_num, 'Non-null:  LAST_UPDATE_BY' as test_name, case when exists(select 1 from CC_S_WFM_INTERVAL where LAST_UPDATE_BY is not null) then 'PASS' else 'FAIL' end as test_result from dual;
