/*
SELECT * FROM S_METRIC;
SELECT * FROM S_PROJECT_REPORT;
DELETE S_METRIC;
DELETE S_METRIC_AUD;
DELETE S_PROJECT_REPORT;
*/


insert into s_project_report (
  S_PROJECT_REPORT_ID
  , D_PROJECT_ID
  , D_PROGRAM_ID
  , D_GEOGRAPHY_MASTER_ID
  , D_REPORTING_PERIOD_ID
  , APPROVED_DATE
  , CREATE_DATE
  , CREATED_BY
  , LAST_MODIFIED_DATE
  , UPDATED_BY
  , APPROVED
  , REPORT_TYPE
  , STATUS
  , IS_ACTUALS_TREND_PROCESSED
  , IS_FUTURE_TRENDS_PROCESSED
  , IS_ERROR
  , FUNCTIONAL_AREA
)
with t as (
  select 
    D_PROJECT_ID
    , D_PROGRAM_ID
    , D_GEOGRAPHY_MASTER_ID
    , D_REPORTING_PERIOD_ID
    , 'MOTS' AS CREATED_BY --CREATED_BY
    , 'MOTS' AS UPDATED_BY --UPDATED_BY
    , MIN(TRUNC(f.CREATE_DATE)) AS CREATE_DATE
    , MAX(TRUNC(f.LAST_MODIFIED_DATE)) AS LAST_MODIFIED_DATE
  from f_metric f
  inner join d_metric_project mp on f.d_metric_project_id = mp.d_metric_project_id
  WHERE ACTUAL_VALUE IS NOT NULL
  GROUP BY 
    D_PROJECT_ID
    , D_PROGRAM_ID
    , D_GEOGRAPHY_MASTER_ID
    , D_REPORTING_PERIOD_ID
)
select 
  SEQ_S_PROJECT_REPORT.NEXTVAL
  , D_PROJECT_ID
  , D_PROGRAM_ID
  , D_GEOGRAPHY_MASTER_ID
  , D_REPORTING_PERIOD_ID
  , CREATE_DATE AS APPROVED_DATE --APPROVED_DATE
  , CREATE_DATE --CREATE_DATE
  , 'SYSTEM' --CREATED_BY
  , LAST_MODIFIED_DATE --LAST_MODIFIED_DATE
  , 'SYSTEM' --UPDATED_BY
  , 1 --APPROVED
  , 'actuals' --REPORT_TYPE
  , 'Approved' --STATUS
  , 'Y' --IS_ACTUALS_TREND_PROCESSED
  , 'Y' --IS_FUTURE_TRENDS_PROCESSED
  , 'N' --IS_ERROR
  , 'Contact Center' --FUNCTIONAL_AREA  
from t
;

insert into s_project_report (
  S_PROJECT_REPORT_ID
  , D_PROJECT_ID
  , D_PROGRAM_ID
  , D_GEOGRAPHY_MASTER_ID
  , D_REPORTING_PERIOD_ID
  , APPROVED_DATE
  , CREATE_DATE
  , CREATED_BY
  , LAST_MODIFIED_DATE
  , UPDATED_BY
  , APPROVED
  , REPORT_TYPE
  , STATUS
  , IS_ACTUALS_TREND_PROCESSED
  , IS_FUTURE_TRENDS_PROCESSED
  , IS_ERROR
  , FUNCTIONAL_AREA
)
with t as (
  select 
    D_PROJECT_ID
    , D_PROGRAM_ID
    , D_GEOGRAPHY_MASTER_ID
    , D_REPORTING_PERIOD_ID
    , 'MOTS' AS CREATED_BY
    , 'MOTS' AS UPDATED_BY
    , MIN(TRUNC(f.CREATE_DATE)) AS CREATE_DATE
    , MAX(TRUNC(f.LAST_MODIFIED_DATE)) AS LAST_MODIFIED_DATE
  from f_metric f
  inner join d_metric_project mp on f.d_metric_project_id = mp.d_metric_project_id
  WHERE FORECAST_VALUE IS NOT NULL
  GROUP BY 
    D_PROJECT_ID
    , D_PROGRAM_ID
    , D_GEOGRAPHY_MASTER_ID
    , D_REPORTING_PERIOD_ID
)
select 
  SEQ_S_PROJECT_REPORT.NEXTVAL
  , D_PROJECT_ID
  , D_PROGRAM_ID
  , D_GEOGRAPHY_MASTER_ID
  , D_REPORTING_PERIOD_ID
  , CREATE_DATE AS APPROVED_DATE --APPROVED_DATE
  , CREATE_DATE --CREATE_DATE
  , 'SYSTEM' --CREATED_BY
  , LAST_MODIFIED_DATE --LAST_MODIFIED_DATE
  , 'SYSTEM' --UPDATED_BY
  , 1 --APPROVED
  , 'forecasts' --REPORT_TYPE
  , 'Approved' --STATUS
  , 'Y' --IS_ACTUALS_TREND_PROCESSED
  , 'Y' --IS_FUTURE_TRENDS_PROCESSED
  , 'N' --IS_ERROR
  , 'Contact Center' --FUNCTIONAL_AREA  
from t
;

INSERT INTO S_METRIC (
	S_METRIC_ID
	, D_METRIC_DEFINITION_ID
	, S_ACTUALS_PROJECT_REPORT_ID
	, S_FORECASTS_PROJECT_REPORT_ID
	, APPROVED
	, APPROVED_DATE
	, ACTUAL_VALUE
	, ACTUAL_RECEIVED_DATE
	, ACTUAL_TREND_INDICATOR
	, ACTUAL_FORECAST_VARIANCE_FRMT
	, FORECAST_VALUE
	, FORECAST_RECEIVED_DATE
	, TARGET_VALUE
	, TARGET_RECEIVED_DATE
	, COMMENTS
	, FORECAST_COMMENTS
	, TARGET_COMMENTS
	, CREATE_DATE
	, CREATED_BY
	, LAST_MODIFIED_DATE
	, UPDATED_BY
	, ACTUAL_VALUE_NOT_SUPPLIED
	, FORECAST_VALUE_NOT_SUPPLIED
) 
select 
  SEQ_S_METRIC.NEXTVAL
  , D_METRIC_DEFINITION_ID 
  , (
      SELECT S_PROJECT_REPORT_ID 
      FROM S_PROJECT_REPORT 
      WHERE D_PROJECT_ID = MP.D_PROJECT_ID 
      AND D_PROGRAM_ID = MP.D_PROGRAM_ID 
      AND D_GEOGRAPHY_MASTER_ID = MP.D_GEOGRAPHY_MASTER_ID 
      AND D_REPORTING_PERIOD_ID = F.D_REPORTING_PERIOD_ID 
      AND REPORT_TYPE = 'actuals'
  ) AS S_ACTUALS_PROJECT_REPORT_ID
  , (
      SELECT S_PROJECT_REPORT_ID 
      FROM S_PROJECT_REPORT 
      WHERE D_PROJECT_ID = MP.D_PROJECT_ID 
      AND D_PROGRAM_ID = MP.D_PROGRAM_ID 
      AND D_GEOGRAPHY_MASTER_ID = MP.D_GEOGRAPHY_MASTER_ID 
      AND D_REPORTING_PERIOD_ID = F.D_REPORTING_PERIOD_ID 
      AND REPORT_TYPE = 'forecasts'
  ) AS S_FORECASTS_PROJECT_REPORT_ID
  , 'true' as APPROVED
  , f.CREATE_DATE
  , f.ACTUAL_VALUE
  , f.ACTUAL_RECEIVED_DATE
  , f.ACTUAL_TREND_INDICATOR
  , f.ACTUAL_FORECAST_VARIANCE_FRMT
  , f.FORECAST_VALUE
  , f.FORECAST_RECEIVED_DATE
  , f.TARGET_VALUE
  , f.TARGET_RECEIVED_DATE
  , f.COMMENTS
  , f.FORECAST_COMMENTS
  , f.TARGET_COMMENTS
  , f.CREATE_DATE
  , 'SYSTEM' AS CREATED_BY
  , f.LAST_MODIFIED_DATE
  , 'SYSTEM' AS UPDATED_BY
  , f.ACTUAL_VALUE_NOT_SUPPLIED
  , f.FORECAST_VALUE_NOT_SUPPLIED
from f_metric f
inner join d_metric_project mp on f.d_metric_project_id = mp.d_metric_project_id
WHERE (
  ACTUAL_VALUE IS NOT NULL
  OR FORECAST_VALUE IS NOT NULL
);

COMMIT;
