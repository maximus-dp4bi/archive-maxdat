use UK_HWS
go

CREATE  TRIGGER MAXDAT.BIU_CC_A_ADHOC_JOB ON MAXDAT.CC_A_ADHOC_JOB 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ADHOC_JOB_ID FROM MAXDAT.CC_A_ADHOC_JOB CurrentVal, Inserted NewVal WHERE CurrentVal.ADHOC_JOB_ID = NewVal.ADHOC_JOB_ID))
    BEGIN
insert into MAXDAT.CC_A_ADHOC_JOB
SELECT 
	ADHOC_JOB_TYPE,
	START_DATETIME_PARAM,
	END_DATETIME_PARAM,
	GETDATE(),
	IS_PENDING,
	IS_RUNNING,
	JOB_START_DATE,
	JOB_END_DATE,
	SUCCESS
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET  CurrentVal.ADHOC_JOB_TYPE =NewVal.ADHOC_JOB_TYPE,
	CurrentVal.START_DATETIME_PARAM=NewVal.START_DATETIME_PARAM,
	CurrentVal.END_DATETIME_PARAM=NewVal.END_DATETIME_PARAM,
	CurrentVal.CREATION_DATE =GETDATE(),
	CurrentVal.IS_PENDING=NewVal.IS_PENDING,
	CurrentVal.IS_RUNNING=NewVal.IS_RUNNING,
	CurrentVal.JOB_START_DATE=NewVal.JOB_START_DATE,
	CurrentVal.JOB_END_DATE=NewVal.JOB_END_DATE,
	CurrentVal.SUCCESS=NewVal.SUCCESS
	FROM MAXDAT.CC_A_ADHOC_JOB CurrentVal, inserted NewVal
	where CurrentVal.ADHOC_JOB_ID=NewVal.ADHOC_JOB_ID
	END
END
GO

CREATE TRIGGER MAXDAT.BIU_CC_A_SCHEDULED_JOB ON MAXDAT.CC_A_SCHEDULED_JOB
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.SCHEDULED_JOB_ID FROM MAXDAT.CC_A_SCHEDULED_JOB CurrentVal, Inserted NewVal WHERE CurrentVal.SCHEDULED_JOB_ID = NewVal.SCHEDULED_JOB_ID))
    BEGIN
insert into MAXDAT.CC_A_SCHEDULED_JOB
SELECT 
	SCHEDULED_JOB_TYPE,
	START_DATETIME_PARAM,
	END_DATETIME_PARAM,
	GETDATE(),
	JOB_END_DATE,
	IS_RUNNING,
	SUCCESS,
	DATA_VALIDATION
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET  
	CurrentVal.SCHEDULED_JOB_TYPE=NewVal.SCHEDULED_JOB_TYPE,
	CurrentVal.START_DATETIME_PARAM=NewVal.START_DATETIME_PARAM,
	CurrentVal.END_DATETIME_PARAM=NewVal.END_DATETIME_PARAM,
	CurrentVal.JOB_START_DATE =GETDATE(),
	CurrentVal.JOB_END_DATE=NewVal.JOB_END_DATE,
	CurrentVal.IS_RUNNING=NewVal.IS_RUNNING,
	CurrentVal.SUCCESS=NewVal.SUCCESS,
	CurrentVal.DATA_VALIDATION=Newval.DATA_VALIDATION
	FROM MAXDAT.CC_A_SCHEDULED_JOB CurrentVal, inserted NewVal
	where CurrentVal.SCHEDULED_JOB_ID=NewVal.SCHEDULED_JOB_ID
	END
END
GO

CREATE TRIGGER MAXDAT.BIU_CC_C_ACTIVITY_TYPE ON MAXDAT.CC_C_ACTIVITY_TYPE
INSTEAD OF INSERT,UPDATE AS
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ACTIVITY_TYPE_ID FROM MAXDAT.CC_C_ACTIVITY_TYPE CurrentVal, Inserted NewVal WHERE CurrentVal.ACTIVITY_TYPE_ID = NewVal.ACTIVITY_TYPE_ID AND CurrentVal.ACTIVITY_TYPE_NAME = NewVal.ACTIVITY_TYPE_NAME))
    BEGIN
insert into MAXDAT.CC_C_ACTIVITY_TYPE
SELECT 
	ACTIVITY_TYPE_NAME,
	ACTIVITY_TYPE_DESCRIPTION,
	ACTIVITY_TYPE_CATEGORY,
	IS_PAID_FLAG,
	IS_AVAILABLE_FLAG,
	IS_READY_FLAG,
	IS_ABSENCE_FLAG,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER,
	RECORD_EFF_DT,
	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET  
	CurrentVal.ACTIVITY_TYPE_NAME=NewVal.ACTIVITY_TYPE_NAME,
	CurrentVal.ACTIVITY_TYPE_DESCRIPTION=NewVal.ACTIVITY_TYPE_DESCRIPTION,
	CurrentVal.ACTIVITY_TYPE_CATEGORY=NewVal.ACTIVITY_TYPE_CATEGORY,
	CurrentVal.IS_PAID_FLAG=NewVal.IS_PAID_FLAG,
	CurrentVal.IS_AVAILABLE_FLAG=NewVal.IS_AVAILABLE_FLAG,
	CurrentVal.IS_READY_FLAG=NewVal.IS_READY_FLAG,
	CurrentVal.IS_ABSENCE_FLAG=NewVal.IS_ABSENCE_FLAG,
	CurrentVal.EXTRACT_DT=Newval.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER,
	CurrentVal.RECORD_EFF_DT=Newval.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=Newval.RECORD_END_DT
	FROM MAXDAT.CC_C_ACTIVITY_TYPE CurrentVal, inserted NewVal
	where CurrentVal.ACTIVITY_TYPE_ID=NewVal.ACTIVITY_TYPE_ID
	END
END
GO

CREATE TRIGGER MAXDAT.BIU_CC_C_CONTACT_QUEUE ON MAXDAT.CC_C_CONTACT_QUEUE
INSTEAD OF INSERT,UPDATE AS
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.C_CONTACT_QUEUE_ID FROM MAXDAT.CC_C_CONTACT_QUEUE CurrentVal, Inserted NewVal WHERE CurrentVal.C_CONTACT_QUEUE_ID = NewVal.C_CONTACT_QUEUE_ID AND CurrentVal.QUEUE_NAME = NewVal.QUEUE_NAME))
    BEGIN
insert into MAXDAT.CC_C_CONTACT_QUEUE
SELECT 
		QUEUE_NUMBER,
		QUEUE_NAME,
		QUEUE_TYPE,
    	SERVICE_PERCENT,
    	SERVICE_SECONDS,
    	INTERVAL_MINUTES,
    	UNIT_OF_WORK_NAME,
    	PROJECT_NAME,
    	PROGRAM_NAME,
    	REGION_NAME,
    	STATE_NAME,
    	PROVINCE_NAME,
    	DISTRICT_NAME,
    	COUNTRY_NAME,
    	RECORD_EFF_DT,
    	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET  
	CurrentVal.QUEUE_NUMBER=NewVal.C_CONTACT_QUEUE_ID,
	CurrentVal.QUEUE_NAME=NewVal.QUEUE_NAME,
	CurrentVal.QUEUE_TYPE=NewVal.QUEUE_TYPE,
	CurrentVal.SERVICE_PERCENT=NewVal.SERVICE_PERCENT,
	CurrentVal.SERVICE_SECONDS=NewVal.SERVICE_SECONDS,
	CurrentVal.INTERVAL_MINUTES=NewVal.INTERVAL_MINUTES,
	CurrentVal.UNIT_OF_WORK_NAME=NewVal.UNIT_OF_WORK_NAME,
	CurrentVal.PROJECT_NAME=Newval.PROJECT_NAME,
	CurrentVal.PROGRAM_NAME=Newval.PROGRAM_NAME,
	CurrentVal.REGION_NAME=Newval.REGION_NAME,
	CurrentVal.STATE_NAME=Newval.STATE_NAME,
	CurrentVal.PROVINCE_NAME=Newval.PROVINCE_NAME,
	CurrentVal.DISTRICT_NAME=Newval.DISTRICT_NAME,
	CurrentVal.COUNTRY_NAME=Newval.COUNTRY_NAME,
	CurrentVal.RECORD_EFF_DT=Newval.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=Newval.RECORD_END_DT
	FROM MAXDAT.CC_C_CONTACT_QUEUE CurrentVal, inserted NewVal
	where CurrentVal.C_CONTACT_QUEUE_ID=NewVal.C_CONTACT_QUEUE_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_ACD_AGENT_ACTIVITY ON MAXDAT.CC_S_ACD_AGENT_ACTIVITY 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ACD_AGENT_ACTIVITY_ID FROM MAXDAT.CC_S_ACD_AGENT_ACTIVITY CurrentVal, Inserted NewVal WHERE CurrentVal.ACD_AGENT_ACTIVITY_ID = NewVal.ACD_AGENT_ACTIVITY_ID))
    BEGIN
insert into MAXDAT.CC_S_ACD_AGENT_ACTIVITY
SELECT 
	AGENT_CALLS_DT,
	AGENT_ID,
	LOGIN_SECONDS,
	EXTERNAL_SECONDS,
	INTERNAL_SECONDS,
	IDLE_SECONDS,
	NOT_READY_SECONDS,
	ACD_TALK_SECONDS,
	HOLD_SECONDS,
	AFTER_CALL_WORK_SECONDS,
	TALK_RESERVE_SECONDS,
	RING_SECONDS,
	PREDICTIVE_TALK_SECONDS,
	PREVIEW_TALK_SECONDS,
	ACD_CALLS_COUNT,
	EXTERNAL_CALLS_COUNT,
	INTERNAL_CALLS_COUNT,
	PREDICTIVE_CALLS_COUNT,
	PREVIEW_CALLS_COUNT,
	BREAK_TIME,
	CONSULTATION_TIME,
	WALKAWAY_TIME,
	BUSYONDNTIME,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.AGENT_CALLS_DT =NewVal.AGENT_CALLS_DT,
	CurrentVal.LOGIN_SECONDS=NewVal.LOGIN_SECONDS,
	CurrentVal.EXTERNAL_SECONDS =NewVal.EXTERNAL_SECONDS,
	CurrentVal.INTERNAL_SECONDS=NewVal.INTERNAL_SECONDS,
	CurrentVal.IDLE_SECONDS=NewVal.IDLE_SECONDS,
	CurrentVal.NOT_READY_SECONDS=NewVal.NOT_READY_SECONDS,
	CurrentVal.ACD_TALK_SECONDS=NewVal.ACD_TALK_SECONDS,
	CurrentVal.HOLD_SECONDS=NewVal.HOLD_SECONDS,
	CurrentVal.AFTER_CALL_WORK_SECONDS=NewVal.AFTER_CALL_WORK_SECONDS,
	CurrentVal.TALK_RESERVE_SECONDS=NewVal.TALK_RESERVE_SECONDS,
	CurrentVal.RING_SECONDS=NewVal.RING_SECONDS,
	CurrentVal.PREDICTIVE_TALK_SECONDS=NewVal.PREDICTIVE_TALK_SECONDS,
	CurrentVal.PREVIEW_TALK_SECONDS=NewVal.PREVIEW_TALK_SECONDS,
	CurrentVal.ACD_CALLS_COUNT=NewVal.ACD_CALLS_COUNT,
	CurrentVal.EXTERNAL_CALLS_COUNT=NewVal.EXTERNAL_CALLS_COUNT,
	CurrentVal.INTERNAL_CALLS_COUNT=NewVal.INTERNAL_CALLS_COUNT,
	CurrentVal.PREDICTIVE_CALLS_COUNT=NewVal.PREDICTIVE_CALLS_COUNT,
	CurrentVal.PREVIEW_CALLS_COUNT=NewVal.PREVIEW_CALLS_COUNT,
	CurrentVal.BREAK_TIME=NewVal.BREAK_TIME,
	CurrentVal.CONSULTATION_TIME=NewVal.CONSULTATION_TIME,
	CurrentVal.WALKAWAY_TIME=NewVal.WALKAWAY_TIME,
	CurrentVal.BUSYONDNTIME=NewVal.BUSYONDNTIME,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_ACD_AGENT_ACTIVITY CurrentVal, inserted NewVal
	where CurrentVal.ACD_AGENT_ACTIVITY_ID=NewVal.ACD_AGENT_ACTIVITY_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_ACD_INTERVAL ON MAXDAT.CC_S_ACD_INTERVAL
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ACD_INTERVAL_ID FROM MAXDAT.CC_S_ACD_INTERVAL CurrentVal, Inserted NewVal WHERE CurrentVal.ACD_INTERVAL_ID = NewVal.ACD_INTERVAL_ID))
    BEGIN
insert into MAXDAT.CC_S_ACD_INTERVAL
SELECT 
	INTERVAL_DATE,
	CONTACT_QUEUE_ID,
	INTERVAL_ID,
	AGENT_ID,
	CONTACTS_RECEIVED_FROM_IVR,
	CONTACTS_OFFERED,
	CONTACTS_HANDLED,
	CONTACTS_ABANDONED,
	MIN_HANDLE_TIME,
	MAX_HANDLE_TIME,
	MEAN_HANDLE_TIME,
	MEDIAN_HANDLE_TIME,
	STDDEV_HANDLE_TIME,
	MIN_SPEED_TO_HANDLE,
	MAX_SPEED_TO_HANDLE,
	MEAN_SPEED_TO_HANDLE,
	MEDIAN_SPEED_TO_HANDLE,
	STDDEV_SPEED_TO_HANDLE,
	MIN_SPEED_OF_ANSWER,
	MAX_SPEED_OF_ANSWER,
	MEAN_SPEED_OF_ANSWER,
	MEDIAN_SPEED_OF_ANSWER,
	STDDEV_SPEED_OF_ANSWER,
	SPEED_OF_ANSWER_PERIOD_1,
	SPEED_OF_ANSWER_PERIOD_2,
	SPEED_OF_ANSWER_PERIOD_3,
	SPEED_OF_ANSWER_PERIOD_4,
	SPEED_OF_ANSWER_PERIOD_5,
	SPEED_OF_ANSWER_PERIOD_6,
	SPEED_OF_ANSWER_PERIOD_7,
	SPEED_OF_ANSWER_PERIOD_8,
	SPEED_OF_ANSWER_PERIOD_9,
	SPEED_OF_ANSWER_PERIOD_10,
	CALLS_ABANDONED_PERIOD_1,
	CALLS_ABANDONED_PERIOD_2,
	CALLS_ABANDONED_PERIOD_3,
	CALLS_ABANDONED_PERIOD_4,
	CALLS_ABANDONED_PERIOD_5,
	CALLS_ABANDONED_PERIOD_6,
	CALLS_ABANDONED_PERIOD_7,
	CALLS_ABANDONED_PERIOD_8,
	CALLS_ABANDONED_PERIOD_9,
	CALLS_ABANDONED_PERIOD_10,
	LABOR_MINUTES_TOTAL,
	LABOR_MINUTES_WAITING,
	HEADCOUNT_AVAILABLE,
	CONTACT_INVENTORY,
	CONTACT_INVENTORY_JEOPARDY,
	CONTACT_INVENTORY_AGE_TOTAL,
	MIN_CONTACT_INVENTORY_AGE,
	MAX_CONTACT_INVENTORY_AGE,
	MEAN_CONTACT_INVENTORY_AGE,
	MEDIAN_CONTACT_INVENTORY_AGE,
	STDDEV_CONTACT_INVENTORY_AGE,
	CONTACTS_TRANSFERRED,
	OUTFLOW_CONTACTS,
	ANSWER_WAIT_TIME_TOTAL,
	ABANDON_TIME_TOTAL,
	TALK_TIME_TOTAL,
	AFTER_CALL_WORK_TIME_TOTAL,
	SERVICE_LEVEL_ANSWERED_PERCENT,
	SERVICE_LEVEL_ANSWERED_COUNT,
	SERVICE_LEVEL_ABANDONED,
	CALLS_ON_HOLD,
	HOLD_TIME_TOTAL,
	IVR_TIME_TOTAL,
	SHORT_ABANDONS,
	CONTACTS_BLOCKED,
	ICR_DEFAULT_ROUTED,
	NETWORK_DEFAULT_ROUTED,
	RETURN_BUSY,
	CALLS_RONA,
	RETURN_RELEASE,
	CALLS_ROUTED_NON_AGENT,
	ERROR_COUNT,
	AGENT_ERROR_COUNT,
	RETURN_RING,
	INCOMPLETE_CALLS,
	CALLS_GIVEN_FORCE_DISCONNECT,
	CALLS_GIVEN_ROUTE_TO,
	CALL_TYPE,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.INTERVAL_DATE=NewVal.INTERVAL_DATE,
	CurrentVal.CONTACT_QUEUE_ID=NewVal.CONTACT_QUEUE_ID,
	CurrentVal.INTERVAL_ID=NewVal.INTERVAL_ID,
	CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.CONTACTS_RECEIVED_FROM_IVR=NewVal.CONTACTS_RECEIVED_FROM_IVR,
	CurrentVal.CONTACTS_OFFERED=NewVal.CONTACTS_OFFERED,
	CurrentVal.CONTACTS_HANDLED=NewVal.CONTACTS_HANDLED,
	CurrentVal.CONTACTS_ABANDONED=NewVal.CONTACTS_ABANDONED,
	CurrentVal.MIN_HANDLE_TIME=NewVal.MIN_HANDLE_TIME,
	CurrentVal.MAX_HANDLE_TIME=NewVal.MAX_HANDLE_TIME,
	CurrentVal.MEAN_HANDLE_TIME=NewVal.MEAN_HANDLE_TIME,
	CurrentVal.MEDIAN_HANDLE_TIME=NewVal.MEDIAN_HANDLE_TIME,
	CurrentVal.STDDEV_HANDLE_TIME=NewVal.STDDEV_HANDLE_TIME,
	CurrentVal.MIN_SPEED_TO_HANDLE=NewVal.MIN_SPEED_TO_HANDLE,
	CurrentVal.MAX_SPEED_TO_HANDLE=NewVal.MAX_SPEED_TO_HANDLE,
	CurrentVal.MEAN_SPEED_TO_HANDLE=NewVal.MEAN_SPEED_TO_HANDLE,
	CurrentVal.MEDIAN_SPEED_TO_HANDLE=NewVal.MEDIAN_SPEED_TO_HANDLE,
	CurrentVal.STDDEV_SPEED_TO_HANDLE=NewVal.STDDEV_SPEED_TO_HANDLE,
	CurrentVal.MIN_SPEED_OF_ANSWER=NewVal.MIN_SPEED_OF_ANSWER,
	CurrentVal.MAX_SPEED_OF_ANSWER=NewVal.MAX_SPEED_OF_ANSWER,
	CurrentVal.MEAN_SPEED_OF_ANSWER=NewVal.MEAN_SPEED_OF_ANSWER,
	CurrentVal.MEDIAN_SPEED_OF_ANSWER=NewVal.MEDIAN_SPEED_OF_ANSWER,
	CurrentVal.STDDEV_SPEED_OF_ANSWER=NewVal.STDDEV_SPEED_OF_ANSWER,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_1=NewVal.SPEED_OF_ANSWER_PERIOD_1,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_2=NewVal.SPEED_OF_ANSWER_PERIOD_2,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_3=NewVal.SPEED_OF_ANSWER_PERIOD_3,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_4=NewVal.SPEED_OF_ANSWER_PERIOD_4,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_5=NewVal.SPEED_OF_ANSWER_PERIOD_5,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_6=NewVal.SPEED_OF_ANSWER_PERIOD_6,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_7=NewVal.SPEED_OF_ANSWER_PERIOD_7,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_8=NewVal.SPEED_OF_ANSWER_PERIOD_8,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_9=NewVal.SPEED_OF_ANSWER_PERIOD_9,
	CurrentVal.SPEED_OF_ANSWER_PERIOD_10=NewVal.SPEED_OF_ANSWER_PERIOD_10,
	CurrentVal.CALLS_ABANDONED_PERIOD_1=NewVal.CALLS_ABANDONED_PERIOD_1,
	CurrentVal.CALLS_ABANDONED_PERIOD_2=NewVal.CALLS_ABANDONED_PERIOD_2,
	CurrentVal.CALLS_ABANDONED_PERIOD_3=NewVal.CALLS_ABANDONED_PERIOD_3,
	CurrentVal.CALLS_ABANDONED_PERIOD_4=NewVal.CALLS_ABANDONED_PERIOD_4,
	CurrentVal.CALLS_ABANDONED_PERIOD_5=NewVal.CALLS_ABANDONED_PERIOD_5,
	CurrentVal.CALLS_ABANDONED_PERIOD_6=NewVal.CALLS_ABANDONED_PERIOD_6,
	CurrentVal.CALLS_ABANDONED_PERIOD_7=NewVal.CALLS_ABANDONED_PERIOD_7,
	CurrentVal.CALLS_ABANDONED_PERIOD_8=NewVal.CALLS_ABANDONED_PERIOD_8,
	CurrentVal.CALLS_ABANDONED_PERIOD_9=NewVal.CALLS_ABANDONED_PERIOD_9,
	CurrentVal.CALLS_ABANDONED_PERIOD_10=NewVal.CALLS_ABANDONED_PERIOD_10,
	CurrentVal.LABOR_MINUTES_TOTAL=NewVal.LABOR_MINUTES_TOTAL,
	CurrentVal.LABOR_MINUTES_WAITING=NewVal.LABOR_MINUTES_WAITING,
	CurrentVal.HEADCOUNT_AVAILABLE=NewVal.HEADCOUNT_AVAILABLE,
	CurrentVal.CONTACT_INVENTORY=NewVal.CONTACT_INVENTORY,
	CurrentVal.CONTACT_INVENTORY_JEOPARDY=NewVal.CONTACT_INVENTORY_JEOPARDY,
	CurrentVal.CONTACT_INVENTORY_AGE_TOTAL=NewVal.CONTACT_INVENTORY_AGE_TOTAL,
	CurrentVal.MIN_CONTACT_INVENTORY_AGE=NewVal.MIN_CONTACT_INVENTORY_AGE,
	CurrentVal.MAX_CONTACT_INVENTORY_AGE=NewVal.MAX_CONTACT_INVENTORY_AGE,
	CurrentVal.MEAN_CONTACT_INVENTORY_AGE=NewVal.MEAN_CONTACT_INVENTORY_AGE,
	CurrentVal.MEDIAN_CONTACT_INVENTORY_AGE=NewVal.MEDIAN_CONTACT_INVENTORY_AGE,
	CurrentVal.STDDEV_CONTACT_INVENTORY_AGE=NewVal.STDDEV_CONTACT_INVENTORY_AGE,
	CurrentVal.CONTACTS_TRANSFERRED=NewVal.CONTACTS_TRANSFERRED,
	CurrentVal.OUTFLOW_CONTACTS=NewVal.OUTFLOW_CONTACTS,
	CurrentVal.ANSWER_WAIT_TIME_TOTAL=NewVal.ANSWER_WAIT_TIME_TOTAL,
	CurrentVal.ABANDON_TIME_TOTAL=NewVal.ABANDON_TIME_TOTAL,
	CurrentVal.TALK_TIME_TOTAL=NewVal.TALK_TIME_TOTAL,
	CurrentVal.AFTER_CALL_WORK_TIME_TOTAL=NewVal.AFTER_CALL_WORK_TIME_TOTAL,
	CurrentVal.SERVICE_LEVEL_ANSWERED_PERCENT=NewVal.SERVICE_LEVEL_ANSWERED_PERCENT,
	CurrentVal.SERVICE_LEVEL_ANSWERED_COUNT=NewVal.SERVICE_LEVEL_ANSWERED_COUNT,
	CurrentVal.SERVICE_LEVEL_ABANDONED=NewVal.SERVICE_LEVEL_ABANDONED,
	CurrentVal.CALLS_ON_HOLD=NewVal.CALLS_ON_HOLD,
	CurrentVal.HOLD_TIME_TOTAL=NewVal.HOLD_TIME_TOTAL,
	CurrentVal.IVR_TIME_TOTAL=NewVal.IVR_TIME_TOTAL,
	CurrentVal.SHORT_ABANDONS=NewVal.SHORT_ABANDONS,
	CurrentVal.CONTACTS_BLOCKED=NewVal.CONTACTS_BLOCKED,
	CurrentVal.ICR_DEFAULT_ROUTED=NewVal.ICR_DEFAULT_ROUTED,
	CurrentVal.NETWORK_DEFAULT_ROUTED=NewVal.NETWORK_DEFAULT_ROUTED,
	CurrentVal.RETURN_BUSY=NewVal.RETURN_BUSY,
	CurrentVal.CALLS_RONA=NewVal.CALLS_RONA,
	CurrentVal.RETURN_RELEASE=NewVal.RETURN_RELEASE,
	CurrentVal.CALLS_ROUTED_NON_AGENT=NewVal.CALLS_ROUTED_NON_AGENT,
	CurrentVal.ERROR_COUNT=NewVal.ERROR_COUNT,
	CurrentVal.AGENT_ERROR_COUNT=NewVal.AGENT_ERROR_COUNT,
	CurrentVal.RETURN_RING=NewVal.RETURN_RING,
	CurrentVal.INCOMPLETE_CALLS=NewVal.INCOMPLETE_CALLS,
	CurrentVal.CALLS_GIVEN_FORCE_DISCONNECT=NewVal.CALLS_GIVEN_FORCE_DISCONNECT,
	CurrentVal.CALLS_GIVEN_ROUTE_TO=NewVal.CALLS_GIVEN_ROUTE_TO,
	CurrentVal.CALL_TYPE=NewVal.CALL_TYPE,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=isnull(NewVal.LAST_UPDATE_BY,CurrentVal.LAST_UPDATE_BY)
	FROM MAXDAT.CC_S_ACD_INTERVAL CurrentVal, inserted NewVal
	where CurrentVal.ACD_INTERVAL_ID=NewVal.ACD_INTERVAL_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_ACD_INTERVAL_PERIOD ON MAXDAT.CC_S_ACD_INTERVAL_PERIOD
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ACD_INTERVAL_PERIOD_ID FROM MAXDAT.CC_S_ACD_INTERVAL_PERIOD CurrentVal, Inserted NewVal WHERE CurrentVal.ACD_INTERVAL_PERIOD_ID = NewVal.ACD_INTERVAL_PERIOD_ID))
    BEGIN
insert into MAXDAT.CC_S_ACD_INTERVAL_PERIOD
SELECT 
	PERIOD_TYPE,
	PERIOD_1_UPPER_BOUND,
	PERIOD_2_UPPER_BOUND,
	PERIOD_3_UPPER_BOUND,
	PERIOD_4_UPPER_BOUND,
	PERIOD_5_UPPER_BOUND,
	PERIOD_6_UPPER_BOUND,
	PERIOD_7_UPPER_BOUND,
	PERIOD_8_UPPER_BOUND,
	PERIOD_9_UPPER_BOUND,
	PERIOD_10_UPPER_BOUND,
	GETDATE(),
	RECORD_EFF_DT,
	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PERIOD_TYPE=NewVal.PERIOD_TYPE,
	CurrentVal.PERIOD_1_UPPER_BOUND=NewVal.PERIOD_1_UPPER_BOUND,
	CurrentVal.PERIOD_2_UPPER_BOUND=NewVal.PERIOD_2_UPPER_BOUND,
	CurrentVal.PERIOD_3_UPPER_BOUND=NewVal.PERIOD_3_UPPER_BOUND,
	CurrentVal.PERIOD_4_UPPER_BOUND=NewVal.PERIOD_4_UPPER_BOUND,
	CurrentVal.PERIOD_5_UPPER_BOUND=NewVal.PERIOD_5_UPPER_BOUND,
	CurrentVal.PERIOD_6_UPPER_BOUND=NewVal.PERIOD_6_UPPER_BOUND,
	CurrentVal.PERIOD_7_UPPER_BOUND=NewVal.PERIOD_7_UPPER_BOUND,
	CurrentVal.PERIOD_8_UPPER_BOUND=NewVal.PERIOD_8_UPPER_BOUND,
	CurrentVal.PERIOD_9_UPPER_BOUND=NewVal.PERIOD_9_UPPER_BOUND,
	CurrentVal.PERIOD_10_UPPER_BOUND=NewVal.PERIOD_10_UPPER_BOUND,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.RECORD_EFF_DT=NewVal.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=NewVal.RECORD_END_DT
	FROM MAXDAT.CC_S_ACD_INTERVAL_PERIOD CurrentVal, inserted NewVal
	where CurrentVal.ACD_INTERVAL_PERIOD_ID=NewVal.ACD_INTERVAL_PERIOD_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_AGENT ON MAXDAT.CC_S_AGENT
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.AGENT_ID FROM MAXDAT.CC_S_AGENT CurrentVal, Inserted NewVal WHERE CurrentVal.AGENT_ID = NewVal.AGENT_ID))
    BEGIN
insert into MAXDAT.CC_S_AGENT
SELECT 
	LOGIN_ID,
	PROJECT_CONFIG_ID,
	FIRST_NAME,
	LAST_NAME,
	MIDDLE_INITIAL,
	JOB_TITLE,
	LANGUAGE,
	SITE_NAME,
	SITE_DESCRIPTION,
	HOURLY_RATE,
	RATE_CURRENCY,
	AGENT_GROUP,
	GETDATE(),
	HIRE_DATE,
	TERMINATION_DATE,
	GETDATE(),
	SYSTEM_USER,
	RECORD_EFF_DT,
	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.LOGIN_ID=NewVal.LOGIN_ID,
	CurrentVal.PROJECT_CONFIG_ID=NewVal.PROJECT_CONFIG_ID,
	CurrentVal.FIRST_NAME=NewVal.FIRST_NAME,
	CurrentVal.LAST_NAME=NewVal.LAST_NAME,
	CurrentVal.MIDDLE_INITIAL=NewVal.MIDDLE_INITIAL,
	CurrentVal.JOB_TITLE=NewVal.JOB_TITLE,
	CurrentVal.LANGUAGE=NewVal.LANGUAGE,
	CurrentVal.SITE_NAME=NewVal.SITE_NAME,
	CurrentVal.SITE_DESCRIPTION=NewVal.SITE_DESCRIPTION,
	CurrentVal.HOURLY_RATE=NewVal.HOURLY_RATE,
	CurrentVal.RATE_CURRENCY=NewVal.RATE_CURRENCY,
	CurrentVal.AGENT_GROUP=NewVal.AGENT_GROUP,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.HIRE_DATE=NewVal.HIRE_DATE,
	CurrentVal.TERMINATION_DATE=NewVal.TERMINATION_DATE,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER,
	CurrentVal.RECORD_EFF_DT=NewVal.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=NewVal.RECORD_END_DT
	FROM MAXDAT.CC_S_AGENT CurrentVal, inserted NewVal
	where CurrentVal.AGENT_ID=NewVal.AGENT_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_AGENT_ABSENCE ON MAXDAT.CC_S_AGENT_ABSENCE
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.AGENT_ABSENCE_ID FROM MAXDAT.CC_S_AGENT_ABSENCE CurrentVal, Inserted NewVal WHERE CurrentVal.AGENT_ABSENCE_ID = NewVal.AGENT_ABSENCE_ID))
    BEGIN
insert into MAXDAT.CC_S_AGENT_ABSENCE
SELECT 
	ABSENCE_DATE,
	AGENT_ID,
	ACTIVITY_TYPE_ID,
	ABSENCE_MINUTES,
	ABSENCE_START_TIME,
	ABSENCE_END_TIME,
	IS_PLANNED_FLAG,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.ABSENCE_DATE=NewVal.ABSENCE_DATE,
	CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.ACTIVITY_TYPE_ID=NewVal.ACTIVITY_TYPE_ID,
	CurrentVal.ABSENCE_MINUTES=NewVal.ABSENCE_MINUTES,
	CurrentVal.ABSENCE_START_TIME=NewVal.ABSENCE_START_TIME,
	CurrentVal.ABSENCE_END_TIME=NewVal.ABSENCE_END_TIME,
	CurrentVal.IS_PLANNED_FLAG=NewVal.IS_PLANNED_FLAG,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_AGENT_ABSENCE CurrentVal, inserted NewVal
	where CurrentVal.AGENT_ABSENCE_ID=NewVal.AGENT_ABSENCE_ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_S_AGENT_SUPERVISOR ON MAXDAT.CC_S_AGENT_SUPERVISOR
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.AGENT_SUPERVISOR_ID FROM MAXDAT.CC_S_AGENT_SUPERVISOR CurrentVal, Inserted NewVal WHERE CurrentVal.AGENT_SUPERVISOR_ID = NewVal.AGENT_SUPERVISOR_ID))
    BEGIN
insert into MAXDAT.CC_S_AGENT_SUPERVISOR
SELECT 
	AGENT_ID,
	SUPERVISOR_AGENT_ID,
	GETDATE(),
	RECORD_EFF_DT,
	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.SUPERVISOR_AGENT_ID=NewVal.SUPERVISOR_AGENT_ID,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.RECORD_EFF_DT=NewVal.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=NewVal.RECORD_END_DT
	FROM MAXDAT.CC_S_AGENT_SUPERVISOR CurrentVal, inserted NewVal
	where CurrentVal.AGENT_SUPERVISOR_ID=NewVal.AGENT_SUPERVISOR_ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_S_AGENT_WORK_DAY ON MAXDAT.CC_S_AGENT_WORK_DAY
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.AGENT_WORK_DAY_ID FROM MAXDAT.CC_S_AGENT_WORK_DAY CurrentVal, Inserted NewVal WHERE CurrentVal.AGENT_WORK_DAY_ID = NewVal.AGENT_WORK_DAY_ID))
    BEGIN
insert into MAXDAT.CC_S_AGENT_WORK_DAY
SELECT 
	AGENT_ID,
	WORK_DATE,
	FIRST_LOGIN,
	LAST_LOGOUT,
	SCHEDULED_SHIFT_MINUTES,
	ACTUAL_SHIFT_MINUTES,
	ACTUAL_OVERTIME_MINUTES,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	
	CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.WORK_DATE=NewVal.WORK_DATE,
	CurrentVal.FIRST_LOGIN=NewVal.FIRST_LOGIN,
	CurrentVal.LAST_LOGOUT=NewVal.LAST_LOGOUT,
	CurrentVal.SCHEDULED_SHIFT_MINUTES=NewVal.SCHEDULED_SHIFT_MINUTES,
	CurrentVal.ACTUAL_SHIFT_MINUTES=NewVal.ACTUAL_SHIFT_MINUTES,
	CurrentVal.ACTUAL_OVERTIME_MINUTES=NewVal.ACTUAL_OVERTIME_MINUTES,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_AGENT_WORK_DAY CurrentVal, inserted NewVal
	where CurrentVal.AGENT_WORK_DAY_ID=NewVal.AGENT_WORK_DAY_ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_S_CALL_DETAIL ON MAXDAT.CC_S_CALL_DETAIL
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.CALL_DETAIL_ID FROM MAXDAT.CC_S_CALL_DETAIL CurrentVal, Inserted NewVal WHERE CurrentVal.CALL_DETAIL_ID = NewVal.CALL_DETAIL_ID))
    BEGIN
insert into MAXDAT.CC_S_CALL_DETAIL
SELECT 
	CALL_SEGMENT_ID,
	CALL_DATE,
	CALL_TYPE,
	SOURCE_CALL_ID,
	AGENT_ID,
	DNIS,
	DISPOSITION,
	TRANSFER_TO,
	CALL_SEGMENT_END_DT,
	QUEUE_NAME,
	LANGUAGE,
	ANI_PHONE_NUMBER,
	QUEUE_TIME_SECONDS,
	RING_TIME_SECONDS,
	HOLD_TIME_SECONDS,
	AFTER_CALL_WORK_SECONDS,
	TALK_TIME_SECONDS,
	IVR_TIME_SECONDS,
	XFERRED_OUT_FLAG,
	VOICEMAIL_FLAG,
	CALL_ABANDONED_FLAG,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	Currentval.CALL_SEGMENT_ID=NewVal.CALL_SEGMENT_ID,
	Currentval.CALL_DATE=NewVal.CALL_DATE,
	Currentval.CALL_TYPE=NewVal.CALL_TYPE,
	Currentval.SOURCE_CALL_ID=NewVal.SOURCE_CALL_ID,
	Currentval.AGENT_ID=NewVal.AGENT_ID,
	Currentval.DNIS=NewVal.DNIS,
	Currentval.DISPOSITION=NewVal.DISPOSITION,
	Currentval.TRANSFER_TO=NewVal.TRANSFER_TO,
	Currentval.CALL_SEGMENT_END_DT=NewVal.CALL_SEGMENT_END_DT,
	Currentval.QUEUE_NAME=NewVal.QUEUE_NAME,
	Currentval.LANGUAGE=NewVal.LANGUAGE,
	Currentval.ANI_PHONE_NUMBER=NewVal.ANI_PHONE_NUMBER,
	Currentval.QUEUE_TIME_SECONDS=NewVal.QUEUE_TIME_SECONDS,
	Currentval.RING_TIME_SECONDS=NewVal.RING_TIME_SECONDS,
	Currentval.HOLD_TIME_SECONDS=NewVal.HOLD_TIME_SECONDS,
	Currentval.AFTER_CALL_WORK_SECONDS=NewVal.AFTER_CALL_WORK_SECONDS,
	Currentval.TALK_TIME_SECONDS=NewVal.TALK_TIME_SECONDS,
	Currentval.IVR_TIME_SECONDS=NewVal.IVR_TIME_SECONDS,
	Currentval.XFERRED_OUT_FLAG=NewVal.XFERRED_OUT_FLAG,
	Currentval.VOICEMAIL_FLAG=NewVal.VOICEMAIL_FLAG,
	Currentval.CALL_ABANDONED_FLAG=NewVal.CALL_ABANDONED_FLAG,
	Currentval.EXTRACT_DT=NewVal.EXTRACT_DT,
	Currentval.LAST_UPDATE_DT=GETDATE(),
	Currentval.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_CALL_DETAIL CurrentVal, inserted NewVal
	where CurrentVal.CALL_DETAIL_ID=NewVal.CALL_DETAIL_ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_S_FCST_INTERVAL ON MAXDAT.CC_S_FCST_INTERVAL
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.FCST_INTERVAL_ID FROM MAXDAT.CC_S_FCST_INTERVAL CurrentVal, Inserted NewVal WHERE CurrentVal.FCST_INTERVAL_ID = NewVal.FCST_INTERVAL_ID))
    BEGIN
insert into MAXDAT.CC_S_FCST_INTERVAL
SELECT 
	PRODUCTION_PLAN_HORIZON_ID,
	UNIT_OF_WORK_ID,
	INTERVAL_DATE,
	INTERVAL_ID,
	FORECAST_VERSION,
	CONTACTS_CREATED,
	CONTACTS_OFFERED,
	CONTACTS_HANDLED,
	MIN_SPEED_TO_HANDLE,
	MAX_SPEED_TO_HANDLE,
	MEAN_SPEED_TO_HANDLE,
	MEDIAN_SPEED_TO_HANDLE,
	STDDEV_SPEED_TO_HANDLE,
	MIN_SPEED_OF_ANSWER,
	MAX_SPEED_OF_ANSWER,
	MEAN_SPEED_OF_ANSWER,
	MEDIAN_SPEED_OF_ANSWER,
	STDDEV_SPEED_OF_ANSWER,
	CONTACTS_ABANDONED,
	CONTACT_INVENTORY,
	MIN_CONTACT_INVENTORY_AGE,
	MAX_CONTACT_INVENTORY_AGE,
	MEAN_CONTACT_INVENTORY_AGE,
	MEDIAN_CONTACT_INVENTORY_AGE,
	STDDEV_CONTACT_INVENTORY_AGE,
	MIN_HANDLE_TIME,
	MAX_HANDLE_TIME,
	MEAN_HANDLE_TIME,
	MEDIAN_HANDLE_TIME,
	CONTACT_INVENTORY_JEOPARDY,
	STDDEV_HANDLE_TIME,
	LABOR_MINUTES_TOTAL,
	LABOR_MINUTES_AVAILABLE,
	LABOR_MINUTES_WAITING,
	HEADCOUNT_TOTAL,
	HEADCOUNT_AVAILABLE,
	HEADCOUNT_UNAVAILABLE,
	SRVC_LEVEL_ANSWERED_PERCENT,
	SRVC_LEVEL_ANSWERED_PERCENT_2,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PRODUCTION_PLAN_HORIZON_ID=NewVal.PRODUCTION_PLAN_HORIZON_ID,
	CurrentVal.UNIT_OF_WORK_ID=NewVal.UNIT_OF_WORK_ID,
	CurrentVal.INTERVAL_DATE=NewVal.INTERVAL_DATE,
	CurrentVal.INTERVAL_ID=NewVal.INTERVAL_ID,
	CurrentVal.FORECAST_VERSION=NewVal.FORECAST_VERSION,
	CurrentVal.CONTACTS_CREATED=NewVal.CONTACTS_CREATED,
	CurrentVal.CONTACTS_OFFERED=NewVal.CONTACTS_OFFERED,
	CurrentVal.CONTACTS_HANDLED=NewVal.CONTACTS_HANDLED,
	CurrentVal.MIN_SPEED_TO_HANDLE=NewVal.MIN_SPEED_TO_HANDLE,
	CurrentVal.MAX_SPEED_TO_HANDLE=NewVal.MAX_SPEED_TO_HANDLE,
	CurrentVal.MEAN_SPEED_TO_HANDLE=NewVal.MEAN_SPEED_TO_HANDLE,
	CurrentVal.MEDIAN_SPEED_TO_HANDLE=NewVal.MEDIAN_SPEED_TO_HANDLE,
	CurrentVal.STDDEV_SPEED_TO_HANDLE=NewVal.STDDEV_SPEED_TO_HANDLE,
	CurrentVal.MIN_SPEED_OF_ANSWER=NewVal.MIN_SPEED_OF_ANSWER,
	CurrentVal.MAX_SPEED_OF_ANSWER=NewVal.MAX_SPEED_OF_ANSWER,
	CurrentVal.MEAN_SPEED_OF_ANSWER=NewVal.MEAN_SPEED_OF_ANSWER,
	CurrentVal.MEDIAN_SPEED_OF_ANSWER=NewVal.MEDIAN_SPEED_OF_ANSWER,
	CurrentVal.STDDEV_SPEED_OF_ANSWER=NewVal.STDDEV_SPEED_OF_ANSWER,
	CurrentVal.CONTACTS_ABANDONED=NewVal.CONTACTS_ABANDONED,
	CurrentVal.CONTACT_INVENTORY=NewVal.CONTACT_INVENTORY,
	CurrentVal.MIN_CONTACT_INVENTORY_AGE=NewVal.MIN_CONTACT_INVENTORY_AGE,
	CurrentVal.MAX_CONTACT_INVENTORY_AGE=NewVal.MAX_CONTACT_INVENTORY_AGE,
	CurrentVal.MEAN_CONTACT_INVENTORY_AGE=NewVal.MEAN_CONTACT_INVENTORY_AGE,
	CurrentVal.MEDIAN_CONTACT_INVENTORY_AGE=NewVal.MEDIAN_CONTACT_INVENTORY_AGE,
	CurrentVal.STDDEV_CONTACT_INVENTORY_AGE=NewVal.STDDEV_CONTACT_INVENTORY_AGE,
	CurrentVal.MIN_HANDLE_TIME=NewVal.MIN_HANDLE_TIME,
	CurrentVal.MAX_HANDLE_TIME=NewVal.MAX_HANDLE_TIME,
	CurrentVal.MEAN_HANDLE_TIME=NewVal.MEAN_HANDLE_TIME,
	CurrentVal.MEDIAN_HANDLE_TIME=NewVal.MEDIAN_HANDLE_TIME,
	CurrentVal.CONTACT_INVENTORY_JEOPARDY=NewVal.CONTACT_INVENTORY_JEOPARDY,
	CurrentVal.STDDEV_HANDLE_TIME=NewVal.STDDEV_HANDLE_TIME,
	CurrentVal.LABOR_MINUTES_TOTAL=NewVal.LABOR_MINUTES_TOTAL,
	CurrentVal.LABOR_MINUTES_AVAILABLE=NewVal.LABOR_MINUTES_AVAILABLE,
	CurrentVal.LABOR_MINUTES_WAITING=NewVal.LABOR_MINUTES_WAITING,
	CurrentVal.HEADCOUNT_TOTAL=NewVal.HEADCOUNT_TOTAL,
	CurrentVal.HEADCOUNT_AVAILABLE=NewVal.HEADCOUNT_AVAILABLE,
	CurrentVal.HEADCOUNT_UNAVAILABLE=NewVal.HEADCOUNT_UNAVAILABLE,
	CurrentVal.SRVC_LEVEL_ANSWERED_PERCENT=NewVal.SRVC_LEVEL_ANSWERED_PERCENT,
	CurrentVal.SRVC_LEVEL_ANSWERED_PERCENT_2=NewVal.SRVC_LEVEL_ANSWERED_PERCENT_2,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_FCST_INTERVAL CurrentVal, inserted NewVal
	where CurrentVal.FCST_INTERVAL_ID=NewVal.FCST_INTERVAL_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_IVR_INTERVAL ON MAXDAT.CC_S_IVR_INTERVAL
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.IVR_INTERVAL_ID FROM MAXDAT.CC_S_IVR_INTERVAL CurrentVal, Inserted NewVal WHERE CurrentVal.IVR_INTERVAL_ID = NewVal.IVR_INTERVAL_ID))
    BEGIN
insert into MAXDAT.CC_S_IVR_INTERVAL
SELECT 
	PROJECT_CONFIG_ID,
	INTERVAL_DATE,
	INTERVAL_ID,
	CONTACTS_CREATED,
	CONTACTS_OFFERED_TO_ACD,
	CONTACTS_CONTAINED_IN_IVR,
	MIN_TIME_IN_THE_IVR,
	MAX_TIME_IN_THE_IVR,
	MEAN_TIME_IN_THE_IVR,
	MEDIAN_TIME_IN_THE_IVR,
	STDDEV_TIME_IN_THE_IVR,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PROJECT_CONFIG_ID=NewVal.PROJECT_CONFIG_ID,
	CurrentVal.INTERVAL_DATE=NewVal.INTERVAL_DATE,
	CurrentVal.INTERVAL_ID=NewVal.INTERVAL_ID,
	CurrentVal.CONTACTS_CREATED=NewVal.CONTACTS_CREATED,
	CurrentVal.CONTACTS_OFFERED_TO_ACD=NewVal.CONTACTS_OFFERED_TO_ACD,
	CurrentVal.CONTACTS_CONTAINED_IN_IVR=NewVal.CONTACTS_CONTAINED_IN_IVR,
	CurrentVal.MIN_TIME_IN_THE_IVR=NewVal.MIN_TIME_IN_THE_IVR,
	CurrentVal.MAX_TIME_IN_THE_IVR=NewVal.MAX_TIME_IN_THE_IVR,
	CurrentVal.MEAN_TIME_IN_THE_IVR=NewVal.MEAN_TIME_IN_THE_IVR,
	CurrentVal.MEDIAN_TIME_IN_THE_IVR=NewVal.MEDIAN_TIME_IN_THE_IVR,
	CurrentVal.STDDEV_TIME_IN_THE_IVR=NewVal.STDDEV_TIME_IN_THE_IVR,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=ISNULL(NewVal.LAST_UPDATE_BY,CurrentVal.LAST_UPDATE_BY)
	FROM MAXDAT.CC_S_IVR_INTERVAL CurrentVal, inserted NewVal
	where CurrentVal.IVR_INTERVAL_ID=NewVal.IVR_INTERVAL_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_PP_HORIZON ON MAXDAT.CC_S_PRODUCTION_PLAN_HORIZON 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.PRODUCTION_PLAN_HORIZON_ID FROM MAXDAT.CC_S_PRODUCTION_PLAN_HORIZON CurrentVal, Inserted NewVal WHERE CurrentVal.PRODUCTION_PLAN_HORIZON_ID = NewVal.PRODUCTION_PLAN_HORIZON_ID))
    BEGIN
insert into MAXDAT.CC_S_PRODUCTION_PLAN_HORIZON
SELECT 
	PRODUCTION_PLAN_ID,
	HORIZON_START_DATE,
	HORIZON_START_HOUR,
	HORIZON_END_DATE,
	HORIZON_END_HOUR,
	HORIZON_NAME,
	HORIZON_DESCRIPTION,
	INITIAL_VERSION,
	FINAL_VERSION,
	GETDATE(),
	GETDATE()
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PRODUCTION_PLAN_ID=NewVal.PRODUCTION_PLAN_ID,
	CurrentVal.HORIZON_START_DATE=NewVal.HORIZON_START_DATE,
	CurrentVal.HORIZON_START_HOUR=NewVal.HORIZON_START_HOUR,
	CurrentVal.HORIZON_END_DATE=NewVal.HORIZON_END_DATE,
	CurrentVal.HORIZON_END_HOUR=NewVal.HORIZON_END_HOUR,
	CurrentVal.HORIZON_NAME=NewVal.HORIZON_NAME,
	CurrentVal.HORIZON_DESCRIPTION=NewVal.HORIZON_DESCRIPTION,
	CurrentVal.INITIAL_VERSION=NewVal.INITIAL_VERSION,
	CurrentVal.FINAL_VERSION=NewVal.FINAL_VERSION,
	CurrentVal.CREATE_DATE=NewVal.CREATE_DATE,
	CurrentVal.LAST_UPDATE_DATE=GETDATE()
	FROM MAXDAT.CC_S_PRODUCTION_PLAN_HORIZON CurrentVal, inserted NewVal
	where CurrentVal.PRODUCTION_PLAN_HORIZON_ID=NewVal.PRODUCTION_PLAN_HORIZON_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_PRODUCTION_PLAN ON MAXDAT.CC_S_PRODUCTION_PLAN 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.PRODUCTION_PLAN_ID FROM MAXDAT.CC_S_PRODUCTION_PLAN CurrentVal, Inserted NewVal WHERE CurrentVal.PRODUCTION_PLAN_ID = NewVal.PRODUCTION_PLAN_ID))
    BEGIN
insert into MAXDAT.CC_S_PRODUCTION_PLAN
SELECT 
	PRODUCTION_PLAN_NAME,
	PRODUCTION_PLAN_DESCRIPTION,
	PROGRAM_NAME,
	PROJECT_NAME,
	GEOGRAPHY_NAME,
	EFFECTIVE_DATE,
	GETDATE(),
	GETDATE(),
	RECORD_EFF_DT,
	RECORD_END_DT
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PRODUCTION_PLAN_NAME=NewVal.PRODUCTION_PLAN_NAME,
	CurrentVal.PRODUCTION_PLAN_DESCRIPTION=NewVal.PRODUCTION_PLAN_DESCRIPTION,
	CurrentVal.PROGRAM_NAME=NewVal.PROGRAM_NAME,
	CurrentVal.PROJECT_NAME=NewVal.PROJECT_NAME,
	CurrentVal.GEOGRAPHY_NAME=NewVal.GEOGRAPHY_NAME,
	CurrentVal.EFFECTIVE_DATE=NewVal.EFFECTIVE_DATE,
	CurrentVal.LAST_UPDATE_DATE=GETDATE(),
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.RECORD_EFF_DT=NewVal.RECORD_EFF_DT,
	CurrentVal.RECORD_END_DT=NewVal.RECORD_END_DT
	FROM MAXDAT.CC_S_PRODUCTION_PLAN CurrentVal, inserted NewVal
	where CurrentVal.PRODUCTION_PLAN_ID=NewVal.PRODUCTION_PLAN_ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_S_VM_IN_QUEUE ON MAXDAT.CC_S_VM_IN_QUEUE 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.CCVMQ_ID FROM MAXDAT.CC_S_VM_IN_QUEUE CurrentVal, Inserted NewVal WHERE CurrentVal.CCVMQ_ID = NewVal.CCVMQ_ID))
    BEGIN
insert into MAXDAT.CC_S_VM_IN_QUEUE
SELECT 
	VM_QUEUE_ID,
	MEDIA_TYPE,
	VM_RECEIVED_DT,
	ANI,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.VM_QUEUE_ID=NewVal.VM_QUEUE_ID,
	CurrentVal.MEDIA_TYPE=NewVal.MEDIA_TYPE,
	CurrentVal.VM_RECEIVED_DT=NewVal.VM_RECEIVED_DT,
	CurrentVal.ANI=NewVal.ANI,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_VM_IN_QUEUE CurrentVal, inserted NewVal
	where CurrentVal.CCVMQ_ID=NewVal.CCVMQ_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BIU_CC_S_WFM_AGENT_ACTIVITY ON MAXDAT.CC_S_WFM_AGENT_ACTIVITY 
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.WFM_AGENT_ACTIVITY_ID FROM MAXDAT.CC_S_WFM_AGENT_ACTIVITY CurrentVal, Inserted NewVal WHERE CurrentVal.WFM_AGENT_ACTIVITY_ID = NewVal.WFM_AGENT_ACTIVITY_ID))
    BEGIN
insert into MAXDAT.CC_S_WFM_AGENT_ACTIVITY
SELECT 
	AGENT_ID,
	ACTIVITY_TYPE_ID,
	ACTIVITY_START_TIME,
	ACTIVITY_END_TIME,
	ACTIVITY_DURATION_SECONDS,
	ACTIVITY_DT,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.AGENT_ID=NewVal.AGENT_ID,
	CurrentVal.ACTIVITY_TYPE_ID=NewVal.ACTIVITY_TYPE_ID,
	CurrentVal.ACTIVITY_START_TIME=NewVal.ACTIVITY_START_TIME,
	CurrentVal.ACTIVITY_END_TIME=NewVal.ACTIVITY_END_TIME,
	CurrentVal.ACTIVITY_DURATION_SECONDS=NewVal.ACTIVITY_DURATION_SECONDS,
	CurrentVal.ACTIVITY_DT=NewVal.ACTIVITY_DT,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_WFM_AGENT_ACTIVITY  CurrentVal, inserted NewVal
	where CurrentVal.WFM_AGENT_ACTIVITY_ID=NewVal.WFM_AGENT_ACTIVITY_ID
	END
END
GO



CREATE  TRIGGER MAXDAT.BIU_CC_S_WFM_INTERVAL ON MAXDAT.CC_S_WFM_INTERVAL  
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.WFM_INTERVAL_ID FROM MAXDAT.CC_S_WFM_INTERVAL CurrentVal, Inserted NewVal WHERE CurrentVal.WFM_INTERVAL_ID = NewVal.WFM_INTERVAL_ID))
    BEGIN
insert into MAXDAT.CC_S_WFM_INTERVAL
SELECT 
	INTERVAL_DATE,
	CONTACT_QUEUE_ID,
	INTERVAL_ID,
	LABOR_MINUTES_TOTAL,
	LABOR_MINUTES_WAITING,
	LABOR_MINUTES_AVAILABLE,
	HEADCOUNT_TOTAL,
	HEADCOUNT_AVAILABLE,
	HEADCOUNT_UNAVAILABLE,
	GETDATE(),
	GETDATE(),
	SYSTEM_USER
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.INTERVAL_DATE=NewVal.INTERVAL_DATE,
	CurrentVal.CONTACT_QUEUE_ID=NewVal.CONTACT_QUEUE_ID,
	CurrentVal.INTERVAL_ID=NewVal.INTERVAL_ID,
	CurrentVal.LABOR_MINUTES_TOTAL=NewVal.LABOR_MINUTES_TOTAL,
	CurrentVal.LABOR_MINUTES_WAITING=NewVal.LABOR_MINUTES_WAITING,
	CurrentVal.LABOR_MINUTES_AVAILABLE=NewVal.LABOR_MINUTES_AVAILABLE,
	CurrentVal.HEADCOUNT_TOTAL=NewVal.HEADCOUNT_TOTAL,
	CurrentVal.HEADCOUNT_AVAILABLE=NewVal.HEADCOUNT_AVAILABLE,
	CurrentVal.HEADCOUNT_UNAVAILABLE=NewVal.HEADCOUNT_UNAVAILABLE,
	CurrentVal.EXTRACT_DT=NewVal.EXTRACT_DT,
	CurrentVal.LAST_UPDATE_DT=GETDATE(),
	CurrentVal.LAST_UPDATE_BY=SYSTEM_USER
	FROM MAXDAT.CC_S_WFM_INTERVAL  CurrentVal, inserted NewVal
	where CurrentVal.WFM_INTERVAL_ID=NewVal.WFM_INTERVAL_ID
	END
END
GO

CREATE  TRIGGER MAXDAT.BI_CC_L_ERROR ON MAXDAT.CC_L_ERROR  
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.ID FROM MAXDAT.CC_L_ERROR CurrentVal, Inserted NewVal WHERE CurrentVal.ID = NewVal.ID))
    BEGIN
insert into MAXDAT.CC_L_ERROR
SELECT 
	MESSAGE,
	ERROR_FILE_PATH,
	GETDATE(),
	JOB_NAME,
	TRANSFORM_NAME
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.MESSAGE=NewVal.MESSAGE,
	CurrentVal.ERROR_FILE_PATH=NewVal.ERROR_FILE_PATH,
	CurrentVal.ERROR_DATE=NewVal.ERROR_DATE,
	CurrentVal.JOB_NAME=NewVal.JOB_NAME,
	CurrentVal.TRANSFORM_NAME=NewVal.TRANSFORM_NAME
	FROM MAXDAT.CC_L_ERROR  CurrentVal, inserted NewVal
	where CurrentVal.ID=NewVal.ID
	END
END
GO


CREATE  TRIGGER MAXDAT.BIU_CC_D_PRODUCTION_PLAN_HRZN ON MAXDAT.CC_D_PRODUCTION_PLAN_HORIZON  
INSTEAD OF INSERT,UPDATE AS 
BEGIN
IF (NOT EXISTS(SELECT CurrentVal.PRODUCTION_PLAN_HRZN_ID FROM MAXDAT.CC_D_PRODUCTION_PLAN_HORIZON CurrentVal, Inserted NewVal WHERE CurrentVal.PRODUCTION_PLAN_HRZN_ID = NewVal.PRODUCTION_PLAN_HRZN_ID))
    BEGIN
insert into MAXDAT.CC_D_PRODUCTION_PLAN_HORIZON
SELECT 
	PRODUCTION_PLAN_ID,
	HORIZON_START_DATE,
	HORIZON_START_HOUR,
	HORIZON_END_DATE,
	HORIZON_END_HOUR,
	INITIAL_VERSION,
	FINAL_VERSION,
	FORECAST_LAST_MODIFIED_DATE,
	GETDATE(),
	GETDATE()
	FROM INSERTED
END
ELSE BEGIN
	UPDATE CurrentVal
	SET	CurrentVal.PRODUCTION_PLAN_ID=NewVal.PRODUCTION_PLAN_ID,
	CurrentVal.HORIZON_START_DATE=NewVal.HORIZON_START_DATE,
	CurrentVal.HORIZON_START_HOUR=NewVal.HORIZON_START_HOUR,
	CurrentVal.HORIZON_END_DATE=NewVal.HORIZON_END_DATE,
	CurrentVal.HORIZON_END_HOUR=NewVal.HORIZON_END_HOUR,
	CurrentVal.INITIAL_VERSION=NewVal.INITIAL_VERSION,
	CurrentVal.FINAL_VERSION=NewVal.FINAL_VERSION,
	CurrentVal.FORECAST_LAST_MODIFIED_DATE=NewVal.FORECAST_LAST_MODIFIED_DATE,
	CurrentVal.CREATE_DATE=NewVal.CREATE_DATE,
	CurrentVal.LAST_UPDATE_DATE=GETDATE()
	FROM MAXDAT.CC_D_PRODUCTION_PLAN_HORIZON CurrentVal, inserted NewVal
	where CurrentVal.PRODUCTION_PLAN_HRZN_ID=NewVal.PRODUCTION_PLAN_HRZN_ID
	END
END
GO